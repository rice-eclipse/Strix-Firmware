
Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c9c  08008c9c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08008c9c  08008c9c  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c9c  08008c9c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  2000010c  08008db0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e18  08008db0  00021e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013450  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000368d  00000000  00000000  000335cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00036c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c49  00000000  00000000  00037cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028836  00000000  00000000  00038919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143cd  00000000  00000000  0006114f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d4a  00000000  00000000  0007551c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041d8  00000000  00000000  0015e268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00162440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008be4 	.word	0x08008be4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	08008be4 	.word	0x08008be4

080001c8 <ADXL375_Init>:
 * INITIALIZATION
 *
 * HAL_Delay used because this is intended to be run before freeRTOS is started
 *
 */
uint8_t ADXL375_Init(ADXL375 *imu, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	807b      	strh	r3, [r7, #2]

	/* store everything in the ADXL375 struct that was passed in */
	imu->spiHandle = spiHandle;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
	imu->csPinBank = csPinBank;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]
	imu->csPin = csPin;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	887a      	ldrh	r2, [r7, #2]
 80001e6:	811a      	strh	r2, [r3, #8]

	/* clear DMA flag */
	imu->reading = 0;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	2200      	movs	r2, #0
 80001ec:	729a      	strb	r2, [r3, #10]

	/* stores the result of each operation (success or failure) */
	uint8_t status = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	75fb      	strb	r3, [r7, #23]

	/* enable SPI mode with a falling edge */
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	6858      	ldr	r0, [r3, #4]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	891b      	ldrh	r3, [r3, #8]
 80001fa:	2200      	movs	r2, #0
 80001fc:	4619      	mov	r1, r3
 80001fe:	f001 fa0d 	bl	800161c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	6858      	ldr	r0, [r3, #4]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	891b      	ldrh	r3, [r3, #8]
 800020a:	2201      	movs	r2, #1
 800020c:	4619      	mov	r1, r3
 800020e:	f001 fa05 	bl	800161c <HAL_GPIO_WritePin>

	/* check the device ID */
	uint8_t chipID;
	status += ADXL375_ReadRegister(imu, ADXL375_DEVID, &chipID);
 8000212:	f107 0316 	add.w	r3, r7, #22
 8000216:	461a      	mov	r2, r3
 8000218:	2100      	movs	r1, #0
 800021a:	68f8      	ldr	r0, [r7, #12]
 800021c:	f000 f84e 	bl	80002bc <ADXL375_ReadRegister>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	4413      	add	r3, r2
 8000228:	75fb      	strb	r3, [r7, #23]

	//if the chip ID is not what we are expecting, return 0 (no successes)
	if (chipID != 0xE5) {
 800022a:	7dbb      	ldrb	r3, [r7, #22]
 800022c:	2be5      	cmp	r3, #229	; 0xe5
 800022e:	d002      	beq.n	8000236 <ADXL375_Init+0x6e>
		status+=100;
 8000230:	7dfb      	ldrb	r3, [r7, #23]
 8000232:	3364      	adds	r3, #100	; 0x64
 8000234:	75fb      	strb	r3, [r7, #23]
	}

	HAL_Delay(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 ff10 	bl	800105c <HAL_Delay>

	/* set the DATA_FORMAT register to use 4-wire SPI */
	status += ADXL375_WriteRegister(imu, ADXL375_DATA_FORMAT, 0x4F); // no self-test; 4-wire SPI; interrupt active high; MSB first
 800023c:	224f      	movs	r2, #79	; 0x4f
 800023e:	2131      	movs	r1, #49	; 0x31
 8000240:	68f8      	ldr	r0, [r7, #12]
 8000242:	f000 f877 	bl	8000334 <ADXL375_WriteRegister>
 8000246:	4603      	mov	r3, r0
 8000248:	461a      	mov	r2, r3
 800024a:	7dfb      	ldrb	r3, [r7, #23]
 800024c:	4413      	add	r3, r2
 800024e:	75fb      	strb	r3, [r7, #23]

	/* set the BW_RATE register to control data rate and band limiting */
	status += ADXL375_WriteRegister(imu, ADXL375_BW_RATE, 0x0A); // 100 Hz, 50 Hz band-limited
 8000250:	220a      	movs	r2, #10
 8000252:	212c      	movs	r1, #44	; 0x2c
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f000 f86d 	bl	8000334 <ADXL375_WriteRegister>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	7dfb      	ldrb	r3, [r7, #23]
 8000260:	4413      	add	r3, r2
 8000262:	75fb      	strb	r3, [r7, #23]

	/* map the data-ready interrupt to pin 1 */
	status += ADXL375_WriteRegister(imu, ADXL375_INT_MAP, 0x00); //map all interrupts to 1
 8000264:	2200      	movs	r2, #0
 8000266:	212f      	movs	r1, #47	; 0x2f
 8000268:	68f8      	ldr	r0, [r7, #12]
 800026a:	f000 f863 	bl	8000334 <ADXL375_WriteRegister>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	7dfb      	ldrb	r3, [r7, #23]
 8000274:	4413      	add	r3, r2
 8000276:	75fb      	strb	r3, [r7, #23]

	/* enable the data ready interrupt */
	status += ADXL375_WriteRegister(imu, ADXL375_INT_ENABLE, 0x80);
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	212e      	movs	r1, #46	; 0x2e
 800027c:	68f8      	ldr	r0, [r7, #12]
 800027e:	f000 f859 	bl	8000334 <ADXL375_WriteRegister>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	4413      	add	r3, r2
 800028a:	75fb      	strb	r3, [r7, #23]

	/* turn on the device */
	status += ADXL375_WriteRegister(imu, ADXL375_PWR_CTL, 0x08); //link off, auto-sleep off, measure on, sleep off, sleep data rate 8Hz
 800028c:	2208      	movs	r2, #8
 800028e:	212d      	movs	r1, #45	; 0x2d
 8000290:	68f8      	ldr	r0, [r7, #12]
 8000292:	f000 f84f 	bl	8000334 <ADXL375_WriteRegister>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	7dfb      	ldrb	r3, [r7, #23]
 800029c:	4413      	add	r3, r2
 800029e:	75fb      	strb	r3, [r7, #23]

	/* Pre-compute conversion to m/s from raw Accelerometer data */
	imu->accConversion = 9.81f / 20.5f; //20.5 LSB per G
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <ADXL375_Init+0xf0>)
 80002a4:	61da      	str	r2, [r3, #28]

	/* set up Accelerometer txBuf for DMA */
	imu->txBuf[0] = ADXL375_DATA | 0xC0; //set write bit and multiple bytes bit
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	22f2      	movs	r2, #242	; 0xf2
 80002aa:	72da      	strb	r2, [r3, #11]

	return status;
 80002ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	3ef502c0 	.word	0x3ef502c0

080002bc <ADXL375_ReadRegister>:
 *
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t ADXL375_ReadRegister(ADXL375 *imu, uint8_t regAddr, uint8_t *data) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af02      	add	r7, sp, #8
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	460b      	mov	r3, r1
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80 , 0x00}; //or with 0x80 to set the 'read' bit
 80002ca:	7afb      	ldrb	r3, [r7, #11]
 80002cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	753b      	strb	r3, [r7, #20]
 80002d4:	2300      	movs	r3, #0
 80002d6:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	6858      	ldr	r0, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	891b      	ldrh	r3, [r3, #8]
 80002e0:	2200      	movs	r2, #0
 80002e2:	4619      	mov	r1, r3
 80002e4:	f001 f99a 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	f107 0210 	add.w	r2, r7, #16
 80002f0:	f107 0114 	add.w	r1, r7, #20
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2302      	movs	r3, #2
 80002fc:	f004 f868 	bl	80043d0 <HAL_SPI_TransmitReceive>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	bf0c      	ite	eq
 8000306:	2301      	moveq	r3, #1
 8000308:	2300      	movne	r3, #0
 800030a:	b2db      	uxtb	r3, r3
 800030c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	6858      	ldr	r0, [r3, #4]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	891b      	ldrh	r3, [r3, #8]
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	f001 f97f 	bl	800161c <HAL_GPIO_WritePin>

	if (status == 1) {
 800031e:	7dfb      	ldrb	r3, [r7, #23]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d102      	bne.n	800032a <ADXL375_ReadRegister+0x6e>
		*data = rxBuf[2];
 8000324:	7cba      	ldrb	r2, [r7, #18]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800032a:	7dfb      	ldrb	r3, [r7, #23]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <ADXL375_WriteRegister>:

uint8_t ADXL375_WriteRegister(ADXL375 *imu, uint8_t regAddr, uint8_t data) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
 8000340:	4613      	mov	r3, r2
 8000342:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	733b      	strb	r3, [r7, #12]
 8000348:	78bb      	ldrb	r3, [r7, #2]
 800034a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6858      	ldr	r0, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	891b      	ldrh	r3, [r3, #8]
 8000354:	2200      	movs	r2, #0
 8000356:	4619      	mov	r1, r3
 8000358:	f001 f960 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	f107 010c 	add.w	r1, r7, #12
 8000364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000368:	2202      	movs	r2, #2
 800036a:	f003 febc 	bl	80040e6 <HAL_SPI_Transmit>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf0c      	ite	eq
 8000374:	2301      	moveq	r3, #1
 8000376:	2300      	movne	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800037c:	bf00      	nop
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f004 fa46 	bl	8004814 <HAL_SPI_GetState>
 8000388:	4603      	mov	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d1f7      	bne.n	800037e <ADXL375_WriteRegister+0x4a>
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6858      	ldr	r0, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	891b      	ldrh	r3, [r3, #8]
 8000396:	2201      	movs	r2, #1
 8000398:	4619      	mov	r1, r3
 800039a:	f001 f93f 	bl	800161c <HAL_GPIO_WritePin>

	return status;
 800039e:	7bfb      	ldrb	r3, [r7, #15]

}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <ADXL375_Read>:
/*
 *
 * POLLING
 *
 */
uint8_t ADXL375_Read(ADXL375 *imu) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af02      	add	r7, sp, #8
 80003ae:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[7] = {(ADXL375_DATA | 0xC0), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80003b0:	4a38      	ldr	r2, [pc, #224]	; (8000494 <ADXL375_Read+0xec>)
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ba:	6018      	str	r0, [r3, #0]
 80003bc:	3304      	adds	r3, #4
 80003be:	8019      	strh	r1, [r3, #0]
 80003c0:	3302      	adds	r3, #2
 80003c2:	0c0a      	lsrs	r2, r1, #16
 80003c4:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6858      	ldr	r0, [r3, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	891b      	ldrh	r3, [r3, #8]
 80003ce:	2200      	movs	r2, #0
 80003d0:	4619      	mov	r1, r3
 80003d2:	f001 f923 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	f107 0208 	add.w	r2, r7, #8
 80003de:	f107 0110 	add.w	r1, r7, #16
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2307      	movs	r3, #7
 80003ea:	f003 fff1 	bl	80043d0 <HAL_SPI_TransmitReceive>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2301      	moveq	r3, #1
 80003f6:	2300      	movne	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6858      	ldr	r0, [r3, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	891b      	ldrh	r3, [r3, #8]
 8000404:	2201      	movs	r2, #1
 8000406:	4619      	mov	r1, r3
 8000408:	f001 f908 	bl	800161c <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 800040c:	7abb      	ldrb	r3, [r7, #10]
 800040e:	021b      	lsls	r3, r3, #8
 8000410:	b21a      	sxth	r2, r3
 8000412:	7a7b      	ldrb	r3, [r7, #9]
 8000414:	b21b      	sxth	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 800041a:	7b3b      	ldrb	r3, [r7, #12]
 800041c:	021b      	lsls	r3, r3, #8
 800041e:	b21a      	sxth	r2, r3
 8000420:	7afb      	ldrb	r3, [r7, #11]
 8000422:	b21b      	sxth	r3, r3
 8000424:	4313      	orrs	r3, r2
 8000426:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8000428:	7bbb      	ldrb	r3, [r7, #14]
 800042a:	021b      	lsls	r3, r3, #8
 800042c:	b21a      	sxth	r2, r3
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	b21b      	sxth	r3, r3
 8000432:	4313      	orrs	r3, r2
 8000434:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	ed93 7a07 	vldr	s14, [r3, #28]
 800043c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000440:	ee07 3a90 	vmov	s15, r3
 8000444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->acc_mps2[1] = imu->accConversion * accY;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	ed93 7a07 	vldr	s14, [r3, #28]
 8000458:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800045c:	ee07 3a90 	vmov	s15, r3
 8000460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	ed93 7a07 	vldr	s14, [r3, #28]
 8000474:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000478:	ee07 3a90 	vmov	s15, r3
 800047c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	return status;
 800048a:	7ffb      	ldrb	r3, [r7, #31]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	08008bfc 	.word	0x08008bfc

08000498 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	887a      	ldrh	r2, [r7, #2]
 80004b6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	6a3a      	ldr	r2, [r7, #32]
 80004bc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80004c2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2200      	movs	r2, #0
 80004c8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2200      	movs	r2, #0
 80004ce:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	6858      	ldr	r0, [r3, #4]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	899b      	ldrh	r3, [r3, #12]
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	f001 f89c 	bl	800161c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fdb9 	bl	800105c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6858      	ldr	r0, [r3, #4]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	899b      	ldrh	r3, [r3, #12]
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	f001 f891 	bl	800161c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80004fa:	2032      	movs	r0, #50	; 0x32
 80004fc:	f000 fdae 	bl	800105c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000500:	22b6      	movs	r2, #182	; 0xb6
 8000502:	217e      	movs	r1, #126	; 0x7e
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f000 f965 	bl	80007d4 <BMI088_WriteAccRegister>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	7dfb      	ldrb	r3, [r7, #23]
 8000510:	4413      	add	r3, r2
 8000512:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000514:	2032      	movs	r0, #50	; 0x32
 8000516:	f000 fda1 	bl	800105c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800051a:	f107 0316 	add.w	r3, r7, #22
 800051e:	461a      	mov	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f000 f8dc 	bl	80006e0 <BMI088_ReadAccRegister>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	4413      	add	r3, r2
 8000530:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x1E) {
 8000532:	7dbb      	ldrb	r3, [r7, #22]
 8000534:	2b1e      	cmp	r3, #30
 8000536:	d002      	beq.n	800053e <BMI088_Init+0xa6>

		status+=50;
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	3332      	adds	r3, #50	; 0x32
 800053c:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f000 fd8c 	bl	800105c <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000544:	22a8      	movs	r2, #168	; 0xa8
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f000 f943 	bl	80007d4 <BMI088_WriteAccRegister>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	7dfb      	ldrb	r3, [r7, #23]
 8000554:	4413      	add	r3, r2
 8000556:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000558:	200a      	movs	r0, #10
 800055a:	f000 fd7f 	bl	800105c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800055e:	2200      	movs	r2, #0
 8000560:	2141      	movs	r1, #65	; 0x41
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f000 f936 	bl	80007d4 <BMI088_WriteAccRegister>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f000 fd72 	bl	800105c <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000578:	220a      	movs	r2, #10
 800057a:	2153      	movs	r1, #83	; 0x53
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f000 f929 	bl	80007d4 <BMI088_WriteAccRegister>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	7dfb      	ldrb	r3, [r7, #23]
 8000588:	4413      	add	r3, r2
 800058a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f000 fd65 	bl	800105c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000592:	2204      	movs	r2, #4
 8000594:	2158      	movs	r1, #88	; 0x58
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	f000 f91c 	bl	80007d4 <BMI088_WriteAccRegister>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
 80005a2:	4413      	add	r3, r2
 80005a4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f000 fd58 	bl	800105c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80005ac:	2200      	movs	r2, #0
 80005ae:	217c      	movs	r1, #124	; 0x7c
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f000 f90f 	bl	80007d4 <BMI088_WriteAccRegister>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	4413      	add	r3, r2
 80005be:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 fd4b 	bl	800105c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80005c6:	2204      	movs	r2, #4
 80005c8:	217d      	movs	r1, #125	; 0x7d
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 f902 	bl	80007d4 <BMI088_WriteAccRegister>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	4413      	add	r3, r2
 80005d8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f000 fd3e 	bl	800105c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a3d      	ldr	r2, [pc, #244]	; (80006d8 <BMI088_Init+0x240>)
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2292      	movs	r2, #146	; 0x92
 80005ea:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6898      	ldr	r0, [r3, #8]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	89db      	ldrh	r3, [r3, #14]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	f001 f810 	bl	800161c <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80005fc:	22b6      	movs	r2, #182	; 0xb6
 80005fe:	2114      	movs	r1, #20
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 f921 	bl	8000848 <BMI088_WriteGyrRegister>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	7dfb      	ldrb	r3, [r7, #23]
 800060c:	4413      	add	r3, r2
 800060e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8000610:	20fa      	movs	r0, #250	; 0xfa
 8000612:	f000 fd23 	bl	800105c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8000616:	f107 0316 	add.w	r3, r7, #22
 800061a:	461a      	mov	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	68f8      	ldr	r0, [r7, #12]
 8000620:	f000 f89c 	bl	800075c <BMI088_ReadGyrRegister>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	4413      	add	r3, r2
 800062c:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x0F) {
 800062e:	7dbb      	ldrb	r3, [r7, #22]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d002      	beq.n	800063a <BMI088_Init+0x1a2>

		status+=60;
 8000634:	7dfb      	ldrb	r3, [r7, #23]
 8000636:	333c      	adds	r3, #60	; 0x3c
 8000638:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fd0e 	bl	800105c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8000640:	2201      	movs	r2, #1
 8000642:	210f      	movs	r1, #15
 8000644:	68f8      	ldr	r0, [r7, #12]
 8000646:	f000 f8ff 	bl	8000848 <BMI088_WriteGyrRegister>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	4413      	add	r3, r2
 8000652:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fd01 	bl	800105c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800065a:	2207      	movs	r2, #7
 800065c:	2110      	movs	r1, #16
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f000 f8f2 	bl	8000848 <BMI088_WriteGyrRegister>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	4413      	add	r3, r2
 800066c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800066e:	200a      	movs	r0, #10
 8000670:	f000 fcf4 	bl	800105c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	2115      	movs	r1, #21
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f000 f8e5 	bl	8000848 <BMI088_WriteGyrRegister>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	4413      	add	r3, r2
 8000686:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000688:	200a      	movs	r0, #10
 800068a:	f000 fce7 	bl	800105c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 800068e:	2201      	movs	r2, #1
 8000690:	2116      	movs	r1, #22
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f000 f8d8 	bl	8000848 <BMI088_WriteGyrRegister>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	4413      	add	r3, r2
 80006a0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80006a2:	200a      	movs	r0, #10
 80006a4:	f000 fcda 	bl	800105c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80006a8:	2201      	movs	r2, #1
 80006aa:	2118      	movs	r1, #24
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f8cb 	bl	8000848 <BMI088_WriteGyrRegister>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	4413      	add	r3, r2
 80006ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 fccd 	bl	800105c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4a05      	ldr	r2, [pc, #20]	; (80006dc <BMI088_Init+0x244>)
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2282      	movs	r2, #130	; 0x82
 80006cc:	769a      	strb	r2, [r3, #26]

	return status;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]

}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	3a6b70a4 	.word	0x3a6b70a4
 80006dc:	3a0ba058 	.word	0x3a0ba058

080006e0 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	460b      	mov	r3, r1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	753b      	strb	r3, [r7, #20]
 80006f8:	2300      	movs	r3, #0
 80006fa:	757b      	strb	r3, [r7, #21]
 80006fc:	2300      	movs	r3, #0
 80006fe:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6858      	ldr	r0, [r3, #4]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	899b      	ldrh	r3, [r3, #12]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	f000 ff86 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	f107 0210 	add.w	r2, r7, #16
 8000718:	f107 0114 	add.w	r1, r7, #20
 800071c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2303      	movs	r3, #3
 8000724:	f003 fe54 	bl	80043d0 <HAL_SPI_TransmitReceive>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf0c      	ite	eq
 800072e:	2301      	moveq	r3, #1
 8000730:	2300      	movne	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6858      	ldr	r0, [r3, #4]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	f000 ff6b 	bl	800161c <HAL_GPIO_WritePin>

	if (status == 1) {
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d102      	bne.n	8000752 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 800074c:	7cba      	ldrb	r2, [r7, #18]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000752:	7dfb      	ldrb	r3, [r7, #23]

}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af02      	add	r7, sp, #8
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	460b      	mov	r3, r1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800076a:	7afb      	ldrb	r3, [r7, #11]
 800076c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	753b      	strb	r3, [r7, #20]
 8000774:	2300      	movs	r3, #0
 8000776:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6898      	ldr	r0, [r3, #8]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	89db      	ldrh	r3, [r3, #14]
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	f000 ff4a 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	f107 0210 	add.w	r2, r7, #16
 8000790:	f107 0114 	add.w	r1, r7, #20
 8000794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2302      	movs	r3, #2
 800079c:	f003 fe18 	bl	80043d0 <HAL_SPI_TransmitReceive>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf0c      	ite	eq
 80007a6:	2301      	moveq	r3, #1
 80007a8:	2300      	movne	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6898      	ldr	r0, [r3, #8]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	89db      	ldrh	r3, [r3, #14]
 80007b6:	2201      	movs	r2, #1
 80007b8:	4619      	mov	r1, r3
 80007ba:	f000 ff2f 	bl	800161c <HAL_GPIO_WritePin>

	if (status == 1) {
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d102      	bne.n	80007ca <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80007c4:	7c7a      	ldrb	r2, [r7, #17]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80007ca:	7dfb      	ldrb	r3, [r7, #23]

}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	733b      	strb	r3, [r7, #12]
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	f000 ff10 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	f107 010c 	add.w	r1, r7, #12
 8000804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000808:	2202      	movs	r2, #2
 800080a:	f003 fc6c 	bl	80040e6 <HAL_SPI_Transmit>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800081c:	bf00      	nop
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fff6 	bl	8004814 <HAL_SPI_GetState>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d1f7      	bne.n	800081e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6858      	ldr	r0, [r3, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	899b      	ldrh	r3, [r3, #12]
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	f000 feef 	bl	800161c <HAL_GPIO_WritePin>

	return status;
 800083e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
 8000854:	4613      	mov	r3, r2
 8000856:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	733b      	strb	r3, [r7, #12]
 800085c:	78bb      	ldrb	r3, [r7, #2]
 800085e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6898      	ldr	r0, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	89db      	ldrh	r3, [r3, #14]
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	f000 fed6 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	f107 010c 	add.w	r1, r7, #12
 8000878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087c:	2202      	movs	r2, #2
 800087e:	f003 fc32 	bl	80040e6 <HAL_SPI_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf0c      	ite	eq
 8000888:	2301      	moveq	r3, #1
 800088a:	2300      	movne	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000890:	bf00      	nop
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f003 ffbc 	bl	8004814 <HAL_SPI_GetState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d1f7      	bne.n	8000892 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6898      	ldr	r0, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	89db      	ldrh	r3, [r3, #14]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	f000 feb5 	bl	800161c <HAL_GPIO_WritePin>

	return status;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]

}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80008c4:	4a36      	ldr	r2, [pc, #216]	; (80009a0 <BMI088_ReadAccelerometer+0xe4>)
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ce:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6858      	ldr	r0, [r3, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	899b      	ldrh	r3, [r3, #12]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f000 fe9d 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f107 0208 	add.w	r2, r7, #8
 80008ea:	f107 0110 	add.w	r1, r7, #16
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2308      	movs	r3, #8
 80008f6:	f003 fd6b 	bl	80043d0 <HAL_SPI_TransmitReceive>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf0c      	ite	eq
 8000900:	2301      	moveq	r3, #1
 8000902:	2300      	movne	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6858      	ldr	r0, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	899b      	ldrh	r3, [r3, #12]
 8000910:	2201      	movs	r2, #1
 8000912:	4619      	mov	r1, r3
 8000914:	f000 fe82 	bl	800161c <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8000918:	7afb      	ldrb	r3, [r7, #11]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7abb      	ldrb	r3, [r7, #10]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8000926:	7b7b      	ldrb	r3, [r7, #13]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	7b3b      	ldrb	r3, [r7, #12]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	021b      	lsls	r3, r3, #8
 8000938:	b21a      	sxth	r2, r3
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000948:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800094c:	ee07 3a90 	vmov	s15, r3
 8000950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000964:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000980:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 8000996:	7ffb      	ldrb	r3, [r7, #31]

}
 8000998:	4618      	mov	r0, r3
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08008c04 	.word	0x08008c04

080009a4 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80009ac:	4a38      	ldr	r2, [pc, #224]	; (8000a90 <BMI088_ReadGyroscope+0xec>)
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b6:	6018      	str	r0, [r3, #0]
 80009b8:	3304      	adds	r3, #4
 80009ba:	8019      	strh	r1, [r3, #0]
 80009bc:	3302      	adds	r3, #2
 80009be:	0c0a      	lsrs	r2, r1, #16
 80009c0:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6898      	ldr	r0, [r3, #8]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	89db      	ldrh	r3, [r3, #14]
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 fe25 	bl	800161c <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f107 0208 	add.w	r2, r7, #8
 80009da:	f107 0110 	add.w	r1, r7, #16
 80009de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2307      	movs	r3, #7
 80009e6:	f003 fcf3 	bl	80043d0 <HAL_SPI_TransmitReceive>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6898      	ldr	r0, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	89db      	ldrh	r3, [r3, #14]
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	f000 fe0a 	bl	800161c <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	7a7b      	ldrb	r3, [r7, #9]
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8000a16:	7b3b      	ldrb	r3, [r7, #12]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	7afb      	ldrb	r3, [r7, #11]
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7b7b      	ldrb	r3, [r7, #13]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000a38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000a54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000a70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	return status;
 8000a86:	7ffb      	ldrb	r3, [r7, #31]

}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	08008c0c 	.word	0x08008c0c

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f000 fa6a 	bl	8000f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f84f 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f000 f8dd 	bl	8000c60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aa6:	f000 f89d 	bl	8000be4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000aaa:	f007 fa39 	bl	8007f20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  	// Initialize BMI088
  	uint8_t bmi_status = BMI088_Init(&bmi088, &hspi1, BMI088_Accel_NCS_GPIO_Port, BMI088_Accel_NCS_Pin, BMI088_Gyro_NCS_GPIO_Port, BMI088_Gyro_NCS_Pin);
 8000aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <main+0x98>)
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <main+0x9c>)
 8000abc:	491d      	ldr	r1, [pc, #116]	; (8000b34 <main+0xa0>)
 8000abe:	481e      	ldr	r0, [pc, #120]	; (8000b38 <main+0xa4>)
 8000ac0:	f7ff fcea 	bl	8000498 <BMI088_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  	if(bmi_status != 15) {
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b0f      	cmp	r3, #15
 8000acc:	d004      	beq.n	8000ad8 <main+0x44>
  		HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4816      	ldr	r0, [pc, #88]	; (8000b2c <main+0x98>)
 8000ad4:	f000 fda2 	bl	800161c <HAL_GPIO_WritePin>
  	}
  	HAL_Delay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 fabf 	bl	800105c <HAL_Delay>


	// Initialize ADXL375
	uint8_t adxl_status = ADXL375_Init(&adxl375, &hspi1, ADXL375_NCS_GPIO_Port, ADXL375_NCS_Pin);
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <main+0x98>)
 8000ae2:	4914      	ldr	r1, [pc, #80]	; (8000b34 <main+0xa0>)
 8000ae4:	4815      	ldr	r0, [pc, #84]	; (8000b3c <main+0xa8>)
 8000ae6:	f7ff fb6f 	bl	80001c8 <ADXL375_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	71bb      	strb	r3, [r7, #6]
	if(adxl_status != 6) {
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	2b06      	cmp	r3, #6
 8000af2:	d004      	beq.n	8000afe <main+0x6a>
		HAL_GPIO_WritePin(Pyro_B_Trigger_GPIO_Port, Pyro_B_Trigger_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <main+0x9c>)
 8000afa:	f000 fd8f 	bl	800161c <HAL_GPIO_WritePin>
	}
	HAL_Delay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 faac 	bl	800105c <HAL_Delay>
	}

	CDC_Transmit_FS((uint8_t *) USBtxBuf, strlen(USBtxBuf));
	*/

	status = BMI088_ReadAccelerometer(&bmi088);
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <main+0xa4>)
 8000b06:	f7ff fed9 	bl	80008bc <BMI088_ReadAccelerometer>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	717b      	strb	r3, [r7, #5]
	status = BMI088_ReadGyroscope(&bmi088);
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <main+0xa4>)
 8000b10:	f7ff ff48 	bl	80009a4 <BMI088_ReadGyroscope>
 8000b14:	4603      	mov	r3, r0
 8000b16:	717b      	strb	r3, [r7, #5]
	status = ADXL375_Read(&adxl375);
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <main+0xa8>)
 8000b1a:	f7ff fc45 	bl	80003a8 <ADXL375_Read>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	717b      	strb	r3, [r7, #5]

	HAL_Delay(2);
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 fa9a 	bl	800105c <HAL_Delay>
	status = BMI088_ReadAccelerometer(&bmi088);
 8000b28:	e7ec      	b.n	8000b04 <main+0x70>
 8000b2a:	bf00      	nop
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48001000 	.word	0x48001000
 8000b34:	20000128 	.word	0x20000128
 8000b38:	2000018c 	.word	0x2000018c
 8000b3c:	200001dc 	.word	0x200001dc

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b096      	sub	sp, #88	; 0x58
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2244      	movs	r2, #68	; 0x44
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 f81c 	bl	8008b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b66:	f001 ff27 	bl	80029b8 <HAL_PWREx_ControlVoltageScaling>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b70:	f000 f922 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b74:	2310      	movs	r3, #16
 8000b76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b80:	2360      	movs	r3, #96	; 0x60
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b90:	2328      	movs	r3, #40	; 0x28
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 ff6d 	bl	8002a84 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000bb0:	f000 f902 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fb35 	bl	800323c <HAL_RCC_ClockConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bd8:	f000 f8ee 	bl	8000db8 <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3758      	adds	r7, #88	; 0x58
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <MX_SPI1_Init+0x78>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000bfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c1a:	2218      	movs	r2, #24
 8000c1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c32:	2207      	movs	r2, #7
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_SPI1_Init+0x74>)
 8000c44:	f003 f9ac 	bl	8003fa0 <HAL_SPI_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c4e:	f000 f8b3 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000128 	.word	0x20000128
 8000c5c:	40013000 	.word	0x40013000

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	4b4c      	ldr	r3, [pc, #304]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a4b      	ldr	r2, [pc, #300]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b49      	ldr	r3, [pc, #292]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8e:	4b46      	ldr	r3, [pc, #280]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a45      	ldr	r2, [pc, #276]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a3f      	ldr	r2, [pc, #252]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a39      	ldr	r2, [pc, #228]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <MX_GPIO_Init+0x148>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f243 3189 	movw	r1, #13193	; 0x3389
 8000cf4:	482d      	ldr	r0, [pc, #180]	; (8000dac <MX_GPIO_Init+0x14c>)
 8000cf6:	f000 fc91 	bl	800161c <HAL_GPIO_WritePin>
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f24c 1144 	movw	r1, #49476	; 0xc144
 8000d00:	482b      	ldr	r0, [pc, #172]	; (8000db0 <MX_GPIO_Init+0x150>)
 8000d02:	f000 fc8b 	bl	800161c <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8000d0c:	4829      	ldr	r0, [pc, #164]	; (8000db4 <MX_GPIO_Init+0x154>)
 8000d0e:	f000 fc85 	bl	800161c <HAL_GPIO_WritePin>
                          |Status_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BMP388_Int_Pin BMI088_Accel_Int_Pin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin|BMI088_Accel_Int_Pin;
 8000d12:	2306      	movs	r3, #6
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_GPIO_Init+0x14c>)
 8000d26:	f000 facf 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMP388_NCS_Pin Pyro_B_Trigger_Pin Pyro_C_Trigger_Pin Pyro_D_Trigger_Pin
                           Pyro_E_Trigger_Pin Pyro_F_Trigger_Pin BMI088_Accel_NCS_Pin */
  GPIO_InitStruct.Pin = BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 8000d2a:	f243 3389 	movw	r3, #13193	; 0x3389
 8000d2e:	617b      	str	r3, [r7, #20]
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <MX_GPIO_Init+0x14c>)
 8000d44:	f000 fac0 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pyro_A_Trigger_Pin Continuity_LED_D_Pin Continuity_LED_C_Pin ADXL375_NCS_Pin
                           BMI088_Gyro_NCS_Pin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 8000d48:	f24c 1344 	movw	r3, #49476	; 0xc144
 8000d4c:	617b      	str	r3, [r7, #20]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_GPIO_Init+0x150>)
 8000d62:	f000 fab1 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Continuity_LED_B_Pin Continuity_LED_A_Pin Continuity_LED_E_Pin Continuity_LED_F_Pin
                           Status_LED_Pin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8000d66:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000d6a:	617b      	str	r3, [r7, #20]
                          |Status_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_GPIO_Init+0x154>)
 8000d80:	f000 faa2 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_Int_Pin BMI088_Gyro_Int_Pin */
  GPIO_InitStruct.Pin = ADXL375_Int_Pin|BMI088_Gyro_Int_Pin;
 8000d84:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_GPIO_Init+0x150>)
 8000d9a:	f000 fa95 	bl	80012c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48001000 	.word	0x48001000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000c00 	.word	0x48000c00

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x7c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d127      	bne.n	8000e7e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_SPI_MspInit+0x80>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <HAL_SPI_MspInit+0x80>)
 8000e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e38:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_SPI_MspInit+0x80>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_SPI_MspInit+0x80>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_SPI_MspInit+0x80>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_SPI_MspInit+0x80>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e5e:	2338      	movs	r3, #56	; 0x38
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_SPI_MspInit+0x84>)
 8000e7a:	f000 fa25 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000400 	.word	0x48000400

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f89c 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <OTG_FS_IRQHandler+0x10>)
 8000eee:	f000 fd00 	bl	80018f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200016ec 	.word	0x200016ec

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f007 fe25 	bl	8008b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fd9f 	bl	8000a94 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000f64:	08008ca4 	.word	0x08008ca4
  ldr r2, =_sbss
 8000f68:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000f6c:	20001e18 	.word	0x20001e18

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f961 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	200f      	movs	r0, #15
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff ff16 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_InitTick+0x70>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f96d 	bl	80012ae <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d809      	bhi.n	8000ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe8:	f000 f937 	bl	800125a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000208 	.word	0x20000208

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000208 	.word	0x20000208

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	e17f      	b.n	80015d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8171 	beq.w	80015d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d005      	beq.n	8001308 <HAL_GPIO_Init+0x40>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d130      	bne.n	800136a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800133e:	2201      	movs	r2, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 0201 	and.w	r2, r3, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b03      	cmp	r3, #3
 8001374:	d118      	bne.n	80013a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80ac 	beq.w	80015d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <HAL_GPIO_Init+0x330>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6613      	str	r3, [r2, #96]	; 0x60
 8001486:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001492:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x242>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4f      	ldr	r2, [pc, #316]	; (8001600 <HAL_GPIO_Init+0x338>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x23e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <HAL_GPIO_Init+0x33c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x23a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x340>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x236>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4c      	ldr	r2, [pc, #304]	; (800160c <HAL_GPIO_Init+0x344>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x232>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <HAL_GPIO_Init+0x348>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x22e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4a      	ldr	r2, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x34c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x22a>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x244>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x244>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x244>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x244>
 800150a:	2300      	movs	r3, #0
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800151c:	4937      	ldr	r1, [pc, #220]	; (80015fc <HAL_GPIO_Init+0x334>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_GPIO_Init+0x350>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <HAL_GPIO_Init+0x350>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_GPIO_Init+0x350>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_GPIO_Init+0x350>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_GPIO_Init+0x350>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_GPIO_Init+0x350>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_GPIO_Init+0x350>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_GPIO_Init+0x350>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f47f ae78 	bne.w	80012d8 <HAL_GPIO_Init+0x10>
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000
 8001600:	48000400 	.word	0x48000400
 8001604:	48000800 	.word	0x48000800
 8001608:	48000c00 	.word	0x48000c00
 800160c:	48001000 	.word	0x48001000
 8001610:	48001400 	.word	0x48001400
 8001614:	48001800 	.word	0x48001800
 8001618:	40010400 	.word	0x40010400

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001638:	e002      	b.n	8001640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	b08f      	sub	sp, #60	; 0x3c
 8001650:	af0a      	add	r7, sp, #40	; 0x28
 8001652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e116      	b.n	800188c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d106      	bne.n	800167e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f006 fe43 	bl	8008304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fb04 	bl	8004caa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	687e      	ldr	r6, [r7, #4]
 80016aa:	466d      	mov	r5, sp
 80016ac:	f106 0410 	add.w	r4, r6, #16
 80016b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c0:	1d33      	adds	r3, r6, #4
 80016c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f003 fa17 	bl	8004af8 <USB_CoreInit>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0d7      	b.n	800188c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 faf2 	bl	8004ccc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e04a      	b.n	8001784 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	333d      	adds	r3, #61	; 0x3d
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	333c      	adds	r3, #60	; 0x3c
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	b298      	uxth	r0, r3
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3356      	adds	r3, #86	; 0x56
 800172a:	4602      	mov	r2, r0
 800172c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3340      	adds	r3, #64	; 0x40
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3344      	adds	r3, #68	; 0x44
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	3348      	adds	r3, #72	; 0x48
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	334c      	adds	r3, #76	; 0x4c
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3301      	adds	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3af      	bcc.n	80016ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e044      	b.n	800181e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	3301      	adds	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3b5      	bcc.n	8001794 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	687e      	ldr	r6, [r7, #4]
 8001830:	466d      	mov	r5, sp
 8001832:	f106 0410 	add.w	r4, r6, #16
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001842:	e885 0003 	stmia.w	r5, {r0, r1}
 8001846:	1d33      	adds	r3, r6, #4
 8001848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f003 fa8a 	bl	8004d64 <USB_DevInit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e014      	b.n	800188c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f001 f86a 	bl	8002954 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fa38 	bl	8005cfa <USB_DevDisconnect>

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001894 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_PCD_Start+0x1c>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e01c      	b.n	80018ea <HAL_PCD_Start+0x56>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 f9d9 	bl	8004c88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 f9ec 	bl	8005cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018f2:	b590      	push	{r4, r7, lr}
 80018f4:	b08d      	sub	sp, #52	; 0x34
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f004 faaa 	bl	8005e62 <USB_GetMode>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 847e 	bne.w	8002212 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f004 fa0e 	bl	8005d3c <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8474 	beq.w	8002210 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 f9fb 	bl	8005d3c <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b02      	cmp	r3, #2
 800194e:	d107      	bne.n	8001960 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f002 0202 	and.w	r2, r2, #2
 800195e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f004 f9e9 	bl	8005d3c <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b10      	cmp	r3, #16
 8001972:	d161      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0210 	bic.w	r2, r2, #16
 8001982:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f003 020f 	and.w	r2, r3, #15
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	3304      	adds	r3, #4
 80019a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	0c5b      	lsrs	r3, r3, #17
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d124      	bne.n	80019fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d035      	beq.n	8001a28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6a38      	ldr	r0, [r7, #32]
 80019d0:	f004 f820 	bl	8005a14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e0:	441a      	add	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f2:	441a      	add	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	e016      	b.n	8001a28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	0c5b      	lsrs	r3, r3, #17
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d110      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6a38      	ldr	r0, [r7, #32]
 8001a12:	f003 ffff 	bl	8005a14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a22:	441a      	add	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0210 	orr.w	r2, r2, #16
 8001a36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 f97d 	bl	8005d3c <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a4c:	f040 80a7 	bne.w	8001b9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 f982 	bl	8005d62 <USB_ReadDevAllOutEpInterrupt>
 8001a5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a60:	e099      	b.n	8001b96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 808e 	beq.w	8001b8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f9a6 	bl	8005dca <USB_ReadDevOutEPInterrupt>
 8001a7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00c      	beq.n	8001aa4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a96:	461a      	mov	r2, r3
 8001a98:	2301      	movs	r3, #1
 8001a9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fe7e 	bl	80027a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00c      	beq.n	8001ac8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aba:	461a      	mov	r2, r3
 8001abc:	2308      	movs	r3, #8
 8001abe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 feba 	bl	800283c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d030      	beq.n	8001b50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	2b80      	cmp	r3, #128	; 0x80
 8001af8:	d109      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	3304      	adds	r3, #4
 8001b22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	78db      	ldrb	r3, [r3, #3]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d108      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f006 fd37 	bl	80085ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b66:	461a      	mov	r2, r3
 8001b68:	2320      	movs	r3, #32
 8001b6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b82:	461a      	mov	r2, r3
 8001b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f47f af62 	bne.w	8001a62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 f8ca 	bl	8005d3c <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bb2:	f040 80a4 	bne.w	8001cfe <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f8eb 	bl	8005d96 <USB_ReadDevAllInEpInterrupt>
 8001bc0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bc6:	e096      	b.n	8001cf6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 808b 	beq.w	8001cea <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 f911 	bl	8005e06 <USB_ReadDevInEPInterrupt>
 8001be4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69f9      	ldr	r1, [r7, #28]
 8001c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c10:	4013      	ands	r3, r2
 8001c12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c20:	461a      	mov	r2, r3
 8001c22:	2301      	movs	r3, #1
 8001c24:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f006 fc28 	bl	8008482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c64:	461a      	mov	r2, r3
 8001c66:	2310      	movs	r3, #16
 8001c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c80:	461a      	mov	r2, r3
 8001c82:	2340      	movs	r3, #64	; 0x40
 8001c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d023      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f003 f9a8 	bl	8004fe8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3338      	adds	r3, #56	; 0x38
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	78db      	ldrb	r3, [r3, #3]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d108      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f006 fc85 	bl	80085d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fcd2 	bl	800268e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	3301      	adds	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	085b      	lsrs	r3, r3, #1
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f af65 	bne.w	8001bc8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f81a 	bl	8005d3c <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d12:	d122      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f006 feb9 	bl	8008ab4 <HAL_PCDEx_LPM_Callback>
 8001d42:	e002      	b.n	8001d4a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f006 fc09 	bl	800855c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 ffec 	bl	8005d3c <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d6e:	d112      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f006 fbc5 	bl	8008510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 ffce 	bl	8005d3c <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001daa:	d121      	bne.n	8001df0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001dba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d111      	bne.n	8001dea <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001de0:	2101      	movs	r1, #1
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f006 fe66 	bl	8008ab4 <HAL_PCDEx_LPM_Callback>
 8001de8:	e002      	b.n	8001df0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f006 fb90 	bl	8008510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 ffa1 	bl	8005d3c <USB_ReadInterrupts>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e04:	f040 80b5 	bne.w	8001f72 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2110      	movs	r1, #16
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 f8e0 	bl	8004fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2c:	e046      	b.n	8001ebc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e52:	0151      	lsls	r1, r2, #5
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	440a      	add	r2, r1
 8001e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	0151      	lsls	r1, r2, #5
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	440a      	add	r2, r1
 8001e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea6:	0151      	lsls	r1, r2, #5
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	440a      	add	r2, r1
 8001eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	3301      	adds	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3b3      	bcc.n	8001e2e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ed8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ef2:	f043 030b 	orr.w	r3, r3, #11
 8001ef6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f08:	f043 030b 	orr.w	r3, r3, #11
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	e015      	b.n	8001f3c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f22:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f26:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f36:	f043 030b 	orr.w	r3, r3, #11
 8001f3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f003 ffb1 	bl	8005ec4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fee0 	bl	8005d3c <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f86:	d124      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 ff76 	bl	8005e7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 f8a3 	bl	80050e2 <USB_GetDevSpeed>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681c      	ldr	r4, [r3, #0]
 8001fa8:	f001 fad2 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8001fac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f002 fdca 	bl	8004b50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f006 fa88 	bl	80084d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 feb0 	bl	8005d3c <USB_ReadInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d10a      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f006 fa65 	bl	80084b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f002 0208 	and.w	r2, r2, #8
 8001ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fe9b 	bl	8005d3c <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d122      	bne.n	8002056 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
 8002020:	e014      	b.n	800204c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4619      	mov	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 faf3 	bl	800262c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	429a      	cmp	r2, r3
 8002054:	d3e5      	bcc.n	8002022 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fe6e 	bl	8005d3c <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800206a:	d13b      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800206c:	2301      	movs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
 8002070:	e02b      	b.n	80020ca <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3340      	adds	r3, #64	; 0x40
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d115      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002098:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	da12      	bge.n	80020c4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	333f      	adds	r3, #63	; 0x3f
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fab4 	bl	800262c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	3301      	adds	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3ce      	bcc.n	8002072 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 fe27 	bl	8005d3c <USB_ReadInterrupts>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f8:	d155      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020fa:	2301      	movs	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e045      	b.n	800218c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d12e      	bne.n	8002186 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002128:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	da2b      	bge.n	8002186 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800213a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800213e:	429a      	cmp	r2, r3
 8002140:	d121      	bne.n	8002186 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6053      	str	r3, [r2, #4]
            break;
 8002184:	e007      	b.n	8002196 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	429a      	cmp	r2, r3
 8002194:	d3b4      	bcc.n	8002100 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fdc6 	bl	8005d3c <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d10a      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f006 fa19 	bl	80085f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fdb0 	bl	8005d3c <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d115      	bne.n	8002212 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f006 fa09 	bl	8008610 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e000      	b.n	8002212 <HAL_PCD_IRQHandler+0x920>
      return;
 8002210:	bf00      	nop
    }
  }
}
 8002212:	3734      	adds	r7, #52	; 0x34
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_PCD_SetAddress+0x1a>
 800222e:	2302      	movs	r3, #2
 8002230:	e013      	b.n	800225a <HAL_PCD_SetAddress+0x42>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fd0e 	bl	8005c6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	4608      	mov	r0, r1
 800226c:	4611      	mov	r1, r2
 800226e:	461a      	mov	r2, r3
 8002270:	4603      	mov	r3, r0
 8002272:	70fb      	strb	r3, [r7, #3]
 8002274:	460b      	mov	r3, r1
 8002276:	803b      	strh	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da0f      	bge.n	80022a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3338      	adds	r3, #56	; 0x38
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	705a      	strb	r2, [r3, #1]
 80022a6:	e00f      	b.n	80022c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 020f 	and.w	r2, r3, #15
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022d4:	883a      	ldrh	r2, [r7, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	78ba      	ldrb	r2, [r7, #2]
 80022de:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022f2:	78bb      	ldrb	r3, [r7, #2]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d102      	bne.n	80022fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_PCD_EP_Open+0xaa>
 8002308:	2302      	movs	r3, #2
 800230a:	e00e      	b.n	800232a <HAL_PCD_EP_Open+0xc8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 ff00 	bl	8005120 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002328:	7afb      	ldrb	r3, [r7, #11]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800233e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da0f      	bge.n	8002366 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	3338      	adds	r3, #56	; 0x38
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	3304      	adds	r3, #4
 800235c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	705a      	strb	r2, [r3, #1]
 8002364:	e00f      	b.n	8002386 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_EP_Close+0x6e>
 800239c:	2302      	movs	r3, #2
 800239e:	e00e      	b.n	80023be <HAL_PCD_EP_Close+0x8c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 ff3e 	bl	8005230 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	460b      	mov	r3, r1
 80023d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002408:	7afb      	ldrb	r3, [r7, #11]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	b2da      	uxtb	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	4618      	mov	r0, r3
 800241c:	f002 ffe4 	bl	80053e8 <USB_EPStartXfer>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800244c:	681b      	ldr	r3, [r3, #0]
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	460b      	mov	r3, r1
 8002468:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	3338      	adds	r3, #56	; 0x38
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4413      	add	r3, r2
 800247e:	3304      	adds	r3, #4
 8002480:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2201      	movs	r2, #1
 8002498:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6979      	ldr	r1, [r7, #20]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 ff9b 	bl	80053e8 <USB_EPStartXfer>

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d901      	bls.n	80024da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e04e      	b.n	8002578 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da0f      	bge.n	8002502 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	3338      	adds	r3, #56	; 0x38
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	705a      	strb	r2, [r3, #1]
 8002500:	e00d      	b.n	800251e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_PCD_EP_SetStall+0x82>
 800253a:	2302      	movs	r3, #2
 800253c:	e01c      	b.n	8002578 <HAL_PCD_EP_SetStall+0xbc>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	f003 fab9 	bl	8005ac4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f003 fcab 	bl	8005ec4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 020f 	and.w	r2, r3, #15
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d901      	bls.n	800259e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e042      	b.n	8002624 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800259e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da0f      	bge.n	80025c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	3338      	adds	r3, #56	; 0x38
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	3304      	adds	r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	705a      	strb	r2, [r3, #1]
 80025c4:	e00f      	b.n	80025e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_PCD_EP_ClrStall+0x86>
 8002602:	2302      	movs	r3, #2
 8002604:	e00e      	b.n	8002624 <HAL_PCD_EP_ClrStall+0xa4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68f9      	ldr	r1, [r7, #12]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 fac3 	bl	8005ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da0c      	bge.n	800265a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 020f 	and.w	r2, r3, #15
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	3338      	adds	r3, #56	; 0x38
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e00c      	b.n	8002674 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 f8e6 	bl	800584c <USB_EPStopXfer>
 8002680:	4603      	mov	r3, r0
 8002682:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002684:	7afb      	ldrb	r3, [r7, #11]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	3338      	adds	r3, #56	; 0x38
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d901      	bls.n	80026c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e067      	b.n	8002796 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d902      	bls.n	80026e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3303      	adds	r3, #3
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ea:	e026      	b.n	800273a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d902      	bls.n	8002708 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	3303      	adds	r3, #3
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	b29b      	uxth	r3, r3
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f003 f93f 	bl	80059a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	441a      	add	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	441a      	add	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	429a      	cmp	r2, r3
 800274e:	d809      	bhi.n	8002764 <PCD_WriteEmptyTxFifo+0xd6>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002758:	429a      	cmp	r2, r3
 800275a:	d203      	bcs.n	8002764 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1c3      	bne.n	80026ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	d811      	bhi.n	8002794 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	43db      	mvns	r3, r3
 800278a:	6939      	ldr	r1, [r7, #16]
 800278c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002790:	4013      	ands	r3, r2
 8002792:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	333c      	adds	r3, #60	; 0x3c
 80027b8:	3304      	adds	r3, #4
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a19      	ldr	r2, [pc, #100]	; (8002838 <PCD_EP_OutXfrComplete_int+0x98>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d124      	bne.n	8002820 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ec:	461a      	mov	r2, r3
 80027ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f2:	6093      	str	r3, [r2, #8]
 80027f4:	e01a      	b.n	800282c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	2320      	movs	r3, #32
 8002810:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f005 fe17 	bl	800844c <HAL_PCD_DataOutStageCallback>
 800281e:	e005      	b.n	800282c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f005 fe10 	bl	800844c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	4f54310a 	.word	0x4f54310a

0800283c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	333c      	adds	r3, #60	; 0x3c
 8002854:	3304      	adds	r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <PCD_EP_OutSetupPacket_int+0x64>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d90e      	bls.n	8002890 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d009      	beq.n	8002890 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002888:	461a      	mov	r2, r3
 800288a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f005 fdc9 	bl	8008428 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	4f54300a 	.word	0x4f54300a

080028a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
 80028b0:	4613      	mov	r3, r2
 80028b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028c2:	883b      	ldrh	r3, [r7, #0]
 80028c4:	0419      	lsls	r1, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
 80028d0:	e028      	b.n	8002924 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4413      	add	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e00d      	b.n	8002902 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	3340      	adds	r3, #64	; 0x40
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3301      	adds	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	3b01      	subs	r3, #1
 8002908:	429a      	cmp	r2, r3
 800290a:	d3ec      	bcc.n	80028e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800290c:	883b      	ldrh	r3, [r7, #0]
 800290e:	0418      	lsls	r0, r3, #16
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	3b01      	subs	r3, #1
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4302      	orrs	r2, r0
 800291c:	3340      	adds	r3, #64	; 0x40
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002986:	f043 0303 	orr.w	r3, r3, #3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000

080029b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c6:	d130      	bne.n	8002a2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c8:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d4:	d038      	beq.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2232      	movs	r2, #50	; 0x32
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9b      	lsrs	r3, r3, #18
 80029f8:	3301      	adds	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029fc:	e002      	b.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d102      	bne.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f2      	bne.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a24:	d110      	bne.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e00f      	b.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d007      	beq.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a40:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	431bde83 	.word	0x431bde83

08002a64 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6053      	str	r3, [r2, #4]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40007000 	.word	0x40007000

08002a84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e3ca      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b97      	ldr	r3, [pc, #604]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa0:	4b94      	ldr	r3, [pc, #592]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80e4 	beq.w	8002c80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_RCC_OscConfig+0x4a>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	f040 808b 	bne.w	8002bdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	f040 8087 	bne.w	8002bdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ace:	4b89      	ldr	r3, [pc, #548]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x62>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e3a2      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	4b82      	ldr	r3, [pc, #520]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_RCC_OscConfig+0x7c>
 8002af6:	4b7f      	ldr	r3, [pc, #508]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002afe:	e005      	b.n	8002b0c <HAL_RCC_OscConfig+0x88>
 8002b00:	4b7c      	ldr	r3, [pc, #496]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d223      	bcs.n	8002b58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fd27 	bl	8003568 <RCC_SetFlashLatencyFromMSIRange>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e383      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b24:	4b73      	ldr	r3, [pc, #460]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a72      	ldr	r2, [pc, #456]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b70      	ldr	r3, [pc, #448]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	496d      	ldr	r1, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b42:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4968      	ldr	r1, [pc, #416]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
 8002b56:	e025      	b.n	8002ba4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b58:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a65      	ldr	r2, [pc, #404]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4960      	ldr	r1, [pc, #384]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b76:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	495b      	ldr	r1, [pc, #364]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fce7 	bl	8003568 <RCC_SetFlashLatencyFromMSIRange>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e343      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ba4:	f000 fc4a 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b52      	ldr	r3, [pc, #328]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	4950      	ldr	r1, [pc, #320]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	4a4e      	ldr	r2, [pc, #312]	; (8002cfc <HAL_RCC_OscConfig+0x278>)
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f9eb 	bl	8000fa4 <HAL_InitTick>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d052      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	e327      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d032      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a42      	ldr	r2, [pc, #264]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fa28 	bl	8001044 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fa24 	bl	8001044 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e310      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0a:	4b3a      	ldr	r3, [pc, #232]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a36      	ldr	r2, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4931      	ldr	r1, [pc, #196]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c34:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	492c      	ldr	r1, [pc, #176]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	e01a      	b.n	8002c80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c56:	f7fe f9f5 	bl	8001044 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c5e:	f7fe f9f1 	bl	8001044 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e2dd      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x1da>
 8002c7c:	e000      	b.n	8002c80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d074      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d005      	beq.n	8002c9e <HAL_RCC_OscConfig+0x21a>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d10e      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d064      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d160      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e2ba      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x24a>
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e026      	b.n	8002d1c <HAL_RCC_OscConfig+0x298>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd6:	d115      	bne.n	8002d04 <HAL_RCC_OscConfig+0x280>
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a02      	ldr	r2, [pc, #8]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e014      	b.n	8002d1c <HAL_RCC_OscConfig+0x298>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08008c5c 	.word	0x08008c5c
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004
 8002d04:	4ba0      	ldr	r3, [pc, #640]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a9f      	ldr	r2, [pc, #636]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b9d      	ldr	r3, [pc, #628]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a9c      	ldr	r2, [pc, #624]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe f98e 	bl	8001044 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe f98a 	bl	8001044 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e276      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	4b92      	ldr	r3, [pc, #584]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x2a8>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f97a 	bl	8001044 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe f976 	bl	8001044 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e262      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d66:	4b88      	ldr	r3, [pc, #544]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2d0>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d060      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_OscConfig+0x310>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d119      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d116      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d94:	4b7c      	ldr	r3, [pc, #496]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x328>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e23f      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	4973      	ldr	r1, [pc, #460]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc0:	e040      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d023      	beq.n	8002e12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dca:	4b6f      	ldr	r3, [pc, #444]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6e      	ldr	r2, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe f935 	bl	8001044 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe f931 	bl	8001044 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e21d      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df0:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	495f      	ldr	r1, [pc, #380]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
 8002e10:	e018      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5c      	ldr	r2, [pc, #368]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f911 	bl	8001044 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe f90d 	bl	8001044 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1f9      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d03c      	beq.n	8002eca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e58:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5e:	4a4a      	ldr	r2, [pc, #296]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe f8ec 	bl	8001044 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe f8e8 	bl	8001044 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1d4      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ef      	beq.n	8002e70 <HAL_RCC_OscConfig+0x3ec>
 8002e90:	e01b      	b.n	8002eca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e98:	4a3b      	ldr	r2, [pc, #236]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe f8cf 	bl	8001044 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eaa:	f7fe f8cb 	bl	8001044 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1b7      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ebc:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ef      	bne.n	8002eaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a6 	beq.w	8003024 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f04:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <HAL_RCC_OscConfig+0x508>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d118      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f10:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCC_OscConfig+0x508>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x508>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f892 	bl	8001044 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f24:	f7fe f88e 	bl	8001044 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e17a      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_RCC_OscConfig+0x508>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4d8>
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f5a:	e029      	b.n	8002fb0 <HAL_RCC_OscConfig+0x52c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d115      	bne.n	8002f90 <HAL_RCC_OscConfig+0x50c>
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	4a03      	ldr	r2, [pc, #12]	; (8002f88 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x52c>
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	4b9c      	ldr	r3, [pc, #624]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4a9b      	ldr	r2, [pc, #620]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fa0:	4b98      	ldr	r3, [pc, #608]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a97      	ldr	r2, [pc, #604]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d016      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f844 	bl	8001044 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f840 	bl	8001044 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e12a      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ed      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x53c>
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f82d 	bl	8001044 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f829 	bl	8001044 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e113      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	4b7f      	ldr	r3, [pc, #508]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1ed      	bne.n	8002fee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003012:	7ffb      	ldrb	r3, [r7, #31]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003018:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a79      	ldr	r2, [pc, #484]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800301e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80fe 	beq.w	800322a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	2b02      	cmp	r3, #2
 8003034:	f040 80d0 	bne.w	80031d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003038:	4b72      	ldr	r3, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0203 	and.w	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	429a      	cmp	r2, r3
 800304a:	d130      	bne.n	80030ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	3b01      	subs	r3, #1
 8003058:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d127      	bne.n	80030ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11f      	bne.n	80030ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003078:	2a07      	cmp	r2, #7
 800307a:	bf14      	ite	ne
 800307c:	2201      	movne	r2, #1
 800307e:	2200      	moveq	r2, #0
 8003080:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003082:	4293      	cmp	r3, r2
 8003084:	d113      	bne.n	80030ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d109      	bne.n	80030ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d06e      	beq.n	800318c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d069      	beq.n	8003188 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030c0:	4b50      	ldr	r3, [pc, #320]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0ad      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030d0:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4b      	ldr	r2, [pc, #300]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80030d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030dc:	f7fd ffb2 	bl	8001044 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fd ffae 	bl	8001044 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e09a      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003102:	4b40      	ldr	r3, [pc, #256]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_RCC_OscConfig+0x784>)
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003112:	3a01      	subs	r2, #1
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800311c:	0212      	lsls	r2, r2, #8
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003124:	0852      	lsrs	r2, r2, #1
 8003126:	3a01      	subs	r2, #1
 8003128:	0552      	lsls	r2, r2, #21
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003130:	0852      	lsrs	r2, r2, #1
 8003132:	3a01      	subs	r2, #1
 8003134:	0652      	lsls	r2, r2, #25
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800313c:	0912      	lsrs	r2, r2, #4
 800313e:	0452      	lsls	r2, r2, #17
 8003140:	430a      	orrs	r2, r1
 8003142:	4930      	ldr	r1, [pc, #192]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003160:	f7fd ff70 	bl	8001044 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fd ff6c 	bl	8001044 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e058      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003186:	e050      	b.n	800322a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e04f      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d148      	bne.n	800322a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a16      	ldr	r2, [pc, #88]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031b0:	f7fd ff48 	bl	8001044 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd ff44 	bl	8001044 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e030      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x734>
 80031d6:	e028      	b.n	800322a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d023      	beq.n	8003226 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x780>)
 80031e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fd ff2b 	bl	8001044 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	e00c      	b.n	800320c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd ff27 	bl	8001044 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d905      	bls.n	800320c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e013      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
 8003204:	40021000 	.word	0x40021000
 8003208:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x7b0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ec      	bne.n	80031f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_OscConfig+0x7b0>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4905      	ldr	r1, [pc, #20]	; (8003234 <HAL_RCC_OscConfig+0x7b0>)
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_OscConfig+0x7b4>)
 8003220:	4013      	ands	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
 8003224:	e001      	b.n	800322a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	feeefffc 	.word	0xfeeefffc

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0e7      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d910      	bls.n	8003280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0207 	bic.w	r2, r3, #7
 8003266:	4970      	ldr	r1, [pc, #448]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b6e      	ldr	r3, [pc, #440]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0cf      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4b66      	ldr	r3, [pc, #408]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003298:	429a      	cmp	r2, r3
 800329a:	d908      	bls.n	80032ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b63      	ldr	r3, [pc, #396]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4960      	ldr	r1, [pc, #384]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d04c      	beq.n	8003354 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	4b5a      	ldr	r3, [pc, #360]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0a6      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d115      	bne.n	8003312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e09a      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f2:	4b4e      	ldr	r3, [pc, #312]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e08e      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003302:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e086      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003312:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 0203 	bic.w	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4943      	ldr	r1, [pc, #268]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	4313      	orrs	r3, r2
 8003322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003324:	f7fd fe8e 	bl	8001044 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	e00a      	b.n	8003342 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332c:	f7fd fe8a 	bl	8001044 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e06e      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	4b3a      	ldr	r3, [pc, #232]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 020c 	and.w	r2, r3, #12
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	429a      	cmp	r2, r3
 8003352:	d1eb      	bne.n	800332c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	429a      	cmp	r2, r3
 800336e:	d208      	bcs.n	8003382 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	492b      	ldr	r1, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d210      	bcs.n	80033b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 0207 	bic.w	r2, r3, #7
 8003398:	4923      	ldr	r1, [pc, #140]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCC_ClockConfig+0x1ec>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e036      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4918      	ldr	r1, [pc, #96]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033dc:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4910      	ldr	r1, [pc, #64]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f0:	f000 f824 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_RCC_ClockConfig+0x1f0>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	490b      	ldr	r1, [pc, #44]	; (8003430 <HAL_RCC_ClockConfig+0x1f4>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x1f8>)
 800340e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1fc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fdc5 	bl	8000fa4 <HAL_InitTick>
 800341a:	4603      	mov	r3, r0
 800341c:	72fb      	strb	r3, [r7, #11]

  return status;
 800341e:	7afb      	ldrb	r3, [r7, #11]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40022000 	.word	0x40022000
 800342c:	40021000 	.word	0x40021000
 8003430:	08008c5c 	.word	0x08008c5c
 8003434:	20000000 	.word	0x20000000
 8003438:	20000004 	.word	0x20000004

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x34>
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d121      	bne.n	80034ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11e      	bne.n	80034ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d102      	bne.n	80034ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e004      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_RCC_GetSysClockFreq+0x110>)
 80034c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d134      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d003      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xac>
 80034e0:	e005      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_RCC_GetSysClockFreq+0x110>)
 80034e4:	617b      	str	r3, [r7, #20]
      break;
 80034e6:	e005      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <HAL_RCC_GetSysClockFreq+0x110>)
 80034ea:	617b      	str	r3, [r7, #20]
      break;
 80034ec:	e002      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	617b      	str	r3, [r7, #20]
      break;
 80034f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	3301      	adds	r3, #1
 8003500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	fb03 f202 	mul.w	r2, r3, r2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0e5b      	lsrs	r3, r3, #25
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	3301      	adds	r3, #1
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003534:	69bb      	ldr	r3, [r7, #24]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	08008c6c 	.word	0x08008c6c
 800354c:	00f42400 	.word	0x00f42400

08003550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_RCC_GetHCLKFreq+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000

08003568 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003574:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003580:	f7ff fa0c 	bl	800299c <HAL_PWREx_GetVoltageRange>
 8003584:	6178      	str	r0, [r7, #20]
 8003586:	e014      	b.n	80035b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	4a24      	ldr	r2, [pc, #144]	; (8003620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003592:	6593      	str	r3, [r2, #88]	; 0x58
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a0:	f7ff f9fc 	bl	800299c <HAL_PWREx_GetVoltageRange>
 80035a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d10b      	bne.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d919      	bls.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2ba0      	cmp	r3, #160	; 0xa0
 80035c4:	d902      	bls.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035c6:	2302      	movs	r3, #2
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e013      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035cc:	2301      	movs	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e010      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d902      	bls.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035d8:	2303      	movs	r3, #3
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e00a      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b80      	cmp	r3, #128	; 0x80
 80035e2:	d102      	bne.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e4:	2302      	movs	r3, #2
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e004      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b70      	cmp	r3, #112	; 0x70
 80035ee:	d101      	bne.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f0:	2301      	movs	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 0207 	bic.w	r2, r3, #7
 80035fc:	4909      	ldr	r1, [pc, #36]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	429a      	cmp	r2, r3
 8003610:	d001      	beq.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	40022000 	.word	0x40022000

08003628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003630:	2300      	movs	r3, #0
 8003632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003634:	2300      	movs	r3, #0
 8003636:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003640:	2b00      	cmp	r3, #0
 8003642:	d041      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003648:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800364c:	d02a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800364e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003652:	d824      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003654:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800365a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800365e:	d81e      	bhi.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003668:	d010      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800366a:	e018      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800366c:	4b86      	ldr	r3, [pc, #536]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a85      	ldr	r2, [pc, #532]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003678:	e015      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fabb 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3320      	adds	r3, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fba6 	bl	8003de4 <RCCEx_PLLSAI2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	74fb      	strb	r3, [r7, #19]
      break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ac:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ba:	4973      	ldr	r1, [pc, #460]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036c2:	e001      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d041      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036dc:	d02a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036e2:	d824      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ee:	d81e      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f8:	d010      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036fa:	e018      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036fc:	4b62      	ldr	r3, [pc, #392]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a61      	ldr	r2, [pc, #388]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003708:	e015      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fa73 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800371a:	e00c      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3320      	adds	r3, #32
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fb5e 	bl	8003de4 <RCCEx_PLLSAI2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	74fb      	strb	r3, [r7, #19]
      break;
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800373c:	4b52      	ldr	r3, [pc, #328]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374a:	494f      	ldr	r1, [pc, #316]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003752:	e001      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a0 	beq.w	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003780:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	4a40      	ldr	r2, [pc, #256]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378a:	6593      	str	r3, [r2, #88]	; 0x58
 800378c:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003798:	2301      	movs	r3, #1
 800379a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379c:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a3a      	ldr	r2, [pc, #232]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a8:	f7fd fc4c 	bl	8001044 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ae:	e009      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b0:	f7fd fc48 	bl	8001044 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d902      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	74fb      	strb	r3, [r7, #19]
        break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ef      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d15c      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d019      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003800:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a20      	ldr	r2, [pc, #128]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003810:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fd fc07 	bl	8001044 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003838:	e00b      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fd fc03 	bl	8001044 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	; 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d902      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	74fb      	strb	r3, [r7, #19]
            break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ec      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800387e:	e009      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	74bb      	strb	r3, [r7, #18]
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003894:	7c7b      	ldrb	r3, [r7, #17]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b9e      	ldr	r3, [pc, #632]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	4a9d      	ldr	r2, [pc, #628]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b2:	4b98      	ldr	r3, [pc, #608]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f023 0203 	bic.w	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	4994      	ldr	r1, [pc, #592]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d4:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 020c 	bic.w	r2, r3, #12
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	498c      	ldr	r1, [pc, #560]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038f6:	4b87      	ldr	r3, [pc, #540]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	4983      	ldr	r1, [pc, #524]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003918:	4b7e      	ldr	r3, [pc, #504]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	497b      	ldr	r1, [pc, #492]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800393a:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	4972      	ldr	r1, [pc, #456]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800395c:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	496a      	ldr	r1, [pc, #424]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	4961      	ldr	r1, [pc, #388]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039a0:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	4959      	ldr	r1, [pc, #356]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	4950      	ldr	r1, [pc, #320]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	4948      	ldr	r1, [pc, #288]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	493f      	ldr	r1, [pc, #252]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d028      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a36:	4937      	ldr	r1, [pc, #220]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a46:	d106      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a48:	4b32      	ldr	r3, [pc, #200]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a52:	60d3      	str	r3, [r2, #12]
 8003a54:	e011      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	2101      	movs	r1, #1
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f8c8 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d028      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a86:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	491f      	ldr	r1, [pc, #124]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab0:	60d3      	str	r3, [r2, #12]
 8003ab2:	e011      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f899 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	4908      	ldr	r1, [pc, #32]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d109      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a02      	ldr	r2, [pc, #8]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e014      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	2101      	movs	r1, #1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f867 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02f      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b56:	4928      	ldr	r1, [pc, #160]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f844 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d014      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	74bb      	strb	r3, [r7, #18]
 8003b82:	e011      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3320      	adds	r3, #32
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f925 	bl	8003de4 <RCCEx_PLLSAI2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc2:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be6:	4904      	ldr	r1, [pc, #16]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bee:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000

08003bfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c0a:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c16:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0203 	and.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d10d      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
       ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d047      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e044      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d018      	beq.n	8003c82 <RCCEx_PLLSAI1_Config+0x86>
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d825      	bhi.n	8003ca0 <RCCEx_PLLSAI1_Config+0xa4>
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d002      	beq.n	8003c5e <RCCEx_PLLSAI1_Config+0x62>
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d009      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x74>
 8003c5c:	e020      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c5e:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11d      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6e:	e01a      	b.n	8003ca6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c70:	4b5b      	ldr	r3, [pc, #364]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d116      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c80:	e013      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c82:	4b57      	ldr	r3, [pc, #348]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c8e:	4b54      	ldr	r3, [pc, #336]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c9e:	e006      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e004      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cb6:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	4944      	ldr	r1, [pc, #272]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d17d      	bne.n	8003dd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cd8:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a40      	ldr	r2, [pc, #256]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce4:	f7fd f9ae 	bl	8001044 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cec:	f7fd f9aa 	bl	8001044 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d00:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ef      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d160      	bne.n	8003dd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d111      	bne.n	8003d3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	0211      	lsls	r1, r2, #8
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68d2      	ldr	r2, [r2, #12]
 8003d2e:	0912      	lsrs	r2, r2, #4
 8003d30:	0452      	lsls	r2, r2, #17
 8003d32:	430a      	orrs	r2, r1
 8003d34:	492a      	ldr	r1, [pc, #168]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	610b      	str	r3, [r1, #16]
 8003d3a:	e027      	b.n	8003d8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d112      	bne.n	8003d68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d42:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	0211      	lsls	r1, r2, #8
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6912      	ldr	r2, [r2, #16]
 8003d58:	0852      	lsrs	r2, r2, #1
 8003d5a:	3a01      	subs	r2, #1
 8003d5c:	0552      	lsls	r2, r2, #21
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	491f      	ldr	r1, [pc, #124]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	610b      	str	r3, [r1, #16]
 8003d66:	e011      	b.n	8003d8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	0211      	lsls	r1, r2, #8
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6952      	ldr	r2, [r2, #20]
 8003d7e:	0852      	lsrs	r2, r2, #1
 8003d80:	3a01      	subs	r2, #1
 8003d82:	0652      	lsls	r2, r2, #25
 8003d84:	430a      	orrs	r2, r1
 8003d86:	4916      	ldr	r1, [pc, #88]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fd f954 	bl	8001044 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d9e:	e009      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da0:	f7fd f950 	bl	8001044 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d902      	bls.n	8003db4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	73fb      	strb	r3, [r7, #15]
          break;
 8003db2:	e005      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ef      	beq.n	8003da0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	4904      	ldr	r1, [pc, #16]	; (8003de0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000

08003de4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d018      	beq.n	8003e30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0203 	and.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d10d      	bne.n	8003e2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
       ||
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
       ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d047      	beq.n	8003eba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	e044      	b.n	8003eba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d018      	beq.n	8003e6a <RCCEx_PLLSAI2_Config+0x86>
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d825      	bhi.n	8003e88 <RCCEx_PLLSAI2_Config+0xa4>
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d002      	beq.n	8003e46 <RCCEx_PLLSAI2_Config+0x62>
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d009      	beq.n	8003e58 <RCCEx_PLLSAI2_Config+0x74>
 8003e44:	e020      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e46:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11d      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e56:	e01a      	b.n	8003e8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d116      	bne.n	8003e92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e68:	e013      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e6a:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10f      	bne.n	8003e96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e86:	e006      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8c:	e004      	b.n	8003e98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10d      	bne.n	8003eba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	4939      	ldr	r1, [pc, #228]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d167      	bne.n	8003f90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a35      	ldr	r2, [pc, #212]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ecc:	f7fd f8ba 	bl	8001044 <HAL_GetTick>
 8003ed0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ed2:	e009      	b.n	8003ee8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ed4:	f7fd f8b6 	bl	8001044 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d902      	bls.n	8003ee8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ee6:	e005      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ef      	bne.n	8003ed4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d14a      	bne.n	8003f90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d111      	bne.n	8003f24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6892      	ldr	r2, [r2, #8]
 8003f10:	0211      	lsls	r1, r2, #8
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68d2      	ldr	r2, [r2, #12]
 8003f16:	0912      	lsrs	r2, r2, #4
 8003f18:	0452      	lsls	r2, r2, #17
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	491f      	ldr	r1, [pc, #124]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	614b      	str	r3, [r1, #20]
 8003f22:	e011      	b.n	8003f48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6892      	ldr	r2, [r2, #8]
 8003f34:	0211      	lsls	r1, r2, #8
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6912      	ldr	r2, [r2, #16]
 8003f3a:	0852      	lsrs	r2, r2, #1
 8003f3c:	3a01      	subs	r2, #1
 8003f3e:	0652      	lsls	r2, r2, #25
 8003f40:	430a      	orrs	r2, r1
 8003f42:	4916      	ldr	r1, [pc, #88]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fd f876 	bl	8001044 <HAL_GetTick>
 8003f58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f5a:	e009      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f5c:	f7fd f872 	bl	8001044 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d902      	bls.n	8003f70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f6e:	e005      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0ef      	beq.n	8003f5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	4904      	ldr	r1, [pc, #16]	; (8003f9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e095      	b.n	80040de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d108      	bne.n	8003fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc2:	d009      	beq.n	8003fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	61da      	str	r2, [r3, #28]
 8003fca:	e005      	b.n	8003fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc ff0a 	bl	8000e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004018:	d902      	bls.n	8004020 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e002      	b.n	8004026 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004024:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800402e:	d007      	beq.n	8004040 <HAL_SPI_Init+0xa0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004038:	d002      	beq.n	8004040 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	ea42 0103 	orr.w	r1, r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	f003 0204 	and.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b088      	sub	sp, #32
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_SPI_Transmit+0x22>
 8004104:	2302      	movs	r3, #2
 8004106:	e15f      	b.n	80043c8 <HAL_SPI_Transmit+0x2e2>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004110:	f7fc ff98 	bl	8001044 <HAL_GetTick>
 8004114:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d002      	beq.n	800412c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
    goto error;
 800412a:	e148      	b.n	80043be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_Transmit+0x52>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800413c:	e13f      	b.n	80043be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004188:	d10f      	bne.n	80041aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d007      	beq.n	80041c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d0:	d94f      	bls.n	8004272 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0xfa>
 80041da:	8afb      	ldrh	r3, [r7, #22]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d142      	bne.n	8004266 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004204:	e02f      	b.n	8004266 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d112      	bne.n	800423a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	881a      	ldrh	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004238:	e015      	b.n	8004266 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800423a:	f7fc ff03 	bl	8001044 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d803      	bhi.n	8004252 <HAL_SPI_Transmit+0x16c>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004250:	d102      	bne.n	8004258 <HAL_SPI_Transmit+0x172>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004264:	e0ab      	b.n	80043be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ca      	bne.n	8004206 <HAL_SPI_Transmit+0x120>
 8004270:	e080      	b.n	8004374 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x19a>
 800427a:	8afb      	ldrh	r3, [r7, #22]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d174      	bne.n	800436a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d912      	bls.n	80042b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b02      	subs	r3, #2
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042ae:	e05c      	b.n	800436a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80042d6:	e048      	b.n	800436a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d12b      	bne.n	800433e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d912      	bls.n	8004316 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	1c9a      	adds	r2, r3, #2
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b02      	subs	r3, #2
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004314:	e029      	b.n	800436a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800433c:	e015      	b.n	800436a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800433e:	f7fc fe81 	bl	8001044 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d803      	bhi.n	8004356 <HAL_SPI_Transmit+0x270>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004354:	d102      	bne.n	800435c <HAL_SPI_Transmit+0x276>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004368:	e029      	b.n	80043be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1b1      	bne.n	80042d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fb77 	bl	8004a6c <SPI_EndRxTxTransaction>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e003      	b.n	80043be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043de:	2301      	movs	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x26>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e20a      	b.n	800480c <HAL_SPI_TransmitReceive+0x43c>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043fe:	f7fc fe21 	bl	8001044 <HAL_GetTick>
 8004402:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800440a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800441a:	7efb      	ldrb	r3, [r7, #27]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d00e      	beq.n	800443e <HAL_SPI_TransmitReceive+0x6e>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004426:	d106      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x66>
 8004430:	7efb      	ldrb	r3, [r7, #27]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d003      	beq.n	800443e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004436:	2302      	movs	r3, #2
 8004438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800443c:	e1e0      	b.n	8004800 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_SPI_TransmitReceive+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_SPI_TransmitReceive+0x80>
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004456:	e1d3      	b.n	8004800 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b04      	cmp	r3, #4
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2205      	movs	r2, #5
 8004468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	887a      	ldrh	r2, [r7, #2]
 8004492:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ae:	d802      	bhi.n	80044b6 <HAL_SPI_TransmitReceive+0xe6>
 80044b0:	8a3b      	ldrh	r3, [r7, #16]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d908      	bls.n	80044c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	e007      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d007      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044fe:	f240 8081 	bls.w	8004604 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x140>
 800450a:	8a7b      	ldrh	r3, [r7, #18]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d16d      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	1c9a      	adds	r2, r3, #2
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004534:	e05a      	b.n	80045ec <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d11b      	bne.n	800457c <HAL_SPI_TransmitReceive+0x1ac>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_SPI_TransmitReceive+0x1ac>
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	2b01      	cmp	r3, #1
 8004552:	d113      	bne.n	800457c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d11c      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x1f4>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	b292      	uxth	r2, r2
 80045a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c0:	2301      	movs	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045c4:	f7fc fd3e 	bl	8001044 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d80b      	bhi.n	80045ec <HAL_SPI_TransmitReceive+0x21c>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045da:	d007      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80045ea:	e109      	b.n	8004800 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d19f      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x166>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d199      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x166>
 8004602:	e0e3      	b.n	80047cc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x244>
 800460c:	8a7b      	ldrh	r3, [r7, #18]
 800460e:	2b01      	cmp	r3, #1
 8004610:	f040 80cf 	bne.w	80047b2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d912      	bls.n	8004644 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	881a      	ldrh	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b02      	subs	r3, #2
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004642:	e0b6      	b.n	80047b2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800466a:	e0a2      	b.n	80047b2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d134      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x314>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02f      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x314>
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	2b01      	cmp	r3, #1
 8004688:	d12c      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d912      	bls.n	80046ba <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b02      	subs	r3, #2
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046b8:	e012      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d148      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x3b4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d042      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d923      	bls.n	8004752 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	b292      	uxth	r2, r2
 8004716:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b02      	subs	r3, #2
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d81f      	bhi.n	8004780 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800474e:	605a      	str	r2, [r3, #4]
 8004750:	e016      	b.n	8004780 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f103 020c 	add.w	r2, r3, #12
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004784:	f7fc fc5e 	bl	8001044 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004790:	429a      	cmp	r2, r3
 8004792:	d803      	bhi.n	800479c <HAL_SPI_TransmitReceive+0x3cc>
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479a:	d102      	bne.n	80047a2 <HAL_SPI_TransmitReceive+0x3d2>
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80047b0:	e026      	b.n	8004800 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af57 	bne.w	800466c <HAL_SPI_TransmitReceive+0x29c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f47f af50 	bne.w	800466c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f94b 	bl	8004a6c <SPI_EndRxTxTransaction>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e003      	b.n	8004800 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800480c:	4618      	mov	r0, r3
 800480e:	3728      	adds	r7, #40	; 0x28
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004822:	b2db      	uxtb	r3, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004840:	f7fc fc00 	bl	8001044 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004850:	f7fc fbf8 	bl	8001044 <HAL_GetTick>
 8004854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	0d1b      	lsrs	r3, r3, #20
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004866:	e054      	b.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486e:	d050      	beq.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004870:	f7fc fbe8 	bl	8001044 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	429a      	cmp	r2, r3
 800487e:	d902      	bls.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d13d      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489e:	d111      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a8:	d004      	beq.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d107      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048cc:	d10f      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e017      	b.n	8004932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3b01      	subs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d19b      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000000 	.word	0x20000000

08004940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004952:	f7fc fb77 	bl	8001044 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	4413      	add	r3, r2
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004962:	f7fc fb6f 	bl	8001044 <HAL_GetTick>
 8004966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004970:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00da      	lsls	r2, r3, #3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	0d1b      	lsrs	r3, r3, #20
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004988:	e060      	b.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004990:	d107      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a8:	d050      	beq.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049aa:	f7fc fb4b 	bl	8001044 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d902      	bls.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13d      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d8:	d111      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e2:	d004      	beq.n	80049ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d107      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a06:	d10f      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d196      	bne.n	800498a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000000 	.word	0x20000000

08004a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff5b 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e027      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fec0 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e014      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff34 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e000      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 001c 	add.w	r0, r7, #28
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 fa1c 	bl	8005f54 <USB_CoreReset>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
 8004b32:	e005      	b.n	8004b40 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b4c:	b004      	add	sp, #16
 8004b4e:	4770      	bx	lr

08004b50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d165      	bne.n	8004c30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a3e      	ldr	r2, [pc, #248]	; (8004c60 <USB_SetTurnaroundTime+0x110>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d906      	bls.n	8004b7a <USB_SetTurnaroundTime+0x2a>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a3d      	ldr	r2, [pc, #244]	; (8004c64 <USB_SetTurnaroundTime+0x114>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d202      	bcs.n	8004b7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b74:	230f      	movs	r3, #15
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e05c      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a39      	ldr	r2, [pc, #228]	; (8004c64 <USB_SetTurnaroundTime+0x114>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d306      	bcc.n	8004b90 <USB_SetTurnaroundTime+0x40>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4a38      	ldr	r2, [pc, #224]	; (8004c68 <USB_SetTurnaroundTime+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d202      	bcs.n	8004b90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b8a:	230e      	movs	r3, #14
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e051      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <USB_SetTurnaroundTime+0x118>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d306      	bcc.n	8004ba6 <USB_SetTurnaroundTime+0x56>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a34      	ldr	r2, [pc, #208]	; (8004c6c <USB_SetTurnaroundTime+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d202      	bcs.n	8004ba6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ba0:	230d      	movs	r3, #13
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e046      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <USB_SetTurnaroundTime+0x11c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d306      	bcc.n	8004bbc <USB_SetTurnaroundTime+0x6c>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a2f      	ldr	r2, [pc, #188]	; (8004c70 <USB_SetTurnaroundTime+0x120>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d802      	bhi.n	8004bbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e03b      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <USB_SetTurnaroundTime+0x120>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d906      	bls.n	8004bd2 <USB_SetTurnaroundTime+0x82>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <USB_SetTurnaroundTime+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d802      	bhi.n	8004bd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bcc:	230b      	movs	r3, #11
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e030      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <USB_SetTurnaroundTime+0x124>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d906      	bls.n	8004be8 <USB_SetTurnaroundTime+0x98>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <USB_SetTurnaroundTime+0x128>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d802      	bhi.n	8004be8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004be2:	230a      	movs	r3, #10
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e025      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <USB_SetTurnaroundTime+0x128>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d906      	bls.n	8004bfe <USB_SetTurnaroundTime+0xae>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <USB_SetTurnaroundTime+0x12c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d202      	bcs.n	8004bfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bf8:	2309      	movs	r3, #9
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	e01a      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <USB_SetTurnaroundTime+0x12c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d306      	bcc.n	8004c14 <USB_SetTurnaroundTime+0xc4>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <USB_SetTurnaroundTime+0x130>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d802      	bhi.n	8004c14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c0e:	2308      	movs	r3, #8
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e00f      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <USB_SetTurnaroundTime+0x130>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d906      	bls.n	8004c2a <USB_SetTurnaroundTime+0xda>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <USB_SetTurnaroundTime+0x134>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d202      	bcs.n	8004c2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c24:	2307      	movs	r3, #7
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e004      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e001      	b.n	8004c34 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c30:	2309      	movs	r3, #9
 8004c32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	00d8acbf 	.word	0x00d8acbf
 8004c64:	00e4e1c0 	.word	0x00e4e1c0
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	01067380 	.word	0x01067380
 8004c70:	011a499f 	.word	0x011a499f
 8004c74:	01312cff 	.word	0x01312cff
 8004c78:	014ca43f 	.word	0x014ca43f
 8004c7c:	016e3600 	.word	0x016e3600
 8004c80:	01a6ab1f 	.word	0x01a6ab1f
 8004c84:	01e84800 	.word	0x01e84800

08004c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d115      	bne.n	8004d1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f7fc f9ae 	bl	800105c <HAL_Delay>
      ms++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 f8ab 	bl	8005e62 <USB_GetMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d01e      	beq.n	8004d50 <USB_SetCurrentMode+0x84>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b31      	cmp	r3, #49	; 0x31
 8004d16:	d9f0      	bls.n	8004cfa <USB_SetCurrentMode+0x2e>
 8004d18:	e01a      	b.n	8004d50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d115      	bne.n	8004d4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f7fc f995 	bl	800105c <HAL_Delay>
      ms++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 f892 	bl	8005e62 <USB_GetMode>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <USB_SetCurrentMode+0x84>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b31      	cmp	r3, #49	; 0x31
 8004d48:	d9f0      	bls.n	8004d2c <USB_SetCurrentMode+0x60>
 8004d4a:	e001      	b.n	8004d50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e005      	b.n	8004d5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b32      	cmp	r3, #50	; 0x32
 8004d54:	d101      	bne.n	8004d5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d64:	b084      	sub	sp, #16
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e009      	b.n	8004d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3340      	adds	r3, #64	; 0x40
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3301      	adds	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b0e      	cmp	r3, #14
 8004d9c:	d9f2      	bls.n	8004d84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d11c      	bne.n	8004dde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e005      	b.n	8004dea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004df0:	461a      	mov	r2, r3
 8004df2:	2300      	movs	r3, #0
 8004df4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004df6:	2103      	movs	r1, #3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f959 	bl	80050b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dfe:	2110      	movs	r1, #16
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8f1 	bl	8004fe8 <USB_FlushTxFifo>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f91d 	bl	8005050 <USB_FlushRxFifo>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	461a      	mov	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e043      	b.n	8004ed2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e60:	d118      	bne.n	8004e94 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	461a      	mov	r2, r3
 8004e76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	e013      	b.n	8004ea6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e008      	b.n	8004ea6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d3b7      	bcc.n	8004e4a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e043      	b.n	8004f68 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef6:	d118      	bne.n	8004f2a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e013      	b.n	8004f3c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e008      	b.n	8004f3c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	3301      	adds	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d3b7      	bcc.n	8004ee0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f043 0210 	orr.w	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <USB_DevInit+0x280>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f043 0208 	orr.w	r2, r3, #8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d107      	bne.n	8004fd2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fde:	b004      	add	sp, #16
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	803c3800 	.word	0x803c3800

08004fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <USB_FlushTxFifo+0x64>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e01b      	b.n	8005040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	daf2      	bge.n	8004ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	019b      	lsls	r3, r3, #6
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <USB_FlushTxFifo+0x64>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e006      	b.n	8005040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b20      	cmp	r3, #32
 800503c:	d0f0      	beq.n	8005020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	00030d40 	.word	0x00030d40

08005050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3301      	adds	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a11      	ldr	r2, [pc, #68]	; (80050ac <USB_FlushRxFifo+0x5c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e018      	b.n	80050a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	daf2      	bge.n	800505c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2210      	movs	r2, #16
 800507e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a08      	ldr	r2, [pc, #32]	; (80050ac <USB_FlushRxFifo+0x5c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e006      	b.n	80050a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b10      	cmp	r3, #16
 800509c:	d0f0      	beq.n	8005080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	00030d40 	.word	0x00030d40

080050b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0306 	and.w	r3, r3, #6
 80050fa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d002      	beq.n	8005108 <USB_GetDevSpeed+0x26>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d102      	bne.n	800510e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005108:	2302      	movs	r3, #2
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e001      	b.n	8005112 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800510e:	230f      	movs	r3, #15
 8005110:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d13a      	bne.n	80051b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	b29b      	uxth	r3, r3
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515a:	4313      	orrs	r3, r2
 800515c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d155      	bne.n	8005220 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	791b      	ldrb	r3, [r3, #4]
 800518e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005190:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	059b      	lsls	r3, r3, #22
 8005196:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005198:	4313      	orrs	r3, r2
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e036      	b.n	8005220 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11a      	bne.n	8005220 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	791b      	ldrb	r3, [r3, #4]
 8005204:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005206:	430b      	orrs	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d161      	bne.n	8005310 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005262:	d11f      	bne.n	80052a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005282:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	2101      	movs	r1, #1
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	b29b      	uxth	r3, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e8:	4013      	ands	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0159      	lsls	r1, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	440b      	add	r3, r1
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	4619      	mov	r1, r3
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <USB_DeactivateEndpoint+0x1b0>)
 800530a:	4013      	ands	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
 800530e:	e060      	b.n	80053d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005326:	d11f      	bne.n	8005368 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005346:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005366:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	2101      	movs	r1, #1
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	43db      	mvns	r3, r3
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005388:	4013      	ands	r3, r2
 800538a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	2101      	movs	r1, #1
 800539e:	fa01 f303 	lsl.w	r3, r1, r3
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	43db      	mvns	r3, r3
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4013      	ands	r3, r2
 80053ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	0159      	lsls	r1, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	4619      	mov	r1, r3
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <USB_DeactivateEndpoint+0x1b4>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	ec337800 	.word	0xec337800
 80053e4:	eff37800 	.word	0xeff37800

080053e8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	2b01      	cmp	r3, #1
 8005402:	f040 8128 	bne.w	8005656 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d132      	bne.n	8005474 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800542c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546c:	0cdb      	lsrs	r3, r3, #19
 800546e:	04db      	lsls	r3, r3, #19
 8005470:	6113      	str	r3, [r2, #16]
 8005472:	e092      	b.n	800559a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548e:	0cdb      	lsrs	r3, r3, #19
 8005490:	04db      	lsls	r3, r3, #19
 8005492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11a      	bne.n	80054f4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d903      	bls.n	80054d2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054f0:	6113      	str	r3, [r2, #16]
 80054f2:	e01b      	b.n	800552c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6919      	ldr	r1, [r3, #16]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	440b      	add	r3, r1
 800550c:	1e59      	subs	r1, r3, #1
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	fbb1 f3f3 	udiv	r3, r1, r3
 8005516:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005518:	4b8d      	ldr	r3, [pc, #564]	; (8005750 <USB_EPStartXfer+0x368>)
 800551a:	400b      	ands	r3, r1
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	0148      	lsls	r0, r1, #5
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	4401      	add	r1, r0
 8005524:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005528:	4313      	orrs	r3, r2
 800552a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	0148      	lsls	r0, r1, #5
 8005546:	6979      	ldr	r1, [r7, #20]
 8005548:	4401      	add	r1, r0
 800554a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800554e:	4313      	orrs	r3, r2
 8005550:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	791b      	ldrb	r3, [r3, #4]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d11f      	bne.n	800559a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005578:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005598:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	791b      	ldrb	r3, [r3, #4]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d015      	beq.n	80055ee <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8139 	beq.w	800583e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	6979      	ldr	r1, [r7, #20]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e8:	4313      	orrs	r3, r2
 80055ea:	634b      	str	r3, [r1, #52]	; 0x34
 80055ec:	e127      	b.n	800583e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d110      	bne.n	8005620 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e00f      	b.n	8005640 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68d9      	ldr	r1, [r3, #12]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	b29b      	uxth	r3, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9a6 	bl	80059a0 <USB_WritePacket>
 8005654:	e0f3      	b.n	800583e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	0cdb      	lsrs	r3, r3, #19
 8005672:	04db      	lsls	r3, r3, #19
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005690:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005694:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005698:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d12f      	bne.n	8005700 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ce:	6939      	ldr	r1, [r7, #16]
 80056d0:	0148      	lsls	r0, r1, #5
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	4401      	add	r1, r0
 80056d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056da:	4313      	orrs	r3, r2
 80056dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fc:	6113      	str	r3, [r2, #16]
 80056fe:	e061      	b.n	80057c4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d125      	bne.n	8005754 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	0148      	lsls	r0, r1, #5
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	4401      	add	r1, r0
 8005726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800572a:	4313      	orrs	r3, r2
 800572c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800574c:	6113      	str	r3, [r2, #16]
 800574e:	e039      	b.n	80057c4 <USB_EPStartXfer+0x3dc>
 8005750:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4413      	add	r3, r2
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	89fa      	ldrh	r2, [r7, #14]
 8005770:	fb03 f202 	mul.w	r2, r3, r2
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	04d9      	lsls	r1, r3, #19
 800578a:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <USB_EPStartXfer+0x460>)
 800578c:	400b      	ands	r3, r1
 800578e:	6939      	ldr	r1, [r7, #16]
 8005790:	0148      	lsls	r0, r1, #5
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	4401      	add	r1, r0
 8005796:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800579a:	4313      	orrs	r3, r2
 800579c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b4:	6939      	ldr	r1, [r7, #16]
 80057b6:	0148      	lsls	r0, r1, #5
 80057b8:	6979      	ldr	r1, [r7, #20]
 80057ba:	4401      	add	r1, r0
 80057bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057c0:	4313      	orrs	r3, r2
 80057c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	791b      	ldrb	r3, [r3, #4]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d128      	bne.n	800581e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d110      	bne.n	80057fe <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e00f      	b.n	800581e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800583c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	1ff80000 	.word	0x1ff80000

0800584c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d14a      	bne.n	8005900 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005882:	f040 8086 	bne.w	8005992 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80058da:	4293      	cmp	r3, r2
 80058dc:	d902      	bls.n	80058e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
          break;
 80058e2:	e056      	b.n	8005992 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058fc:	d0e7      	beq.n	80058ce <USB_EPStopXfer+0x82>
 80058fe:	e048      	b.n	8005992 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005918:	d13b      	bne.n	8005992 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	7812      	ldrb	r2, [r2, #0]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005938:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800593c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005960:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f242 7210 	movw	r2, #10000	; 0x2710
 800596e:	4293      	cmp	r3, r2
 8005970:	d902      	bls.n	8005978 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
          break;
 8005976:	e00c      	b.n	8005992 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005990:	d0e7      	beq.n	8005962 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b089      	sub	sp, #36	; 0x24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	460b      	mov	r3, r1
 80059b0:	71fb      	strb	r3, [r7, #7]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80059be:	88bb      	ldrh	r3, [r7, #4]
 80059c0:	3303      	adds	r3, #3
 80059c2:	089b      	lsrs	r3, r3, #2
 80059c4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	e018      	b.n	80059fe <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	031a      	lsls	r2, r3, #12
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d8:	461a      	mov	r2, r3
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6013      	str	r3, [r2, #0]
    pSrc++;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3301      	adds	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3301      	adds	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	3301      	adds	r3, #1
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d3e2      	bcc.n	80059cc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3724      	adds	r7, #36	; 0x24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b08b      	sub	sp, #44	; 0x2c
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	089b      	lsrs	r3, r3, #2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	e014      	b.n	8005a6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	3301      	adds	r3, #1
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	3301      	adds	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	3301      	adds	r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	3301      	adds	r3, #1
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	6a3a      	ldr	r2, [r7, #32]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d3e6      	bcc.n	8005a40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a72:	8bfb      	ldrh	r3, [r7, #30]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01e      	beq.n	8005ab6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a82:	461a      	mov	r2, r3
 8005a84:	f107 0310 	add.w	r3, r7, #16
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	701a      	strb	r2, [r3, #0]
      i++;
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005aaa:	8bfb      	ldrh	r3, [r7, #30]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ab0:	8bfb      	ldrh	r3, [r7, #30]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1ea      	bne.n	8005a8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	372c      	adds	r7, #44	; 0x2c
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d12c      	bne.n	8005b3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	db12      	blt.n	8005b18 <USB_EPSetStall+0x54>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00f      	beq.n	8005b18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	e02b      	b.n	8005b92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db12      	blt.n	8005b72 <USB_EPSetStall+0xae>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00f      	beq.n	8005b72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d128      	bne.n	8005c0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d003      	beq.n	8005bec <USB_EPClearStall+0x4c>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	791b      	ldrb	r3, [r3, #4]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d138      	bne.n	8005c5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	e027      	b.n	8005c5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	791b      	ldrb	r3, [r3, #4]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d003      	beq.n	8005c3e <USB_EPClearStall+0x9e>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	791b      	ldrb	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d10f      	bne.n	8005c5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce6:	f023 0302 	bic.w	r3, r3, #2
 8005cea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	0c1b      	lsrs	r3, r3, #16
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	b29b      	uxth	r3, r3
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df8:	68bb      	ldr	r3, [r7, #8]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b087      	sub	sp, #28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	01db      	lsls	r3, r3, #7
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4013      	ands	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e54:	68bb      	ldr	r3, [r7, #8]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e9c:	f023 0307 	bic.w	r3, r3, #7
 8005ea0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	333c      	adds	r3, #60	; 0x3c
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <USB_EP0_OutStart+0x8c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d90a      	bls.n	8005efa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef4:	d101      	bne.n	8005efa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e024      	b.n	8005f44 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	461a      	mov	r2, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f28:	f043 0318 	orr.w	r3, r3, #24
 8005f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f40:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	4f54300a 	.word	0x4f54300a

08005f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <USB_CoreReset+0x64>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e01b      	b.n	8005faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	daf2      	bge.n	8005f60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f043 0201 	orr.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <USB_CoreReset+0x64>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e006      	b.n	8005faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d0f0      	beq.n	8005f8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fcc:	f002 fdc0 	bl	8008b50 <USBD_static_malloc>
 8005fd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32b0      	adds	r2, #176	; 0xb0
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e0d4      	b.n	8006196 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f002 fdca 	bl	8008b8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	32b0      	adds	r2, #176	; 0xb0
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	32b0      	adds	r2, #176	; 0xb0
 8006012:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7c1b      	ldrb	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d138      	bne.n	8006096 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006024:	4b5e      	ldr	r3, [pc, #376]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 8006026:	7819      	ldrb	r1, [r3, #0]
 8006028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602c:	2202      	movs	r2, #2
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f002 fb7a 	bl	8008728 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006034:	4b5a      	ldr	r3, [pc, #360]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3324      	adds	r3, #36	; 0x24
 800604a:	2201      	movs	r2, #1
 800604c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800604e:	4b55      	ldr	r3, [pc, #340]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 8006050:	7819      	ldrb	r1, [r3, #0]
 8006052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006056:	2202      	movs	r2, #2
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 fb65 	bl	8008728 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800605e:	4b51      	ldr	r3, [pc, #324]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f003 020f 	and.w	r2, r3, #15
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006076:	2201      	movs	r2, #1
 8006078:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800607a:	4b4b      	ldr	r3, [pc, #300]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	3326      	adds	r3, #38	; 0x26
 8006090:	2210      	movs	r2, #16
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	e035      	b.n	8006102 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006096:	4b42      	ldr	r3, [pc, #264]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	2340      	movs	r3, #64	; 0x40
 800609c:	2202      	movs	r2, #2
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f002 fb42 	bl	8008728 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060a4:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <USBD_CDC_Init+0x1e4>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3324      	adds	r3, #36	; 0x24
 80060ba:	2201      	movs	r2, #1
 80060bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060be:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 80060c0:	7819      	ldrb	r1, [r3, #0]
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	2202      	movs	r2, #2
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f002 fb2e 	bl	8008728 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060cc:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060e4:	2201      	movs	r2, #1
 80060e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060e8:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3326      	adds	r3, #38	; 0x26
 80060fe:	2210      	movs	r2, #16
 8006100:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006102:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 8006104:	7819      	ldrb	r1, [r3, #0]
 8006106:	2308      	movs	r3, #8
 8006108:	2203      	movs	r2, #3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f002 fb0c 	bl	8008728 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <USBD_CDC_Init+0x1ec>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3324      	adds	r3, #36	; 0x24
 8006126:	2201      	movs	r2, #1
 8006128:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	33b0      	adds	r3, #176	; 0xb0
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006160:	2302      	movs	r3, #2
 8006162:	e018      	b.n	8006196 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	7c1b      	ldrb	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 800616e:	7819      	ldrb	r1, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f002 fc4e 	bl	8008a1c <USBD_LL_PrepareReceive>
 8006180:	e008      	b.n	8006194 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <USBD_CDC_Init+0x1e8>)
 8006184:	7819      	ldrb	r1, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f002 fc44 	bl	8008a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000093 	.word	0x20000093
 80061a4:	20000094 	.word	0x20000094
 80061a8:	20000095 	.word	0x20000095

080061ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061b8:	4b3a      	ldr	r3, [pc, #232]	; (80062a4 <USBD_CDC_DeInit+0xf8>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f002 faf0 	bl	80087a4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80061c4:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <USBD_CDC_DeInit+0xf8>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061de:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <USBD_CDC_DeInit+0xfc>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f002 fadd 	bl	80087a4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061ea:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <USBD_CDC_DeInit+0xfc>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006202:	2200      	movs	r2, #0
 8006204:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006206:	4b29      	ldr	r3, [pc, #164]	; (80062ac <USBD_CDC_DeInit+0x100>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f002 fac9 	bl	80087a4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006212:	4b26      	ldr	r3, [pc, #152]	; (80062ac <USBD_CDC_DeInit+0x100>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	2200      	movs	r2, #0
 800622a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800622c:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <USBD_CDC_DeInit+0x100>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	3326      	adds	r3, #38	; 0x26
 8006242:	2200      	movs	r2, #0
 8006244:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32b0      	adds	r2, #176	; 0xb0
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01f      	beq.n	8006298 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	33b0      	adds	r3, #176	; 0xb0
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	32b0      	adds	r2, #176	; 0xb0
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	4618      	mov	r0, r3
 800627c:	f002 fc76 	bl	8008b6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32b0      	adds	r2, #176	; 0xb0
 800628a:	2100      	movs	r1, #0
 800628c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000093 	.word	0x20000093
 80062a8:	20000094 	.word	0x20000094
 80062ac:	20000095 	.word	0x20000095

080062b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	32b0      	adds	r2, #176	; 0xb0
 80062c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	e0bf      	b.n	8006460 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d050      	beq.n	800638e <USBD_CDC_Setup+0xde>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	f040 80af 	bne.w	8006450 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d03a      	beq.n	8006370 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	da1b      	bge.n	800633c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	33b0      	adds	r3, #176	; 0xb0
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800631a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	88d2      	ldrh	r2, [r2, #6]
 8006320:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	88db      	ldrh	r3, [r3, #6]
 8006326:	2b07      	cmp	r3, #7
 8006328:	bf28      	it	cs
 800632a:	2307      	movcs	r3, #7
 800632c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	89fa      	ldrh	r2, [r7, #14]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fd73 	bl	8007e20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800633a:	e090      	b.n	800645e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785a      	ldrb	r2, [r3, #1]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	2b3f      	cmp	r3, #63	; 0x3f
 800634c:	d803      	bhi.n	8006356 <USBD_CDC_Setup+0xa6>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	e000      	b.n	8006358 <USBD_CDC_Setup+0xa8>
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800635e:	6939      	ldr	r1, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006366:	461a      	mov	r2, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fd85 	bl	8007e78 <USBD_CtlPrepareRx>
      break;
 800636e:	e076      	b.n	800645e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	33b0      	adds	r3, #176	; 0xb0
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	7850      	ldrb	r0, [r2, #1]
 8006386:	2200      	movs	r2, #0
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	4798      	blx	r3
      break;
 800638c:	e067      	b.n	800645e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b0b      	cmp	r3, #11
 8006394:	d851      	bhi.n	800643a <USBD_CDC_Setup+0x18a>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <USBD_CDC_Setup+0xec>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063cd 	.word	0x080063cd
 80063a0:	08006449 	.word	0x08006449
 80063a4:	0800643b 	.word	0x0800643b
 80063a8:	0800643b 	.word	0x0800643b
 80063ac:	0800643b 	.word	0x0800643b
 80063b0:	0800643b 	.word	0x0800643b
 80063b4:	0800643b 	.word	0x0800643b
 80063b8:	0800643b 	.word	0x0800643b
 80063bc:	0800643b 	.word	0x0800643b
 80063c0:	0800643b 	.word	0x0800643b
 80063c4:	080063f7 	.word	0x080063f7
 80063c8:	08006421 	.word	0x08006421
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d107      	bne.n	80063e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063d8:	f107 030a 	add.w	r3, r7, #10
 80063dc:	2202      	movs	r2, #2
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fd1d 	bl	8007e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063e6:	e032      	b.n	800644e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fca7 	bl	8007d3e <USBD_CtlError>
            ret = USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	75fb      	strb	r3, [r7, #23]
          break;
 80063f4:	e02b      	b.n	800644e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d107      	bne.n	8006412 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006402:	f107 030d 	add.w	r3, r7, #13
 8006406:	2201      	movs	r2, #1
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fd08 	bl	8007e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006410:	e01d      	b.n	800644e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fc92 	bl	8007d3e <USBD_CtlError>
            ret = USBD_FAIL;
 800641a:	2303      	movs	r3, #3
 800641c:	75fb      	strb	r3, [r7, #23]
          break;
 800641e:	e016      	b.n	800644e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b03      	cmp	r3, #3
 800642a:	d00f      	beq.n	800644c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fc85 	bl	8007d3e <USBD_CtlError>
            ret = USBD_FAIL;
 8006434:	2303      	movs	r3, #3
 8006436:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006438:	e008      	b.n	800644c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fc7e 	bl	8007d3e <USBD_CtlError>
          ret = USBD_FAIL;
 8006442:	2303      	movs	r3, #3
 8006444:	75fb      	strb	r3, [r7, #23]
          break;
 8006446:	e002      	b.n	800644e <USBD_CDC_Setup+0x19e>
          break;
 8006448:	bf00      	nop
 800644a:	e008      	b.n	800645e <USBD_CDC_Setup+0x1ae>
          break;
 800644c:	bf00      	nop
      }
      break;
 800644e:	e006      	b.n	800645e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fc73 	bl	8007d3e <USBD_CtlError>
      ret = USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	bf00      	nop
  }

  return (uint8_t)ret;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800647a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32b0      	adds	r2, #176	; 0xb0
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800648e:	2303      	movs	r3, #3
 8006490:	e065      	b.n	800655e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32b0      	adds	r2, #176	; 0xb0
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	3318      	adds	r3, #24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02f      	beq.n	800651c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	3318      	adds	r3, #24
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	f003 010f 	and.w	r1, r3, #15
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	460b      	mov	r3, r1
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	440b      	add	r3, r1
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4403      	add	r3, r0
 80064e4:	3344      	adds	r3, #68	; 0x44
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d112      	bne.n	800651c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	3318      	adds	r3, #24
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800650e:	78f9      	ldrb	r1, [r7, #3]
 8006510:	2300      	movs	r3, #0
 8006512:	2200      	movs	r2, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f002 fa49 	bl	80089ac <USBD_LL_Transmit>
 800651a:	e01f      	b.n	800655c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	; 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	33b0      	adds	r3, #176	; 0xb0
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	32b0      	adds	r2, #176	; 0xb0
 800657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006580:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	32b0      	adds	r2, #176	; 0xb0
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	e01a      	b.n	80065ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f002 fa75 	bl	8008a8c <USBD_LL_GetRxDataSize>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	33b0      	adds	r3, #176	; 0xb0
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065c8:	4611      	mov	r1, r2
 80065ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	32b0      	adds	r2, #176	; 0xb0
 80065e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e025      	b.n	8006644 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	33b0      	adds	r3, #176	; 0xb0
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01a      	beq.n	8006642 <USBD_CDC_EP0_RxReady+0x6c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006612:	2bff      	cmp	r3, #255	; 0xff
 8006614:	d015      	beq.n	8006642 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	33b0      	adds	r3, #176	; 0xb0
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800662e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006636:	b292      	uxth	r2, r2
 8006638:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006654:	2182      	movs	r1, #130	; 0x82
 8006656:	4818      	ldr	r0, [pc, #96]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006658:	f000 fd0f 	bl	800707a <USBD_GetEpDesc>
 800665c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800665e:	2101      	movs	r1, #1
 8006660:	4815      	ldr	r0, [pc, #84]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006662:	f000 fd0a 	bl	800707a <USBD_GetEpDesc>
 8006666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006668:	2181      	movs	r1, #129	; 0x81
 800666a:	4813      	ldr	r0, [pc, #76]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800666c:	f000 fd05 	bl	800707a <USBD_GetEpDesc>
 8006670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2210      	movs	r2, #16
 800667c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2200      	movs	r2, #0
 8006688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668c:	711a      	strb	r2, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a0:	711a      	strb	r2, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2243      	movs	r2, #67	; 0x43
 80066aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000050 	.word	0x20000050

080066bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066c4:	2182      	movs	r1, #130	; 0x82
 80066c6:	4818      	ldr	r0, [pc, #96]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066c8:	f000 fcd7 	bl	800707a <USBD_GetEpDesc>
 80066cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066ce:	2101      	movs	r1, #1
 80066d0:	4815      	ldr	r0, [pc, #84]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066d2:	f000 fcd2 	bl	800707a <USBD_GetEpDesc>
 80066d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066d8:	2181      	movs	r1, #129	; 0x81
 80066da:	4813      	ldr	r0, [pc, #76]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066dc:	f000 fccd 	bl	800707a <USBD_GetEpDesc>
 80066e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2210      	movs	r2, #16
 80066ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2200      	movs	r2, #0
 80066f8:	711a      	strb	r2, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f042 0202 	orr.w	r2, r2, #2
 8006700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	711a      	strb	r2, [r3, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f042 0202 	orr.w	r2, r2, #2
 8006714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2243      	movs	r2, #67	; 0x43
 800671a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800671c:	4b02      	ldr	r3, [pc, #8]	; (8006728 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000050 	.word	0x20000050

0800672c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006734:	2182      	movs	r1, #130	; 0x82
 8006736:	4818      	ldr	r0, [pc, #96]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006738:	f000 fc9f 	bl	800707a <USBD_GetEpDesc>
 800673c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800673e:	2101      	movs	r1, #1
 8006740:	4815      	ldr	r0, [pc, #84]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006742:	f000 fc9a 	bl	800707a <USBD_GetEpDesc>
 8006746:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006748:	2181      	movs	r1, #129	; 0x81
 800674a:	4813      	ldr	r0, [pc, #76]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800674c:	f000 fc95 	bl	800707a <USBD_GetEpDesc>
 8006750:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2210      	movs	r2, #16
 800675c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2200      	movs	r2, #0
 8006768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800676c:	711a      	strb	r2, [r3, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006780:	711a      	strb	r2, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2243      	movs	r2, #67	; 0x43
 800678a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800678c:	4b02      	ldr	r3, [pc, #8]	; (8006798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000050 	.word	0x20000050

0800679c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	220a      	movs	r2, #10
 80067a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	2000000c 	.word	0x2000000c

080067bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e009      	b.n	80067e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	33b0      	adds	r3, #176	; 0xb0
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	32b0      	adds	r2, #176	; 0xb0
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	e008      	b.n	8006828 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	32b0      	adds	r2, #176	; 0xb0
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e004      	b.n	8006862 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32b0      	adds	r2, #176	; 0xb0
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32b0      	adds	r2, #176	; 0xb0
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	e018      	b.n	80068d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7c1b      	ldrb	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <USBD_CDC_ReceivePacket+0x68>)
 80068a8:	7819      	ldrb	r1, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 f8b1 	bl	8008a1c <USBD_LL_PrepareReceive>
 80068ba:	e008      	b.n	80068ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <USBD_CDC_ReceivePacket+0x68>)
 80068be:	7819      	ldrb	r1, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 f8a7 	bl	8008a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000094 	.word	0x20000094

080068dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e01f      	b.n	8006934 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	79fa      	ldrb	r2, [r7, #7]
 8006926:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 fe7f 	bl	800862c <USBD_LL_Init>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006950:	2303      	movs	r3, #3
 8006952:	e025      	b.n	80069a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	32ae      	adds	r2, #174	; 0xae
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00f      	beq.n	8006990 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32ae      	adds	r2, #174	; 0xae
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	f107 020e 	add.w	r2, r7, #14
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	4602      	mov	r2, r0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe87 	bl	80086c4 <USBD_LL_Start>
 80069b6:	4603      	mov	r3, r0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	4611      	mov	r1, r2
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a34:	2303      	movs	r3, #3
 8006a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f938 	bl	8007cca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d01a      	beq.n	8006ab4 <USBD_LL_SetupStage+0x72>
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d822      	bhi.n	8006ac8 <USBD_LL_SetupStage+0x86>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <USBD_LL_SetupStage+0x4a>
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d00a      	beq.n	8006aa0 <USBD_LL_SetupStage+0x5e>
 8006a8a:	e01d      	b.n	8006ac8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fb65 	bl	8007164 <USBD_StdDevReq>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9e:	e020      	b.n	8006ae2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fbcd 	bl	8007248 <USBD_StdItfReq>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab2:	e016      	b.n	8006ae2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fc2f 	bl	8007320 <USBD_StdEPReq>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac6:	e00c      	b.n	8006ae2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fe9a 	bl	8008810 <USBD_LL_StallEP>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae0:	bf00      	nop
  }

  return ret;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	460b      	mov	r3, r1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d16e      	bne.n	8006be2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	f040 8098 	bne.w	8006c48 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d913      	bls.n	8006b4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	1ad2      	subs	r2, r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bf28      	it	cs
 8006b3e:	4613      	movcs	r3, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f001 f9b4 	bl	8007eb2 <USBD_CtlContinueRx>
 8006b4a:	e07d      	b.n	8006c48 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d014      	beq.n	8006b84 <USBD_LL_DataOutStage+0x98>
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d81d      	bhi.n	8006b9a <USBD_LL_DataOutStage+0xae>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <USBD_LL_DataOutStage+0x7c>
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d003      	beq.n	8006b6e <USBD_LL_DataOutStage+0x82>
 8006b66:	e018      	b.n	8006b9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b6c:	e018      	b.n	8006ba0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fa64 	bl	8007046 <USBD_CoreFindIF>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75bb      	strb	r3, [r7, #22]
            break;
 8006b82:	e00d      	b.n	8006ba0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fa66 	bl	8007060 <USBD_CoreFindEP>
 8006b94:	4603      	mov	r3, r0
 8006b96:	75bb      	strb	r3, [r7, #22]
            break;
 8006b98:	e002      	b.n	8006ba0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ba0:	7dbb      	ldrb	r3, [r7, #22]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d119      	bne.n	8006bda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d113      	bne.n	8006bda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006bb2:	7dba      	ldrb	r2, [r7, #22]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	32ae      	adds	r2, #174	; 0xae
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006bc2:	7dba      	ldrb	r2, [r7, #22]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bca:	7dba      	ldrb	r2, [r7, #22]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	32ae      	adds	r2, #174	; 0xae
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f001 f97a 	bl	8007ed4 <USBD_CtlSendStatus>
 8006be0:	e032      	b.n	8006c48 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fa37 	bl	8007060 <USBD_CoreFindEP>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bf6:	7dbb      	ldrb	r3, [r7, #22]
 8006bf8:	2bff      	cmp	r3, #255	; 0xff
 8006bfa:	d025      	beq.n	8006c48 <USBD_LL_DataOutStage+0x15c>
 8006bfc:	7dbb      	ldrb	r3, [r7, #22]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d122      	bne.n	8006c48 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d117      	bne.n	8006c3e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c0e:	7dba      	ldrb	r2, [r7, #22]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	32ae      	adds	r2, #174	; 0xae
 8006c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00f      	beq.n	8006c3e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c1e:	7dba      	ldrb	r2, [r7, #22]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c26:	7dba      	ldrb	r2, [r7, #22]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	32ae      	adds	r2, #174	; 0xae
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	7afa      	ldrb	r2, [r7, #11]
 8006c34:	4611      	mov	r1, r2
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	e000      	b.n	8006c4a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b086      	sub	sp, #24
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c60:	7afb      	ldrb	r3, [r7, #11]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d16f      	bne.n	8006d46 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3314      	adds	r3, #20
 8006c6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d15a      	bne.n	8006d2c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d914      	bls.n	8006cac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	1ad2      	subs	r2, r2, r3
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 f8dc 	bl	8007e56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f001 feb9 	bl	8008a1c <USBD_LL_PrepareReceive>
 8006caa:	e03f      	b.n	8006d2c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d11c      	bne.n	8006cf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d316      	bcc.n	8006cf2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d20f      	bcs.n	8006cf2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f001 f8bd 	bl	8007e56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2100      	movs	r1, #0
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f001 fe96 	bl	8008a1c <USBD_LL_PrepareReceive>
 8006cf0:	e01c      	b.n	8006d2c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d10f      	bne.n	8006d1e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f001 fd75 	bl	8008810 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f001 f8e7 	bl	8007efa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03a      	beq.n	8006dac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fe42 	bl	80069c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d44:	e032      	b.n	8006dac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d46:	7afb      	ldrb	r3, [r7, #11]
 8006d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	4619      	mov	r1, r3
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f985 	bl	8007060 <USBD_CoreFindEP>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	2bff      	cmp	r3, #255	; 0xff
 8006d5e:	d025      	beq.n	8006dac <USBD_LL_DataInStage+0x15a>
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d122      	bne.n	8006dac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d11c      	bne.n	8006dac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d72:	7dfa      	ldrb	r2, [r7, #23]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	32ae      	adds	r2, #174	; 0xae
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d82:	7dfa      	ldrb	r2, [r7, #23]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d8a:	7dfa      	ldrb	r2, [r7, #23]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	32ae      	adds	r2, #174	; 0xae
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	7afa      	ldrb	r2, [r7, #11]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	4798      	blx	r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006da8:	7dbb      	ldrb	r3, [r7, #22]
 8006daa:	e000      	b.n	8006dae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d014      	beq.n	8006e1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6852      	ldr	r2, [r2, #4]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e1c:	2340      	movs	r3, #64	; 0x40
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fc80 	bl	8008728 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2240      	movs	r2, #64	; 0x40
 8006e34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fc72 	bl	8008728 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2240      	movs	r2, #64	; 0x40
 8006e4e:	621a      	str	r2, [r3, #32]

  return ret;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d006      	beq.n	8006e9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d106      	bne.n	8006ed4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d110      	bne.n	8006f18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	32ae      	adds	r2, #174	; 0xae
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e01c      	b.n	8006f7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d115      	bne.n	8006f7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32ae      	adds	r2, #174	; 0xae
 8006f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	; 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	78fa      	ldrb	r2, [r7, #3]
 8006f76:	4611      	mov	r1, r2
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	32ae      	adds	r2, #174	; 0xae
 8006f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e01c      	b.n	8006fe2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d115      	bne.n	8006fe0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	32ae      	adds	r2, #174	; 0xae
 8006fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32ae      	adds	r2, #174	; 0xae
 8006fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	78fa      	ldrb	r2, [r7, #3]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6852      	ldr	r2, [r2, #4]
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	4611      	mov	r1, r2
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007052:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800706c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b086      	sub	sp, #24
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	885b      	ldrh	r3, [r3, #2]
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	429a      	cmp	r2, r3
 80070a0:	d920      	bls.n	80070e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070aa:	e013      	b.n	80070d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070ac:	f107 030a 	add.w	r3, r7, #10
 80070b0:	4619      	mov	r1, r3
 80070b2:	6978      	ldr	r0, [r7, #20]
 80070b4:	f000 f81b 	bl	80070ee <USBD_GetNextDesc>
 80070b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d108      	bne.n	80070d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	789b      	ldrb	r3, [r3, #2]
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d008      	beq.n	80070e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	885b      	ldrh	r3, [r3, #2]
 80070d8:	b29a      	uxth	r2, r3
 80070da:	897b      	ldrh	r3, [r7, #10]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d8e5      	bhi.n	80070ac <USBD_GetEpDesc+0x32>
 80070e0:	e000      	b.n	80070e4 <USBD_GetEpDesc+0x6a>
          break;
 80070e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070e4:	693b      	ldr	r3, [r7, #16]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	881a      	ldrh	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	4413      	add	r3, r2
 8007108:	b29a      	uxth	r2, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4413      	add	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800711a:	68fb      	ldr	r3, [r7, #12]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	3301      	adds	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007146:	8a3b      	ldrh	r3, [r7, #16]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	b21a      	sxth	r2, r3
 800714c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007150:	4313      	orrs	r3, r2
 8007152:	b21b      	sxth	r3, r3
 8007154:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007156:	89fb      	ldrh	r3, [r7, #14]
}
 8007158:	4618      	mov	r0, r3
 800715a:	371c      	adds	r7, #28
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d005      	beq.n	800718a <USBD_StdDevReq+0x26>
 800717e:	2b40      	cmp	r3, #64	; 0x40
 8007180:	d857      	bhi.n	8007232 <USBD_StdDevReq+0xce>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <USBD_StdDevReq+0x42>
 8007186:	2b20      	cmp	r3, #32
 8007188:	d153      	bne.n	8007232 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	32ae      	adds	r2, #174	; 0xae
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
      break;
 80071a4:	e04a      	b.n	800723c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	d83b      	bhi.n	8007226 <USBD_StdDevReq+0xc2>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USBD_StdDevReq+0x50>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	08007209 	.word	0x08007209
 80071b8:	0800721d 	.word	0x0800721d
 80071bc:	08007227 	.word	0x08007227
 80071c0:	08007213 	.word	0x08007213
 80071c4:	08007227 	.word	0x08007227
 80071c8:	080071e7 	.word	0x080071e7
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	08007227 	.word	0x08007227
 80071d4:	080071ff 	.word	0x080071ff
 80071d8:	080071f1 	.word	0x080071f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa3c 	bl	800765c <USBD_GetDescriptor>
          break;
 80071e4:	e024      	b.n	8007230 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fbcb 	bl	8007984 <USBD_SetAddress>
          break;
 80071ee:	e01f      	b.n	8007230 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fc0a 	bl	8007a0c <USBD_SetConfig>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
          break;
 80071fc:	e018      	b.n	8007230 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fcad 	bl	8007b60 <USBD_GetConfig>
          break;
 8007206:	e013      	b.n	8007230 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fcde 	bl	8007bcc <USBD_GetStatus>
          break;
 8007210:	e00e      	b.n	8007230 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fd0d 	bl	8007c34 <USBD_SetFeature>
          break;
 800721a:	e009      	b.n	8007230 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fd31 	bl	8007c86 <USBD_ClrFeature>
          break;
 8007224:	e004      	b.n	8007230 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fd88 	bl	8007d3e <USBD_CtlError>
          break;
 800722e:	bf00      	nop
      }
      break;
 8007230:	e004      	b.n	800723c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fd82 	bl	8007d3e <USBD_CtlError>
      break;
 800723a:	bf00      	nop
  }

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop

08007248 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d005      	beq.n	800726e <USBD_StdItfReq+0x26>
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d852      	bhi.n	800730c <USBD_StdItfReq+0xc4>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <USBD_StdItfReq+0x26>
 800726a:	2b20      	cmp	r3, #32
 800726c:	d14e      	bne.n	800730c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	2b02      	cmp	r3, #2
 800727a:	d840      	bhi.n	80072fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	889b      	ldrh	r3, [r3, #4]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d836      	bhi.n	80072f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fed9 	bl	8007046 <USBD_CoreFindIF>
 8007294:	4603      	mov	r3, r0
 8007296:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2bff      	cmp	r3, #255	; 0xff
 800729c:	d01d      	beq.n	80072da <USBD_StdItfReq+0x92>
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11a      	bne.n	80072da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072a4:	7bba      	ldrb	r2, [r7, #14]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32ae      	adds	r2, #174	; 0xae
 80072aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00f      	beq.n	80072d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072b4:	7bba      	ldrb	r2, [r7, #14]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072bc:	7bba      	ldrb	r2, [r7, #14]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	32ae      	adds	r2, #174	; 0xae
 80072c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072d2:	e004      	b.n	80072de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072d8:	e001      	b.n	80072de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d110      	bne.n	8007308 <USBD_StdItfReq+0xc0>
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fdf1 	bl	8007ed4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072f2:	e009      	b.n	8007308 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fd21 	bl	8007d3e <USBD_CtlError>
          break;
 80072fc:	e004      	b.n	8007308 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fd1c 	bl	8007d3e <USBD_CtlError>
          break;
 8007306:	e000      	b.n	800730a <USBD_StdItfReq+0xc2>
          break;
 8007308:	bf00      	nop
      }
      break;
 800730a:	e004      	b.n	8007316 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fd15 	bl	8007d3e <USBD_CtlError>
      break;
 8007314:	bf00      	nop
  }

  return ret;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	889b      	ldrh	r3, [r3, #4]
 8007332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d007      	beq.n	8007350 <USBD_StdEPReq+0x30>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	f200 817f 	bhi.w	8007644 <USBD_StdEPReq+0x324>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02a      	beq.n	80073a0 <USBD_StdEPReq+0x80>
 800734a:	2b20      	cmp	r3, #32
 800734c:	f040 817a 	bne.w	8007644 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fe83 	bl	8007060 <USBD_CoreFindEP>
 800735a:	4603      	mov	r3, r0
 800735c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800735e:	7b7b      	ldrb	r3, [r7, #13]
 8007360:	2bff      	cmp	r3, #255	; 0xff
 8007362:	f000 8174 	beq.w	800764e <USBD_StdEPReq+0x32e>
 8007366:	7b7b      	ldrb	r3, [r7, #13]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 8170 	bne.w	800764e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800736e:	7b7a      	ldrb	r2, [r7, #13]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007376:	7b7a      	ldrb	r2, [r7, #13]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	32ae      	adds	r2, #174	; 0xae
 800737c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8163 	beq.w	800764e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007388:	7b7a      	ldrb	r2, [r7, #13]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32ae      	adds	r2, #174	; 0xae
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800739e:	e156      	b.n	800764e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d008      	beq.n	80073ba <USBD_StdEPReq+0x9a>
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	f300 8145 	bgt.w	8007638 <USBD_StdEPReq+0x318>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 809b 	beq.w	80074ea <USBD_StdEPReq+0x1ca>
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d03c      	beq.n	8007432 <USBD_StdEPReq+0x112>
 80073b8:	e13e      	b.n	8007638 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d002      	beq.n	80073cc <USBD_StdEPReq+0xac>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d016      	beq.n	80073f8 <USBD_StdEPReq+0xd8>
 80073ca:	e02c      	b.n	8007426 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00d      	beq.n	80073ee <USBD_StdEPReq+0xce>
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d00a      	beq.n	80073ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fa17 	bl	8008810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fa13 	bl	8008810 <USBD_LL_StallEP>
 80073ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073ec:	e020      	b.n	8007430 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fca4 	bl	8007d3e <USBD_CtlError>
              break;
 80073f6:	e01b      	b.n	8007430 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	885b      	ldrh	r3, [r3, #2]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10e      	bne.n	800741e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <USBD_StdEPReq+0xfe>
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b80      	cmp	r3, #128	; 0x80
 800740a:	d008      	beq.n	800741e <USBD_StdEPReq+0xfe>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	88db      	ldrh	r3, [r3, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f9f9 	bl	8008810 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fd58 	bl	8007ed4 <USBD_CtlSendStatus>

              break;
 8007424:	e004      	b.n	8007430 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc88 	bl	8007d3e <USBD_CtlError>
              break;
 800742e:	bf00      	nop
          }
          break;
 8007430:	e107      	b.n	8007642 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d002      	beq.n	8007444 <USBD_StdEPReq+0x124>
 800743e:	2b03      	cmp	r3, #3
 8007440:	d016      	beq.n	8007470 <USBD_StdEPReq+0x150>
 8007442:	e04b      	b.n	80074dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <USBD_StdEPReq+0x146>
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d00a      	beq.n	8007466 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f9db 	bl	8008810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f9d7 	bl	8008810 <USBD_LL_StallEP>
 8007462:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007464:	e040      	b.n	80074e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc68 	bl	8007d3e <USBD_CtlError>
              break;
 800746e:	e03b      	b.n	80074e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	885b      	ldrh	r3, [r3, #2]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d136      	bne.n	80074e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f9f8 	bl	800887c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fd21 	bl	8007ed4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fde2 	bl	8007060 <USBD_CoreFindEP>
 800749c:	4603      	mov	r3, r0
 800749e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074a0:	7b7b      	ldrb	r3, [r7, #13]
 80074a2:	2bff      	cmp	r3, #255	; 0xff
 80074a4:	d01f      	beq.n	80074e6 <USBD_StdEPReq+0x1c6>
 80074a6:	7b7b      	ldrb	r3, [r7, #13]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11c      	bne.n	80074e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074ac:	7b7a      	ldrb	r2, [r7, #13]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074b4:	7b7a      	ldrb	r2, [r7, #13]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	; 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d010      	beq.n	80074e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074c4:	7b7a      	ldrb	r2, [r7, #13]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32ae      	adds	r2, #174	; 0xae
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80074da:	e004      	b.n	80074e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fc2d 	bl	8007d3e <USBD_CtlError>
              break;
 80074e4:	e000      	b.n	80074e8 <USBD_StdEPReq+0x1c8>
              break;
 80074e6:	bf00      	nop
          }
          break;
 80074e8:	e0ab      	b.n	8007642 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d002      	beq.n	80074fc <USBD_StdEPReq+0x1dc>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d032      	beq.n	8007560 <USBD_StdEPReq+0x240>
 80074fa:	e097      	b.n	800762c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <USBD_StdEPReq+0x1f2>
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d004      	beq.n	8007512 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fc17 	bl	8007d3e <USBD_CtlError>
                break;
 8007510:	e091      	b.n	8007636 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007516:	2b00      	cmp	r3, #0
 8007518:	da0b      	bge.n	8007532 <USBD_StdEPReq+0x212>
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	3310      	adds	r3, #16
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	3304      	adds	r3, #4
 8007530:	e00b      	b.n	800754a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4413      	add	r3, r2
 8007548:	3304      	adds	r3, #4
 800754a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2202      	movs	r2, #2
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc61 	bl	8007e20 <USBD_CtlSendData>
              break;
 800755e:	e06a      	b.n	8007636 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007564:	2b00      	cmp	r3, #0
 8007566:	da11      	bge.n	800758c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	f003 020f 	and.w	r2, r3, #15
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	3324      	adds	r3, #36	; 0x24
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d117      	bne.n	80075b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fbda 	bl	8007d3e <USBD_CtlError>
                  break;
 800758a:	e054      	b.n	8007636 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	f003 020f 	and.w	r2, r3, #15
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fbc7 	bl	8007d3e <USBD_CtlError>
                  break;
 80075b0:	e041      	b.n	8007636 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da0b      	bge.n	80075d2 <USBD_StdEPReq+0x2b2>
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	3310      	adds	r3, #16
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	3304      	adds	r3, #4
 80075d0:	e00b      	b.n	80075ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075d8:	4613      	mov	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	3304      	adds	r3, #4
 80075ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <USBD_StdEPReq+0x2d8>
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	2b80      	cmp	r3, #128	; 0x80
 80075f6:	d103      	bne.n	8007600 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e00e      	b.n	800761e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f96f 	bl	80088e8 <USBD_LL_IsStallEP>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e002      	b.n	800761e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2202      	movs	r2, #2
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fbfb 	bl	8007e20 <USBD_CtlSendData>
              break;
 800762a:	e004      	b.n	8007636 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb85 	bl	8007d3e <USBD_CtlError>
              break;
 8007634:	bf00      	nop
          }
          break;
 8007636:	e004      	b.n	8007642 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fb7f 	bl	8007d3e <USBD_CtlError>
          break;
 8007640:	bf00      	nop
      }
      break;
 8007642:	e005      	b.n	8007650 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fb79 	bl	8007d3e <USBD_CtlError>
      break;
 800764c:	e000      	b.n	8007650 <USBD_StdEPReq+0x330>
      break;
 800764e:	bf00      	nop
  }

  return ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	2b0e      	cmp	r3, #14
 800767e:	f200 8152 	bhi.w	8007926 <USBD_GetDescriptor+0x2ca>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_GetDescriptor+0x2c>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076f9 	.word	0x080076f9
 800768c:	08007711 	.word	0x08007711
 8007690:	08007751 	.word	0x08007751
 8007694:	08007927 	.word	0x08007927
 8007698:	08007927 	.word	0x08007927
 800769c:	080078c7 	.word	0x080078c7
 80076a0:	080078f3 	.word	0x080078f3
 80076a4:	08007927 	.word	0x08007927
 80076a8:	08007927 	.word	0x08007927
 80076ac:	08007927 	.word	0x08007927
 80076b0:	08007927 	.word	0x08007927
 80076b4:	08007927 	.word	0x08007927
 80076b8:	08007927 	.word	0x08007927
 80076bc:	08007927 	.word	0x08007927
 80076c0:	080076c5 	.word	0x080076c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e6:	e126      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb27 	bl	8007d3e <USBD_CtlError>
        err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
      break;
 80076f6:	e11e      	b.n	8007936 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
      break;
 800770e:	e112      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7c1b      	ldrb	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10d      	bne.n	8007734 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f107 0208 	add.w	r2, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	2202      	movs	r2, #2
 8007730:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007732:	e100      	b.n	8007936 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	f107 0208 	add.w	r2, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	2202      	movs	r2, #2
 800774c:	701a      	strb	r2, [r3, #0]
      break;
 800774e:	e0f2      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	885b      	ldrh	r3, [r3, #2]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b05      	cmp	r3, #5
 8007758:	f200 80ac 	bhi.w	80078b4 <USBD_GetDescriptor+0x258>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_GetDescriptor+0x108>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	0800777d 	.word	0x0800777d
 8007768:	080077b1 	.word	0x080077b1
 800776c:	080077e5 	.word	0x080077e5
 8007770:	08007819 	.word	0x08007819
 8007774:	0800784d 	.word	0x0800784d
 8007778:	08007881 	.word	0x08007881
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 0108 	add.w	r1, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779e:	e091      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 facb 	bl	8007d3e <USBD_CtlError>
            err++;
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	3301      	adds	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
          break;
 80077ae:	e089      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d2:	e077      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fab1 	bl	8007d3e <USBD_CtlError>
            err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
          break;
 80077e2:	e06f      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	7c12      	ldrb	r2, [r2, #16]
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007806:	e05d      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa97 	bl	8007d3e <USBD_CtlError>
            err++;
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	3301      	adds	r3, #1
 8007814:	72fb      	strb	r3, [r7, #11]
          break;
 8007816:	e055      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	7c12      	ldrb	r2, [r2, #16]
 8007830:	f107 0108 	add.w	r1, r7, #8
 8007834:	4610      	mov	r0, r2
 8007836:	4798      	blx	r3
 8007838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800783a:	e043      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa7d 	bl	8007d3e <USBD_CtlError>
            err++;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	3301      	adds	r3, #1
 8007848:	72fb      	strb	r3, [r7, #11]
          break;
 800784a:	e03b      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	7c12      	ldrb	r2, [r2, #16]
 8007864:	f107 0108 	add.w	r1, r7, #8
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800786e:	e029      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa63 	bl	8007d3e <USBD_CtlError>
            err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
          break;
 800787e:	e021      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a2:	e00f      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa49 	bl	8007d3e <USBD_CtlError>
            err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
          break;
 80078b2:	e007      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa41 	bl	8007d3e <USBD_CtlError>
          err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078c2:	bf00      	nop
      }
      break;
 80078c4:	e037      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7c1b      	ldrb	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	f107 0208 	add.w	r2, r7, #8
 80078da:	4610      	mov	r0, r2
 80078dc:	4798      	blx	r3
 80078de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078e0:	e029      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa2a 	bl	8007d3e <USBD_CtlError>
        err++;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	3301      	adds	r3, #1
 80078ee:	72fb      	strb	r3, [r7, #11]
      break;
 80078f0:	e021      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c1b      	ldrb	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10d      	bne.n	8007916 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	4610      	mov	r0, r2
 8007908:	4798      	blx	r3
 800790a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	2207      	movs	r2, #7
 8007912:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007914:	e00f      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fa10 	bl	8007d3e <USBD_CtlError>
        err++;
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	3301      	adds	r3, #1
 8007922:	72fb      	strb	r3, [r7, #11]
      break;
 8007924:	e007      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fa08 	bl	8007d3e <USBD_CtlError>
      err++;
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	3301      	adds	r3, #1
 8007932:	72fb      	strb	r3, [r7, #11]
      break;
 8007934:	bf00      	nop
  }

  if (err != 0U)
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11e      	bne.n	800797a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	88db      	ldrh	r3, [r3, #6]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d016      	beq.n	8007972 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007944:	893b      	ldrh	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88da      	ldrh	r2, [r3, #6]
 800794e:	893b      	ldrh	r3, [r7, #8]
 8007950:	4293      	cmp	r3, r2
 8007952:	bf28      	it	cs
 8007954:	4613      	movcs	r3, r2
 8007956:	b29b      	uxth	r3, r3
 8007958:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800795a:	893b      	ldrh	r3, [r7, #8]
 800795c:	461a      	mov	r2, r3
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa5d 	bl	8007e20 <USBD_CtlSendData>
 8007966:	e009      	b.n	800797c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9e7 	bl	8007d3e <USBD_CtlError>
 8007970:	e004      	b.n	800797c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 faae 	bl	8007ed4 <USBD_CtlSendStatus>
 8007978:	e000      	b.n	800797c <USBD_GetDescriptor+0x320>
    return;
 800797a:	bf00      	nop
  }
}
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop

08007984 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d131      	bne.n	80079fa <USBD_SetAddress+0x76>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d12d      	bne.n	80079fa <USBD_SetAddress+0x76>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	2b7f      	cmp	r3, #127	; 0x7f
 80079a4:	d829      	bhi.n	80079fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d104      	bne.n	80079c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9bc 	bl	8007d3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c6:	e01d      	b.n	8007a04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7bfa      	ldrb	r2, [r7, #15]
 80079cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 ffb3 	bl	8008940 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa7a 	bl	8007ed4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	e009      	b.n	8007a04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f8:	e004      	b.n	8007a04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f99e 	bl	8007d3e <USBD_CtlError>
  }
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	4b4e      	ldr	r3, [pc, #312]	; (8007b5c <USBD_SetConfig+0x150>)
 8007a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a24:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <USBD_SetConfig+0x150>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d905      	bls.n	8007a38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f985 	bl	8007d3e <USBD_CtlError>
    return USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e08c      	b.n	8007b52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d002      	beq.n	8007a4a <USBD_SetConfig+0x3e>
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d029      	beq.n	8007a9c <USBD_SetConfig+0x90>
 8007a48:	e075      	b.n	8007b36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a4a:	4b44      	ldr	r3, [pc, #272]	; (8007b5c <USBD_SetConfig+0x150>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d020      	beq.n	8007a94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a52:	4b42      	ldr	r3, [pc, #264]	; (8007b5c <USBD_SetConfig+0x150>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a5c:	4b3f      	ldr	r3, [pc, #252]	; (8007b5c <USBD_SetConfig+0x150>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fe ffb7 	bl	80069d6 <USBD_SetClassConfig>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f962 	bl	8007d3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a82:	e065      	b.n	8007b50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa25 	bl	8007ed4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a92:	e05d      	b.n	8007b50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa1d 	bl	8007ed4 <USBD_CtlSendStatus>
      break;
 8007a9a:	e059      	b.n	8007b50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a9c:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <USBD_SetConfig+0x150>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d112      	bne.n	8007aca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aac:	4b2b      	ldr	r3, [pc, #172]	; (8007b5c <USBD_SetConfig+0x150>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ab6:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <USBD_SetConfig+0x150>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fe ffa6 	bl	8006a0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa06 	bl	8007ed4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ac8:	e042      	b.n	8007b50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007aca:	4b24      	ldr	r3, [pc, #144]	; (8007b5c <USBD_SetConfig+0x150>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d02a      	beq.n	8007b2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7fe ff94 	bl	8006a0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <USBD_SetConfig+0x150>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007af0:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <USBD_SetConfig+0x150>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fe ff6d 	bl	80069d6 <USBD_SetClassConfig>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00f      	beq.n	8007b26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f918 	bl	8007d3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fe ff79 	bl	8006a0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b24:	e014      	b.n	8007b50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9d4 	bl	8007ed4 <USBD_CtlSendStatus>
      break;
 8007b2c:	e010      	b.n	8007b50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9d0 	bl	8007ed4 <USBD_CtlSendStatus>
      break;
 8007b34:	e00c      	b.n	8007b50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f900 	bl	8007d3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <USBD_SetConfig+0x150>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fe ff62 	bl	8006a0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4e:	bf00      	nop
  }

  return ret;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000020c 	.word	0x2000020c

08007b60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	88db      	ldrh	r3, [r3, #6]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d004      	beq.n	8007b7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8e2 	bl	8007d3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b7a:	e023      	b.n	8007bc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	dc02      	bgt.n	8007b8e <USBD_GetConfig+0x2e>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dc03      	bgt.n	8007b94 <USBD_GetConfig+0x34>
 8007b8c:	e015      	b.n	8007bba <USBD_GetConfig+0x5a>
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d00b      	beq.n	8007baa <USBD_GetConfig+0x4a>
 8007b92:	e012      	b.n	8007bba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f93c 	bl	8007e20 <USBD_CtlSendData>
        break;
 8007ba8:	e00c      	b.n	8007bc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3304      	adds	r3, #4
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f934 	bl	8007e20 <USBD_CtlSendData>
        break;
 8007bb8:	e004      	b.n	8007bc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8be 	bl	8007d3e <USBD_CtlError>
        break;
 8007bc2:	bf00      	nop
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d81e      	bhi.n	8007c22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	88db      	ldrh	r3, [r3, #6]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d004      	beq.n	8007bf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8a5 	bl	8007d3e <USBD_CtlError>
        break;
 8007bf4:	e01a      	b.n	8007c2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f043 0202 	orr.w	r2, r3, #2
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	330c      	adds	r3, #12
 8007c16:	2202      	movs	r2, #2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f900 	bl	8007e20 <USBD_CtlSendData>
      break;
 8007c20:	e004      	b.n	8007c2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f88a 	bl	8007d3e <USBD_CtlError>
      break;
 8007c2a:	bf00      	nop
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d107      	bne.n	8007c56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f940 	bl	8007ed4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c54:	e013      	b.n	8007c7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	885b      	ldrh	r3, [r3, #2]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d10b      	bne.n	8007c76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	889b      	ldrh	r3, [r3, #4]
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f930 	bl	8007ed4 <USBD_CtlSendStatus>
}
 8007c74:	e003      	b.n	8007c7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f860 	bl	8007d3e <USBD_CtlError>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d80b      	bhi.n	8007cb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	885b      	ldrh	r3, [r3, #2]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d10c      	bne.n	8007cc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f910 	bl	8007ed4 <USBD_CtlSendStatus>
      }
      break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f840 	bl	8007d3e <USBD_CtlError>
      break;
 8007cbe:	e000      	b.n	8007cc2 <USBD_ClrFeature+0x3c>
      break;
 8007cc0:	bf00      	nop
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fa17 	bl	8007128 <SWAPBYTE>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fa0a 	bl	8007128 <SWAPBYTE>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff f9fd 	bl	8007128 <SWAPBYTE>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	461a      	mov	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	80da      	strh	r2, [r3, #6]
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d48:	2180      	movs	r1, #128	; 0x80
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fd60 	bl	8008810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fd5c 	bl	8008810 <USBD_LL_StallEP>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d036      	beq.n	8007de4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d7a:	6938      	ldr	r0, [r7, #16]
 8007d7c:	f000 f836 	bl	8007dec <USBD_GetLen>
 8007d80:	4603      	mov	r3, r0
 8007d82:	3301      	adds	r3, #1
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	4413      	add	r3, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	2203      	movs	r2, #3
 8007da8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	3301      	adds	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007db0:	e013      	b.n	8007dda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
    idx++;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4413      	add	r3, r2
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e7      	bne.n	8007db2 <USBD_GetString+0x52>
 8007de2:	e000      	b.n	8007de6 <USBD_GetString+0x86>
    return;
 8007de4:	bf00      	nop
  }
}
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dfc:	e005      	b.n	8007e0a <USBD_GetLen+0x1e>
  {
    len++;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	3301      	adds	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f5      	bne.n	8007dfe <USBD_GetLen+0x12>
  }

  return len;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fdb0 	bl	80089ac <USBD_LL_Transmit>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fd9f 	bl	80089ac <USBD_LL_Transmit>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2203      	movs	r2, #3
 8007e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fdba 	bl	8008a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fda9 	bl	8008a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2204      	movs	r2, #4
 8007ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fd5e 	bl	80089ac <USBD_LL_Transmit>

  return USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2205      	movs	r2, #5
 8007f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fd83 	bl	8008a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4912      	ldr	r1, [pc, #72]	; (8007f70 <MX_USB_DEVICE_Init+0x50>)
 8007f28:	4812      	ldr	r0, [pc, #72]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f2a:	f7fe fcd7 	bl	80068dc <USBD_Init>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f34:	f7f8 ff40 	bl	8000db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f38:	490f      	ldr	r1, [pc, #60]	; (8007f78 <MX_USB_DEVICE_Init+0x58>)
 8007f3a:	480e      	ldr	r0, [pc, #56]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f3c:	f7fe fcfe 	bl	800693c <USBD_RegisterClass>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f46:	f7f8 ff37 	bl	8000db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f4a:	490c      	ldr	r1, [pc, #48]	; (8007f7c <MX_USB_DEVICE_Init+0x5c>)
 8007f4c:	4809      	ldr	r0, [pc, #36]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f4e:	f7fe fc35 	bl	80067bc <USBD_CDC_RegisterInterface>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f58:	f7f8 ff2e 	bl	8000db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f5c:	4805      	ldr	r0, [pc, #20]	; (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f5e:	f7fe fd23 	bl	80069a8 <USBD_Start>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f68:	f7f8 ff26 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f6c:	bf00      	nop
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	200000ac 	.word	0x200000ac
 8007f74:	20000210 	.word	0x20000210
 8007f78:	20000018 	.word	0x20000018
 8007f7c:	20000098 	.word	0x20000098

08007f80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f84:	2200      	movs	r2, #0
 8007f86:	4905      	ldr	r1, [pc, #20]	; (8007f9c <CDC_Init_FS+0x1c>)
 8007f88:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <CDC_Init_FS+0x20>)
 8007f8a:	f7fe fc31 	bl	80067f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f8e:	4905      	ldr	r1, [pc, #20]	; (8007fa4 <CDC_Init_FS+0x24>)
 8007f90:	4803      	ldr	r0, [pc, #12]	; (8007fa0 <CDC_Init_FS+0x20>)
 8007f92:	f7fe fc4f 	bl	8006834 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000cec 	.word	0x20000cec
 8007fa0:	20000210 	.word	0x20000210
 8007fa4:	200004ec 	.word	0x200004ec

08007fa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b23      	cmp	r3, #35	; 0x23
 8007fcc:	d84a      	bhi.n	8008064 <CDC_Control_FS+0xac>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <CDC_Control_FS+0x1c>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08008065 	.word	0x08008065
 8007fd8:	08008065 	.word	0x08008065
 8007fdc:	08008065 	.word	0x08008065
 8007fe0:	08008065 	.word	0x08008065
 8007fe4:	08008065 	.word	0x08008065
 8007fe8:	08008065 	.word	0x08008065
 8007fec:	08008065 	.word	0x08008065
 8007ff0:	08008065 	.word	0x08008065
 8007ff4:	08008065 	.word	0x08008065
 8007ff8:	08008065 	.word	0x08008065
 8007ffc:	08008065 	.word	0x08008065
 8008000:	08008065 	.word	0x08008065
 8008004:	08008065 	.word	0x08008065
 8008008:	08008065 	.word	0x08008065
 800800c:	08008065 	.word	0x08008065
 8008010:	08008065 	.word	0x08008065
 8008014:	08008065 	.word	0x08008065
 8008018:	08008065 	.word	0x08008065
 800801c:	08008065 	.word	0x08008065
 8008020:	08008065 	.word	0x08008065
 8008024:	08008065 	.word	0x08008065
 8008028:	08008065 	.word	0x08008065
 800802c:	08008065 	.word	0x08008065
 8008030:	08008065 	.word	0x08008065
 8008034:	08008065 	.word	0x08008065
 8008038:	08008065 	.word	0x08008065
 800803c:	08008065 	.word	0x08008065
 8008040:	08008065 	.word	0x08008065
 8008044:	08008065 	.word	0x08008065
 8008048:	08008065 	.word	0x08008065
 800804c:	08008065 	.word	0x08008065
 8008050:	08008065 	.word	0x08008065
 8008054:	08008065 	.word	0x08008065
 8008058:	08008065 	.word	0x08008065
 800805c:	08008065 	.word	0x08008065
 8008060:	08008065 	.word	0x08008065
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008064:	bf00      	nop
  }

  return (USBD_OK);
 8008066:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4805      	ldr	r0, [pc, #20]	; (8008098 <CDC_Receive_FS+0x24>)
 8008082:	f7fe fbd7 	bl	8006834 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008086:	4804      	ldr	r0, [pc, #16]	; (8008098 <CDC_Receive_FS+0x24>)
 8008088:	f7fe fbf2 	bl	8006870 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800808c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000210 	.word	0x20000210

0800809c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2212      	movs	r2, #18
 80080d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080d2:	4b03      	ldr	r3, [pc, #12]	; (80080e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	200000cc 	.word	0x200000cc

080080e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2204      	movs	r2, #4
 80080f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080f6:	4b03      	ldr	r3, [pc, #12]	; (8008104 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	200000ec 	.word	0x200000ec

08008108 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	4907      	ldr	r1, [pc, #28]	; (800813c <USBD_FS_ProductStrDescriptor+0x34>)
 800811e:	4808      	ldr	r0, [pc, #32]	; (8008140 <USBD_FS_ProductStrDescriptor+0x38>)
 8008120:	f7ff fe1e 	bl	8007d60 <USBD_GetString>
 8008124:	e004      	b.n	8008130 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	4904      	ldr	r1, [pc, #16]	; (800813c <USBD_FS_ProductStrDescriptor+0x34>)
 800812a:	4805      	ldr	r0, [pc, #20]	; (8008140 <USBD_FS_ProductStrDescriptor+0x38>)
 800812c:	f7ff fe18 	bl	8007d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	200014ec 	.word	0x200014ec
 8008140:	08008c14 	.word	0x08008c14

08008144 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	4904      	ldr	r1, [pc, #16]	; (8008164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008154:	4804      	ldr	r0, [pc, #16]	; (8008168 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008156:	f7ff fe03 	bl	8007d60 <USBD_GetString>
  return USBD_StrDesc;
 800815a:	4b02      	ldr	r3, [pc, #8]	; (8008164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	200014ec 	.word	0x200014ec
 8008168:	08008c2c 	.word	0x08008c2c

0800816c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	221a      	movs	r2, #26
 800817c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800817e:	f000 f855 	bl	800822c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008182:	4b02      	ldr	r3, [pc, #8]	; (800818c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	200000f0 	.word	0x200000f0

08008190 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d105      	bne.n	80081ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	4907      	ldr	r1, [pc, #28]	; (80081c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081a6:	4808      	ldr	r0, [pc, #32]	; (80081c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a8:	f7ff fdda 	bl	8007d60 <USBD_GetString>
 80081ac:	e004      	b.n	80081b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4904      	ldr	r1, [pc, #16]	; (80081c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081b2:	4805      	ldr	r0, [pc, #20]	; (80081c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b4:	f7ff fdd4 	bl	8007d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	200014ec 	.word	0x200014ec
 80081c8:	08008c40 	.word	0x08008c40

080081cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4907      	ldr	r1, [pc, #28]	; (8008200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081e2:	4808      	ldr	r0, [pc, #32]	; (8008204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e4:	f7ff fdbc 	bl	8007d60 <USBD_GetString>
 80081e8:	e004      	b.n	80081f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4904      	ldr	r1, [pc, #16]	; (8008200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ee:	4805      	ldr	r0, [pc, #20]	; (8008204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081f0:	f7ff fdb6 	bl	8007d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	200014ec 	.word	0x200014ec
 8008204:	08008c4c 	.word	0x08008c4c

08008208 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	220c      	movs	r2, #12
 8008218:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	200000e0 	.word	0x200000e0

0800822c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <Get_SerialNum+0x44>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008238:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <Get_SerialNum+0x48>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800823e:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <Get_SerialNum+0x4c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008252:	2208      	movs	r2, #8
 8008254:	4909      	ldr	r1, [pc, #36]	; (800827c <Get_SerialNum+0x50>)
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f814 	bl	8008284 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800825c:	2204      	movs	r2, #4
 800825e:	4908      	ldr	r1, [pc, #32]	; (8008280 <Get_SerialNum+0x54>)
 8008260:	68b8      	ldr	r0, [r7, #8]
 8008262:	f000 f80f 	bl	8008284 <IntToUnicode>
  }
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	1fff7590 	.word	0x1fff7590
 8008274:	1fff7594 	.word	0x1fff7594
 8008278:	1fff7598 	.word	0x1fff7598
 800827c:	200000f2 	.word	0x200000f2
 8008280:	20000102 	.word	0x20000102

08008284 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
 800829a:	e027      	b.n	80082ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	0f1b      	lsrs	r3, r3, #28
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	d80b      	bhi.n	80082bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	0f1b      	lsrs	r3, r3, #28
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4619      	mov	r1, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	440b      	add	r3, r1
 80082b4:	3230      	adds	r2, #48	; 0x30
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e00a      	b.n	80082d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	440b      	add	r3, r1
 80082cc:	3237      	adds	r2, #55	; 0x37
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	3301      	adds	r3, #1
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	3301      	adds	r3, #1
 80082ea:	75fb      	strb	r3, [r7, #23]
 80082ec:	7dfa      	ldrb	r2, [r7, #23]
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d3d3      	bcc.n	800829c <IntToUnicode+0x18>
  }
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b0ac      	sub	sp, #176	; 0xb0
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800830c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800831c:	f107 0314 	add.w	r3, r7, #20
 8008320:	2288      	movs	r2, #136	; 0x88
 8008322:	2100      	movs	r1, #0
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fc31 	bl	8008b8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008332:	d173      	bne.n	800841c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008338:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800833a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800833e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008342:	2301      	movs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800834a:	2318      	movs	r3, #24
 800834c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800834e:	2307      	movs	r3, #7
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008352:	2302      	movs	r3, #2
 8008354:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008356:	2302      	movs	r3, #2
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800835a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800835e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	4618      	mov	r0, r3
 8008366:	f7fb f95f 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008370:	f7f8 fd22 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008374:	4b2b      	ldr	r3, [pc, #172]	; (8008424 <HAL_PCD_MspInit+0x120>)
 8008376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008378:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <HAL_PCD_MspInit+0x120>)
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008380:	4b28      	ldr	r3, [pc, #160]	; (8008424 <HAL_PCD_MspInit+0x120>)
 8008382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800838c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008394:	2302      	movs	r3, #2
 8008396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839a:	2300      	movs	r3, #0
 800839c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083a0:	2303      	movs	r3, #3
 80083a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083a6:	230a      	movs	r3, #10
 80083a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80083b0:	4619      	mov	r1, r3
 80083b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083b6:	f7f8 ff87 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083ba:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	4a19      	ldr	r2, [pc, #100]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083c6:	4b17      	ldr	r3, [pc, #92]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083d2:	4b14      	ldr	r3, [pc, #80]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d114      	bne.n	8008408 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083de:	4b11      	ldr	r3, [pc, #68]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e2:	4a10      	ldr	r2, [pc, #64]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6593      	str	r3, [r2, #88]	; 0x58
 80083ea:	4b0e      	ldr	r3, [pc, #56]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80083f6:	f7fa fb35 	bl	8002a64 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <HAL_PCD_MspInit+0x120>)
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	4a09      	ldr	r2, [pc, #36]	; (8008424 <HAL_PCD_MspInit+0x120>)
 8008400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008404:	6593      	str	r3, [r2, #88]	; 0x58
 8008406:	e001      	b.n	800840c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008408:	f7fa fb2c 	bl	8002a64 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800840c:	2200      	movs	r2, #0
 800840e:	2100      	movs	r1, #0
 8008410:	2043      	movs	r0, #67	; 0x43
 8008412:	f7f8 ff22 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008416:	2043      	movs	r0, #67	; 0x43
 8008418:	f7f8 ff3b 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800841c:	bf00      	nop
 800841e:	37b0      	adds	r7, #176	; 0xb0
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40021000 	.word	0x40021000

08008428 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f7fe faff 	bl	8006a42 <USBD_LL_SetupStage>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4613      	mov	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	4619      	mov	r1, r3
 8008476:	f7fe fb39 	bl	8006aec <USBD_LL_DataOutStage>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	3348      	adds	r3, #72	; 0x48
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	4619      	mov	r1, r3
 80084aa:	f7fe fbd2 	bl	8006c52 <USBD_LL_DataInStage>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fd0c 	bl	8006ee2 <USBD_LL_SOF>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084da:	2301      	movs	r3, #1
 80084dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d001      	beq.n	80084ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084e6:	f7f8 fc67 	bl	8000db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084f0:	7bfa      	ldrb	r2, [r7, #15]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fcb0 	bl	8006e5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fc58 	bl	8006db6 <USBD_LL_Reset>
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6812      	ldr	r2, [r2, #0]
 8008526:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800852a:	f043 0301 	orr.w	r3, r3, #1
 800852e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fc9f 	bl	8006e7a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008544:	4b04      	ldr	r3, [pc, #16]	; (8008558 <HAL_PCD_SuspendCallback+0x48>)
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	4a03      	ldr	r2, [pc, #12]	; (8008558 <HAL_PCD_SuspendCallback+0x48>)
 800854a:	f043 0306 	orr.w	r3, r3, #6
 800854e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	e000ed00 	.word	0xe000ed00

0800855c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008584:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <HAL_PCD_ResumeCallback+0x4c>)
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	4a07      	ldr	r2, [pc, #28]	; (80085a8 <HAL_PCD_ResumeCallback+0x4c>)
 800858a:	f023 0306 	bic.w	r3, r3, #6
 800858e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008590:	f000 faf6 	bl	8008b80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fc89 	bl	8006eb2 <USBD_LL_Resume>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed00 	.word	0xe000ed00

080085ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fcdf 	bl	8006f86 <USBD_LL_IsoOUTIncomplete>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fc9b 	bl	8006f22 <USBD_LL_IsoINIncomplete>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe fcf1 	bl	8006fea <USBD_LL_DevConnected>
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fcee 	bl	8007000 <USBD_LL_DevDisconnected>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d13c      	bne.n	80086b6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800863c:	4a20      	ldr	r2, [pc, #128]	; (80086c0 <USBD_LL_Init+0x94>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <USBD_LL_Init+0x94>)
 8008648:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800864c:	4b1c      	ldr	r3, [pc, #112]	; (80086c0 <USBD_LL_Init+0x94>)
 800864e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008652:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008654:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <USBD_LL_Init+0x94>)
 8008656:	2206      	movs	r2, #6
 8008658:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800865a:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <USBD_LL_Init+0x94>)
 800865c:	2202      	movs	r2, #2
 800865e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008660:	4b17      	ldr	r3, [pc, #92]	; (80086c0 <USBD_LL_Init+0x94>)
 8008662:	2202      	movs	r2, #2
 8008664:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008666:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <USBD_LL_Init+0x94>)
 8008668:	2200      	movs	r2, #0
 800866a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <USBD_LL_Init+0x94>)
 800866e:	2200      	movs	r2, #0
 8008670:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008672:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <USBD_LL_Init+0x94>)
 8008674:	2200      	movs	r2, #0
 8008676:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008678:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <USBD_LL_Init+0x94>)
 800867a:	2200      	movs	r2, #0
 800867c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800867e:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <USBD_LL_Init+0x94>)
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <USBD_LL_Init+0x94>)
 8008686:	2200      	movs	r2, #0
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800868a:	480d      	ldr	r0, [pc, #52]	; (80086c0 <USBD_LL_Init+0x94>)
 800868c:	f7f8 ffde 	bl	800164c <HAL_PCD_Init>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008696:	f7f8 fb8f 	bl	8000db8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	4808      	ldr	r0, [pc, #32]	; (80086c0 <USBD_LL_Init+0x94>)
 800869e:	f7fa f948 	bl	8002932 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086a2:	2240      	movs	r2, #64	; 0x40
 80086a4:	2100      	movs	r1, #0
 80086a6:	4806      	ldr	r0, [pc, #24]	; (80086c0 <USBD_LL_Init+0x94>)
 80086a8:	f7fa f8fc 	bl	80028a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086ac:	2280      	movs	r2, #128	; 0x80
 80086ae:	2101      	movs	r1, #1
 80086b0:	4803      	ldr	r0, [pc, #12]	; (80086c0 <USBD_LL_Init+0x94>)
 80086b2:	f7fa f8f7 	bl	80028a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	200016ec 	.word	0x200016ec

080086c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f9 f8da 	bl	8001894 <HAL_PCD_Start>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d816      	bhi.n	8008718 <USBD_LL_Start+0x54>
 80086ea:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <USBD_LL_Start+0x2c>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008707 	.word	0x08008707
 80086f8:	0800870d 	.word	0x0800870d
 80086fc:	08008713 	.word	0x08008713
    case HAL_OK :
      usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
    break;
 8008704:	e00b      	b.n	800871e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	73fb      	strb	r3, [r7, #15]
    break;
 800870a:	e008      	b.n	800871e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800870c:	2301      	movs	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
    break;
 8008710:	e005      	b.n	800871e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008712:	2303      	movs	r3, #3
 8008714:	73fb      	strb	r3, [r7, #15]
    break;
 8008716:	e002      	b.n	800871e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008718:	2303      	movs	r3, #3
 800871a:	73fb      	strb	r3, [r7, #15]
    break;
 800871c:	bf00      	nop
  }
  return usb_status;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	4608      	mov	r0, r1
 8008732:	4611      	mov	r1, r2
 8008734:	461a      	mov	r2, r3
 8008736:	4603      	mov	r3, r0
 8008738:	70fb      	strb	r3, [r7, #3]
 800873a:	460b      	mov	r3, r1
 800873c:	70bb      	strb	r3, [r7, #2]
 800873e:	4613      	mov	r3, r2
 8008740:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008750:	78bb      	ldrb	r3, [r7, #2]
 8008752:	883a      	ldrh	r2, [r7, #0]
 8008754:	78f9      	ldrb	r1, [r7, #3]
 8008756:	f7f9 fd84 	bl	8002262 <HAL_PCD_EP_Open>
 800875a:	4603      	mov	r3, r0
 800875c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	2b03      	cmp	r3, #3
 8008762:	d817      	bhi.n	8008794 <USBD_LL_OpenEP+0x6c>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <USBD_LL_OpenEP+0x44>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	0800877d 	.word	0x0800877d
 8008770:	08008783 	.word	0x08008783
 8008774:	08008789 	.word	0x08008789
 8008778:	0800878f 	.word	0x0800878f
    case HAL_OK :
      usb_status = USBD_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
    break;
 8008780:	e00b      	b.n	800879a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008782:	2303      	movs	r3, #3
 8008784:	73fb      	strb	r3, [r7, #15]
    break;
 8008786:	e008      	b.n	800879a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
    break;
 800878c:	e005      	b.n	800879a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800878e:	2303      	movs	r3, #3
 8008790:	73fb      	strb	r3, [r7, #15]
    break;
 8008792:	e002      	b.n	800879a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008794:	2303      	movs	r3, #3
 8008796:	73fb      	strb	r3, [r7, #15]
    break;
 8008798:	bf00      	nop
  }
  return usb_status;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 fdb5 	bl	8002332 <HAL_PCD_EP_Close>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d816      	bhi.n	8008800 <USBD_LL_CloseEP+0x5c>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <USBD_LL_CloseEP+0x34>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087ef 	.word	0x080087ef
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	080087fb 	.word	0x080087fb
    case HAL_OK :
      usb_status = USBD_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
    break;
 80087ec:	e00b      	b.n	8008806 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ee:	2303      	movs	r3, #3
 80087f0:	73fb      	strb	r3, [r7, #15]
    break;
 80087f2:	e008      	b.n	8008806 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
    break;
 80087f8:	e005      	b.n	8008806 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087fa:	2303      	movs	r3, #3
 80087fc:	73fb      	strb	r3, [r7, #15]
    break;
 80087fe:	e002      	b.n	8008806 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008800:	2303      	movs	r3, #3
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	bf00      	nop
  }
  return usb_status;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7f9 fe44 	bl	80024bc <HAL_PCD_EP_SetStall>
 8008834:	4603      	mov	r3, r0
 8008836:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b03      	cmp	r3, #3
 800883c:	d816      	bhi.n	800886c <USBD_LL_StallEP+0x5c>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <USBD_LL_StallEP+0x34>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008855 	.word	0x08008855
 8008848:	0800885b 	.word	0x0800885b
 800884c:	08008861 	.word	0x08008861
 8008850:	08008867 	.word	0x08008867
    case HAL_OK :
      usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
    break;
 8008858:	e00b      	b.n	8008872 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800885a:	2303      	movs	r3, #3
 800885c:	73fb      	strb	r3, [r7, #15]
    break;
 800885e:	e008      	b.n	8008872 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
    break;
 8008864:	e005      	b.n	8008872 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008866:	2303      	movs	r3, #3
 8008868:	73fb      	strb	r3, [r7, #15]
    break;
 800886a:	e002      	b.n	8008872 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800886c:	2303      	movs	r3, #3
 800886e:	73fb      	strb	r3, [r7, #15]
    break;
 8008870:	bf00      	nop
  }
  return usb_status;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f7f9 fe70 	bl	8002580 <HAL_PCD_EP_ClrStall>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d816      	bhi.n	80088d8 <USBD_LL_ClearStallEP+0x5c>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_LL_ClearStallEP+0x34>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088c1 	.word	0x080088c1
 80088b4:	080088c7 	.word	0x080088c7
 80088b8:	080088cd 	.word	0x080088cd
 80088bc:	080088d3 	.word	0x080088d3
    case HAL_OK :
      usb_status = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
    break;
 80088c4:	e00b      	b.n	80088de <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088c6:	2303      	movs	r3, #3
 80088c8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ca:	e008      	b.n	80088de <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
    break;
 80088d0:	e005      	b.n	80088de <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	73fb      	strb	r3, [r7, #15]
    break;
 80088d6:	e002      	b.n	80088de <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	73fb      	strb	r3, [r7, #15]
    break;
 80088dc:	bf00      	nop
  }
  return usb_status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008900:	2b00      	cmp	r3, #0
 8008902:	da0b      	bge.n	800891c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	333e      	adds	r3, #62	; 0x3e
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	e00b      	b.n	8008934 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008932:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f7f9 fc5a 	bl	8002218 <HAL_PCD_SetAddress>
 8008964:	4603      	mov	r3, r0
 8008966:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d816      	bhi.n	800899c <USBD_LL_SetUSBAddress+0x5c>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <USBD_LL_SetUSBAddress+0x34>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008985 	.word	0x08008985
 8008978:	0800898b 	.word	0x0800898b
 800897c:	08008991 	.word	0x08008991
 8008980:	08008997 	.word	0x08008997
    case HAL_OK :
      usb_status = USBD_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
    break;
 8008988:	e00b      	b.n	80089a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800898a:	2303      	movs	r3, #3
 800898c:	73fb      	strb	r3, [r7, #15]
    break;
 800898e:	e008      	b.n	80089a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
    break;
 8008994:	e005      	b.n	80089a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008996:	2303      	movs	r3, #3
 8008998:	73fb      	strb	r3, [r7, #15]
    break;
 800899a:	e002      	b.n	80089a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	73fb      	strb	r3, [r7, #15]
    break;
 80089a0:	bf00      	nop
  }
  return usb_status;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	460b      	mov	r3, r1
 80089ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089ca:	7af9      	ldrb	r1, [r7, #11]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	f7f9 fd43 	bl	800245a <HAL_PCD_EP_Transmit>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80089d8:	7dbb      	ldrb	r3, [r7, #22]
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d816      	bhi.n	8008a0c <USBD_LL_Transmit+0x60>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <USBD_LL_Transmit+0x38>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	080089fb 	.word	0x080089fb
 80089ec:	08008a01 	.word	0x08008a01
 80089f0:	08008a07 	.word	0x08008a07
    case HAL_OK :
      usb_status = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	75fb      	strb	r3, [r7, #23]
    break;
 80089f8:	e00b      	b.n	8008a12 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089fa:	2303      	movs	r3, #3
 80089fc:	75fb      	strb	r3, [r7, #23]
    break;
 80089fe:	e008      	b.n	8008a12 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
    break;
 8008a04:	e005      	b.n	8008a12 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	75fb      	strb	r3, [r7, #23]
    break;
 8008a0a:	e002      	b.n	8008a12 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	75fb      	strb	r3, [r7, #23]
    break;
 8008a10:	bf00      	nop
  }
  return usb_status;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	607a      	str	r2, [r7, #4]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a3a:	7af9      	ldrb	r1, [r7, #11]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	f7f9 fcc1 	bl	80023c6 <HAL_PCD_EP_Receive>
 8008a44:	4603      	mov	r3, r0
 8008a46:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008a48:	7dbb      	ldrb	r3, [r7, #22]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d816      	bhi.n	8008a7c <USBD_LL_PrepareReceive+0x60>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <USBD_LL_PrepareReceive+0x38>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a65 	.word	0x08008a65
 8008a58:	08008a6b 	.word	0x08008a6b
 8008a5c:	08008a71 	.word	0x08008a71
 8008a60:	08008a77 	.word	0x08008a77
    case HAL_OK :
      usb_status = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	75fb      	strb	r3, [r7, #23]
    break;
 8008a68:	e00b      	b.n	8008a82 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	75fb      	strb	r3, [r7, #23]
    break;
 8008a6e:	e008      	b.n	8008a82 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a70:	2301      	movs	r3, #1
 8008a72:	75fb      	strb	r3, [r7, #23]
    break;
 8008a74:	e005      	b.n	8008a82 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a76:	2303      	movs	r3, #3
 8008a78:	75fb      	strb	r3, [r7, #23]
    break;
 8008a7a:	e002      	b.n	8008a82 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	75fb      	strb	r3, [r7, #23]
    break;
 8008a80:	bf00      	nop
  }
  return usb_status;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f9 fcc1 	bl	800242a <HAL_PCD_EP_GetRxCount>
 8008aa8:	4603      	mov	r3, r0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_PCDEx_LPM_Callback+0x18>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d01f      	beq.n	8008b0a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008aca:	e03b      	b.n	8008b44 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008ad4:	f000 f854 	bl	8008b80 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad8:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <HAL_PCDEx_LPM_Callback+0x98>)
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	4a1b      	ldr	r2, [pc, #108]	; (8008b4c <HAL_PCDEx_LPM_Callback+0x98>)
 8008ade:	f023 0306 	bic.w	r3, r3, #6
 8008ae2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008af6:	f023 0301 	bic.w	r3, r3, #1
 8008afa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe f9d5 	bl	8006eb2 <USBD_LL_Resume>
    break;
 8008b08:	e01c      	b.n	8008b44 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b1c:	f043 0301 	orr.w	r3, r3, #1
 8008b20:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe f9a6 	bl	8006e7a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <HAL_PCDEx_LPM_Callback+0x98>)
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	4a04      	ldr	r2, [pc, #16]	; (8008b4c <HAL_PCDEx_LPM_Callback+0x98>)
 8008b3c:	f043 0306 	orr.w	r3, r3, #6
 8008b40:	6113      	str	r3, [r2, #16]
    break;
 8008b42:	bf00      	nop
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	e000ed00 	.word	0xe000ed00

08008b50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b58:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <USBD_static_malloc+0x18>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	20001bf8 	.word	0x20001bf8

08008b6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008b84:	f7f7 ffdc 	bl	8000b40 <SystemClock_Config>
}
 8008b88:	bf00      	nop
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <memset>:
 8008b8c:	4402      	add	r2, r0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d100      	bne.n	8008b96 <memset+0xa>
 8008b94:	4770      	bx	lr
 8008b96:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9a:	e7f9      	b.n	8008b90 <memset+0x4>

08008b9c <__libc_init_array>:
 8008b9c:	b570      	push	{r4, r5, r6, lr}
 8008b9e:	4d0d      	ldr	r5, [pc, #52]	; (8008bd4 <__libc_init_array+0x38>)
 8008ba0:	4c0d      	ldr	r4, [pc, #52]	; (8008bd8 <__libc_init_array+0x3c>)
 8008ba2:	1b64      	subs	r4, r4, r5
 8008ba4:	10a4      	asrs	r4, r4, #2
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	42a6      	cmp	r6, r4
 8008baa:	d109      	bne.n	8008bc0 <__libc_init_array+0x24>
 8008bac:	4d0b      	ldr	r5, [pc, #44]	; (8008bdc <__libc_init_array+0x40>)
 8008bae:	4c0c      	ldr	r4, [pc, #48]	; (8008be0 <__libc_init_array+0x44>)
 8008bb0:	f000 f818 	bl	8008be4 <_init>
 8008bb4:	1b64      	subs	r4, r4, r5
 8008bb6:	10a4      	asrs	r4, r4, #2
 8008bb8:	2600      	movs	r6, #0
 8008bba:	42a6      	cmp	r6, r4
 8008bbc:	d105      	bne.n	8008bca <__libc_init_array+0x2e>
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc4:	4798      	blx	r3
 8008bc6:	3601      	adds	r6, #1
 8008bc8:	e7ee      	b.n	8008ba8 <__libc_init_array+0xc>
 8008bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bce:	4798      	blx	r3
 8008bd0:	3601      	adds	r6, #1
 8008bd2:	e7f2      	b.n	8008bba <__libc_init_array+0x1e>
 8008bd4:	08008c9c 	.word	0x08008c9c
 8008bd8:	08008c9c 	.word	0x08008c9c
 8008bdc:	08008c9c 	.word	0x08008c9c
 8008be0:	08008ca0 	.word	0x08008ca0

08008be4 <_init>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr

08008bf0 <_fini>:
 8008bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf2:	bf00      	nop
 8008bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf6:	bc08      	pop	{r3}
 8008bf8:	469e      	mov	lr, r3
 8008bfa:	4770      	bx	lr


Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d094  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800d224  0800d224  0001d224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d31c  0800d31c  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  0800d31c  0800d31c  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d31c  0800d31c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d31c  0800d31c  0001d31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d320  0800d320  0001d320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800d324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f90  20000160  0800d484  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00001a00  200020f0  0800d484  000220f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019826  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004744  00000000  00000000  000399f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  0003e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001048  00000000  00000000  0003f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aeb4  00000000  00000000  00040750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9fc  00000000  00000000  0006b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef91c  00000000  00000000  00087000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c58  00000000  00000000  0017691c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017c574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d20c 	.word	0x0800d20c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800d20c 	.word	0x0800d20c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ADXL375_Init>:
 * INITIALIZATION
 *
 * HAL_Delay used because this is intended to be run before freeRTOS is started
 *
 */
uint8_t ADXL375_Init(ADXL375 *imu, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	807b      	strh	r3, [r7, #2]

	/* store everything in the ADXL375 struct that was passed in */
	imu->spiHandle = spiHandle;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	68ba      	ldr	r2, [r7, #8]
 8000292:	601a      	str	r2, [r3, #0]
	imu->csPinBank = csPinBank;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	605a      	str	r2, [r3, #4]
	imu->csPin = csPin;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	887a      	ldrh	r2, [r7, #2]
 800029e:	811a      	strh	r2, [r3, #8]

	/* clear DMA flag */
	imu->reading = 0;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	2200      	movs	r2, #0
 80002a4:	729a      	strb	r2, [r3, #10]

	/* stores the result of each operation (success or failure) */
	uint8_t status = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	75fb      	strb	r3, [r7, #23]

	/* enable SPI mode with a falling edge */
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	6858      	ldr	r0, [r3, #4]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	f001 fe37 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80002ba:	200a      	movs	r0, #10
 80002bc:	f001 f904 	bl	80014c8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	6858      	ldr	r0, [r3, #4]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	891b      	ldrh	r3, [r3, #8]
 80002c8:	2201      	movs	r2, #1
 80002ca:	4619      	mov	r1, r3
 80002cc:	f001 fe2c 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f001 f8f9 	bl	80014c8 <HAL_Delay>

	/* check the device ID */
	uint8_t chipID;
	status += ADXL375_ReadRegister(imu, ADXL375_DEVID, &chipID);
 80002d6:	f107 0316 	add.w	r3, r7, #22
 80002da:	461a      	mov	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	68f8      	ldr	r0, [r7, #12]
 80002e0:	f000 f84e 	bl	8000380 <ADXL375_ReadRegister>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	4413      	add	r3, r2
 80002ec:	75fb      	strb	r3, [r7, #23]

	//if the chip ID is not what we are expecting, return 0 (no successes)
	if (chipID != 0xE5) {
 80002ee:	7dbb      	ldrb	r3, [r7, #22]
 80002f0:	2be5      	cmp	r3, #229	; 0xe5
 80002f2:	d002      	beq.n	80002fa <ADXL375_Init+0x7a>
		status+=100;
 80002f4:	7dfb      	ldrb	r3, [r7, #23]
 80002f6:	3364      	adds	r3, #100	; 0x64
 80002f8:	75fb      	strb	r3, [r7, #23]
	}

	HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f001 f8e4 	bl	80014c8 <HAL_Delay>

	/* set the DATA_FORMAT register to use 4-wire SPI */
	status += ADXL375_WriteRegister(imu, ADXL375_DATA_FORMAT, 0x4F); // no self-test; 4-wire SPI; interrupt active high; MSB first
 8000300:	224f      	movs	r2, #79	; 0x4f
 8000302:	2131      	movs	r1, #49	; 0x31
 8000304:	68f8      	ldr	r0, [r7, #12]
 8000306:	f000 f877 	bl	80003f8 <ADXL375_WriteRegister>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	7dfb      	ldrb	r3, [r7, #23]
 8000310:	4413      	add	r3, r2
 8000312:	75fb      	strb	r3, [r7, #23]

	/* set the BW_RATE register to control data rate and band limiting */
	status += ADXL375_WriteRegister(imu, ADXL375_BW_RATE, 0x0A); // 100 Hz, 50 Hz band-limited
 8000314:	220a      	movs	r2, #10
 8000316:	212c      	movs	r1, #44	; 0x2c
 8000318:	68f8      	ldr	r0, [r7, #12]
 800031a:	f000 f86d 	bl	80003f8 <ADXL375_WriteRegister>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	4413      	add	r3, r2
 8000326:	75fb      	strb	r3, [r7, #23]

	/* map the data-ready interrupt to pin 1 */
	status += ADXL375_WriteRegister(imu, ADXL375_INT_MAP, 0x00); //map all interrupts to 1
 8000328:	2200      	movs	r2, #0
 800032a:	212f      	movs	r1, #47	; 0x2f
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f000 f863 	bl	80003f8 <ADXL375_WriteRegister>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	7dfb      	ldrb	r3, [r7, #23]
 8000338:	4413      	add	r3, r2
 800033a:	75fb      	strb	r3, [r7, #23]

	/* enable the data ready interrupt */
	status += ADXL375_WriteRegister(imu, ADXL375_INT_ENABLE, 0x80);
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	212e      	movs	r1, #46	; 0x2e
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f000 f859 	bl	80003f8 <ADXL375_WriteRegister>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	7dfb      	ldrb	r3, [r7, #23]
 800034c:	4413      	add	r3, r2
 800034e:	75fb      	strb	r3, [r7, #23]

	/* turn on the device */
	status += ADXL375_WriteRegister(imu, ADXL375_PWR_CTL, 0x08); //link off, auto-sleep off, measure on, sleep off, sleep data rate 8Hz
 8000350:	2208      	movs	r2, #8
 8000352:	212d      	movs	r1, #45	; 0x2d
 8000354:	68f8      	ldr	r0, [r7, #12]
 8000356:	f000 f84f 	bl	80003f8 <ADXL375_WriteRegister>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	4413      	add	r3, r2
 8000362:	75fb      	strb	r3, [r7, #23]

	/* Pre-compute conversion to m/s from raw Accelerometer data */
	imu->accConversion = 9.81f / 20.5f; //20.5 LSB per G
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <ADXL375_Init+0xfc>)
 8000368:	61da      	str	r2, [r3, #28]

	/* set up Accelerometer txBuf for DMA */
	imu->txBuf[0] = ADXL375_DATA | 0xC0; //set write bit and multiple bytes bit
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	22f2      	movs	r2, #242	; 0xf2
 800036e:	72da      	strb	r2, [r3, #11]

	return status;
 8000370:	7dfb      	ldrb	r3, [r7, #23]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	3ef502c0 	.word	0x3ef502c0

08000380 <ADXL375_ReadRegister>:
 *
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t ADXL375_ReadRegister(ADXL375 *imu, uint8_t regAddr, uint8_t *data) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af02      	add	r7, sp, #8
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	460b      	mov	r3, r1
 800038a:	607a      	str	r2, [r7, #4]
 800038c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80 , 0x00}; //or with 0x80 to set the 'read' bit
 800038e:	7afb      	ldrb	r3, [r7, #11]
 8000390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000394:	b2db      	uxtb	r3, r3
 8000396:	753b      	strb	r3, [r7, #20]
 8000398:	2300      	movs	r3, #0
 800039a:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	6858      	ldr	r0, [r3, #4]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	891b      	ldrh	r3, [r3, #8]
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	f001 fdbe 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6818      	ldr	r0, [r3, #0]
 80003b0:	f107 0210 	add.w	r2, r7, #16
 80003b4:	f107 0114 	add.w	r1, r7, #20
 80003b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2302      	movs	r3, #2
 80003c0:	f006 fe3c 	bl	800703c <HAL_SPI_TransmitReceive>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	bf0c      	ite	eq
 80003ca:	2301      	moveq	r3, #1
 80003cc:	2300      	movne	r3, #0
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6858      	ldr	r0, [r3, #4]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	891b      	ldrh	r3, [r3, #8]
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	f001 fda3 	bl	8001f28 <HAL_GPIO_WritePin>

	if (status == 1) {
 80003e2:	7dfb      	ldrb	r3, [r7, #23]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d102      	bne.n	80003ee <ADXL375_ReadRegister+0x6e>
		*data = rxBuf[2];
 80003e8:	7cba      	ldrb	r2, [r7, #18]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80003ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <ADXL375_WriteRegister>:

uint8_t ADXL375_WriteRegister(ADXL375 *imu, uint8_t regAddr, uint8_t data) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	70fb      	strb	r3, [r7, #3]
 8000404:	4613      	mov	r3, r2
 8000406:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	733b      	strb	r3, [r7, #12]
 800040c:	78bb      	ldrb	r3, [r7, #2]
 800040e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6858      	ldr	r0, [r3, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	891b      	ldrh	r3, [r3, #8]
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	f001 fd84 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6818      	ldr	r0, [r3, #0]
 8000424:	f107 010c 	add.w	r1, r7, #12
 8000428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800042c:	2202      	movs	r2, #2
 800042e:	f006 fc90 	bl	8006d52 <HAL_SPI_Transmit>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	bf0c      	ite	eq
 8000438:	2301      	moveq	r3, #1
 800043a:	2300      	movne	r3, #0
 800043c:	b2db      	uxtb	r3, r3
 800043e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000440:	bf00      	nop
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f007 f81a 	bl	8007480 <HAL_SPI_GetState>
 800044c:	4603      	mov	r3, r0
 800044e:	2b01      	cmp	r3, #1
 8000450:	d1f7      	bne.n	8000442 <ADXL375_WriteRegister+0x4a>
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6858      	ldr	r0, [r3, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	891b      	ldrh	r3, [r3, #8]
 800045a:	2201      	movs	r2, #1
 800045c:	4619      	mov	r1, r3
 800045e:	f001 fd63 	bl	8001f28 <HAL_GPIO_WritePin>

	return status;
 8000462:	7bfb      	ldrb	r3, [r7, #15]

}
 8000464:	4618      	mov	r0, r3
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <ADXL375_Read>:
/*
 *
 * POLLING
 *
 */
uint8_t ADXL375_Read(ADXL375 *imu) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af02      	add	r7, sp, #8
 8000472:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[7] = {(ADXL375_DATA | 0xC0), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8000474:	4a38      	ldr	r2, [pc, #224]	; (8000558 <ADXL375_Read+0xec>)
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800047e:	6018      	str	r0, [r3, #0]
 8000480:	3304      	adds	r3, #4
 8000482:	8019      	strh	r1, [r3, #0]
 8000484:	3302      	adds	r3, #2
 8000486:	0c0a      	lsrs	r2, r1, #16
 8000488:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6858      	ldr	r0, [r3, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	891b      	ldrh	r3, [r3, #8]
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	f001 fd47 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	f107 0208 	add.w	r2, r7, #8
 80004a2:	f107 0110 	add.w	r1, r7, #16
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2307      	movs	r3, #7
 80004ae:	f006 fdc5 	bl	800703c <HAL_SPI_TransmitReceive>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf0c      	ite	eq
 80004b8:	2301      	moveq	r3, #1
 80004ba:	2300      	movne	r3, #0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6858      	ldr	r0, [r3, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	891b      	ldrh	r3, [r3, #8]
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	f001 fd2c 	bl	8001f28 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 80004d0:	7abb      	ldrb	r3, [r7, #10]
 80004d2:	021b      	lsls	r3, r3, #8
 80004d4:	b21a      	sxth	r2, r3
 80004d6:	7a7b      	ldrb	r3, [r7, #9]
 80004d8:	b21b      	sxth	r3, r3
 80004da:	4313      	orrs	r3, r2
 80004dc:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 80004de:	7b3b      	ldrb	r3, [r7, #12]
 80004e0:	021b      	lsls	r3, r3, #8
 80004e2:	b21a      	sxth	r2, r3
 80004e4:	7afb      	ldrb	r3, [r7, #11]
 80004e6:	b21b      	sxth	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 80004ec:	7bbb      	ldrb	r3, [r7, #14]
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	7b7b      	ldrb	r3, [r7, #13]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8000500:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000504:	ee07 3a90 	vmov	s15, r3
 8000508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800050c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->acc_mps2[1] = imu->accConversion * accY;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	ed93 7a07 	vldr	s14, [r3, #28]
 800051c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000520:	ee07 3a90 	vmov	s15, r3
 8000524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	ed93 7a07 	vldr	s14, [r3, #28]
 8000538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800053c:	ee07 3a90 	vmov	s15, r3
 8000540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	return status;
 800054e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	0800d224 	.word	0x0800d224

0800055c <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	887a      	ldrh	r2, [r7, #2]
 800057a:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	6a3a      	ldr	r2, [r7, #32]
 8000580:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000586:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2200      	movs	r2, #0
 8000592:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6858      	ldr	r0, [r3, #4]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	899b      	ldrh	r3, [r3, #12]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 fcc0 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 ff8d 	bl	80014c8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6858      	ldr	r0, [r3, #4]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	f001 fcb5 	bl	8001f28 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80005be:	2032      	movs	r0, #50	; 0x32
 80005c0:	f000 ff82 	bl	80014c8 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 80005c4:	22b6      	movs	r2, #182	; 0xb6
 80005c6:	217e      	movs	r1, #126	; 0x7e
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f000 f965 	bl	8000898 <BMI088_WriteAccRegister>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	4413      	add	r3, r2
 80005d6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80005d8:	2032      	movs	r0, #50	; 0x32
 80005da:	f000 ff75 	bl	80014c8 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 80005de:	f107 0316 	add.w	r3, r7, #22
 80005e2:	461a      	mov	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f8dc 	bl	80007a4 <BMI088_ReadAccRegister>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	7dfb      	ldrb	r3, [r7, #23]
 80005f2:	4413      	add	r3, r2
 80005f4:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x1E) {
 80005f6:	7dbb      	ldrb	r3, [r7, #22]
 80005f8:	2b1e      	cmp	r3, #30
 80005fa:	d002      	beq.n	8000602 <BMI088_Init+0xa6>

		status+=50;
 80005fc:	7dfb      	ldrb	r3, [r7, #23]
 80005fe:	3332      	adds	r3, #50	; 0x32
 8000600:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f000 ff60 	bl	80014c8 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000608:	22a8      	movs	r2, #168	; 0xa8
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f943 	bl	8000898 <BMI088_WriteAccRegister>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	4413      	add	r3, r2
 800061a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f000 ff53 	bl	80014c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000622:	2200      	movs	r2, #0
 8000624:	2141      	movs	r1, #65	; 0x41
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f000 f936 	bl	8000898 <BMI088_WriteAccRegister>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	4413      	add	r3, r2
 8000634:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 ff46 	bl	80014c8 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800063c:	220a      	movs	r2, #10
 800063e:	2153      	movs	r1, #83	; 0x53
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f000 f929 	bl	8000898 <BMI088_WriteAccRegister>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	4413      	add	r3, r2
 800064e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 ff39 	bl	80014c8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000656:	2204      	movs	r2, #4
 8000658:	2158      	movs	r1, #88	; 0x58
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f91c 	bl	8000898 <BMI088_WriteAccRegister>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	4413      	add	r3, r2
 8000668:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800066a:	200a      	movs	r0, #10
 800066c:	f000 ff2c 	bl	80014c8 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000670:	2200      	movs	r2, #0
 8000672:	217c      	movs	r1, #124	; 0x7c
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f000 f90f 	bl	8000898 <BMI088_WriteAccRegister>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	4413      	add	r3, r2
 8000682:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000684:	200a      	movs	r0, #10
 8000686:	f000 ff1f 	bl	80014c8 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800068a:	2204      	movs	r2, #4
 800068c:	217d      	movs	r1, #125	; 0x7d
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f000 f902 	bl	8000898 <BMI088_WriteAccRegister>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	4413      	add	r3, r2
 800069c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800069e:	200a      	movs	r0, #10
 80006a0:	f000 ff12 	bl	80014c8 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4a3d      	ldr	r2, [pc, #244]	; (800079c <BMI088_Init+0x240>)
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2292      	movs	r2, #146	; 0x92
 80006ae:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6898      	ldr	r0, [r3, #8]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	89db      	ldrh	r3, [r3, #14]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	f001 fc34 	bl	8001f28 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80006c0:	22b6      	movs	r2, #182	; 0xb6
 80006c2:	2114      	movs	r1, #20
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f000 f921 	bl	800090c <BMI088_WriteGyrRegister>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	4413      	add	r3, r2
 80006d2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80006d4:	20fa      	movs	r0, #250	; 0xfa
 80006d6:	f000 fef7 	bl	80014c8 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80006da:	f107 0316 	add.w	r3, r7, #22
 80006de:	461a      	mov	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f000 f89c 	bl	8000820 <BMI088_ReadGyrRegister>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	4413      	add	r3, r2
 80006f0:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x0F) {
 80006f2:	7dbb      	ldrb	r3, [r7, #22]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d002      	beq.n	80006fe <BMI088_Init+0x1a2>

		status+=60;
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	333c      	adds	r3, #60	; 0x3c
 80006fc:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 80006fe:	200a      	movs	r0, #10
 8000700:	f000 fee2 	bl	80014c8 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8000704:	2201      	movs	r2, #1
 8000706:	210f      	movs	r1, #15
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f000 f8ff 	bl	800090c <BMI088_WriteGyrRegister>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	4413      	add	r3, r2
 8000716:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f000 fed5 	bl	80014c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800071e:	2207      	movs	r2, #7
 8000720:	2110      	movs	r1, #16
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f000 f8f2 	bl	800090c <BMI088_WriteGyrRegister>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	4413      	add	r3, r2
 8000730:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000732:	200a      	movs	r0, #10
 8000734:	f000 fec8 	bl	80014c8 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	2115      	movs	r1, #21
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 f8e5 	bl	800090c <BMI088_WriteGyrRegister>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	4413      	add	r3, r2
 800074a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f000 febb 	bl	80014c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8000752:	2201      	movs	r2, #1
 8000754:	2116      	movs	r1, #22
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 f8d8 	bl	800090c <BMI088_WriteGyrRegister>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	4413      	add	r3, r2
 8000764:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f000 feae 	bl	80014c8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 800076c:	2201      	movs	r2, #1
 800076e:	2118      	movs	r1, #24
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 f8cb 	bl	800090c <BMI088_WriteGyrRegister>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	4413      	add	r3, r2
 800077e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fea1 	bl	80014c8 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <BMI088_Init+0x244>)
 800078a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2282      	movs	r2, #130	; 0x82
 8000790:	769a      	strb	r2, [r3, #26]

	return status;
 8000792:	7dfb      	ldrb	r3, [r7, #23]

}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	3a6b70a4 	.word	0x3a6b70a4
 80007a0:	3a0ba058 	.word	0x3a0ba058

080007a4 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	460b      	mov	r3, r1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80007b2:	7afb      	ldrb	r3, [r7, #11]
 80007b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	753b      	strb	r3, [r7, #20]
 80007bc:	2300      	movs	r3, #0
 80007be:	757b      	strb	r3, [r7, #21]
 80007c0:	2300      	movs	r3, #0
 80007c2:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6858      	ldr	r0, [r3, #4]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 fbaa 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	f107 0114 	add.w	r1, r7, #20
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2303      	movs	r3, #3
 80007e8:	f006 fc28 	bl	800703c <HAL_SPI_TransmitReceive>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf0c      	ite	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	2300      	movne	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6858      	ldr	r0, [r3, #4]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	899b      	ldrh	r3, [r3, #12]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f001 fb8f 	bl	8001f28 <HAL_GPIO_WritePin>

	if (status == 1) {
 800080a:	7dfb      	ldrb	r3, [r7, #23]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d102      	bne.n	8000816 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8000810:	7cba      	ldrb	r2, [r7, #18]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000816:	7dfb      	ldrb	r3, [r7, #23]

}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af02      	add	r7, sp, #8
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	460b      	mov	r3, r1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000834:	b2db      	uxtb	r3, r3
 8000836:	753b      	strb	r3, [r7, #20]
 8000838:	2300      	movs	r3, #0
 800083a:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6898      	ldr	r0, [r3, #8]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	89db      	ldrh	r3, [r3, #14]
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	f001 fb6e 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	f107 0210 	add.w	r2, r7, #16
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2302      	movs	r3, #2
 8000860:	f006 fbec 	bl	800703c <HAL_SPI_TransmitReceive>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6898      	ldr	r0, [r3, #8]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	89db      	ldrh	r3, [r3, #14]
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	f001 fb53 	bl	8001f28 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d102      	bne.n	800088e <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8000888:	7c7a      	ldrb	r2, [r7, #17]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800088e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
 80008a4:	4613      	mov	r3, r2
 80008a6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	733b      	strb	r3, [r7, #12]
 80008ac:	78bb      	ldrb	r3, [r7, #2]
 80008ae:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6858      	ldr	r0, [r3, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	899b      	ldrh	r3, [r3, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	f001 fb34 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	f107 010c 	add.w	r1, r7, #12
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008cc:	2202      	movs	r2, #2
 80008ce:	f006 fa40 	bl	8006d52 <HAL_SPI_Transmit>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bf0c      	ite	eq
 80008d8:	2301      	moveq	r3, #1
 80008da:	2300      	movne	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80008e0:	bf00      	nop
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f006 fdca 	bl	8007480 <HAL_SPI_GetState>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d1f7      	bne.n	80008e2 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6858      	ldr	r0, [r3, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	899b      	ldrh	r3, [r3, #12]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	f001 fb13 	bl	8001f28 <HAL_GPIO_WritePin>

	return status;
 8000902:	7bfb      	ldrb	r3, [r7, #15]

}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
 8000918:	4613      	mov	r3, r2
 800091a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	733b      	strb	r3, [r7, #12]
 8000920:	78bb      	ldrb	r3, [r7, #2]
 8000922:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6898      	ldr	r0, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	89db      	ldrh	r3, [r3, #14]
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	f001 fafa 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	f107 010c 	add.w	r1, r7, #12
 800093c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000940:	2202      	movs	r2, #2
 8000942:	f006 fa06 	bl	8006d52 <HAL_SPI_Transmit>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf0c      	ite	eq
 800094c:	2301      	moveq	r3, #1
 800094e:	2300      	movne	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000954:	bf00      	nop
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f006 fd90 	bl	8007480 <HAL_SPI_GetState>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d1f7      	bne.n	8000956 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6898      	ldr	r0, [r3, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	89db      	ldrh	r3, [r3, #14]
 800096e:	2201      	movs	r2, #1
 8000970:	4619      	mov	r1, r3
 8000972:	f001 fad9 	bl	8001f28 <HAL_GPIO_WritePin>

	return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]

}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8000988:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <BMI088_ReadAccelerometer+0xe4>)
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000992:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6858      	ldr	r0, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	899b      	ldrh	r3, [r3, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	f001 fac1 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	f107 0208 	add.w	r2, r7, #8
 80009ae:	f107 0110 	add.w	r1, r7, #16
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2308      	movs	r3, #8
 80009ba:	f006 fb3f 	bl	800703c <HAL_SPI_TransmitReceive>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf0c      	ite	eq
 80009c4:	2301      	moveq	r3, #1
 80009c6:	2300      	movne	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6858      	ldr	r0, [r3, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	899b      	ldrh	r3, [r3, #12]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	f001 faa6 	bl	8001f28 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 80009dc:	7afb      	ldrb	r3, [r7, #11]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 80009ea:	7b7b      	ldrb	r3, [r7, #13]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	7b3b      	ldrb	r3, [r7, #12]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000a0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000a28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000a44:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]

}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	0800d22c 	.word	0x0800d22c

08000a68 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8000a70:	4a38      	ldr	r2, [pc, #224]	; (8000b54 <BMI088_ReadGyroscope+0xec>)
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	6018      	str	r0, [r3, #0]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	8019      	strh	r1, [r3, #0]
 8000a80:	3302      	adds	r3, #2
 8000a82:	0c0a      	lsrs	r2, r1, #16
 8000a84:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6898      	ldr	r0, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	89db      	ldrh	r3, [r3, #14]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f001 fa49 	bl	8001f28 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 0110 	add.w	r1, r7, #16
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	f006 fac7 	bl	800703c <HAL_SPI_TransmitReceive>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf0c      	ite	eq
 8000ab4:	2301      	moveq	r3, #1
 8000ab6:	2300      	movne	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6898      	ldr	r0, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	89db      	ldrh	r3, [r3, #14]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f001 fa2e 	bl	8001f28 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8000acc:	7abb      	ldrb	r3, [r7, #10]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	7a7b      	ldrb	r3, [r7, #9]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8000ada:	7b3b      	ldrb	r3, [r7, #12]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	7b7b      	ldrb	r3, [r7, #13]
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4313      	orrs	r3, r2
 8000af4:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000afc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000b18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b1c:	ee07 3a90 	vmov	s15, r3
 8000b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000b34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	return status;
 8000b4a:	7ffb      	ldrb	r3, [r7, #31]

}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	0800d234 	.word	0x0800d234

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f000 fc3e 	bl	80013de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f873 	bl	8000c4c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b66:	f000 f8c0 	bl	8000cea <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 f973 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6e:	f000 f94b 	bl	8000e08 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b72:	f000 f90b 	bl	8000d8c <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8000b76:	f000 f8e7 	bl	8000d48 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b7a:	f008 fdcb 	bl	8009714 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000b7e:	f00b f871 	bl	800bc64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



  	// Initialize BMI088
  	uint8_t bmi_status = BMI088_Init(&bmi088, &hspi1, BMI088_Accel_NCS_GPIO_Port, BMI088_Accel_NCS_Pin, BMI088_Gyro_NCS_GPIO_Port, BMI088_Gyro_NCS_Pin);
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <main+0xd4>)
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <main+0xd8>)
 8000b90:	4928      	ldr	r1, [pc, #160]	; (8000c34 <main+0xdc>)
 8000b92:	4829      	ldr	r0, [pc, #164]	; (8000c38 <main+0xe0>)
 8000b94:	f7ff fce2 	bl	800055c <BMI088_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  	if(bmi_status != 15) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	d004      	beq.n	8000bac <main+0x54>
  		HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4821      	ldr	r0, [pc, #132]	; (8000c2c <main+0xd4>)
 8000ba8:	f001 f9be 	bl	8001f28 <HAL_GPIO_WritePin>




	// Initialize ADXL375
	uint8_t adxl_status = ADXL375_Init(&adxl375, &hspi1, ADXL375_NCS_GPIO_Port, ADXL375_NCS_Pin);
 8000bac:	2340      	movs	r3, #64	; 0x40
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <main+0xd4>)
 8000bb0:	4920      	ldr	r1, [pc, #128]	; (8000c34 <main+0xdc>)
 8000bb2:	4822      	ldr	r0, [pc, #136]	; (8000c3c <main+0xe4>)
 8000bb4:	f7ff fb64 	bl	8000280 <ADXL375_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71bb      	strb	r3, [r7, #6]
	if(adxl_status != 6) {
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d004      	beq.n	8000bcc <main+0x74>
		HAL_GPIO_WritePin(Pyro_B_Trigger_GPIO_Port, Pyro_B_Trigger_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	481a      	ldr	r0, [pc, #104]	; (8000c30 <main+0xd8>)
 8000bc8:	f001 f9ae 	bl	8001f28 <HAL_GPIO_WritePin>

  while (1)
  {


	sprintf(USBtxBuf, "%u\r\n", count);
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <main+0xe8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	491c      	ldr	r1, [pc, #112]	; (8000c44 <main+0xec>)
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <main+0xf0>)
 8000bd6:	f00b fe75 	bl	800c8c4 <siprintf>
	count++;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <main+0xe8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <main+0xe8>)
 8000be4:	701a      	strb	r2, [r3, #0]

	if (count > 100) {
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <main+0xe8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d902      	bls.n	8000bf4 <main+0x9c>
		count = 1;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <main+0xe8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) USBtxBuf, strlen(USBtxBuf));
 8000bf4:	4814      	ldr	r0, [pc, #80]	; (8000c48 <main+0xf0>)
 8000bf6:	f7ff faeb 	bl	80001d0 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <main+0xf0>)
 8000c02:	f00b f8ed 	bl	800bde0 <CDC_Transmit_FS>



	uint8_t status;

	status = BMI088_ReadAccelerometer(&bmi088);
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <main+0xe0>)
 8000c08:	f7ff feba 	bl	8000980 <BMI088_ReadAccelerometer>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	717b      	strb	r3, [r7, #5]
	status = BMI088_ReadGyroscope(&bmi088);
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <main+0xe0>)
 8000c12:	f7ff ff29 	bl	8000a68 <BMI088_ReadGyroscope>
 8000c16:	4603      	mov	r3, r0
 8000c18:	717b      	strb	r3, [r7, #5]
	status = ADXL375_Read(&adxl375);
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <main+0xe4>)
 8000c1c:	f7ff fc26 	bl	800046c <ADXL375_Read>
 8000c20:	4603      	mov	r3, r0
 8000c22:	717b      	strb	r3, [r7, #5]

	HAL_Delay(10);
 8000c24:	200a      	movs	r0, #10
 8000c26:	f000 fc4f 	bl	80014c8 <HAL_Delay>
  {
 8000c2a:	e7cf      	b.n	8000bcc <main+0x74>
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48001000 	.word	0x48001000
 8000c34:	20000290 	.word	0x20000290
 8000c38:	200002fc 	.word	0x200002fc
 8000c3c:	2000034c 	.word	0x2000034c
 8000c40:	20000000 	.word	0x20000000
 8000c44:	0800d23c 	.word	0x0800d23c
 8000c48:	200002f4 	.word	0x200002f4

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b096      	sub	sp, #88	; 0x58
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2244      	movs	r2, #68	; 0x44
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00b fe52 	bl	800c904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c72:	f002 fb27 	bl	80032c4 <HAL_PWREx_ControlVoltageScaling>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c7c:	f000 f9ae 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c96:	230a      	movs	r3, #10
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fb70 	bl	8003390 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 f991 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 ff38 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cde:	f000 f97d 	bl	8000fdc <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3758      	adds	r7, #88	; 0x58
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b0a2      	sub	sp, #136	; 0x88
 8000cee:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2288      	movs	r2, #136	; 0x88
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00b fe04 	bl	800c904 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1;
 8000cfc:	f44f 2302 	mov.w	r3, #532480	; 0x82000
 8000d00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d06:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d0c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000d16:	230c      	movs	r3, #12
 8000d18:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d2a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 f92c 	bl	8003f8c <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000d3a:	f000 f94f 	bl	8000fdc <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3788      	adds	r7, #136	; 0x88
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <MX_SDMMC1_SD_Init+0x40>)
 8000d50:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <MX_SDMMC1_SD_Init+0x3c>)
 8000d74:	2208      	movs	r2, #8
 8000d76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2000017c 	.word	0x2000017c
 8000d88:	40012800 	.word	0x40012800

08000d8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_SPI1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000da6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000daa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dc2:	2218      	movs	r2, #24
 8000dc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dec:	f005 ff0e 	bl	8006c0c <HAL_SPI_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 f8f1 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000290 	.word	0x20000290
 8000e04:	40013000 	.word	0x40013000

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_DMA_Init+0x48>)
 8000e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <MX_DMA_Init+0x48>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6493      	str	r3, [r2, #72]	; 0x48
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_DMA_Init+0x48>)
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	203b      	movs	r0, #59	; 0x3b
 8000e2c:	f000 fc4b 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000e30:	203b      	movs	r0, #59	; 0x3b
 8000e32:	f000 fc64 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	203c      	movs	r0, #60	; 0x3c
 8000e3c:	f000 fc43 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000e40:	203c      	movs	r0, #60	; 0x3c
 8000e42:	f000 fc5c 	bl	80016fe <HAL_NVIC_EnableIRQ>

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a57      	ldr	r2, [pc, #348]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a3f      	ldr	r2, [pc, #252]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a39      	ldr	r2, [pc, #228]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <MX_GPIO_Init+0x178>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 8000efa:	2200      	movs	r2, #0
 8000efc:	f243 3189 	movw	r1, #13193	; 0x3389
 8000f00:	4833      	ldr	r0, [pc, #204]	; (8000fd0 <MX_GPIO_Init+0x17c>)
 8000f02:	f001 f811 	bl	8001f28 <HAL_GPIO_WritePin>
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 8000f06:	2200      	movs	r2, #0
 8000f08:	f24c 1144 	movw	r1, #49476	; 0xc144
 8000f0c:	4831      	ldr	r0, [pc, #196]	; (8000fd4 <MX_GPIO_Init+0x180>)
 8000f0e:	f001 f80b 	bl	8001f28 <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8000f18:	482f      	ldr	r0, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0x184>)
 8000f1a:	f001 f805 	bl	8001f28 <HAL_GPIO_WritePin>
                          |Status_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BMP388_Int_Pin BMI088_Accel_Int_Pin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin|BMI088_Accel_Int_Pin;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4827      	ldr	r0, [pc, #156]	; (8000fd0 <MX_GPIO_Init+0x17c>)
 8000f32:	f000 fe37 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMP388_NCS_Pin Pyro_B_Trigger_Pin Pyro_C_Trigger_Pin Pyro_D_Trigger_Pin
                           Pyro_E_Trigger_Pin Pyro_F_Trigger_Pin BMI088_Accel_NCS_Pin */
  GPIO_InitStruct.Pin = BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 8000f36:	f243 3389 	movw	r3, #13193	; 0x3389
 8000f3a:	61fb      	str	r3, [r7, #28]
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <MX_GPIO_Init+0x17c>)
 8000f50:	f000 fe28 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pyro_A_Trigger_Pin Continuity_LED_D_Pin Continuity_LED_C_Pin ADXL375_NCS_Pin
                           BMI088_Gyro_NCS_Pin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 8000f54:	f24c 1344 	movw	r3, #49476	; 0xc144
 8000f58:	61fb      	str	r3, [r7, #28]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <MX_GPIO_Init+0x180>)
 8000f6e:	f000 fe19 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Continuity_LED_B_Pin Continuity_LED_A_Pin Continuity_LED_E_Pin Continuity_LED_F_Pin
                           Status_LED_Pin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8000f72:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000f76:	61fb      	str	r3, [r7, #28]
                          |Status_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <MX_GPIO_Init+0x184>)
 8000f8c:	f000 fe0a 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Card_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Card_Detect_Pin;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_Card_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_GPIO_Init+0x184>)
 8000fa4:	f000 fdfe 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_Int_Pin BMI088_Gyro_Int_Pin */
  GPIO_InitStruct.Pin = ADXL375_Int_Pin|BMI088_Gyro_Int_Pin;
 8000fa8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_GPIO_Init+0x180>)
 8000fbe:	f000 fdf1 	bl	8001ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	; 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48001000 	.word	0x48001000
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	48000c00 	.word	0x48000c00

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	4801      	ldr	r0, [pc, #4]	; (8000ff0 <Error_Handler+0x14>)
 8000fea:	f000 ff9d 	bl	8001f28 <HAL_GPIO_WritePin>
  while (1)
 8000fee:	e7fe      	b.n	8000fee <Error_Handler+0x12>
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x44>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a55      	ldr	r2, [pc, #340]	; (80011b0 <HAL_SD_MspInit+0x174>)
 800105a:	4293      	cmp	r3, r2
 800105c:	f040 80a3 	bne.w	80011a6 <HAL_SD_MspInit+0x16a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_SD_MspInit+0x178>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <HAL_SD_MspInit+0x178>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6613      	str	r3, [r2, #96]	; 0x60
 800106c:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_SD_MspInit+0x178>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001078:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <HAL_SD_MspInit+0x178>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_SD_MspInit+0x178>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <HAL_SD_MspInit+0x178>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <HAL_SD_MspInit+0x178>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_SD_MspInit+0x178>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_SD_MspInit+0x178>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010ba:	230c      	movs	r3, #12
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	483c      	ldr	r0, [pc, #240]	; (80011b8 <HAL_SD_MspInit+0x17c>)
 80010c6:	f000 fd6d 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ca:	2304      	movs	r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010da:	230c      	movs	r3, #12
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4835      	ldr	r0, [pc, #212]	; (80011bc <HAL_SD_MspInit+0x180>)
 80010e6:	f000 fd5d 	bl	8001ba4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_SD_MspInit+0x184>)
 80010ec:	4a35      	ldr	r2, [pc, #212]	; (80011c4 <HAL_SD_MspInit+0x188>)
 80010ee:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_SD_MspInit+0x184>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <HAL_SD_MspInit+0x184>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_SD_MspInit+0x184>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_SD_MspInit+0x184>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_SD_MspInit+0x184>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_SD_MspInit+0x184>)
 8001112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001116:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_SD_MspInit+0x184>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_SD_MspInit+0x184>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001124:	4826      	ldr	r0, [pc, #152]	; (80011c0 <HAL_SD_MspInit+0x184>)
 8001126:	f000 fb05 	bl	8001734 <HAL_DMA_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_SD_MspInit+0xf8>
    {
      Error_Handler();
 8001130:	f7ff ff54 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <HAL_SD_MspInit+0x184>)
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <HAL_SD_MspInit+0x184>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_SD_MspInit+0x190>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001148:	2207      	movs	r2, #7
 800114a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 800114e:	2210      	movs	r2, #16
 8001150:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 800117c:	f000 fada 	bl	8001734 <HAL_DMA_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_SD_MspInit+0x14e>
    {
      Error_Handler();
 8001186:	f7ff ff29 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_SD_MspInit+0x18c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2031      	movs	r0, #49	; 0x31
 800119c:	f000 fa93 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011a0:	2031      	movs	r0, #49	; 0x31
 80011a2:	f000 faac 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012800 	.word	0x40012800
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	20000200 	.word	0x20000200
 80011c4:	40020444 	.word	0x40020444
 80011c8:	20000248 	.word	0x20000248
 80011cc:	40020458 	.word	0x40020458

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_SPI_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d127      	bne.n	8001242 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x80>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_SPI_MspInit+0x80>)
 80011f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fc:	6613      	str	r3, [r2, #96]	; 0x60
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_SPI_MspInit+0x80>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x80>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_SPI_MspInit+0x80>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_SPI_MspInit+0x80>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001222:	2338      	movs	r3, #56	; 0x38
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_SPI_MspInit+0x84>)
 800123e:	f000 fcb1 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f8f0 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <SDMMC1_IRQHandler+0x10>)
 80012b2:	f004 fbed 	bl	8005a90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000017c 	.word	0x2000017c

080012c0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <DMA2_Channel4_IRQHandler+0x10>)
 80012c6:	f000 fb8e 	bl	80019e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000200 	.word	0x20000200

080012d4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA2_Channel5_IRQHandler+0x10>)
 80012da:	f000 fb84 	bl	80019e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000248 	.word	0x20000248

080012e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <OTG_FS_IRQHandler+0x10>)
 80012ee:	f000 ff86 	bl	80021fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000187c 	.word	0x2000187c

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f00b faf2 	bl	800c914 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20018000 	.word	0x20018000
 800135c:	00000800 	.word	0x00000800
 8001360:	20000378 	.word	0x20000378
 8001364:	200020f0 	.word	0x200020f0

08001368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001390:	f7ff ffea 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	; (80013d8 <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ba:	f00b fab1 	bl	800c920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013be:	f7ff fbcb 	bl	8000b58 <main>

080013c2 <LoopForever>:

LoopForever:
    b LoopForever
 80013c2:	e7fe      	b.n	80013c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80013d0:	0800d324 	.word	0x0800d324
  ldr r2, =_sbss
 80013d4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80013d8:	200020f0 	.word	0x200020f0

080013dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_2_IRQHandler>

080013de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f961 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f80e 	bl	8001410 <HAL_InitTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	e001      	b.n	8001404 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001400:	f7ff fdf8 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001404:	79fb      	ldrb	r3, [r7, #7]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_InitTick+0x6c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d023      	beq.n	800146c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_InitTick+0x70>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_InitTick+0x6c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f96d 	bl	800171a <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d809      	bhi.n	8001460 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001454:	f000 f937 	bl	80016c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_InitTick+0x74>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e007      	b.n	8001470 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e004      	b.n	8001470 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e001      	b.n	8001470 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000000c 	.word	0x2000000c
 8001480:	20000004 	.word	0x20000004
 8001484:	20000008 	.word	0x20000008

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x20>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x24>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_IncTick+0x24>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	2000037c 	.word	0x2000037c

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_GetTick+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000037c 	.word	0x2000037c

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff ffee 	bl	80014b0 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e0:	d005      	beq.n	80014ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_Delay+0x44>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ee:	bf00      	nop
 80014f0:	f7ff ffde 	bl	80014b0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8f7      	bhi.n	80014f0 <HAL_Delay+0x28>
  {
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000000c 	.word	0x2000000c

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff29 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff3e 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff31 	bl	8001574 <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e098      	b.n	8001878 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_DMA_Init+0x150>)
 800174e:	429a      	cmp	r2, r3
 8001750:	d80f      	bhi.n	8001772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_DMA_Init+0x154>)
 800175a:	4413      	add	r3, r2
 800175c:	4a4b      	ldr	r2, [pc, #300]	; (800188c <HAL_DMA_Init+0x158>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	009a      	lsls	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_DMA_Init+0x15c>)
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
 8001770:	e00e      	b.n	8001790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b46      	ldr	r3, [pc, #280]	; (8001894 <HAL_DMA_Init+0x160>)
 800177a:	4413      	add	r3, r2
 800177c:	4a43      	ldr	r2, [pc, #268]	; (800188c <HAL_DMA_Init+0x158>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	009a      	lsls	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a42      	ldr	r2, [pc, #264]	; (8001898 <HAL_DMA_Init+0x164>)
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ea:	d039      	beq.n	8001860 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_DMA_Init+0x15c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d11a      	bne.n	800182c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_DMA_Init+0x168>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f003 031c 	and.w	r3, r3, #28
 8001802:	210f      	movs	r1, #15
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4924      	ldr	r1, [pc, #144]	; (800189c <HAL_DMA_Init+0x168>)
 800180c:	4013      	ands	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_DMA_Init+0x168>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f003 031c 	and.w	r3, r3, #28
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	491d      	ldr	r1, [pc, #116]	; (800189c <HAL_DMA_Init+0x168>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
 800182a:	e019      	b.n	8001860 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_DMA_Init+0x16c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f003 031c 	and.w	r3, r3, #28
 8001838:	210f      	movs	r1, #15
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	4917      	ldr	r1, [pc, #92]	; (80018a0 <HAL_DMA_Init+0x16c>)
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_DMA_Init+0x16c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f003 031c 	and.w	r3, r3, #28
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	4911      	ldr	r1, [pc, #68]	; (80018a0 <HAL_DMA_Init+0x16c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40020407 	.word	0x40020407
 8001888:	bffdfff8 	.word	0xbffdfff8
 800188c:	cccccccd 	.word	0xcccccccd
 8001890:	40020000 	.word	0x40020000
 8001894:	bffdfbf8 	.word	0xbffdfbf8
 8001898:	40020400 	.word	0x40020400
 800189c:	400200a8 	.word	0x400200a8
 80018a0:	400204a8 	.word	0x400204a8

080018a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Start_IT+0x20>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e04b      	b.n	800195c <HAL_DMA_Start_IT+0xb8>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d13a      	bne.n	800194e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f921 	bl	8001b44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 020e 	orr.w	r2, r2, #14
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00f      	b.n	800193c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 020a 	orr.w	r2, r2, #10
 800193a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e005      	b.n	800195a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d005      	beq.n	8001988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2204      	movs	r2, #4
 8001980:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e029      	b.n	80019dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 020e 	bic.w	r2, r2, #14
 8001996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	f003 021c 	and.w	r2, r3, #28
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
    }
  }
  return status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 031c 	and.w	r3, r3, #28
 8001a06:	2204      	movs	r2, #4
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d026      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7a>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d021      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0204 	bic.w	r2, r2, #4
 8001a38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 021c 	and.w	r2, r3, #28
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2104      	movs	r1, #4
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d071      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a5e:	e06c      	b.n	8001b3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f003 031c 	and.w	r3, r3, #28
 8001a68:	2202      	movs	r2, #2
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d02e      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0xec>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d029      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020a 	bic.w	r2, r2, #10
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 021c 	and.w	r2, r3, #28
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d038      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ad0:	e033      	b.n	8001b3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f003 031c 	and.w	r3, r3, #28
 8001ada:	2208      	movs	r2, #8
 8001adc:	409a      	lsls	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d02a      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x156>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d025      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 020e 	bic.w	r2, r2, #14
 8001afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	f003 021c 	and.w	r2, r3, #28
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
}
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 021c 	and.w	r2, r3, #28
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d108      	bne.n	8001b88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b86:	e007      	b.n	8001b98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	e17f      	b.n	8001eb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8171 	beq.w	8001eae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d005      	beq.n	8001be4 <HAL_GPIO_Init+0x40>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 0201 	and.w	r2, r3, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d118      	bne.n	8001c84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	f003 0201 	and.w	r2, r3, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d017      	beq.n	8001cc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d123      	bne.n	8001d14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	6939      	ldr	r1, [r7, #16]
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80ac 	beq.w	8001eae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b5f      	ldr	r3, [pc, #380]	; (8001ed4 <HAL_GPIO_Init+0x330>)
 8001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5a:	4a5e      	ldr	r2, [pc, #376]	; (8001ed4 <HAL_GPIO_Init+0x330>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6613      	str	r3, [r2, #96]	; 0x60
 8001d62:	4b5c      	ldr	r3, [pc, #368]	; (8001ed4 <HAL_GPIO_Init+0x330>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d6e:	4a5a      	ldr	r2, [pc, #360]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_Init+0x242>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	; (8001edc <HAL_GPIO_Init+0x338>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_Init+0x23e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4e      	ldr	r2, [pc, #312]	; (8001ee0 <HAL_GPIO_Init+0x33c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x23a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <HAL_GPIO_Init+0x340>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x236>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	; (8001ee8 <HAL_GPIO_Init+0x344>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x232>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <HAL_GPIO_Init+0x348>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x22e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	; (8001ef0 <HAL_GPIO_Init+0x34c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x22a>
 8001dca:	2306      	movs	r3, #6
 8001dcc:	e00c      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e00a      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x244>
 8001de6:	2300      	movs	r3, #0
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	f002 0203 	and.w	r2, r2, #3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4093      	lsls	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df8:	4937      	ldr	r1, [pc, #220]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e2a:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e30:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea8:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f ae78 	bne.w	8001bb4 <HAL_GPIO_Init+0x10>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	48000400 	.word	0x48000400
 8001ee0:	48000800 	.word	0x48000800
 8001ee4:	48000c00 	.word	0x48000c00
 8001ee8:	48001000 	.word	0x48001000
 8001eec:	48001400 	.word	0x48001400
 8001ef0:	48001800 	.word	0x48001800
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	b08f      	sub	sp, #60	; 0x3c
 8001f5c:	af0a      	add	r7, sp, #40	; 0x28
 8001f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e116      	b.n	8002198 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f00a f885 	bl	800c094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 fa2a 	bl	8008402 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	687e      	ldr	r6, [r7, #4]
 8001fb6:	466d      	mov	r5, sp
 8001fb8:	f106 0410 	add.w	r4, r6, #16
 8001fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fcc:	1d33      	adds	r3, r6, #4
 8001fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f006 f93d 	bl	8008250 <USB_CoreInit>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d7      	b.n	8002198 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f006 fa18 	bl	8008424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e04a      	b.n	8002090 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	333d      	adds	r3, #61	; 0x3d
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	333c      	adds	r3, #60	; 0x3c
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	b298      	uxth	r0, r3
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3356      	adds	r3, #86	; 0x56
 8002036:	4602      	mov	r2, r0
 8002038:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3340      	adds	r3, #64	; 0x40
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3344      	adds	r3, #68	; 0x44
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3348      	adds	r3, #72	; 0x48
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	334c      	adds	r3, #76	; 0x4c
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3af      	bcc.n	8001ffa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e044      	b.n	800212a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	3301      	adds	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3b5      	bcc.n	80020a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	687e      	ldr	r6, [r7, #4]
 800213c:	466d      	mov	r5, sp
 800213e:	f106 0410 	add.w	r4, r6, #16
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002152:	1d33      	adds	r3, r6, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f006 f9b0 	bl	80084bc <USB_DevInit>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e014      	b.n	8002198 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f001 f86a 	bl	8003260 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f007 f95e 	bl	8009452 <USB_DevDisconnect>

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_Start+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e01c      	b.n	80021f6 <HAL_PCD_Start+0x56>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 f8ff 	bl	80083e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f007 f912 	bl	8009410 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b590      	push	{r4, r7, lr}
 8002200:	b08d      	sub	sp, #52	; 0x34
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f007 f9d0 	bl	80095ba <USB_GetMode>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 847e 	bne.w	8002b1e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f007 f934 	bl	8009494 <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8474 	beq.w	8002b1c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f007 f921 	bl	8009494 <USB_ReadInterrupts>
 8002252:	4603      	mov	r3, r0
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d107      	bne.n	800226c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f002 0202 	and.w	r2, r2, #2
 800226a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f007 f90f 	bl	8009494 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b10      	cmp	r3, #16
 800227e:	d161      	bne.n	8002344 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0210 	bic.w	r2, r2, #16
 800228e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 020f 	and.w	r2, r3, #15
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	0c5b      	lsrs	r3, r3, #17
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d124      	bne.n	8002306 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d035      	beq.n	8002334 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6a38      	ldr	r0, [r7, #32]
 80022dc:	f006 ff46 	bl	800916c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ec:	441a      	add	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022fe:	441a      	add	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	e016      	b.n	8002334 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	0c5b      	lsrs	r3, r3, #17
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	2b06      	cmp	r3, #6
 8002310:	d110      	bne.n	8002334 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002318:	2208      	movs	r2, #8
 800231a:	4619      	mov	r1, r3
 800231c:	6a38      	ldr	r0, [r7, #32]
 800231e:	f006 ff25 	bl	800916c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800232e:	441a      	add	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0210 	orr.w	r2, r2, #16
 8002342:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f007 f8a3 	bl	8009494 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002358:	f040 80a7 	bne.w	80024aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f007 f8a8 	bl	80094ba <USB_ReadDevAllOutEpInterrupt>
 800236a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800236c:	e099      	b.n	80024a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 808e 	beq.w	8002496 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f007 f8cc 	bl	8009522 <USB_ReadDevOutEPInterrupt>
 800238a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	461a      	mov	r2, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fe7e 	bl	80030ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c6:	461a      	mov	r2, r3
 80023c8:	2308      	movs	r3, #8
 80023ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 feba 	bl	8003148 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	2310      	movs	r3, #16
 80023ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d109      	bne.n	800241a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002418:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f009 ff4d 	bl	800c2e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002456:	461a      	mov	r2, r3
 8002458:	2302      	movs	r3, #2
 800245a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	461a      	mov	r2, r3
 8002474:	2320      	movs	r3, #32
 8002476:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	461a      	mov	r2, r3
 8002490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002494:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f af62 	bne.w	800236e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f006 fff0 	bl	8009494 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024be:	f040 80a4 	bne.w	800260a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f007 f811 	bl	80094ee <USB_ReadDevAllInEpInterrupt>
 80024cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024d2:	e096      	b.n	8002602 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 808b 	beq.w	80025f6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 f837 	bl	800955e <USB_ReadDevInEPInterrupt>
 80024f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	2201      	movs	r2, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	69f9      	ldr	r1, [r7, #28]
 8002518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800251c:	4013      	ands	r3, r2
 800251e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252c:	461a      	mov	r2, r3
 800252e:	2301      	movs	r3, #1
 8002530:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	b2db      	uxtb	r3, r3
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f009 fe3e 	bl	800c1ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002554:	461a      	mov	r2, r3
 8002556:	2308      	movs	r3, #8
 8002558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002570:	461a      	mov	r2, r3
 8002572:	2310      	movs	r3, #16
 8002574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258c:	461a      	mov	r2, r3
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800259c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259e:	6a38      	ldr	r0, [r7, #32]
 80025a0:	f006 f8ce 	bl	8008740 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	3338      	adds	r3, #56	; 0x38
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	3304      	adds	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	78db      	ldrb	r3, [r3, #3]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2200      	movs	r2, #0
 80025c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f009 fe9b 	bl	800c308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025de:	461a      	mov	r2, r3
 80025e0:	2302      	movs	r3, #2
 80025e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fcd2 	bl	8002f9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3301      	adds	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f af65 	bne.w	80024d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f006 ff40 	bl	8009494 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800261a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800261e:	d122      	bne.n	8002666 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800263a:	2b01      	cmp	r3, #1
 800263c:	d108      	bne.n	8002650 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002646:	2100      	movs	r1, #0
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f00a f8cf 	bl	800c7ec <HAL_PCDEx_LPM_Callback>
 800264e:	e002      	b.n	8002656 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f009 fe1f 	bl	800c294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f006 ff12 	bl	8009494 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267a:	d112      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f009 fddb 	bl	800c248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f006 fef4 	bl	8009494 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b6:	d121      	bne.n	80026fc <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d111      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026ec:	2101      	movs	r1, #1
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f00a f87c 	bl	800c7ec <HAL_PCDEx_LPM_Callback>
 80026f4:	e002      	b.n	80026fc <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f009 fda6 	bl	800c248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f006 fec7 	bl	8009494 <USB_ReadInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	f040 80b5 	bne.w	800287e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2110      	movs	r1, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f006 f806 	bl	8008740 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002738:	e046      	b.n	80027c8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002746:	461a      	mov	r2, r3
 8002748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800274c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	440a      	add	r2, r1
 8002764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800276c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277a:	461a      	mov	r2, r3
 800277c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002780:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002792:	0151      	lsls	r1, r2, #5
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	440a      	add	r2, r1
 8002798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800279c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b2:	0151      	lsls	r1, r2, #5
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	440a      	add	r2, r1
 80027b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	3301      	adds	r3, #1
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3b3      	bcc.n	800273a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f043 030b 	orr.w	r3, r3, #11
 8002802:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002814:	f043 030b 	orr.w	r3, r3, #11
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	e015      	b.n	8002848 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800282e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002832:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002842:	f043 030b 	orr.w	r3, r3, #11
 8002846:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002856:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800285a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f006 fed7 	bl	800961c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800287c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f006 fe06 	bl	8009494 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d124      	bne.n	80028de <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f006 fe9c 	bl	80095d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f005 ffc9 	bl	800883a <USB_GetDevSpeed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681c      	ldr	r4, [r3, #0]
 80028b4:	f001 fad2 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 80028b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f005 fcf0 	bl	80082a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f009 fc9e 	bl	800c20a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f006 fdd6 	bl	8009494 <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d10a      	bne.n	8002908 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f009 fc7b 	bl	800c1ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f002 0208 	and.w	r2, r2, #8
 8002906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f006 fdc1 	bl	8009494 <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d122      	bne.n	8002962 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e014      	b.n	8002958 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 faf3 	bl	8002f38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	429a      	cmp	r2, r3
 8002960:	d3e5      	bcc.n	800292e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f006 fd94 	bl	8009494 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002976:	d13b      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002978:	2301      	movs	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e02b      	b.n	80029d6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3340      	adds	r3, #64	; 0x40
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d115      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	da12      	bge.n	80029d0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	333f      	adds	r3, #63	; 0x3f
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fab4 	bl	8002f38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3ce      	bcc.n	800297e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f006 fd4d 	bl	8009494 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a04:	d155      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a06:	2301      	movs	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e045      	b.n	8002a98 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d12e      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da2b      	bge.n	8002a92 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d121      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8e:	6053      	str	r3, [r2, #4]
            break;
 8002a90:	e007      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3b4      	bcc.n	8002a0c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f006 fcec 	bl	8009494 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d10a      	bne.n	8002ade <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f009 fc2f 	bl	800c32c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f006 fcd6 	bl	8009494 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d115      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f009 fc1f 	bl	800c348 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e000      	b.n	8002b1e <HAL_PCD_IRQHandler+0x920>
      return;
 8002b1c:	bf00      	nop
    }
  }
}
 8002b1e:	3734      	adds	r7, #52	; 0x34
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_PCD_SetAddress+0x1a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e013      	b.n	8002b66 <HAL_PCD_SetAddress+0x42>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f006 fc34 	bl	80093c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	70fb      	strb	r3, [r7, #3]
 8002b80:	460b      	mov	r3, r1
 8002b82:	803b      	strh	r3, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da0f      	bge.n	8002bb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 020f 	and.w	r2, r3, #15
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	705a      	strb	r2, [r3, #1]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be0:	883a      	ldrh	r2, [r7, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	78ba      	ldrb	r2, [r7, #2]
 8002bea:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bfe:	78bb      	ldrb	r3, [r7, #2]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_EP_Open+0xaa>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e00e      	b.n	8002c36 <HAL_PCD_EP_Open+0xc8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f005 fe26 	bl	8008878 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da0f      	bge.n	8002c72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	3338      	adds	r3, #56	; 0x38
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
 8002c70:	e00f      	b.n	8002c92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_Close+0x6e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e00e      	b.n	8002cca <HAL_PCD_EP_Close+0x8c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 fe64 	bl	8008988 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6979      	ldr	r1, [r7, #20]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f005 ff0a 	bl	8008b40 <USB_EPStartXfer>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002d58:	681b      	ldr	r3, [r3, #0]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	460b      	mov	r3, r1
 8002d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	7afb      	ldrb	r3, [r7, #11]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2201      	movs	r2, #1
 8002da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f005 fec1 	bl	8008b40 <USB_EPStartXfer>

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 020f 	and.w	r2, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d901      	bls.n	8002de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e04e      	b.n	8002e84 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da0f      	bge.n	8002e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 020f 	and.w	r2, r3, #15
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	3338      	adds	r3, #56	; 0x38
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	705a      	strb	r2, [r3, #1]
 8002e0c:	e00d      	b.n	8002e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_PCD_EP_SetStall+0x82>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e01c      	b.n	8002e84 <HAL_PCD_EP_SetStall+0xbc>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f006 f9df 	bl	800921c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f006 fbd1 	bl	800961c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da0f      	bge.n	8002ed2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3338      	adds	r3, #56	; 0x38
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	705a      	strb	r2, [r3, #1]
 8002ed0:	e00f      	b.n	8002ef2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3304      	adds	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_PCD_EP_ClrStall+0x86>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_ClrStall+0xa4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f006 f9e9 	bl	80092f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da0c      	bge.n	8002f66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	3338      	adds	r3, #56	; 0x38
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e00c      	b.n	8002f80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 f80c 	bl	8008fa4 <USB_EPStopXfer>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f90:	7afb      	ldrb	r3, [r7, #11]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b088      	sub	sp, #32
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	3338      	adds	r3, #56	; 0x38
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d901      	bls.n	8002fd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d902      	bls.n	8002fee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff6:	e026      	b.n	8003046 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	429a      	cmp	r2, r3
 800300c:	d902      	bls.n	8003014 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3303      	adds	r3, #3
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68d9      	ldr	r1, [r3, #12]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	b29b      	uxth	r3, r3
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f006 f865 	bl	80090f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	441a      	add	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d809      	bhi.n	8003070 <PCD_WriteEmptyTxFifo+0xd6>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003064:	429a      	cmp	r2, r3
 8003066:	d203      	bcs.n	8003070 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1c3      	bne.n	8002ff8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	429a      	cmp	r2, r3
 800307a:	d811      	bhi.n	80030a0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	2201      	movs	r2, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	43db      	mvns	r3, r3
 8003096:	6939      	ldr	r1, [r7, #16]
 8003098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800309c:	4013      	ands	r3, r2
 800309e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	333c      	adds	r3, #60	; 0x3c
 80030c4:	3304      	adds	r3, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <PCD_EP_OutXfrComplete_int+0x98>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d124      	bne.n	800312c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fe:	6093      	str	r3, [r2, #8]
 8003100:	e01a      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	2320      	movs	r3, #32
 800311c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f009 f82d 	bl	800c184 <HAL_PCD_DataOutStageCallback>
 800312a:	e005      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f009 f826 	bl	800c184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	4f54310a 	.word	0x4f54310a

08003148 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	333c      	adds	r3, #60	; 0x3c
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <PCD_EP_OutSetupPacket_int+0x64>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d90e      	bls.n	800319c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f008 ffdf 	bl	800c160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	4f54300a 	.word	0x4f54300a

080031b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
 80031bc:	4613      	mov	r3, r2
 80031be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031ce:	883b      	ldrh	r3, [r7, #0]
 80031d0:	0419      	lsls	r1, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	430a      	orrs	r2, r1
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
 80031dc:	e028      	b.n	8003230 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e00d      	b.n	800320e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3340      	adds	r3, #64	; 0x40
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	3b01      	subs	r3, #1
 8003214:	429a      	cmp	r2, r3
 8003216:	d3ec      	bcc.n	80031f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003218:	883b      	ldrh	r3, [r7, #0]
 800321a:	0418      	lsls	r0, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	3b01      	subs	r3, #1
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	4302      	orrs	r2, r0
 8003228:	3340      	adds	r3, #64	; 0x40
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	f043 0303 	orr.w	r3, r3, #3
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d2:	d130      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d038      	beq.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2232      	movs	r2, #50	; 0x32
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0c9b      	lsrs	r3, r3, #18
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003308:	e002      	b.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d102      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x60>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f2      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d110      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e00f      	b.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d007      	beq.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003352:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40007000 	.word	0x40007000
 8003368:	20000004 	.word	0x20000004
 800336c:	431bde83 	.word	0x431bde83

08003370 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_PWREx_EnableVddUSB+0x1c>)
 800337a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800337e:	6053      	str	r3, [r2, #4]
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40007000 	.word	0x40007000

08003390 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e3ca      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	4b97      	ldr	r3, [pc, #604]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	4b94      	ldr	r3, [pc, #592]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80e4 	beq.w	800358c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_RCC_OscConfig+0x4a>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	f040 808b 	bne.w	80034e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 8087 	bne.w	80034e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033da:	4b89      	ldr	r3, [pc, #548]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e3a2      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	4b82      	ldr	r3, [pc, #520]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_RCC_OscConfig+0x7c>
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340a:	e005      	b.n	8003418 <HAL_RCC_OscConfig+0x88>
 800340c:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003418:	4293      	cmp	r3, r2
 800341a:	d223      	bcs.n	8003464 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd53 	bl	8003ecc <RCC_SetFlashLatencyFromMSIRange>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e383      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003430:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a72      	ldr	r2, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b70      	ldr	r3, [pc, #448]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	496d      	ldr	r1, [pc, #436]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344e:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	4968      	ldr	r1, [pc, #416]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
 8003462:	e025      	b.n	80034b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a65      	ldr	r2, [pc, #404]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4960      	ldr	r1, [pc, #384]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003482:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	495b      	ldr	r1, [pc, #364]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fd13 	bl	8003ecc <RCC_SetFlashLatencyFromMSIRange>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e343      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b0:	f000 fc4a 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b52      	ldr	r3, [pc, #328]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	4950      	ldr	r1, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	4a4e      	ldr	r2, [pc, #312]	; (8003608 <HAL_RCC_OscConfig+0x278>)
 80034ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d0:	4b4e      	ldr	r3, [pc, #312]	; (800360c <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd ff9b 	bl	8001410 <HAL_InitTick>
 80034da:	4603      	mov	r3, r0
 80034dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d052      	beq.n	800358a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	e327      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a42      	ldr	r2, [pc, #264]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fc:	f7fd ffd8 	bl	80014b0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003504:	f7fd ffd4 	bl	80014b0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e310      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a36      	ldr	r2, [pc, #216]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4931      	ldr	r1, [pc, #196]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	492c      	ldr	r1, [pc, #176]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
 8003554:	e01a      	b.n	800358c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003562:	f7fd ffa5 	bl	80014b0 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800356a:	f7fd ffa1 	bl	80014b0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e2dd      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800357c:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x1da>
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d074      	beq.n	8003682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x21a>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	d10e      	bne.n	80035c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d064      	beq.n	8003680 <HAL_RCC_OscConfig+0x2f0>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d160      	bne.n	8003680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e2ba      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x24a>
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	e026      	b.n	8003628 <HAL_RCC_OscConfig+0x298>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e2:	d115      	bne.n	8003610 <HAL_RCC_OscConfig+0x280>
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a05      	ldr	r2, [pc, #20]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a02      	ldr	r2, [pc, #8]	; (8003600 <HAL_RCC_OscConfig+0x270>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x298>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	0800d28c 	.word	0x0800d28c
 8003608:	20000004 	.word	0x20000004
 800360c:	20000008 	.word	0x20000008
 8003610:	4ba0      	ldr	r3, [pc, #640]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a9f      	ldr	r2, [pc, #636]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b9d      	ldr	r3, [pc, #628]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a9c      	ldr	r2, [pc, #624]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fd ff3e 	bl	80014b0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fd ff3a 	bl	80014b0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e276      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	4b92      	ldr	r3, [pc, #584]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x2a8>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd ff2a 	bl	80014b0 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fd ff26 	bl	80014b0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e262      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d0>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d060      	beq.n	8003750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_OscConfig+0x310>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d119      	bne.n	80036ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d116      	bne.n	80036ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a0:	4b7c      	ldr	r3, [pc, #496]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x328>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e23f      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	4973      	ldr	r1, [pc, #460]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036cc:	e040      	b.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d023      	beq.n	800371e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d6:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6e      	ldr	r2, [pc, #440]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fd fee5 	bl	80014b0 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ea:	f7fd fee1 	bl	80014b0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e21d      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fc:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	495f      	ldr	r1, [pc, #380]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
 800371c:	e018      	b.n	8003750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5c      	ldr	r2, [pc, #368]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fd fec1 	bl	80014b0 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003732:	f7fd febd 	bl	80014b0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1f9      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003744:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d03c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01c      	beq.n	800379e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fd fe9c 	bl	80014b0 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd fe98 	bl	80014b0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1d4      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <HAL_RCC_OscConfig+0x3ec>
 800379c:	e01b      	b.n	80037d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	4a3b      	ldr	r2, [pc, #236]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fd fe7f 	bl	80014b0 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fd fe7b 	bl	80014b0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1b7      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ef      	bne.n	80037b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a6 	beq.w	8003930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e4:	2300      	movs	r3, #0
 80037e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x508>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d118      	bne.n	800384e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_OscConfig+0x508>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <HAL_RCC_OscConfig+0x508>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003828:	f7fd fe42 	bl	80014b0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fd fe3e 	bl	80014b0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e17a      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <HAL_RCC_OscConfig+0x508>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <HAL_RCC_OscConfig+0x4d8>
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003866:	e029      	b.n	80038bc <HAL_RCC_OscConfig+0x52c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d115      	bne.n	800389c <HAL_RCC_OscConfig+0x50c>
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a03      	ldr	r2, [pc, #12]	; (8003894 <HAL_RCC_OscConfig+0x504>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003890:	e014      	b.n	80038bc <HAL_RCC_OscConfig+0x52c>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
 800389c:	4b9c      	ldr	r3, [pc, #624]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	4a9b      	ldr	r2, [pc, #620]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ac:	4b98      	ldr	r3, [pc, #608]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	4a97      	ldr	r2, [pc, #604]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fd fdf4 	bl	80014b0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fd fdf0 	bl	80014b0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e12a      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	4b8b      	ldr	r3, [pc, #556]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ed      	beq.n	80038cc <HAL_RCC_OscConfig+0x53c>
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd fddd 	bl	80014b0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd fdd9 	bl	80014b0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e113      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003910:	4b7f      	ldr	r3, [pc, #508]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ed      	bne.n	80038fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b7a      	ldr	r3, [pc, #488]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	4a79      	ldr	r2, [pc, #484]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80fe 	beq.w	8003b36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	2b02      	cmp	r3, #2
 8003940:	f040 80d0 	bne.w	8003ae4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003944:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	429a      	cmp	r2, r3
 8003956:	d130      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	3b01      	subs	r3, #1
 8003964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d127      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11f      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003984:	2a07      	cmp	r2, #7
 8003986:	bf14      	ite	ne
 8003988:	2201      	movne	r2, #1
 800398a:	2200      	moveq	r2, #0
 800398c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800398e:	4293      	cmp	r3, r2
 8003990:	d113      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d06e      	beq.n	8003a98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d069      	beq.n	8003a94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0ad      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 80039e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039e8:	f7fd fd62 	bl	80014b0 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fd5e 	bl	80014b0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e09a      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a02:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0e:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCC_OscConfig+0x784>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a28:	0212      	lsls	r2, r2, #8
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a30:	0852      	lsrs	r2, r2, #1
 8003a32:	3a01      	subs	r2, #1
 8003a34:	0552      	lsls	r2, r2, #21
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a3c:	0852      	lsrs	r2, r2, #1
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	0652      	lsls	r2, r2, #25
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a48:	0912      	lsrs	r2, r2, #4
 8003a4a:	0452      	lsls	r2, r2, #17
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4930      	ldr	r1, [pc, #192]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a54:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6c:	f7fd fd20 	bl	80014b0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fd1c 	bl	80014b0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a92:	e050      	b.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04f      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d148      	bne.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003abc:	f7fd fcf8 	bl	80014b0 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fcf4 	bl	80014b0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e030      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x734>
 8003ae2:	e028      	b.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d023      	beq.n	8003b32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <HAL_RCC_OscConfig+0x780>)
 8003af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fcdb 	bl	80014b0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afc:	e00c      	b.n	8003b18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fd fcd7 	bl	80014b0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d905      	bls.n	8003b18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e013      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x7b0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ec      	bne.n	8003afe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x7b0>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4905      	ldr	r1, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x7b0>)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x7b4>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e001      	b.n	8003b36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	feeefffc 	.word	0xfeeefffc

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0e7      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b72      	ldr	r3, [pc, #456]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4970      	ldr	r1, [pc, #448]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b6e      	ldr	r3, [pc, #440]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cf      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d908      	bls.n	8003bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4960      	ldr	r1, [pc, #384]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04c      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0a6      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	4b54      	ldr	r3, [pc, #336]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e09a      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfe:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e08e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e086      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4943      	ldr	r1, [pc, #268]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fc3e 	bl	80014b0 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd fc3a 	bl	80014b0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e06e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d208      	bcs.n	8003c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	492b      	ldr	r1, [pc, #172]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d210      	bcs.n	8003cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 0207 	bic.w	r2, r3, #7
 8003ca4:	4923      	ldr	r1, [pc, #140]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e036      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4910      	ldr	r1, [pc, #64]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cfc:	f000 f824 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	490b      	ldr	r1, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x1f4>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1f8>)
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1fc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fb75 	bl	8001410 <HAL_InitTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	0800d28c 	.word	0x0800d28c
 8003d40:	20000004 	.word	0x20000004
 8003d44:	20000008 	.word	0x20000008

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d56:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d121      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d11e      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e005      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da4:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d134      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0xa6>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d003      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dec:	e005      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df0:	617b      	str	r3, [r7, #20]
      break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df6:	617b      	str	r3, [r7, #20]
      break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	617b      	str	r3, [r7, #20]
      break;
 8003dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	fb03 f202 	mul.w	r2, r3, r2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0e5b      	lsrs	r3, r3, #25
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	3301      	adds	r3, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e40:	69bb      	ldr	r3, [r7, #24]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	0800d2a4 	.word	0x0800d2a4
 8003e58:	00f42400 	.word	0x00f42400

08003e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e78:	f7ff fff0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	0800d29c 	.word	0x0800d29c

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ea4:	f7ff ffda 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0adb      	lsrs	r3, r3, #11
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	0800d29c 	.word	0x0800d29c

08003ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ee4:	f7ff f9e0 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 8003ee8:	6178      	str	r0, [r7, #20]
 8003eea:	e014      	b.n	8003f16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f04:	f7ff f9d0 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 8003f08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1c:	d10b      	bne.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d919      	bls.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2ba0      	cmp	r3, #160	; 0xa0
 8003f28:	d902      	bls.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e013      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f30:	2301      	movs	r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	e010      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d902      	bls.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	e00a      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d102      	bne.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f48:	2302      	movs	r3, #2
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e004      	b.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b70      	cmp	r3, #112	; 0x70
 8003f52:	d101      	bne.n	8003f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f54:	2301      	movs	r3, #1
 8003f56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 0207 	bic.w	r2, r3, #7
 8003f60:	4909      	ldr	r1, [pc, #36]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40022000 	.word	0x40022000

08003f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f94:	2300      	movs	r3, #0
 8003f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d041      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fb0:	d02a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fb6:	d824      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fc2:	d81e      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fce:	e018      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd0:	4b86      	ldr	r3, [pc, #536]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a85      	ldr	r2, [pc, #532]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fdc:	e015      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f827 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fee:	e00c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3320      	adds	r3, #32
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f912 	bl	8005220 <RCCEx_PLLSAI2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	74fb      	strb	r3, [r7, #19]
      break;
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004010:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401e:	4973      	ldr	r1, [pc, #460]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d041      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004040:	d02a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004042:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004046:	d824      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404c:	d008      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800404e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004052:	d81e      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405c:	d010      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800405e:	e018      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004060:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a61      	ldr	r2, [pc, #388]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800406c:	e015      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f000 ffdf 	bl	8005038 <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800407e:	e00c      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3320      	adds	r3, #32
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f8ca 	bl	8005220 <RCCEx_PLLSAI2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	74fb      	strb	r3, [r7, #19]
      break;
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ae:	494f      	ldr	r1, [pc, #316]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040b6:	e001      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80a0 	beq.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4a40      	ldr	r2, [pc, #256]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
 80040f0:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fc:	2301      	movs	r3, #1
 80040fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004100:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a3a      	ldr	r2, [pc, #232]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800410c:	f7fd f9d0 	bl	80014b0 <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004112:	e009      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004114:	f7fd f9cc 	bl	80014b0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d902      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	74fb      	strb	r3, [r7, #19]
        break;
 8004126:	e005      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d15c      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413a:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004144:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004164:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a20      	ldr	r2, [pc, #128]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fd f98b 	bl	80014b0 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419c:	e00b      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd f987 	bl	80014b0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d902      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	74fb      	strb	r3, [r7, #19]
            break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ec      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041da:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f8:	7c7b      	ldrb	r3, [r7, #17]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b9e      	ldr	r3, [pc, #632]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a9d      	ldr	r2, [pc, #628]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004216:	4b98      	ldr	r3, [pc, #608]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0203 	bic.w	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	4994      	ldr	r1, [pc, #592]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004238:	4b8f      	ldr	r3, [pc, #572]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 020c 	bic.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	498c      	ldr	r1, [pc, #560]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425a:	4b87      	ldr	r3, [pc, #540]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	4983      	ldr	r1, [pc, #524]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800427c:	4b7e      	ldr	r3, [pc, #504]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	497b      	ldr	r1, [pc, #492]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800429e:	4b76      	ldr	r3, [pc, #472]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	4972      	ldr	r1, [pc, #456]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c0:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	496a      	ldr	r1, [pc, #424]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042e2:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	4961      	ldr	r1, [pc, #388]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004304:	4b5c      	ldr	r3, [pc, #368]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004312:	4959      	ldr	r1, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004326:	4b54      	ldr	r3, [pc, #336]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	4950      	ldr	r1, [pc, #320]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	4948      	ldr	r1, [pc, #288]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800436a:	4b43      	ldr	r3, [pc, #268]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	493f      	ldr	r1, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d028      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439a:	4937      	ldr	r1, [pc, #220]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043aa:	d106      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ac:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a31      	ldr	r2, [pc, #196]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b6:	60d3      	str	r3, [r2, #12]
 80043b8:	e011      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c2:	d10c      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fe34 	bl	8005038 <RCCEx_PLLSAI1_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d028      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	491f      	ldr	r1, [pc, #124]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004408:	d106      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004414:	60d3      	str	r3, [r2, #12]
 8004416:	e011      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3304      	adds	r3, #4
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fe05 	bl	8005038 <RCCEx_PLLSAI1_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02b      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	4908      	ldr	r1, [pc, #32]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004466:	d109      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a02      	ldr	r2, [pc, #8]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004472:	60d3      	str	r3, [r2, #12]
 8004474:	e014      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fdd3 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02f      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ba:	4928      	ldr	r1, [pc, #160]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fdb0 	bl	8005038 <RCCEx_PLLSAI1_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d014      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	74bb      	strb	r3, [r7, #18]
 80044e6:	e011      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f0:	d10c      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3320      	adds	r3, #32
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fe91 	bl	8005220 <RCCEx_PLLSAI2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004526:	490d      	ldr	r1, [pc, #52]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454a:	4904      	ldr	r1, [pc, #16]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004552:	7cbb      	ldrb	r3, [r7, #18]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004572:	d13e      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004574:	4bb2      	ldr	r3, [pc, #712]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004586:	d028      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458e:	f200 8540 	bhi.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004598:	d005      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a0:	d00e      	beq.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80045a2:	f000 bd36 	b.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045a6:	4ba6      	ldr	r3, [pc, #664]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f040 8530 	bne.w	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        frequency = LSE_VALUE;
 80045b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ba:	61fb      	str	r3, [r7, #28]
      break;
 80045bc:	f000 bd2b 	b.w	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80045c0:	4b9f      	ldr	r3, [pc, #636]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80045c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	f040 8525 	bne.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          frequency = LSI_VALUE;
 80045d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80045d4:	61fb      	str	r3, [r7, #28]
      break;
 80045d6:	f000 bd20 	b.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045da:	4b99      	ldr	r3, [pc, #612]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045e6:	f040 851a 	bne.w	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        frequency = HSE_VALUE / 32U;
 80045ea:	4b96      	ldr	r3, [pc, #600]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80045ec:	61fb      	str	r3, [r7, #28]
      break;
 80045ee:	f000 bd16 	b.w	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f2:	4b93      	ldr	r3, [pc, #588]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d036      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d840      	bhi.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d003      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d020      	beq.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004614:	e039      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004616:	4b8a      	ldr	r3, [pc, #552]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d116      	bne.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004622:	4b87      	ldr	r3, [pc, #540]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800462e:	4b84      	ldr	r3, [pc, #528]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	e005      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800463a:	4b81      	ldr	r3, [pc, #516]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800463c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	4a80      	ldr	r2, [pc, #512]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800464e:	e01f      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
      break;
 8004654:	e01c      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004656:	4b7a      	ldr	r3, [pc, #488]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d102      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004664:	4b79      	ldr	r3, [pc, #484]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004666:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004668:	e012      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
      break;
 800466e:	e00f      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004670:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800467c:	d102      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800467e:	4b73      	ldr	r3, [pc, #460]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004680:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004682:	e005      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
      break;
 8004688:	e002      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
      break;
 800468e:	bf00      	nop
    }

    switch(PeriphClk)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004696:	f000 80db 	beq.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046a0:	f200 84bf 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046aa:	f000 80d1 	beq.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046b4:	f200 84b5 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046be:	f000 835d 	beq.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	f200 84ab 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	f000 847c 	beq.w	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	f200 84a1 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e6:	f000 82cb 	beq.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f0:	f200 8497 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fa:	f000 80a9 	beq.w	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004704:	f200 848d 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	f000 808f 	beq.w	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	f200 8483 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004722:	d07e      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	f200 847a 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	f000 8401 	beq.w	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473e:	f200 8470 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004748:	f000 83ad 	beq.w	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004752:	f200 8466 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475c:	f000 8377 	beq.w	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	f200 845c 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	f000 8342 	beq.w	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	f200 8454 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b20      	cmp	r3, #32
 800477e:	d84b      	bhi.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 844d 	beq.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	2b1f      	cmp	r3, #31
 800478e:	f200 8448 	bhi.w	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	0800497d 	.word	0x0800497d
 800479c:	080049eb 	.word	0x080049eb
 80047a0:	08005023 	.word	0x08005023
 80047a4:	08004a7f 	.word	0x08004a7f
 80047a8:	08005023 	.word	0x08005023
 80047ac:	08005023 	.word	0x08005023
 80047b0:	08005023 	.word	0x08005023
 80047b4:	08004b05 	.word	0x08004b05
 80047b8:	08005023 	.word	0x08005023
 80047bc:	08005023 	.word	0x08005023
 80047c0:	08005023 	.word	0x08005023
 80047c4:	08005023 	.word	0x08005023
 80047c8:	08005023 	.word	0x08005023
 80047cc:	08005023 	.word	0x08005023
 80047d0:	08005023 	.word	0x08005023
 80047d4:	08004b7d 	.word	0x08004b7d
 80047d8:	08005023 	.word	0x08005023
 80047dc:	08005023 	.word	0x08005023
 80047e0:	08005023 	.word	0x08005023
 80047e4:	08005023 	.word	0x08005023
 80047e8:	08005023 	.word	0x08005023
 80047ec:	08005023 	.word	0x08005023
 80047f0:	08005023 	.word	0x08005023
 80047f4:	08005023 	.word	0x08005023
 80047f8:	08005023 	.word	0x08005023
 80047fc:	08005023 	.word	0x08005023
 8004800:	08005023 	.word	0x08005023
 8004804:	08005023 	.word	0x08005023
 8004808:	08005023 	.word	0x08005023
 800480c:	08005023 	.word	0x08005023
 8004810:	08005023 	.word	0x08005023
 8004814:	08004bff 	.word	0x08004bff
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	f000 82bf 	beq.w	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004820:	e3ff      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004828:	f000 fdd8 	bl	80053dc <RCCEx_GetSAIxPeriphCLKFreq>
 800482c:	61f8      	str	r0, [r7, #28]
      break;
 800482e:	e3f9      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004836:	f000 fdd1 	bl	80053dc <RCCEx_GetSAIxPeriphCLKFreq>
 800483a:	61f8      	str	r0, [r7, #28]
      break;
 800483c:	e3f2      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	0007a120 	.word	0x0007a120
 8004848:	0800d2a4 	.word	0x0800d2a4
 800484c:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004850:	4ba9      	ldr	r3, [pc, #676]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004862:	d00c      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800486a:	d87f      	bhi.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004872:	d04e      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487a:	d01d      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          break;
 800487c:	e076      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800487e:	4b9e      	ldr	r3, [pc, #632]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d172      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800488a:	4b9b      	ldr	r3, [pc, #620]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8004896:	4b98      	ldr	r3, [pc, #608]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	e005      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80048a2:	4b95      	ldr	r3, [pc, #596]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	4a93      	ldr	r2, [pc, #588]	; (8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b4:	61fb      	str	r3, [r7, #28]
          break;
 80048b6:	e05b      	b.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80048b8:	4b8f      	ldr	r3, [pc, #572]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c4:	d156      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80048c6:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d2:	d14f      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80048d4:	4b88      	ldr	r3, [pc, #544]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048de:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	fb03 f202 	mul.w	r2, r3, r2
 80048e8:	4b83      	ldr	r3, [pc, #524]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	3301      	adds	r3, #1
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80048fa:	4b7f      	ldr	r3, [pc, #508]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	0d5b      	lsrs	r3, r3, #21
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	3301      	adds	r3, #1
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	61fb      	str	r3, [r7, #28]
          break;
 8004910:	e030      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004912:	4b79      	ldr	r3, [pc, #484]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800491e:	d12b      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004920:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d124      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800492e:	4b72      	ldr	r3, [pc, #456]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004938:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	fb03 f202 	mul.w	r2, r3, r2
 8004942:	4b6d      	ldr	r3, [pc, #436]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	3301      	adds	r3, #1
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004954:	4b68      	ldr	r3, [pc, #416]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	0d5b      	lsrs	r3, r3, #21
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	61fb      	str	r3, [r7, #28]
          break;
 800496a:	e005      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          break;
 800496c:	bf00      	nop
 800496e:	e359      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004970:	bf00      	nop
 8004972:	e357      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004974:	bf00      	nop
 8004976:	e355      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004978:	bf00      	nop
        break;
 800497a:	e353      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800497c:	4b5e      	ldr	r3, [pc, #376]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d827      	bhi.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049ad 	.word	0x080049ad
 800499c:	080049b5 	.word	0x080049b5
 80049a0:	080049c9 	.word	0x080049c9
          frequency = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7ff fa7c 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
          break;
 80049aa:	e01d      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ac:	f7ff f9cc 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 80049b0:	61f8      	str	r0, [r7, #28]
          break;
 80049b2:	e019      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049b4:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c0:	d10f      	bne.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            frequency = HSI_VALUE;
 80049c2:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80049c4:	61fb      	str	r3, [r7, #28]
          break;
 80049c6:	e00c      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049c8:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d107      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049da:	61fb      	str	r3, [r7, #28]
          break;
 80049dc:	e003      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          break;
 80049de:	bf00      	nop
 80049e0:	e320      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 80049e2:	bf00      	nop
 80049e4:	e31e      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 80049e6:	bf00      	nop
        break;
 80049e8:	e31c      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80049ea:	4b43      	ldr	r3, [pc, #268]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d83a      	bhi.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a73 	.word	0x08004a73
 8004a0c:	08004a73 	.word	0x08004a73
 8004a10:	08004a73 	.word	0x08004a73
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a73 	.word	0x08004a73
 8004a1c:	08004a73 	.word	0x08004a73
 8004a20:	08004a73 	.word	0x08004a73
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a73 	.word	0x08004a73
 8004a2c:	08004a73 	.word	0x08004a73
 8004a30:	08004a73 	.word	0x08004a73
 8004a34:	08004a5d 	.word	0x08004a5d
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7ff fa1c 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	61f8      	str	r0, [r7, #28]
          break;
 8004a3e:	e01d      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a40:	f7ff f982 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004a44:	61f8      	str	r0, [r7, #28]
          break;
 8004a46:	e019      	b.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d10f      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSI_VALUE;
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004a58:	61fb      	str	r3, [r7, #28]
          break;
 8004a5a:	e00c      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a5c:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d107      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6e:	61fb      	str	r3, [r7, #28]
          break;
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          break;
 8004a72:	bf00      	nop
 8004a74:	e2d6      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004a76:	bf00      	nop
 8004a78:	e2d4      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004a7a:	bf00      	nop
        break;
 8004a7c:	e2d2      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b30      	cmp	r3, #48	; 0x30
 8004a8e:	d021      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d829      	bhi.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d011      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d823      	bhi.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d004      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          break;
 8004aae:	e01c      	b.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7ff f9e0 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	61f8      	str	r0, [r7, #28]
          break;
 8004ab6:	e01d      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ab8:	f7ff f946 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004abc:	61f8      	str	r0, [r7, #28]
          break;
 8004abe:	e019      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d10f      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = HSI_VALUE;
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004ad0:	61fb      	str	r3, [r7, #28]
          break;
 8004ad2:	e00c      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	61fb      	str	r3, [r7, #28]
          break;
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          break;
 8004aea:	bf00      	nop
 8004aec:	e29a      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004aee:	bf00      	nop
 8004af0:	e298      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004af2:	bf00      	nop
        break;
 8004af4:	e296      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800d2a4 	.word	0x0800d2a4
 8004b00:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004b04:	4b9b      	ldr	r3, [pc, #620]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2bc0      	cmp	r3, #192	; 0xc0
 8004b14:	d021      	beq.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2bc0      	cmp	r3, #192	; 0xc0
 8004b1a:	d829      	bhi.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d011      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d823      	bhi.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d004      	beq.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          break;
 8004b34:	e01c      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b36:	f7ff f99d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004b3a:	61f8      	str	r0, [r7, #28]
          break;
 8004b3c:	e01d      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b3e:	f7ff f903 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004b42:	61f8      	str	r0, [r7, #28]
          break;
 8004b44:	e019      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b46:	4b8b      	ldr	r3, [pc, #556]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	d10f      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
            frequency = HSI_VALUE;
 8004b54:	4b88      	ldr	r3, [pc, #544]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b56:	61fb      	str	r3, [r7, #28]
          break;
 8004b58:	e00c      	b.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b5a:	4b86      	ldr	r3, [pc, #536]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d107      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = LSE_VALUE;
 8004b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6c:	61fb      	str	r3, [r7, #28]
          break;
 8004b6e:	e003      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          break;
 8004b70:	bf00      	nop
 8004b72:	e257      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004b74:	bf00      	nop
 8004b76:	e255      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004b78:	bf00      	nop
        break;
 8004b7a:	e253      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004b7c:	4b7d      	ldr	r3, [pc, #500]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8e:	d025      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d82c      	bhi.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9e:	d013      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba6:	d824      	bhi.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb4:	d004      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          break;
 8004bb6:	e01c      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f7ff f95c 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	61f8      	str	r0, [r7, #28]
          break;
 8004bbe:	e01d      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bc0:	f7ff f8c2 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004bc4:	61f8      	str	r0, [r7, #28]
          break;
 8004bc6:	e019      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            frequency = HSI_VALUE;
 8004bd6:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bd8:	61fb      	str	r3, [r7, #28]
          break;
 8004bda:	e00c      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bdc:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	61fb      	str	r3, [r7, #28]
          break;
 8004bf0:	e003      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          break;
 8004bf2:	bf00      	nop
 8004bf4:	e216      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004bf6:	bf00      	nop
 8004bf8:	e214      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004bfa:	bf00      	nop
        break;
 8004bfc:	e212      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c10:	d025      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c18:	d82c      	bhi.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d013      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	d824      	bhi.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	d004      	beq.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004c38:	e01c      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f7ff f91b 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004c3e:	61f8      	str	r0, [r7, #28]
          break;
 8004c40:	e01d      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c42:	f7ff f881 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004c46:	61f8      	str	r0, [r7, #28]
          break;
 8004c48:	e019      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c4a:	4b4a      	ldr	r3, [pc, #296]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d10f      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
            frequency = HSI_VALUE;
 8004c58:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004c5a:	61fb      	str	r3, [r7, #28]
          break;
 8004c5c:	e00c      	b.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c5e:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = LSE_VALUE;
 8004c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c70:	61fb      	str	r3, [r7, #28]
          break;
 8004c72:	e003      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          break;
 8004c74:	bf00      	nop
 8004c76:	e1d5      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004c78:	bf00      	nop
 8004c7a:	e1d3      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004c7c:	bf00      	nop
        break;
 8004c7e:	e1d1      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004c80:	4b3c      	ldr	r3, [pc, #240]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c92:	d00c      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c9a:	d864      	bhi.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004caa:	d030      	beq.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
          break;
 8004cac:	e05b      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cae:	f7ff f84b 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61f8      	str	r0, [r7, #28]
          break;
 8004cb4:	e05c      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc2:	d152      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d04c      	beq.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cda:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	fb03 f202 	mul.w	r2, r3, r2
 8004ce4:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	3301      	adds	r3, #1
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	0e5b      	lsrs	r3, r3, #25
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	3301      	adds	r3, #1
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	61fb      	str	r3, [r7, #28]
          break;
 8004d0c:	e02d      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1a:	d128      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004d1c:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d022      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d32:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	fb03 f202 	mul.w	r2, r3, r2
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	3301      	adds	r3, #1
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	0e5b      	lsrs	r3, r3, #25
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	61fb      	str	r3, [r7, #28]
          break;
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          break;
 8004d66:	bf00      	nop
 8004d68:	e15c      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004d6a:	bf00      	nop
 8004d6c:	e15a      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004d6e:	bf00      	nop
        break;
 8004d70:	e158      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004d7c:	4b9d      	ldr	r3, [pc, #628]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d86:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004d8e:	f7ff f887 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8004d92:	61f8      	str	r0, [r7, #28]
        break;
 8004d94:	e146      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fe ffd7 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004d9a:	61f8      	str	r0, [r7, #28]
        break;
 8004d9c:	e142      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d9e:	4b95      	ldr	r3, [pc, #596]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db0:	d013      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db8:	d819      	bhi.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d004      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8004dc8:	e011      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7ff f853 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004dce:	61f8      	str	r0, [r7, #28]
          break;
 8004dd0:	e010      	b.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dd2:	f7fe ffb9 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004dd6:	61f8      	str	r0, [r7, #28]
          break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dda:	4b86      	ldr	r3, [pc, #536]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d104      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            frequency = HSI_VALUE;
 8004de8:	4b83      	ldr	r3, [pc, #524]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dea:	61fb      	str	r3, [r7, #28]
          break;
 8004dec:	e001      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 8004dee:	bf00      	nop
 8004df0:	e118      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004df2:	bf00      	nop
        break;
 8004df4:	e116      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004df6:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e08:	d013      	beq.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e10:	d819      	bhi.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1e:	d004      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
          break;
 8004e20:	e011      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e22:	f7ff f827 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004e26:	61f8      	str	r0, [r7, #28]
          break;
 8004e28:	e010      	b.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe ff8d 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004e2e:	61f8      	str	r0, [r7, #28]
          break;
 8004e30:	e00c      	b.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e32:	4b70      	ldr	r3, [pc, #448]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3e:	d104      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8004e40:	4b6d      	ldr	r3, [pc, #436]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e42:	61fb      	str	r3, [r7, #28]
          break;
 8004e44:	e001      	b.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          break;
 8004e46:	bf00      	nop
 8004e48:	e0ec      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004e4a:	bf00      	nop
        break;
 8004e4c:	e0ea      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004e4e:	4b69      	ldr	r3, [pc, #420]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e60:	d013      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e68:	d819      	bhi.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d004      	beq.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
          break;
 8004e78:	e011      	b.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7fe fffb 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004e7e:	61f8      	str	r0, [r7, #28]
          break;
 8004e80:	e010      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e82:	f7fe ff61 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8004e86:	61f8      	str	r0, [r7, #28]
          break;
 8004e88:	e00c      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e8a:	4b5a      	ldr	r3, [pc, #360]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	d104      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
            frequency = HSI_VALUE;
 8004e98:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e9a:	61fb      	str	r3, [r7, #28]
          break;
 8004e9c:	e001      	b.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          break;
 8004e9e:	bf00      	nop
 8004ea0:	e0c0      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004ea2:	bf00      	nop
        break;
 8004ea4:	e0be      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ea6:	4b53      	ldr	r3, [pc, #332]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eb8:	d02c      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ec0:	d833      	bhi.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ec8:	d01a      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ed0:	d82b      	bhi.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ede:	d004      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8004ee0:	e023      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ee2:	f7fe ffc7 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004ee6:	61f8      	str	r0, [r7, #28]
          break;
 8004ee8:	e026      	b.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004eea:	4b42      	ldr	r3, [pc, #264]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11a      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
              frequency = LSI_VALUE;
 8004ef8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004efc:	61fb      	str	r3, [r7, #28]
          break;
 8004efe:	e016      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f00:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d111      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
            frequency = HSI_VALUE;
 8004f0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004f10:	61fb      	str	r3, [r7, #28]
          break;
 8004f12:	e00e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d109      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	61fb      	str	r3, [r7, #28]
          break;
 8004f28:	e005      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          break;
 8004f2a:	bf00      	nop
 8004f2c:	e07a      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004f2e:	bf00      	nop
 8004f30:	e078      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004f32:	bf00      	nop
 8004f34:	e076      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004f36:	bf00      	nop
        break;
 8004f38:	e074      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f4c:	d02c      	beq.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f54:	d833      	bhi.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5c:	d01a      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f64:	d82b      	bhi.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d004      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          break;
 8004f74:	e023      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f76:	f7fe ff7d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004f7a:	61f8      	str	r0, [r7, #28]
          break;
 8004f7c:	e026      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d11a      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
              frequency = LSI_VALUE;
 8004f8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004f90:	61fb      	str	r3, [r7, #28]
          break;
 8004f92:	e016      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d111      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
            frequency = HSI_VALUE;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004fa4:	61fb      	str	r3, [r7, #28]
          break;
 8004fa6:	e00e      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d109      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = LSE_VALUE;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fba:	61fb      	str	r3, [r7, #28]
          break;
 8004fbc:	e005      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          break;
 8004fbe:	bf00      	nop
 8004fc0:	e030      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004fc2:	bf00      	nop
 8004fc4:	e02e      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004fc6:	bf00      	nop
 8004fc8:	e02c      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
          break;
 8004fca:	bf00      	nop
        break;
 8004fcc:	e02a      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d009      	beq.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          break;
 8004fe8:	e012      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fea:	f7fe ff43 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8004fee:	61f8      	str	r0, [r7, #28]
          break;
 8004ff0:	e00e      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d101      	bne.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
            frequency = HSI_VALUE;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800500c:	61fb      	str	r3, [r7, #28]
          break;
 800500e:	bf00      	nop
        break;
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
      break;
 8005012:	bf00      	nop
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
      break;
 8005016:	bf00      	nop
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
      break;
 8005022:	bf00      	nop
    }
  }

  return(frequency);
 8005024:	69fb      	ldr	r3, [r7, #28]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	00f42400 	.word	0x00f42400

08005038 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005046:	4b75      	ldr	r3, [pc, #468]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005052:	4b72      	ldr	r3, [pc, #456]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0203 	and.w	r2, r3, #3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d10d      	bne.n	800507e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
       ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800506a:	4b6c      	ldr	r3, [pc, #432]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
       ||
 800507a:	429a      	cmp	r2, r3
 800507c:	d047      	beq.n	800510e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	e044      	b.n	800510e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d018      	beq.n	80050be <RCCEx_PLLSAI1_Config+0x86>
 800508c:	2b03      	cmp	r3, #3
 800508e:	d825      	bhi.n	80050dc <RCCEx_PLLSAI1_Config+0xa4>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d002      	beq.n	800509a <RCCEx_PLLSAI1_Config+0x62>
 8005094:	2b02      	cmp	r3, #2
 8005096:	d009      	beq.n	80050ac <RCCEx_PLLSAI1_Config+0x74>
 8005098:	e020      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800509a:	4b60      	ldr	r3, [pc, #384]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11d      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050aa:	e01a      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050ac:	4b5b      	ldr	r3, [pc, #364]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d116      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050bc:	e013      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050be:	4b57      	ldr	r3, [pc, #348]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10f      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ca:	4b54      	ldr	r3, [pc, #336]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050da:	e006      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	e004      	b.n	80050ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e2:	bf00      	nop
 80050e4:	e002      	b.n	80050ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050f2:	4b4a      	ldr	r3, [pc, #296]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	3b01      	subs	r3, #1
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	430b      	orrs	r3, r1
 8005108:	4944      	ldr	r1, [pc, #272]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d17d      	bne.n	8005210 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005114:	4b41      	ldr	r3, [pc, #260]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a40      	ldr	r2, [pc, #256]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800511a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800511e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005120:	f7fc f9c6 	bl	80014b0 <HAL_GetTick>
 8005124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005126:	e009      	b.n	800513c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005128:	f7fc f9c2 	bl	80014b0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d902      	bls.n	800513c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	73fb      	strb	r3, [r7, #15]
        break;
 800513a:	e005      	b.n	8005148 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1ef      	bne.n	8005128 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d160      	bne.n	8005210 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d111      	bne.n	8005178 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005154:	4b31      	ldr	r3, [pc, #196]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800515c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	0211      	lsls	r1, r2, #8
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68d2      	ldr	r2, [r2, #12]
 800516a:	0912      	lsrs	r2, r2, #4
 800516c:	0452      	lsls	r2, r2, #17
 800516e:	430a      	orrs	r2, r1
 8005170:	492a      	ldr	r1, [pc, #168]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	610b      	str	r3, [r1, #16]
 8005176:	e027      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d112      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	0211      	lsls	r1, r2, #8
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6912      	ldr	r2, [r2, #16]
 8005194:	0852      	lsrs	r2, r2, #1
 8005196:	3a01      	subs	r2, #1
 8005198:	0552      	lsls	r2, r2, #21
 800519a:	430a      	orrs	r2, r1
 800519c:	491f      	ldr	r1, [pc, #124]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
 80051a2:	e011      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	0211      	lsls	r1, r2, #8
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6952      	ldr	r2, [r2, #20]
 80051ba:	0852      	lsrs	r2, r2, #1
 80051bc:	3a01      	subs	r2, #1
 80051be:	0652      	lsls	r2, r2, #25
 80051c0:	430a      	orrs	r2, r1
 80051c2:	4916      	ldr	r1, [pc, #88]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc f96c 	bl	80014b0 <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051da:	e009      	b.n	80051f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051dc:	f7fc f968 	bl	80014b0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	73fb      	strb	r3, [r7, #15]
          break;
 80051ee:	e005      	b.n	80051fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	4313      	orrs	r3, r2
 800520e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000

08005220 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800522e:	4b6a      	ldr	r3, [pc, #424]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800523a:	4b67      	ldr	r3, [pc, #412]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0203 	and.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d10d      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
       ||
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005252:	4b61      	ldr	r3, [pc, #388]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
       ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d047      	beq.n	80052f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
 800526a:	e044      	b.n	80052f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d018      	beq.n	80052a6 <RCCEx_PLLSAI2_Config+0x86>
 8005274:	2b03      	cmp	r3, #3
 8005276:	d825      	bhi.n	80052c4 <RCCEx_PLLSAI2_Config+0xa4>
 8005278:	2b01      	cmp	r3, #1
 800527a:	d002      	beq.n	8005282 <RCCEx_PLLSAI2_Config+0x62>
 800527c:	2b02      	cmp	r3, #2
 800527e:	d009      	beq.n	8005294 <RCCEx_PLLSAI2_Config+0x74>
 8005280:	e020      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005282:	4b55      	ldr	r3, [pc, #340]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d11d      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005292:	e01a      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005294:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d116      	bne.n	80052ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a4:	e013      	b.n	80052ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052a6:	4b4c      	ldr	r3, [pc, #304]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052b2:	4b49      	ldr	r3, [pc, #292]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052c2:	e006      	b.n	80052d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
      break;
 80052c8:	e004      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ca:	bf00      	nop
 80052cc:	e002      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052da:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	430b      	orrs	r3, r1
 80052f0:	4939      	ldr	r1, [pc, #228]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d167      	bne.n	80053cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a35      	ldr	r2, [pc, #212]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005308:	f7fc f8d2 	bl	80014b0 <HAL_GetTick>
 800530c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800530e:	e009      	b.n	8005324 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005310:	f7fc f8ce 	bl	80014b0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d902      	bls.n	8005324 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	73fb      	strb	r3, [r7, #15]
        break;
 8005322:	e005      	b.n	8005330 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005324:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1ef      	bne.n	8005310 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d14a      	bne.n	80053cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d111      	bne.n	8005360 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800533c:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6892      	ldr	r2, [r2, #8]
 800534c:	0211      	lsls	r1, r2, #8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	0912      	lsrs	r2, r2, #4
 8005354:	0452      	lsls	r2, r2, #17
 8005356:	430a      	orrs	r2, r1
 8005358:	491f      	ldr	r1, [pc, #124]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535a:	4313      	orrs	r3, r2
 800535c:	614b      	str	r3, [r1, #20]
 800535e:	e011      	b.n	8005384 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6892      	ldr	r2, [r2, #8]
 8005370:	0211      	lsls	r1, r2, #8
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6912      	ldr	r2, [r2, #16]
 8005376:	0852      	lsrs	r2, r2, #1
 8005378:	3a01      	subs	r2, #1
 800537a:	0652      	lsls	r2, r2, #25
 800537c:	430a      	orrs	r2, r1
 800537e:	4916      	ldr	r1, [pc, #88]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005380:	4313      	orrs	r3, r2
 8005382:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005390:	f7fc f88e 	bl	80014b0 <HAL_GetTick>
 8005394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005396:	e009      	b.n	80053ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005398:	f7fc f88a 	bl	80014b0 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d902      	bls.n	80053ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	73fb      	strb	r3, [r7, #15]
          break;
 80053aa:	e005      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ef      	beq.n	8005398 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4904      	ldr	r1, [pc, #16]	; (80053d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000

080053dc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f8:	d10c      	bne.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80053fa:	4b6e      	ldr	r3, [pc, #440]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005404:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800540c:	d112      	bne.n	8005434 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800540e:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	e00f      	b.n	8005434 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	d10b      	bne.n	8005434 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800541c:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005426:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800542e:	d101      	bne.n	8005434 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005430:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005432:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 80b4 	bne.w	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005446:	d003      	beq.n	8005450 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800544e:	d135      	bne.n	80054bc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005450:	4b58      	ldr	r3, [pc, #352]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800545c:	f040 80a1 	bne.w	80055a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005460:	4b54      	ldr	r3, [pc, #336]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 809a 	beq.w	80055a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800546e:	4b51      	ldr	r3, [pc, #324]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	3301      	adds	r3, #1
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005482:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005494:	4b47      	ldr	r3, [pc, #284]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80054a0:	2311      	movs	r3, #17
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e001      	b.n	80054aa <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80054a6:	2307      	movs	r3, #7
 80054a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	fb03 f202 	mul.w	r2, r3, r2
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80054ba:	e072      	b.n	80055a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d133      	bne.n	800552a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80054c2:	4b3c      	ldr	r3, [pc, #240]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ce:	d169      	bne.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80054d0:	4b38      	ldr	r3, [pc, #224]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d063      	beq.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054dc:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	3301      	adds	r3, #1
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80054f0:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800550e:	2311      	movs	r3, #17
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e001      	b.n	8005518 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005514:	2307      	movs	r3, #7
 8005516:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	fb03 f202 	mul.w	r2, r3, r2
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e03c      	b.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005530:	d003      	beq.n	800553a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005538:	d134      	bne.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005546:	d12d      	bne.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005548:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d027      	beq.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	3301      	adds	r3, #1
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005568:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005572:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10a      	bne.n	8005590 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005586:	2311      	movs	r3, #17
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e001      	b.n	8005590 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800558c:	2307      	movs	r3, #7
 800558e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e000      	b.n	80055a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80055a2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3724      	adds	r7, #36	; 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000
 80055b8:	001fff68 	.word	0x001fff68

080055bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e022      	b.n	8005614 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fb fd2b 	bl	800103c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2203      	movs	r2, #3
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f814 	bl	800561c <HAL_SD_InitCard>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e00a      	b.n	8005614 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b08e      	sub	sp, #56	; 0x38
 8005620:	af04      	add	r7, sp, #16
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005638:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800563c:	f7fe ff90 	bl	8004560 <HAL_RCCEx_GetPeriphCLKFreq>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e07b      	b.n	8005754 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	09db      	lsrs	r3, r3, #7
 8005660:	4a3e      	ldr	r2, [pc, #248]	; (800575c <HAL_SD_InitCard+0x140>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	3b02      	subs	r3, #2
 800566a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681d      	ldr	r5, [r3, #0]
 8005670:	466c      	mov	r4, sp
 8005672:	f107 0314 	add.w	r3, r7, #20
 8005676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800567a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800567e:	f107 0308 	add.w	r3, r7, #8
 8005682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005684:	4628      	mov	r0, r5
 8005686:	f002 f86d 	bl	8007764 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005698:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 f8ab 	bl	80077fa <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056b2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3302      	adds	r3, #2
 80056b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <HAL_SD_InitCard+0x144>)
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	3301      	adds	r3, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fb fefc 	bl	80014c8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 ffdf 	bl	8006694 <SD_PowerON>
 80056d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e02e      	b.n	8005754 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fefe 	bl	80064f8 <SD_InitCard>
 80056fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e01b      	b.n	8005754 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005724:	4618      	mov	r0, r3
 8005726:	f002 f8fb 	bl	8007920 <SDMMC_CmdBlockLength>
 800572a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00f      	beq.n	8005752 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a0b      	ldr	r2, [pc, #44]	; (8005764 <HAL_SD_InitCard+0x148>)
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bdb0      	pop	{r4, r5, r7, pc}
 800575c:	014f8b59 	.word	0x014f8b59
 8005760:	00012110 	.word	0x00012110
 8005764:	004005ff 	.word	0x004005ff

08005768 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	; 0x30
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0a9      	b.n	80058e4 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 80a2 	bne.w	80058e2 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80057a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	441a      	add	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d907      	bls.n	80057c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e090      	b.n	80058e4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2203      	movs	r2, #3
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	4a45      	ldr	r2, [pc, #276]	; (80058ec <HAL_SD_ReadBlocks_DMA+0x184>)
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	4a44      	ldr	r2, [pc, #272]	; (80058f0 <HAL_SD_ReadBlocks_DMA+0x188>)
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2200      	movs	r2, #0
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3380      	adds	r3, #128	; 0x80
 80057f4:	4619      	mov	r1, r3
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	025b      	lsls	r3, r3, #9
 80057fc:	089b      	lsrs	r3, r3, #2
 80057fe:	f7fc f851 	bl	80018a4 <HAL_DMA_Start_IT>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00f      	beq.n	8005828 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a39      	ldr	r2, [pc, #228]	; (80058f4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e05d      	b.n	80058e4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583c:	2b01      	cmp	r3, #1
 800583e:	d002      	beq.n	8005846 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	025b      	lsls	r3, r3, #9
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800584a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	025b      	lsls	r3, r3, #9
 8005850:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005852:	2390      	movs	r3, #144	; 0x90
 8005854:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005856:	2302      	movs	r3, #2
 8005858:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800585a:	2300      	movs	r3, #0
 800585c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800585e:	2301      	movs	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f107 0210 	add.w	r2, r7, #16
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f002 f82b 	bl	80078c8 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d90a      	bls.n	800588e <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2282      	movs	r2, #130	; 0x82
 800587c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005884:	4618      	mov	r0, r3
 8005886:	f002 f88f 	bl	80079a8 <SDMMC_CmdReadMultiBlock>
 800588a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800588c:	e009      	b.n	80058a2 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2281      	movs	r2, #129	; 0x81
 8005892:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800589a:	4618      	mov	r0, r3
 800589c:	f002 f862 	bl	8007964 <SDMMC_CmdReadSingleBlock>
 80058a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e00a      	b.n	80058e4 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3730      	adds	r7, #48	; 0x30
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	08006313 	.word	0x08006313
 80058f0:	08006385 	.word	0x08006385
 80058f4:	004005ff 	.word	0x004005ff

080058f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	; 0x30
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0ac      	b.n	8005a7a <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	f040 80a5 	bne.w	8005a78 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	441a      	add	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	429a      	cmp	r2, r3
 8005940:	d907      	bls.n	8005952 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e093      	b.n	8005a7a <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2203      	movs	r2, #3
 8005956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	4a47      	ldr	r2, [pc, #284]	; (8005a84 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	4a46      	ldr	r2, [pc, #280]	; (8005a88 <HAL_SD_WriteBlocks_DMA+0x190>)
 8005970:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	2200      	movs	r2, #0
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	2b01      	cmp	r3, #1
 8005980:	d002      	beq.n	8005988 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	025b      	lsls	r3, r3, #9
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d90a      	bls.n	80059a4 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	22a0      	movs	r2, #160	; 0xa0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800599a:	4618      	mov	r0, r3
 800599c:	f002 f848 	bl	8007a30 <SDMMC_CmdWriteMultiBlock>
 80059a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80059a2:	e009      	b.n	80059b8 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2290      	movs	r2, #144	; 0x90
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b0:	4618      	mov	r0, r3
 80059b2:	f002 f81b 	bl	80079ec <SDMMC_CmdWriteSingleBlock>
 80059b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d012      	beq.n	80059e4 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a32      	ldr	r2, [pc, #200]	; (8005a8c <HAL_SD_WriteBlocks_DMA+0x194>)
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e04a      	b.n	8005a7a <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3380      	adds	r3, #128	; 0x80
 8005a00:	461a      	mov	r2, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	025b      	lsls	r3, r3, #9
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	f7fb ff4c 	bl	80018a4 <HAL_DMA_Start_IT>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d012      	beq.n	8005a38 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1d      	ldr	r2, [pc, #116]	; (8005a8c <HAL_SD_WriteBlocks_DMA+0x194>)
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e020      	b.n	8005a7a <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a3c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	025b      	lsls	r3, r3, #9
 8005a42:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a44:	2390      	movs	r3, #144	; 0x90
 8005a46:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f107 0210 	add.w	r2, r7, #16
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 ff32 	bl	80078c8 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 021a 	orr.w	r2, r2, #26
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e000      	b.n	8005a7a <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
  }
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3730      	adds	r7, #48	; 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	080062e9 	.word	0x080062e9
 8005a88:	08006385 	.word	0x08006385
 8005a8c:	004005ff 	.word	0x004005ff

08005a90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_SD_IRQHandler+0x2e>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f802 	bl	8006ac0 <SD_Read_IT>
 8005abc:	e155      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 808f 	beq.w	8005bec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005ae6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005aea:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d039      	beq.n	8005b7a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_SD_IRQHandler+0x8a>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 ffa8 	bl	8007a74 <SDMMC_CmdStopTransfer>
 8005b24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f91f 	bl	8005d7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <HAL_SD_IRQHandler+0xda>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f003 fe70 	bl	8009850 <HAL_SD_RxCpltCallback>
 8005b70:	e0fb      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f003 fe62 	bl	800983c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005b78:	e0f7      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80f2 	beq.w	8005d6a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d011      	beq.n	8005bb4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 ff6d 	bl	8007a74 <SDMMC_CmdStopTransfer>
 8005b9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8e4 	bl	8005d7c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 80d5 	bne.w	8005d6a <HAL_SD_IRQHandler+0x2da>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 80cf 	bne.w	8005d6a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0208 	bic.w	r2, r2, #8
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f003 fe29 	bl	800983c <HAL_SD_TxCpltCallback>
}
 8005bea:	e0be      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_SD_IRQHandler+0x17c>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 ffac 	bl	8006b62 <SD_Write_IT>
 8005c0a:	e0ae      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a7 	beq.w	8005d6a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f043 0202 	orr.w	r2, r3, #2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	f043 0208 	orr.w	r2, r3, #8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	f043 0210 	orr.w	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fee6 	bl	8007a74 <SDMMC_CmdStopTransfer>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f855 	bl	8005d7c <HAL_SD_ErrorCallback>
}
 8005cd2:	e04a      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d045      	beq.n	8005d6a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_SD_IRQHandler+0x262>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d011      	beq.n	8005d16 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <HAL_SD_IRQHandler+0x2e4>)
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb fe30 	bl	8001964 <HAL_DMA_Abort_IT>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d02f      	beq.n	8005d6a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fb84 	bl	800641c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005d14:	e029      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <HAL_SD_IRQHandler+0x29a>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d011      	beq.n	8005d4e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	4a12      	ldr	r2, [pc, #72]	; (8005d78 <HAL_SD_IRQHandler+0x2e8>)
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fb fe14 	bl	8001964 <HAL_DMA_Abort_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d013      	beq.n	8005d6a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fb9f 	bl	800648a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005d4c:	e00d      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f003 fd60 	bl	8009828 <HAL_SD_AbortCallback>
}
 8005d68:	e7ff      	b.n	8005d6a <HAL_SD_IRQHandler+0x2da>
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	0800641d 	.word	0x0800641d
 8005d78:	0800648b 	.word	0x0800648b

08005d7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9e:	0f9b      	lsrs	r3, r3, #30
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005daa:	0e9b      	lsrs	r3, r3, #26
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dbc:	0e1b      	lsrs	r3, r3, #24
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df0:	0d1b      	lsrs	r3, r3, #20
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0e:	0bdb      	lsrs	r3, r3, #15
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e20:	0b9b      	lsrs	r3, r3, #14
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e32:	0b5b      	lsrs	r3, r3, #13
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e44:	0b1b      	lsrs	r3, r3, #12
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2200      	movs	r2, #0
 8005e56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d163      	bne.n	8005f28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e64:	009a      	lsls	r2, r3, #2
 8005e66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005e70:	0f92      	lsrs	r2, r2, #30
 8005e72:	431a      	orrs	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7c:	0edb      	lsrs	r3, r3, #27
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	0e1b      	lsrs	r3, r3, #24
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea0:	0d5b      	lsrs	r3, r3, #21
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb2:	0c9b      	lsrs	r3, r3, #18
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec4:	0bdb      	lsrs	r3, r3, #15
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	7e1b      	ldrb	r3, [r3, #24]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	2201      	movs	r2, #1
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ef2:	fb03 f202 	mul.w	r2, r3, r2
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	7a1b      	ldrb	r3, [r3, #8]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	2201      	movs	r2, #1
 8005f06:	409a      	lsls	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f14:	0a52      	lsrs	r2, r2, #9
 8005f16:	fb03 f202 	mul.w	r2, r3, r2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f24:	661a      	str	r2, [r3, #96]	; 0x60
 8005f26:	e031      	b.n	8005f8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d11d      	bne.n	8005f6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3e:	0c1b      	lsrs	r3, r3, #16
 8005f40:	431a      	orrs	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	029a      	lsls	r2, r3, #10
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	661a      	str	r2, [r3, #96]	; 0x60
 8005f6a:	e00f      	b.n	8005f8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a58      	ldr	r2, [pc, #352]	; (80060d4 <HAL_SD_GetCardCSD+0x344>)
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e09d      	b.n	80060c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f90:	0b9b      	lsrs	r3, r3, #14
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa2:	09db      	lsrs	r3, r3, #7
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	0fdb      	lsrs	r3, r3, #31
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	0f5b      	lsrs	r3, r3, #29
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	0e9b      	lsrs	r3, r3, #26
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	0d9b      	lsrs	r3, r3, #22
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	0d5b      	lsrs	r3, r3, #21
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	b2da      	uxtb	r2, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	0bdb      	lsrs	r3, r3, #15
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	0b9b      	lsrs	r3, r3, #14
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	0b5b      	lsrs	r3, r3, #13
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	0b1b      	lsrs	r3, r3, #12
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	0a9b      	lsrs	r3, r3, #10
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	b2da      	uxtb	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	004005ff 	.word	0x004005ff

080060d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006130:	b5b0      	push	{r4, r5, r7, lr}
 8006132:	b090      	sub	sp, #64	; 0x40
 8006134:	af04      	add	r7, sp, #16
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2203      	movs	r2, #3
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	2b03      	cmp	r3, #3
 800614e:	d02e      	beq.n	80061ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d106      	bne.n	8006166 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
 8006164:	e029      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616c:	d10a      	bne.n	8006184 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fb46 	bl	8006800 <SD_WideBus_Enable>
 8006174:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	639a      	str	r2, [r3, #56]	; 0x38
 8006182:	e01a      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fb83 	bl	8006896 <SD_WideBus_Disable>
 8006190:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
 800619e:	e00c      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
 80061ac:	e005      	b.n	80061ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a35      	ldr	r2, [pc, #212]	; (800629c <HAL_SD_ConfigWideBusOperation+0x16c>)
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80061d0:	e042      	b.n	8006258 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80061d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80061d6:	f7fe f9c3 	bl	8004560 <HAL_RCCEx_GetPeriphCLKFreq>
 80061da:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d031      	beq.n	8006246 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	3302      	adds	r3, #2
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <HAL_SD_ConfigWideBusOperation+0x170>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d907      	bls.n	8006220 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	4a24      	ldr	r2, [pc, #144]	; (80062a4 <HAL_SD_ConfigWideBusOperation+0x174>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	0ddb      	lsrs	r3, r3, #23
 800621a:	3b02      	subs	r3, #2
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	e002      	b.n	8006226 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681d      	ldr	r5, [r3, #0]
 800622a:	466c      	mov	r4, sp
 800622c:	f107 0318 	add.w	r3, r7, #24
 8006230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800623e:	4628      	mov	r0, r5
 8006240:	f001 fa90 	bl	8007764 <SDMMC_Init>
 8006244:	e008      	b.n	8006258 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fb5d 	bl	8007920 <SDMMC_CmdBlockLength>
 8006266:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006294:	4618      	mov	r0, r3
 8006296:	3730      	adds	r7, #48	; 0x30
 8006298:	46bd      	mov	sp, r7
 800629a:	bdb0      	pop	{r4, r5, r7, pc}
 800629c:	004005ff 	.word	0x004005ff
 80062a0:	017d7840 	.word	0x017d7840
 80062a4:	55e63b89 	.word	0x55e63b89

080062a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80062b4:	f107 030c 	add.w	r3, r7, #12
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa78 	bl	80067b0 <SD_SendStatus>
 80062c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	0a5b      	lsrs	r3, r3, #9
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80062de:	693b      	ldr	r3, [r7, #16]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006304:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b82      	cmp	r3, #130	; 0x82
 8006326:	d111      	bne.n	800634c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fba1 	bl	8007a74 <SDMMC_CmdStopTransfer>
 8006332:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	431a      	orrs	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fd18 	bl	8005d7c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0208 	bic.w	r2, r2, #8
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f240 523a 	movw	r2, #1338	; 0x53a
 8006364:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f003 fa6b 	bl	8009850 <HAL_SD_RxCpltCallback>
#endif
}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a0:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <SD_DMAError+0x2a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d12d      	bne.n	800640a <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a19      	ldr	r2, [pc, #100]	; (8006418 <SD_DMAError+0x94>)
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80063c4:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80063d2:	6978      	ldr	r0, [r7, #20]
 80063d4:	f7ff ff68 	bl	80062a8 <HAL_SD_GetCardState>
 80063d8:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b06      	cmp	r3, #6
 80063de:	d002      	beq.n	80063e6 <SD_DMAError+0x62>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d10a      	bne.n	80063fc <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fb42 	bl	8007a74 <SDMMC_CmdStopTransfer>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	431a      	orrs	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f7ff fcb6 	bl	8005d7c <HAL_SD_ErrorCallback>
#endif
}
 8006410:	bf00      	nop
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	004005ff 	.word	0x004005ff

0800641c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff ff37 	bl	80062a8 <HAL_SD_GetCardState>
 800643a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b06      	cmp	r3, #6
 800644e:	d002      	beq.n	8006456 <SD_DMATxAbort+0x3a>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d10a      	bne.n	800646c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f001 fb0a 	bl	8007a74 <SDMMC_CmdStopTransfer>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	431a      	orrs	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f003 f9d7 	bl	8009828 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800647a:	e002      	b.n	8006482 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fc7d 	bl	8005d7c <HAL_SD_ErrorCallback>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f240 523a 	movw	r2, #1338	; 0x53a
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff ff00 	bl	80062a8 <HAL_SD_GetCardState>
 80064a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d002      	beq.n	80064c4 <SD_DMARxAbort+0x3a>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d10a      	bne.n	80064da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 fad3 	bl	8007a74 <SDMMC_CmdStopTransfer>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f003 f9a0 	bl	8009828 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80064e8:	e002      	b.n	80064f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff fc46 	bl	8005d7c <HAL_SD_ErrorCallback>
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b094      	sub	sp, #80	; 0x50
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006500:	2301      	movs	r3, #1
 8006502:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f001 f985 	bl	8007818 <SDMMC_GetPowerState>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006518:	e0b8      	b.n	800668c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	2b03      	cmp	r3, #3
 8006520:	d02f      	beq.n	8006582 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fbae 	bl	8007c88 <SDMMC_CmdSendCID>
 800652c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <SD_InitCard+0x40>
    {
      return errorstate;
 8006534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006536:	e0a9      	b.n	800668c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f001 f9af 	bl	80078a2 <SDMMC_GetResponse>
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2104      	movs	r1, #4
 8006550:	4618      	mov	r0, r3
 8006552:	f001 f9a6 	bl	80078a2 <SDMMC_GetResponse>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2108      	movs	r1, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f001 f99d 	bl	80078a2 <SDMMC_GetResponse>
 8006568:	4602      	mov	r2, r0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	210c      	movs	r1, #12
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f994 	bl	80078a2 <SDMMC_GetResponse>
 800657a:	4602      	mov	r2, r0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	2b03      	cmp	r3, #3
 8006588:	d00d      	beq.n	80065a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f107 020e 	add.w	r2, r7, #14
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fbb4 	bl	8007d02 <SDMMC_CmdSetRelAdd>
 800659a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	e072      	b.n	800668c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d036      	beq.n	800661c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	461a      	mov	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f001 fb7e 	bl	8007cc4 <SDMMC_CmdSendCSD>
 80065c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80065d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d2:	e05b      	b.n	800668c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f961 	bl	80078a2 <SDMMC_GetResponse>
 80065e0:	4602      	mov	r2, r0
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2104      	movs	r1, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 f958 	bl	80078a2 <SDMMC_GetResponse>
 80065f2:	4602      	mov	r2, r0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2108      	movs	r1, #8
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f94f 	bl	80078a2 <SDMMC_GetResponse>
 8006604:	4602      	mov	r2, r0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	210c      	movs	r1, #12
 8006610:	4618      	mov	r0, r3
 8006612:	f001 f946 	bl	80078a2 <SDMMC_GetResponse>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2104      	movs	r1, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f001 f93d 	bl	80078a2 <SDMMC_GetResponse>
 8006628:	4603      	mov	r3, r0
 800662a:	0d1a      	lsrs	r2, r3, #20
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006630:	f107 0310 	add.w	r3, r7, #16
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff fbaa 	bl	8005d90 <HAL_SD_GetCardCSD>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006646:	e021      	b.n	800668c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	2200      	movs	r2, #0
 8006654:	461c      	mov	r4, r3
 8006656:	4615      	mov	r5, r2
 8006658:	4622      	mov	r2, r4
 800665a:	462b      	mov	r3, r5
 800665c:	4608      	mov	r0, r1
 800665e:	f001 fa2b 	bl	8007ab8 <SDMMC_CmdSelDesel>
 8006662:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <SD_InitCard+0x176>
  {
    return errorstate;
 800666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666c:	e00e      	b.n	800668c <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681d      	ldr	r5, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	466c      	mov	r4, sp
 8006676:	f103 0210 	add.w	r2, r3, #16
 800667a:	ca07      	ldmia	r2, {r0, r1, r2}
 800667c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006680:	3304      	adds	r3, #4
 8006682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006684:	4628      	mov	r0, r5
 8006686:	f001 f86d 	bl	8007764 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3740      	adds	r7, #64	; 0x40
 8006690:	46bd      	mov	sp, r7
 8006692:	bdb0      	pop	{r4, r5, r7, pc}

08006694 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fa26 	bl	8007afe <SDMMC_CmdGoIdleState>
 80066b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <SD_PowerON+0x2a>
  {
    return errorstate;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	e072      	b.n	80067a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fa39 	bl	8007b3a <SDMMC_CmdOperCond>
 80066c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fa0f 	bl	8007afe <SDMMC_CmdGoIdleState>
 80066e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	e05b      	b.n	80067a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d137      	bne.n	800676a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fa39 	bl	8007b78 <SDMMC_CmdAppCommand>
 8006706:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d02d      	beq.n	800676a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800670e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006712:	e047      	b.n	80067a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fa2c 	bl	8007b78 <SDMMC_CmdAppCommand>
 8006720:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <SD_PowerON+0x98>
    {
      return errorstate;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	e03b      	b.n	80067a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	491e      	ldr	r1, [pc, #120]	; (80067ac <SD_PowerON+0x118>)
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fa42 	bl	8007bbc <SDMMC_CmdAppOperCommand>
 8006738:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006744:	e02e      	b.n	80067a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f001 f8a8 	bl	80078a2 <SDMMC_GetResponse>
 8006752:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	0fdb      	lsrs	r3, r3, #31
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <SD_PowerON+0xcc>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <SD_PowerON+0xce>
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]

    count++;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	3301      	adds	r3, #1
 8006768:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006770:	4293      	cmp	r3, r2
 8006772:	d802      	bhi.n	800677a <SD_PowerON+0xe6>
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0cc      	beq.n	8006714 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006780:	4293      	cmp	r3, r2
 8006782:	d902      	bls.n	800678a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006788:	e00c      	b.n	80067a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
 800679a:	e002      	b.n	80067a2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	c1100000 	.word	0xc1100000

080067b0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80067c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067c4:	e018      	b.n	80067f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f001 fab6 	bl	8007d44 <SDMMC_CmdSendStatus>
 80067d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	e009      	b.n	80067f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 f859 	bl	80078a2 <SDMMC_GetResponse>
 80067f0:	4602      	mov	r2, r0
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f843 	bl	80078a2 <SDMMC_GetResponse>
 800681c:	4603      	mov	r3, r0
 800681e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006826:	d102      	bne.n	800682e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800682c:	e02f      	b.n	800688e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f879 	bl	800692c <SD_FindSCR>
 800683a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	e023      	b.n	800688e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01c      	beq.n	800688a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f001 f98b 	bl	8007b78 <SDMMC_CmdAppCommand>
 8006862:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	e00f      	b.n	800688e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2102      	movs	r1, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f001 f9c4 	bl	8007c02 <SDMMC_CmdBusWidth>
 800687a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	e003      	b.n	800688e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006886:	2300      	movs	r3, #0
 8006888:	e001      	b.n	800688e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800688a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fff8 	bl	80078a2 <SDMMC_GetResponse>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068bc:	d102      	bne.n	80068c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068c2:	e02f      	b.n	8006924 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f82e 	bl	800692c <SD_FindSCR>
 80068d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	e023      	b.n	8006924 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01c      	beq.n	8006920 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f001 f940 	bl	8007b78 <SDMMC_CmdAppCommand>
 80068f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	e00f      	b.n	8006924 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f979 	bl	8007c02 <SDMMC_CmdBusWidth>
 8006910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	e003      	b.n	8006924 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
 800691e:	e001      	b.n	8006924 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006920:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b08f      	sub	sp, #60	; 0x3c
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006936:	f7fa fdbb 	bl	80014b0 <HAL_GetTick>
 800693a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006940:	2300      	movs	r3, #0
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2108      	movs	r1, #8
 8006952:	4618      	mov	r0, r3
 8006954:	f000 ffe4 	bl	8007920 <SDMMC_CmdBlockLength>
 8006958:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	e0a9      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f001 f901 	bl	8007b78 <SDMMC_CmdAppCommand>
 8006976:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <SD_FindSCR+0x56>
  {
    return errorstate;
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	e09a      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006986:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006988:	2308      	movs	r3, #8
 800698a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800698c:	2330      	movs	r3, #48	; 0x30
 800698e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006990:	2302      	movs	r3, #2
 8006992:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006994:	2300      	movs	r3, #0
 8006996:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006998:	2301      	movs	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f107 0210 	add.w	r2, r7, #16
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 ff8e 	bl	80078c8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 f948 	bl	8007c46 <SDMMC_CmdSendSCR>
 80069b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	e07a      	b.n	8006ab8 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	f107 0208 	add.w	r2, r7, #8
 80069dc:	18d4      	adds	r4, r2, r3
 80069de:	4608      	mov	r0, r1
 80069e0:	f000 feed 	bl	80077be <SDMMC_ReadFIFO>
 80069e4:	4603      	mov	r3, r0
 80069e6:	6023      	str	r3, [r4, #0]
      index++;
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	3301      	adds	r3, #1
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80069ee:	f7fa fd5f 	bl	80014b0 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fc:	d102      	bne.n	8006a04 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80069fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a02:	e059      	b.n	8006ab8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0a:	f240 432a 	movw	r3, #1066	; 0x42a
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0d6      	beq.n	80069c2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2208      	movs	r2, #8
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	e044      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2202      	movs	r2, #2
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e037      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006a5e:	2320      	movs	r3, #32
 8006a60:	e02a      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	061a      	lsls	r2, r3, #24
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	0e1b      	lsrs	r3, r3, #24
 8006a88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	601a      	str	r2, [r3, #0]
    scr++;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	3304      	adds	r3, #4
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	061a      	lsls	r2, r3, #24
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aa0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006aaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	0e1b      	lsrs	r3, r3, #24
 8006ab0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	373c      	adds	r7, #60	; 0x3c
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd90      	pop	{r4, r7, pc}

08006ac0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03f      	beq.n	8006b5a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e033      	b.n	8006b48 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fe6a 	bl	80077be <SDMMC_ReadFIFO>
 8006aea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	0c1b      	lsrs	r3, r3, #16
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	0e1b      	lsrs	r3, r3, #24
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	3301      	adds	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b07      	cmp	r3, #7
 8006b4c:	d9c8      	bls.n	8006ae0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d043      	beq.n	8006c04 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e037      	b.n	8006bf2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	021a      	lsls	r2, r3, #8
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	041a      	lsls	r2, r3, #16
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	061a      	lsls	r2, r3, #24
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f107 0208 	add.w	r2, r7, #8
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fdf6 	bl	80077d8 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b07      	cmp	r3, #7
 8006bf6:	d9c4      	bls.n	8006b82 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e095      	b.n	8006d4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d108      	bne.n	8006c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c2e:	d009      	beq.n	8006c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	61da      	str	r2, [r3, #28]
 8006c36:	e005      	b.n	8006c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fa fab6 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c84:	d902      	bls.n	8006c8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e002      	b.n	8006c92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c9a:	d007      	beq.n	8006cac <HAL_SPI_Init+0xa0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ca4:	d002      	beq.n	8006cac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cee:	ea42 0103 	orr.w	r1, r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	f003 0204 	and.w	r2, r3, #4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d28:	ea42 0103 	orr.w	r1, r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b088      	sub	sp, #32
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_SPI_Transmit+0x22>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e15f      	b.n	8007034 <HAL_SPI_Transmit+0x2e2>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d7c:	f7fa fb98 	bl	80014b0 <HAL_GetTick>
 8006d80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d002      	beq.n	8006d98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d96:	e148      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Transmit+0x52>
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006da8:	e13f      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	88fa      	ldrh	r2, [r7, #6]
 8006dc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	88fa      	ldrh	r2, [r7, #6]
 8006dc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df4:	d10f      	bne.n	8006e16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d007      	beq.n	8006e34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e3c:	d94f      	bls.n	8006ede <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0xfa>
 8006e46:	8afb      	ldrh	r3, [r7, #22]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d142      	bne.n	8006ed2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e70:	e02f      	b.n	8006ed2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d112      	bne.n	8006ea6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	1c9a      	adds	r2, r3, #2
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ea4:	e015      	b.n	8006ed2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea6:	f7fa fb03 	bl	80014b0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d803      	bhi.n	8006ebe <HAL_SPI_Transmit+0x16c>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_Transmit+0x172>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006ed0:	e0ab      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1ca      	bne.n	8006e72 <HAL_SPI_Transmit+0x120>
 8006edc:	e080      	b.n	8006fe0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_SPI_Transmit+0x19a>
 8006ee6:	8afb      	ldrh	r3, [r7, #22]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d174      	bne.n	8006fd6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d912      	bls.n	8006f1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	881a      	ldrh	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b02      	subs	r3, #2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f1a:	e05c      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f42:	e048      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d12b      	bne.n	8006faa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d912      	bls.n	8006f82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b02      	subs	r3, #2
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f80:	e029      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fa8:	e015      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006faa:	f7fa fa81 	bl	80014b0 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d803      	bhi.n	8006fc2 <HAL_SPI_Transmit+0x270>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc0:	d102      	bne.n	8006fc8 <HAL_SPI_Transmit+0x276>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006fd4:	e029      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1b1      	bne.n	8006f44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fb77 	bl	80076d8 <SPI_EndRxTxTransaction>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	e003      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007032:	7ffb      	ldrb	r3, [r7, #31]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	; 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800704a:	2301      	movs	r3, #1
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x26>
 800705e:	2302      	movs	r3, #2
 8007060:	e20a      	b.n	8007478 <HAL_SPI_TransmitReceive+0x43c>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800706a:	f7fa fa21 	bl	80014b0 <HAL_GetTick>
 800706e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007076:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800707e:	887b      	ldrh	r3, [r7, #2]
 8007080:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007082:	887b      	ldrh	r3, [r7, #2]
 8007084:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007086:	7efb      	ldrb	r3, [r7, #27]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d00e      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x6e>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007092:	d106      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x66>
 800709c:	7efb      	ldrb	r3, [r7, #27]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d003      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
 80070a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070a8:	e1e0      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x80>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x80>
 80070b6:	887b      	ldrh	r3, [r7, #2]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070c2:	e1d3      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d003      	beq.n	80070d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2205      	movs	r2, #5
 80070d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	887a      	ldrh	r2, [r7, #2]
 80070f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	887a      	ldrh	r2, [r7, #2]
 80070fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	887a      	ldrh	r2, [r7, #2]
 8007104:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800711a:	d802      	bhi.n	8007122 <HAL_SPI_TransmitReceive+0xe6>
 800711c:	8a3b      	ldrh	r3, [r7, #16]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d908      	bls.n	8007134 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e007      	b.n	8007144 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714e:	2b40      	cmp	r3, #64	; 0x40
 8007150:	d007      	beq.n	8007162 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800716a:	f240 8081 	bls.w	8007270 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_SPI_TransmitReceive+0x140>
 8007176:	8a7b      	ldrh	r3, [r7, #18]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d16d      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	881a      	ldrh	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a0:	e05a      	b.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d11b      	bne.n	80071e8 <HAL_SPI_TransmitReceive+0x1ac>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x1ac>
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d113      	bne.n	80071e8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	881a      	ldrh	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	1c9a      	adds	r2, r3, #2
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d11c      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x1f4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d016      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	b292      	uxth	r2, r2
 800720e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800722c:	2301      	movs	r3, #1
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007230:	f7fa f93e 	bl	80014b0 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723c:	429a      	cmp	r2, r3
 800723e:	d80b      	bhi.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007246:	d007      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007256:	e109      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d19f      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x166>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d199      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x166>
 800726e:	e0e3      	b.n	8007438 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_SPI_TransmitReceive+0x244>
 8007278:	8a7b      	ldrh	r3, [r7, #18]
 800727a:	2b01      	cmp	r3, #1
 800727c:	f040 80cf 	bne.w	800741e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	d912      	bls.n	80072b0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	881a      	ldrh	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	1c9a      	adds	r2, r3, #2
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b02      	subs	r3, #2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072ae:	e0b6      	b.n	800741e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d6:	e0a2      	b.n	800741e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d134      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x314>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02f      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x314>
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d12c      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d912      	bls.n	8007326 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b02      	subs	r3, #2
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007324:	e012      	b.n	800734c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d148      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x3b4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d042      	beq.n	80073f0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d923      	bls.n	80073be <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	b292      	uxth	r2, r2
 8007382:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	1c9a      	adds	r2, r3, #2
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b02      	subs	r3, #2
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d81f      	bhi.n	80073ec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	e016      	b.n	80073ec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f103 020c 	add.w	r2, r3, #12
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ec:	2301      	movs	r3, #1
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073f0:	f7fa f85e 	bl	80014b0 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d803      	bhi.n	8007408 <HAL_SPI_TransmitReceive+0x3cc>
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007406:	d102      	bne.n	800740e <HAL_SPI_TransmitReceive+0x3d2>
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d107      	bne.n	800741e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800741c:	e026      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	f47f af57 	bne.w	80072d8 <HAL_SPI_TransmitReceive+0x29c>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	f47f af50 	bne.w	80072d8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f94b 	bl	80076d8 <SPI_EndRxTxTransaction>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007462:	e003      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007478:	4618      	mov	r0, r3
 800747a:	3728      	adds	r7, #40	; 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800748e:	b2db      	uxtb	r3, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ac:	f7fa f800 	bl	80014b0 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074bc:	f7f9 fff8 	bl	80014b0 <HAL_GetTick>
 80074c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074c2:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	015b      	lsls	r3, r3, #5
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	e054      	b.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074da:	d050      	beq.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074dc:	f7f9 ffe8 	bl	80014b0 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d902      	bls.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d13d      	bne.n	800756e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800750a:	d111      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007514:	d004      	beq.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751e:	d107      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007538:	d10f      	bne.n	800755a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e017      	b.n	800759e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3b01      	subs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	429a      	cmp	r2, r3
 800759a:	d19b      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000004 	.word	0x20000004

080075ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	; 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80075be:	f7f9 ff77 	bl	80014b0 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	4413      	add	r3, r2
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80075ce:	f7f9 ff6f 	bl	80014b0 <HAL_GetTick>
 80075d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80075dc:	4b3d      	ldr	r3, [pc, #244]	; (80076d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	00da      	lsls	r2, r3, #3
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	0d1b      	lsrs	r3, r3, #20
 80075ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80075f4:	e060      	b.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075fc:	d107      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0x62>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800760c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007614:	d050      	beq.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007616:	f7f9 ff4b 	bl	80014b0 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007622:	429a      	cmp	r2, r3
 8007624:	d902      	bls.n	800762c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d13d      	bne.n	80076a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800763a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007644:	d111      	bne.n	800766a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764e:	d004      	beq.n	800765a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007658:	d107      	bne.n	800766a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007672:	d10f      	bne.n	8007694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e010      	b.n	80076ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4013      	ands	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d196      	bne.n	80075f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3728      	adds	r7, #40	; 0x28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000004 	.word	0x20000004

080076d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff ff5b 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007700:	f043 0220 	orr.w	r2, r3, #32
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e027      	b.n	800775c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	2180      	movs	r1, #128	; 0x80
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff fec0 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007726:	f043 0220 	orr.w	r2, r3, #32
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e014      	b.n	800775c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff34 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	f043 0220 	orr.w	r2, r3, #32
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e000      	b.n	800775c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007764:	b084      	sub	sp, #16
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	f107 001c 	add.w	r0, r7, #28
 8007772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007782:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007786:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800778a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800778e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007792:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80077a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	b004      	add	sp, #16
 80077bc:	4770      	bx	lr

080077be <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2203      	movs	r2, #3
 8007806:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007808:	2002      	movs	r0, #2
 800780a:	f7f9 fe5d 	bl	80014c8 <HAL_Delay>

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0303 	and.w	r3, r3, #3
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007852:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007858:	431a      	orrs	r2, r3
                       Command->CPSM);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800785e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800786e:	f023 030f 	bic.w	r3, r3, #15
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	b2db      	uxtb	r3, r3
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3314      	adds	r3, #20
 80078b0:	461a      	mov	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80078ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80078f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80078fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007912:	2300      	movs	r3, #0

}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800792e:	2310      	movs	r3, #16
 8007930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800793a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007940:	f107 0308 	add.w	r3, r7, #8
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff ff74 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	2110      	movs	r1, #16
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa18 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800795a:	69fb      	ldr	r3, [r7, #28]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007972:	2311      	movs	r3, #17
 8007974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007976:	2340      	movs	r3, #64	; 0x40
 8007978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800797e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007982:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007984:	f107 0308 	add.w	r3, r7, #8
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff ff52 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007990:	f241 3288 	movw	r2, #5000	; 0x1388
 8007994:	2111      	movs	r1, #17
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9f6 	bl	8007d88 <SDMMC_GetCmdResp1>
 800799c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800799e:	69fb      	ldr	r3, [r7, #28]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80079b6:	2312      	movs	r3, #18
 80079b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ba:	2340      	movs	r3, #64	; 0x40
 80079bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff ff30 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80079d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d8:	2112      	movs	r1, #18
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f9d4 	bl	8007d88 <SDMMC_GetCmdResp1>
 80079e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079e2:	69fb      	ldr	r3, [r7, #28]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3720      	adds	r7, #32
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80079fa:	2318      	movs	r3, #24
 80079fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff ff0e 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1c:	2118      	movs	r1, #24
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f9b2 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a26:	69fb      	ldr	r3, [r7, #28]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007a3e:	2319      	movs	r3, #25
 8007a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a42:	2340      	movs	r3, #64	; 0x40
 8007a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a50:	f107 0308 	add.w	r3, r7, #8
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff feec 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a60:	2119      	movs	r1, #25
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f990 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007a80:	230c      	movs	r3, #12
 8007a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a90:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a92:	f107 0308 	add.w	r3, r7, #8
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fecb 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007a9e:	4a05      	ldr	r2, [pc, #20]	; (8007ab4 <SDMMC_CmdStopTransfer+0x40>)
 8007aa0:	210c      	movs	r1, #12
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f970 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007aa8:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	05f5e100 	.word	0x05f5e100

08007ab8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007ac8:	2307      	movs	r3, #7
 8007aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ada:	f107 0310 	add.w	r3, r7, #16
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff fea7 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aea:	2107      	movs	r1, #7
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f94b 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007af2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3728      	adds	r7, #40	; 0x28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b088      	sub	sp, #32
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b1c:	f107 0308 	add.w	r3, r7, #8
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff fe86 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fb65 	bl	80081f8 <SDMMC_GetCmdError>
 8007b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b30:	69fb      	ldr	r3, [r7, #28]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3720      	adds	r7, #32
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b088      	sub	sp, #32
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007b42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007b48:	2308      	movs	r3, #8
 8007b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff fe67 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 faf8 	bl	800815c <SDMMC_GetCmdResp7>
 8007b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b86:	2337      	movs	r3, #55	; 0x37
 8007b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b8a:	2340      	movs	r3, #64	; 0x40
 8007b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b98:	f107 0308 	add.w	r3, r7, #8
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fe48 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba8:	2137      	movs	r1, #55	; 0x37
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8ec 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007bb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bd0:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007bd2:	2329      	movs	r3, #41	; 0x29
 8007bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bd6:	2340      	movs	r3, #64	; 0x40
 8007bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff fe22 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f9ff 	bl	8007ff4 <SDMMC_GetCmdResp3>
 8007bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b088      	sub	sp, #32
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007c10:	2306      	movs	r3, #6
 8007c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fe03 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c32:	2106      	movs	r1, #6
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f8a7 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b088      	sub	sp, #32
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007c52:	2333      	movs	r3, #51	; 0x33
 8007c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c56:	2340      	movs	r3, #64	; 0x40
 8007c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c64:	f107 0308 	add.w	r3, r7, #8
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fde2 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c74:	2133      	movs	r1, #51	; 0x33
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f886 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007c94:	2302      	movs	r3, #2
 8007c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007c98:	23c0      	movs	r3, #192	; 0xc0
 8007c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ca6:	f107 0308 	add.w	r3, r7, #8
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fdc1 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f956 	bl	8007f64 <SDMMC_GetCmdResp2>
 8007cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007cd2:	2309      	movs	r3, #9
 8007cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007cd6:	23c0      	movs	r3, #192	; 0xc0
 8007cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ce4:	f107 0308 	add.w	r3, r7, #8
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff fda2 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f937 	bl	8007f64 <SDMMC_GetCmdResp2>
 8007cf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b088      	sub	sp, #32
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007d10:	2303      	movs	r3, #3
 8007d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d14:	2340      	movs	r3, #64	; 0x40
 8007d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d22:	f107 0308 	add.w	r3, r7, #8
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fd83 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	2103      	movs	r1, #3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f99c 	bl	8008070 <SDMMC_GetCmdResp6>
 8007d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3720      	adds	r7, #32
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007d52:	230d      	movs	r3, #13
 8007d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d56:	2340      	movs	r3, #64	; 0x40
 8007d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d64:	f107 0308 	add.w	r3, r7, #8
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fd62 	bl	8007834 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d74:	210d      	movs	r1, #13
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f806 	bl	8007d88 <SDMMC_GetCmdResp1>
 8007d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d96:	4b70      	ldr	r3, [pc, #448]	; (8007f58 <SDMMC_GetCmdResp1+0x1d0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a70      	ldr	r2, [pc, #448]	; (8007f5c <SDMMC_GetCmdResp1+0x1d4>)
 8007d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007da0:	0a5a      	lsrs	r2, r3, #9
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	fb02 f303 	mul.w	r3, r2, r3
 8007da8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	61fa      	str	r2, [r7, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007db8:	e0c9      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ef      	beq.n	8007daa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1ea      	bne.n	8007daa <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2204      	movs	r2, #4
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007de6:	2304      	movs	r3, #4
 8007de8:	e0b1      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0a6      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	22c5      	movs	r2, #197	; 0xc5
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff fd3e 	bl	8007888 <SDMMC_GetCommandResponse>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	461a      	mov	r2, r3
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d001      	beq.n	8007e1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e099      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff fd40 	bl	80078a2 <SDMMC_GetResponse>
 8007e22:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4b4e      	ldr	r3, [pc, #312]	; (8007f60 <SDMMC_GetCmdResp1+0x1d8>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e08d      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da02      	bge.n	8007e3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e3c:	e087      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e48:	2340      	movs	r3, #64	; 0x40
 8007e4a:	e080      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e56:	2380      	movs	r3, #128	; 0x80
 8007e58:	e079      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e68:	e071      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e78:	e069      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e88:	e061      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e98:	e059      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ea8:	e051      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007eb8:	e049      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ec8:	e041      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed8:	e039      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ee8:	e031      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ef4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ef8:	e029      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007f08:	e021      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f18:	e019      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f28:	e011      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f38:	e009      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f48:	e001      	b.n	8007f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000004 	.word	0x20000004
 8007f5c:	10624dd3 	.word	0x10624dd3
 8007f60:	fdffe008 	.word	0xfdffe008

08007f64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f6c:	4b1f      	ldr	r3, [pc, #124]	; (8007fec <SDMMC_GetCmdResp2+0x88>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <SDMMC_GetCmdResp2+0x8c>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	0a5b      	lsrs	r3, r3, #9
 8007f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7c:	fb02 f303 	mul.w	r3, r2, r3
 8007f80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	60fa      	str	r2, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f90:	e026      	b.n	8007fe0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0ef      	beq.n	8007f82 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1ea      	bne.n	8007f82 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d004      	beq.n	8007fc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fbe:	2304      	movs	r3, #4
 8007fc0:	e00e      	b.n	8007fe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e003      	b.n	8007fe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	22c5      	movs	r2, #197	; 0xc5
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000004 	.word	0x20000004
 8007ff0:	10624dd3 	.word	0x10624dd3

08007ff4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <SDMMC_GetCmdResp3+0x74>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1a      	ldr	r2, [pc, #104]	; (800806c <SDMMC_GetCmdResp3+0x78>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	0a5b      	lsrs	r3, r3, #9
 8008008:	f241 3288 	movw	r2, #5000	; 0x1388
 800800c:	fb02 f303 	mul.w	r3, r2, r3
 8008010:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	60fa      	str	r2, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800801c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008020:	e01b      	b.n	800805a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0ef      	beq.n	8008012 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1ea      	bne.n	8008012 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2204      	movs	r2, #4
 800804c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800804e:	2304      	movs	r3, #4
 8008050:	e003      	b.n	800805a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	22c5      	movs	r2, #197	; 0xc5
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000004 	.word	0x20000004
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	460b      	mov	r3, r1
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800807e:	4b35      	ldr	r3, [pc, #212]	; (8008154 <SDMMC_GetCmdResp6+0xe4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a35      	ldr	r2, [pc, #212]	; (8008158 <SDMMC_GetCmdResp6+0xe8>)
 8008084:	fba2 2303 	umull	r2, r3, r2, r3
 8008088:	0a5b      	lsrs	r3, r3, #9
 800808a:	f241 3288 	movw	r2, #5000	; 0x1388
 800808e:	fb02 f303 	mul.w	r3, r2, r3
 8008092:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	61fa      	str	r2, [r7, #28]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d102      	bne.n	80080a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800809e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080a2:	e052      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0ef      	beq.n	8008094 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1ea      	bne.n	8008094 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2204      	movs	r2, #4
 80080ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080d0:	2304      	movs	r3, #4
 80080d2:	e03a      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2201      	movs	r2, #1
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e02f      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff fbcc 	bl	8007888 <SDMMC_GetCommandResponse>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	7afb      	ldrb	r3, [r7, #11]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d001      	beq.n	80080fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e025      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	22c5      	movs	r2, #197	; 0xc5
 8008102:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fbcb 	bl	80078a2 <SDMMC_GetResponse>
 800810c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008122:	2300      	movs	r3, #0
 8008124:	e011      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008134:	e009      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008144:	e001      	b.n	800814a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3720      	adds	r7, #32
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000004 	.word	0x20000004
 8008158:	10624dd3 	.word	0x10624dd3

0800815c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008164:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <SDMMC_GetCmdResp7+0x94>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a22      	ldr	r2, [pc, #136]	; (80081f4 <SDMMC_GetCmdResp7+0x98>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	0a5b      	lsrs	r3, r3, #9
 8008170:	f241 3288 	movw	r2, #5000	; 0x1388
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	60fa      	str	r2, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008188:	e02c      	b.n	80081e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0ef      	beq.n	800817a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1ea      	bne.n	800817a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2204      	movs	r2, #4
 80081b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081b6:	2304      	movs	r3, #4
 80081b8:	e014      	b.n	80081e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e009      	b.n	80081e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2240      	movs	r2, #64	; 0x40
 80081e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80081e2:	2300      	movs	r3, #0

}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000004 	.word	0x20000004
 80081f4:	10624dd3 	.word	0x10624dd3

080081f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008200:	4b11      	ldr	r3, [pc, #68]	; (8008248 <SDMMC_GetCmdError+0x50>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a11      	ldr	r2, [pc, #68]	; (800824c <SDMMC_GetCmdError+0x54>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0a5b      	lsrs	r3, r3, #9
 800820c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1e5a      	subs	r2, r3, #1
 800821a:	60fa      	str	r2, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008224:	e009      	b.n	800823a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f1      	beq.n	8008216 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	22c5      	movs	r2, #197	; 0xc5
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000004 	.word	0x20000004
 800824c:	10624dd3 	.word	0x10624dd3

08008250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008250:	b084      	sub	sp, #16
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	f107 001c 	add.w	r0, r7, #28
 800825e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fa1c 	bl	80096ac <USB_CoreReset>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
 800828a:	e005      	b.n	8008298 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082a4:	b004      	add	sp, #16
 80082a6:	4770      	bx	lr

080082a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d165      	bne.n	8008388 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a3e      	ldr	r2, [pc, #248]	; (80083b8 <USB_SetTurnaroundTime+0x110>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d906      	bls.n	80082d2 <USB_SetTurnaroundTime+0x2a>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4a3d      	ldr	r2, [pc, #244]	; (80083bc <USB_SetTurnaroundTime+0x114>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d202      	bcs.n	80082d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80082cc:	230f      	movs	r3, #15
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e05c      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4a39      	ldr	r2, [pc, #228]	; (80083bc <USB_SetTurnaroundTime+0x114>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d306      	bcc.n	80082e8 <USB_SetTurnaroundTime+0x40>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a38      	ldr	r2, [pc, #224]	; (80083c0 <USB_SetTurnaroundTime+0x118>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d202      	bcs.n	80082e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082e2:	230e      	movs	r3, #14
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	e051      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a35      	ldr	r2, [pc, #212]	; (80083c0 <USB_SetTurnaroundTime+0x118>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d306      	bcc.n	80082fe <USB_SetTurnaroundTime+0x56>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4a34      	ldr	r2, [pc, #208]	; (80083c4 <USB_SetTurnaroundTime+0x11c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d202      	bcs.n	80082fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082f8:	230d      	movs	r3, #13
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e046      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4a30      	ldr	r2, [pc, #192]	; (80083c4 <USB_SetTurnaroundTime+0x11c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d306      	bcc.n	8008314 <USB_SetTurnaroundTime+0x6c>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4a2f      	ldr	r2, [pc, #188]	; (80083c8 <USB_SetTurnaroundTime+0x120>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d802      	bhi.n	8008314 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800830e:	230c      	movs	r3, #12
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e03b      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a2c      	ldr	r2, [pc, #176]	; (80083c8 <USB_SetTurnaroundTime+0x120>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d906      	bls.n	800832a <USB_SetTurnaroundTime+0x82>
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4a2b      	ldr	r2, [pc, #172]	; (80083cc <USB_SetTurnaroundTime+0x124>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d802      	bhi.n	800832a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008324:	230b      	movs	r3, #11
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e030      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4a27      	ldr	r2, [pc, #156]	; (80083cc <USB_SetTurnaroundTime+0x124>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d906      	bls.n	8008340 <USB_SetTurnaroundTime+0x98>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <USB_SetTurnaroundTime+0x128>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d802      	bhi.n	8008340 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800833a:	230a      	movs	r3, #10
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	e025      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a23      	ldr	r2, [pc, #140]	; (80083d0 <USB_SetTurnaroundTime+0x128>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d906      	bls.n	8008356 <USB_SetTurnaroundTime+0xae>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4a22      	ldr	r2, [pc, #136]	; (80083d4 <USB_SetTurnaroundTime+0x12c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d202      	bcs.n	8008356 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008350:	2309      	movs	r3, #9
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e01a      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <USB_SetTurnaroundTime+0x12c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d306      	bcc.n	800836c <USB_SetTurnaroundTime+0xc4>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <USB_SetTurnaroundTime+0x130>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d802      	bhi.n	800836c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008366:	2308      	movs	r3, #8
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e00f      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4a1a      	ldr	r2, [pc, #104]	; (80083d8 <USB_SetTurnaroundTime+0x130>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d906      	bls.n	8008382 <USB_SetTurnaroundTime+0xda>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a19      	ldr	r2, [pc, #100]	; (80083dc <USB_SetTurnaroundTime+0x134>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d202      	bcs.n	8008382 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800837c:	2307      	movs	r3, #7
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e004      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008382:	2306      	movs	r3, #6
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e001      	b.n	800838c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008388:	2309      	movs	r3, #9
 800838a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68da      	ldr	r2, [r3, #12]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	029b      	lsls	r3, r3, #10
 80083a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80083a4:	431a      	orrs	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	00d8acbf 	.word	0x00d8acbf
 80083bc:	00e4e1c0 	.word	0x00e4e1c0
 80083c0:	00f42400 	.word	0x00f42400
 80083c4:	01067380 	.word	0x01067380
 80083c8:	011a499f 	.word	0x011a499f
 80083cc:	01312cff 	.word	0x01312cff
 80083d0:	014ca43f 	.word	0x014ca43f
 80083d4:	016e3600 	.word	0x016e3600
 80083d8:	01a6ab1f 	.word	0x01a6ab1f
 80083dc:	01e84800 	.word	0x01e84800

080083e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f043 0201 	orr.w	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f023 0201 	bic.w	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d115      	bne.n	8008472 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008452:	2001      	movs	r0, #1
 8008454:	f7f9 f838 	bl	80014c8 <HAL_Delay>
      ms++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 f8ab 	bl	80095ba <USB_GetMode>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d01e      	beq.n	80084a8 <USB_SetCurrentMode+0x84>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b31      	cmp	r3, #49	; 0x31
 800846e:	d9f0      	bls.n	8008452 <USB_SetCurrentMode+0x2e>
 8008470:	e01a      	b.n	80084a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d115      	bne.n	80084a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008484:	2001      	movs	r0, #1
 8008486:	f7f9 f81f 	bl	80014c8 <HAL_Delay>
      ms++;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 f892 	bl	80095ba <USB_GetMode>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <USB_SetCurrentMode+0x84>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b31      	cmp	r3, #49	; 0x31
 80084a0:	d9f0      	bls.n	8008484 <USB_SetCurrentMode+0x60>
 80084a2:	e001      	b.n	80084a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e005      	b.n	80084b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b32      	cmp	r3, #50	; 0x32
 80084ac:	d101      	bne.n	80084b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084bc:	b084      	sub	sp, #16
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084d6:	2300      	movs	r3, #0
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	e009      	b.n	80084f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3340      	adds	r3, #64	; 0x40
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	2200      	movs	r2, #0
 80084e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3301      	adds	r3, #1
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b0e      	cmp	r3, #14
 80084f4:	d9f2      	bls.n	80084dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d11c      	bne.n	8008536 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800850a:	f043 0302 	orr.w	r3, r3, #2
 800850e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e005      	b.n	8008542 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008548:	461a      	mov	r2, r3
 800854a:	2300      	movs	r3, #0
 800854c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800854e:	2103      	movs	r1, #3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f959 	bl	8008808 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008556:	2110      	movs	r1, #16
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f8f1 	bl	8008740 <USB_FlushTxFifo>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f91d 	bl	80087a8 <USB_FlushRxFifo>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	461a      	mov	r2, r3
 8008580:	2300      	movs	r3, #0
 8008582:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858a:	461a      	mov	r2, r3
 800858c:	2300      	movs	r3, #0
 800858e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008596:	461a      	mov	r2, r3
 8008598:	2300      	movs	r3, #0
 800859a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800859c:	2300      	movs	r3, #0
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	e043      	b.n	800862a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085b8:	d118      	bne.n	80085ec <USB_DevInit+0x130>
    {
      if (i == 0U)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	461a      	mov	r2, r3
 80085ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	e013      	b.n	80085fe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e2:	461a      	mov	r2, r3
 80085e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e008      	b.n	80085fe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	461a      	mov	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	461a      	mov	r2, r3
 800860c:	2300      	movs	r3, #0
 800860e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861c:	461a      	mov	r2, r3
 800861e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008622:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	3301      	adds	r3, #1
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	429a      	cmp	r2, r3
 8008630:	d3b7      	bcc.n	80085a2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008632:	2300      	movs	r3, #0
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	e043      	b.n	80086c0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800864a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800864e:	d118      	bne.n	8008682 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008662:	461a      	mov	r2, r3
 8008664:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e013      	b.n	8008694 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	461a      	mov	r2, r3
 800867a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e008      	b.n	8008694 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4413      	add	r3, r2
 800868a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868e:	461a      	mov	r2, r3
 8008690:	2300      	movs	r3, #0
 8008692:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	461a      	mov	r2, r3
 80086a2:	2300      	movs	r3, #0
 80086a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b2:	461a      	mov	r2, r3
 80086b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3301      	adds	r3, #1
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d3b7      	bcc.n	8008638 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f043 0210 	orr.w	r2, r3, #16
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	4b10      	ldr	r3, [pc, #64]	; (800873c <USB_DevInit+0x280>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f043 0208 	orr.w	r2, r3, #8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008716:	2b01      	cmp	r3, #1
 8008718:	d107      	bne.n	800872a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008722:	f043 0304 	orr.w	r3, r3, #4
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008736:	b004      	add	sp, #16
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	803c3800 	.word	0x803c3800

08008740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <USB_FlushTxFifo+0x64>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d901      	bls.n	8008760 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e01b      	b.n	8008798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	daf2      	bge.n	800874e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	019b      	lsls	r3, r3, #6
 8008770:	f043 0220 	orr.w	r2, r3, #32
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <USB_FlushTxFifo+0x64>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e006      	b.n	8008798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b20      	cmp	r3, #32
 8008794:	d0f0      	beq.n	8008778 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	00030d40 	.word	0x00030d40

080087a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4a11      	ldr	r2, [pc, #68]	; (8008804 <USB_FlushRxFifo+0x5c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d901      	bls.n	80087c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e018      	b.n	80087f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	daf2      	bge.n	80087b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2210      	movs	r2, #16
 80087d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <USB_FlushRxFifo+0x5c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e006      	b.n	80087f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d0f0      	beq.n	80087d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	00030d40 	.word	0x00030d40

08008808 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008828:	4313      	orrs	r3, r2
 800882a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800883a:	b480      	push	{r7}
 800883c:	b087      	sub	sp, #28
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 0306 	and.w	r3, r3, #6
 8008852:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d002      	beq.n	8008860 <USB_GetDevSpeed+0x26>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b06      	cmp	r3, #6
 800885e:	d102      	bne.n	8008866 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008860:	2302      	movs	r3, #2
 8008862:	75fb      	strb	r3, [r7, #23]
 8008864:	e001      	b.n	800886a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008866:	230f      	movs	r3, #15
 8008868:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
}
 800886c:	4618      	mov	r0, r3
 800886e:	371c      	adds	r7, #28
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	785b      	ldrb	r3, [r3, #1]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d13a      	bne.n	800890a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889a:	69da      	ldr	r2, [r3, #28]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	2101      	movs	r1, #1
 80088a6:	fa01 f303 	lsl.w	r3, r1, r3
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	68f9      	ldr	r1, [r7, #12]
 80088ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088b2:	4313      	orrs	r3, r2
 80088b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d155      	bne.n	8008978 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	791b      	ldrb	r3, [r3, #4]
 80088e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	059b      	lsls	r3, r3, #22
 80088ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088f0:	4313      	orrs	r3, r2
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	0151      	lsls	r1, r2, #5
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	440a      	add	r2, r1
 80088fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	e036      	b.n	8008978 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008910:	69da      	ldr	r2, [r3, #28]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	2101      	movs	r1, #1
 800891c:	fa01 f303 	lsl.w	r3, r1, r3
 8008920:	041b      	lsls	r3, r3, #16
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008928:	4313      	orrs	r3, r2
 800892a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d11a      	bne.n	8008978 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	791b      	ldrb	r3, [r3, #4]
 800895c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800895e:	430b      	orrs	r3, r1
 8008960:	4313      	orrs	r3, r2
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008976:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d161      	bne.n	8008a68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089ba:	d11f      	bne.n	80089fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	43db      	mvns	r3, r3
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	69da      	ldr	r2, [r3, #28]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	2101      	movs	r1, #1
 8008a32:	fa01 f303 	lsl.w	r3, r1, r3
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	68f9      	ldr	r1, [r7, #12]
 8008a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a40:	4013      	ands	r3, r2
 8008a42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	0159      	lsls	r1, r3, #5
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	440b      	add	r3, r1
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4b35      	ldr	r3, [pc, #212]	; (8008b38 <USB_DeactivateEndpoint+0x1b0>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	600b      	str	r3, [r1, #0]
 8008a66:	e060      	b.n	8008b2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a7e:	d11f      	bne.n	8008ac0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008abe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	68f9      	ldr	r1, [r7, #12]
 8008adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	2101      	movs	r1, #1
 8008af6:	fa01 f303 	lsl.w	r3, r1, r3
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	43db      	mvns	r3, r3
 8008afe:	68f9      	ldr	r1, [r7, #12]
 8008b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b04:	4013      	ands	r3, r2
 8008b06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	0159      	lsls	r1, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	440b      	add	r3, r1
 8008b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b22:	4619      	mov	r1, r3
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <USB_DeactivateEndpoint+0x1b4>)
 8008b26:	4013      	ands	r3, r2
 8008b28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	ec337800 	.word	0xec337800
 8008b3c:	eff37800 	.word	0xeff37800

08008b40 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	f040 8128 	bne.w	8008dae <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d132      	bne.n	8008bcc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc4:	0cdb      	lsrs	r3, r3, #19
 8008bc6:	04db      	lsls	r3, r3, #19
 8008bc8:	6113      	str	r3, [r2, #16]
 8008bca:	e092      	b.n	8008cf2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	0151      	lsls	r1, r2, #5
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	440a      	add	r2, r1
 8008be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be6:	0cdb      	lsrs	r3, r3, #19
 8008be8:	04db      	lsls	r3, r3, #19
 8008bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d11a      	bne.n	8008c4c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d903      	bls.n	8008c2a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	0151      	lsls	r1, r2, #5
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	440a      	add	r2, r1
 8008c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c48:	6113      	str	r3, [r2, #16]
 8008c4a:	e01b      	b.n	8008c84 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6919      	ldr	r1, [r3, #16]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	440b      	add	r3, r1
 8008c64:	1e59      	subs	r1, r3, #1
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c70:	4b8d      	ldr	r3, [pc, #564]	; (8008ea8 <USB_EPStartXfer+0x368>)
 8008c72:	400b      	ands	r3, r1
 8008c74:	6939      	ldr	r1, [r7, #16]
 8008c76:	0148      	lsls	r0, r1, #5
 8008c78:	6979      	ldr	r1, [r7, #20]
 8008c7a:	4401      	add	r1, r0
 8008c7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c80:	4313      	orrs	r3, r2
 8008c82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	691a      	ldr	r2, [r3, #16]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c9a:	6939      	ldr	r1, [r7, #16]
 8008c9c:	0148      	lsls	r0, r1, #5
 8008c9e:	6979      	ldr	r1, [r7, #20]
 8008ca0:	4401      	add	r1, r0
 8008ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	791b      	ldrb	r3, [r3, #4]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d11f      	bne.n	8008cf2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ccc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	0151      	lsls	r1, r2, #5
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	440a      	add	r2, r1
 8008ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cf0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	0151      	lsls	r1, r2, #5
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	440a      	add	r2, r1
 8008d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d10:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	791b      	ldrb	r3, [r3, #4]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d015      	beq.n	8008d46 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8139 	beq.w	8008f96 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	2101      	movs	r1, #1
 8008d36:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3a:	6979      	ldr	r1, [r7, #20]
 8008d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d40:	4313      	orrs	r3, r2
 8008d42:	634b      	str	r3, [r1, #52]	; 0x34
 8008d44:	e127      	b.n	8008f96 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d110      	bne.n	8008d78 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	e00f      	b.n	8008d98 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	0151      	lsls	r1, r2, #5
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	440a      	add	r2, r1
 8008d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d96:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68d9      	ldr	r1, [r3, #12]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781a      	ldrb	r2, [r3, #0]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f9a6 	bl	80090f8 <USB_WritePacket>
 8008dac:	e0f3      	b.n	8008f96 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	0151      	lsls	r1, r2, #5
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	440a      	add	r2, r1
 8008dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc8:	0cdb      	lsrs	r3, r3, #19
 8008dca:	04db      	lsls	r3, r3, #19
 8008dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	0151      	lsls	r1, r2, #5
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	440a      	add	r2, r1
 8008de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008df0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d12f      	bne.n	8008e58 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e26:	6939      	ldr	r1, [r7, #16]
 8008e28:	0148      	lsls	r0, r1, #5
 8008e2a:	6979      	ldr	r1, [r7, #20]
 8008e2c:	4401      	add	r1, r0
 8008e2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e32:	4313      	orrs	r3, r2
 8008e34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e54:	6113      	str	r3, [r2, #16]
 8008e56:	e061      	b.n	8008f1c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d125      	bne.n	8008eac <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e76:	6939      	ldr	r1, [r7, #16]
 8008e78:	0148      	lsls	r0, r1, #5
 8008e7a:	6979      	ldr	r1, [r7, #20]
 8008e7c:	4401      	add	r1, r0
 8008e7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e82:	4313      	orrs	r3, r2
 8008e84:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ea4:	6113      	str	r3, [r2, #16]
 8008ea6:	e039      	b.n	8008f1c <USB_EPStartXfer+0x3dc>
 8008ea8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	691a      	ldr	r2, [r3, #16]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	1e5a      	subs	r2, r3, #1
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	89fa      	ldrh	r2, [r7, #14]
 8008ec8:	fb03 f202 	mul.w	r2, r3, r2
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	04d9      	lsls	r1, r3, #19
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	; (8008fa0 <USB_EPStartXfer+0x460>)
 8008ee4:	400b      	ands	r3, r1
 8008ee6:	6939      	ldr	r1, [r7, #16]
 8008ee8:	0148      	lsls	r0, r1, #5
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	4401      	add	r1, r0
 8008eee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f0c:	6939      	ldr	r1, [r7, #16]
 8008f0e:	0148      	lsls	r0, r1, #5
 8008f10:	6979      	ldr	r1, [r7, #20]
 8008f12:	4401      	add	r1, r0
 8008f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	791b      	ldrb	r3, [r3, #4]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d128      	bne.n	8008f76 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	0151      	lsls	r1, r2, #5
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	440a      	add	r2, r1
 8008f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e00f      	b.n	8008f76 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	1ff80000 	.word	0x1ff80000

08008fa4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d14a      	bne.n	8009058 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fda:	f040 8086 	bne.w	80090ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	7812      	ldrb	r2, [r2, #0]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009000:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009024:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009032:	4293      	cmp	r3, r2
 8009034:	d902      	bls.n	800903c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	75fb      	strb	r3, [r7, #23]
          break;
 800903a:	e056      	b.n	80090ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009054:	d0e7      	beq.n	8009026 <USB_EPStopXfer+0x82>
 8009056:	e048      	b.n	80090ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800906c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009070:	d13b      	bne.n	80090ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	7812      	ldrb	r2, [r2, #0]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009090:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009094:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	7812      	ldrb	r2, [r2, #0]
 80090aa:	0151      	lsls	r1, r2, #5
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	440a      	add	r2, r1
 80090b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d902      	bls.n	80090d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	75fb      	strb	r3, [r7, #23]
          break;
 80090ce:	e00c      	b.n	80090ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090e8:	d0e7      	beq.n	80090ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b089      	sub	sp, #36	; 0x24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4611      	mov	r1, r2
 8009104:	461a      	mov	r2, r3
 8009106:	460b      	mov	r3, r1
 8009108:	71fb      	strb	r3, [r7, #7]
 800910a:	4613      	mov	r3, r2
 800910c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009116:	88bb      	ldrh	r3, [r7, #4]
 8009118:	3303      	adds	r3, #3
 800911a:	089b      	lsrs	r3, r3, #2
 800911c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	e018      	b.n	8009156 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	031a      	lsls	r2, r3, #12
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	4413      	add	r3, r2
 800912c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009130:	461a      	mov	r2, r3
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	3301      	adds	r3, #1
 800913c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	3301      	adds	r3, #1
 8009142:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3301      	adds	r3, #1
 8009148:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	3301      	adds	r3, #1
 800914e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	3301      	adds	r3, #1
 8009154:	61bb      	str	r3, [r7, #24]
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	429a      	cmp	r2, r3
 800915c:	d3e2      	bcc.n	8009124 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3724      	adds	r7, #36	; 0x24
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800916c:	b480      	push	{r7}
 800916e:	b08b      	sub	sp, #44	; 0x2c
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	089b      	lsrs	r3, r3, #2
 8009186:	b29b      	uxth	r3, r3
 8009188:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800918a:	88fb      	ldrh	r3, [r7, #6]
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009192:	2300      	movs	r3, #0
 8009194:	623b      	str	r3, [r7, #32]
 8009196:	e014      	b.n	80091c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	3301      	adds	r3, #1
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	3301      	adds	r3, #1
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	3301      	adds	r3, #1
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	3301      	adds	r3, #1
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	3301      	adds	r3, #1
 80091c0:	623b      	str	r3, [r7, #32]
 80091c2:	6a3a      	ldr	r2, [r7, #32]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d3e6      	bcc.n	8009198 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80091ca:	8bfb      	ldrh	r3, [r7, #30]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01e      	beq.n	800920e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091da:	461a      	mov	r2, r3
 80091dc:	f107 0310 	add.w	r3, r7, #16
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	701a      	strb	r2, [r3, #0]
      i++;
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	3301      	adds	r3, #1
 80091fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	3301      	adds	r3, #1
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009202:	8bfb      	ldrh	r3, [r7, #30]
 8009204:	3b01      	subs	r3, #1
 8009206:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009208:	8bfb      	ldrh	r3, [r7, #30]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1ea      	bne.n	80091e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009210:	4618      	mov	r0, r3
 8009212:	372c      	adds	r7, #44	; 0x2c
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d12c      	bne.n	8009292 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	db12      	blt.n	8009270 <USB_EPSetStall+0x54>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00f      	beq.n	8009270 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	440a      	add	r2, r1
 8009266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800926e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	e02b      	b.n	80092ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	db12      	blt.n	80092ca <USB_EPSetStall+0xae>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00f      	beq.n	80092ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	0151      	lsls	r1, r2, #5
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	440a      	add	r2, r1
 80092c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	0151      	lsls	r1, r2, #5
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	440a      	add	r2, r1
 80092e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d128      	bne.n	8009366 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	0151      	lsls	r1, r2, #5
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	440a      	add	r2, r1
 800932a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800932e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009332:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	791b      	ldrb	r3, [r3, #4]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d003      	beq.n	8009344 <USB_EPClearStall+0x4c>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	791b      	ldrb	r3, [r3, #4]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d138      	bne.n	80093b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	e027      	b.n	80093b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009380:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009384:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	791b      	ldrb	r3, [r3, #4]
 800938a:	2b03      	cmp	r3, #3
 800938c:	d003      	beq.n	8009396 <USB_EPClearStall+0x9e>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d10f      	bne.n	80093b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80093f8:	68f9      	ldr	r1, [r7, #12]
 80093fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093fe:	4313      	orrs	r3, r2
 8009400:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800942a:	f023 0303 	bic.w	r3, r3, #3
 800942e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800943e:	f023 0302 	bic.w	r3, r3, #2
 8009442:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800946c:	f023 0303 	bic.w	r3, r3, #3
 8009470:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4013      	ands	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094ac:	68fb      	ldr	r3, [r7, #12]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	4013      	ands	r3, r2
 80094dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	0c1b      	lsrs	r3, r3, #16
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	4013      	ands	r3, r2
 8009510:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	b29b      	uxth	r3, r3
}
 8009516:	4618      	mov	r0, r3
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009522:	b480      	push	{r7}
 8009524:	b085      	sub	sp, #20
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	4013      	ands	r3, r2
 800954e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009550:	68bb      	ldr	r3, [r7, #8]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800955e:	b480      	push	{r7}
 8009560:	b087      	sub	sp, #28
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009580:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	fa22 f303 	lsr.w	r3, r2, r3
 800958e:	01db      	lsls	r3, r3, #7
 8009590:	b2db      	uxtb	r3, r3
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4013      	ands	r3, r2
 80095aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095ac:	68bb      	ldr	r3, [r7, #8]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	f003 0301 	and.w	r3, r3, #1
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095f4:	f023 0307 	bic.w	r3, r3, #7
 80095f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800960c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	333c      	adds	r3, #60	; 0x3c
 800962e:	3304      	adds	r3, #4
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	4a1c      	ldr	r2, [pc, #112]	; (80096a8 <USB_EP0_OutStart+0x8c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d90a      	bls.n	8009652 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800964c:	d101      	bne.n	8009652 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e024      	b.n	800969c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009658:	461a      	mov	r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800966c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009680:	f043 0318 	orr.w	r3, r3, #24
 8009684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009694:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009698:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	4f54300a 	.word	0x4f54300a

080096ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4a13      	ldr	r2, [pc, #76]	; (8009710 <USB_CoreReset+0x64>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d901      	bls.n	80096ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e01b      	b.n	8009702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	daf2      	bge.n	80096b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f043 0201 	orr.w	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4a09      	ldr	r2, [pc, #36]	; (8009710 <USB_CoreReset+0x64>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e006      	b.n	8009702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d0f0      	beq.n	80096e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	00030d40 	.word	0x00030d40

08009714 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009718:	4904      	ldr	r1, [pc, #16]	; (800972c <MX_FATFS_Init+0x18>)
 800971a:	4805      	ldr	r0, [pc, #20]	; (8009730 <MX_FATFS_Init+0x1c>)
 800971c:	f002 fa92 	bl	800bc44 <FATFS_LinkDriver>
 8009720:	4603      	mov	r3, r0
 8009722:	461a      	mov	r2, r3
 8009724:	4b03      	ldr	r3, [pc, #12]	; (8009734 <MX_FATFS_Init+0x20>)
 8009726:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009728:	bf00      	nop
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20000384 	.word	0x20000384
 8009730:	0800d2d4 	.word	0x0800d2d4
 8009734:	20000380 	.word	0x20000380

08009738 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009742:	f000 f896 	bl	8009872 <BSP_SD_IsDetected>
 8009746:	4603      	mov	r3, r0
 8009748:	2b01      	cmp	r3, #1
 800974a:	d001      	beq.n	8009750 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800974c:	2302      	movs	r3, #2
 800974e:	e012      	b.n	8009776 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009750:	480b      	ldr	r0, [pc, #44]	; (8009780 <BSP_SD_Init+0x48>)
 8009752:	f7fb ff33 	bl	80055bc <HAL_SD_Init>
 8009756:	4603      	mov	r3, r0
 8009758:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009764:	4806      	ldr	r0, [pc, #24]	; (8009780 <BSP_SD_Init+0x48>)
 8009766:	f7fc fce3 	bl	8006130 <HAL_SD_ConfigWideBusOperation>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009774:	79fb      	ldrb	r3, [r7, #7]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2000017c 	.word	0x2000017c

08009784 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	68f9      	ldr	r1, [r7, #12]
 800979a:	4806      	ldr	r0, [pc, #24]	; (80097b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800979c:	f7fb ffe4 	bl	8005768 <HAL_SD_ReadBlocks_DMA>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2000017c 	.word	0x2000017c

080097b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	68f9      	ldr	r1, [r7, #12]
 80097ce:	4806      	ldr	r0, [pc, #24]	; (80097e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80097d0:	f7fc f892 	bl	80058f8 <HAL_SD_WriteBlocks_DMA>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	2000017c 	.word	0x2000017c

080097ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <BSP_SD_GetCardState+0x1c>)
 80097f2:	f7fc fd59 	bl	80062a8 <HAL_SD_GetCardState>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	bf14      	ite	ne
 80097fc:	2301      	movne	r3, #1
 80097fe:	2300      	moveq	r3, #0
 8009800:	b2db      	uxtb	r3, r3
}
 8009802:	4618      	mov	r0, r3
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	2000017c 	.word	0x2000017c

0800980c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	4803      	ldr	r0, [pc, #12]	; (8009824 <BSP_SD_GetCardInfo+0x18>)
 8009818:	f7fc fc5e 	bl	80060d8 <HAL_SD_GetCardInfo>
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	2000017c 	.word	0x2000017c

08009828 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009830:	f000 f818 	bl	8009864 <BSP_SD_AbortCallback>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009844:	f000 f9a8 	bl	8009b98 <BSP_SD_WriteCpltCallback>
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009858:	f000 f9aa 	bl	8009bb0 <BSP_SD_ReadCpltCallback>
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0

}
 8009868:	bf00      	nop
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009878:	2301      	movs	r3, #1
 800987a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800987c:	f000 f80c 	bl	8009898 <BSP_PlatformIsDetected>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009886:	2300      	movs	r3, #0
 8009888:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	b2db      	uxtb	r3, r3
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800989e:	2301      	movs	r3, #1
 80098a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80098a2:	2101      	movs	r1, #1
 80098a4:	4806      	ldr	r0, [pc, #24]	; (80098c0 <BSP_PlatformIsDetected+0x28>)
 80098a6:	f7f8 fb27 	bl	8001ef8 <HAL_GPIO_ReadPin>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80098b0:	2300      	movs	r3, #0
 80098b2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80098b4:	79fb      	ldrb	r3, [r7, #7]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	48000c00 	.word	0x48000c00

080098c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80098cc:	f7f7 fdf0 	bl	80014b0 <HAL_GetTick>
 80098d0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80098d2:	e006      	b.n	80098e2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80098d4:	f7ff ff8a 	bl	80097ec <BSP_SD_GetCardState>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	e009      	b.n	80098f6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80098e2:	f7f7 fde5 	bl	80014b0 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d8f0      	bhi.n	80098d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80098f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800990a:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <SD_CheckStatus+0x38>)
 800990c:	2201      	movs	r2, #1
 800990e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009910:	f7ff ff6c 	bl	80097ec <BSP_SD_GetCardState>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d107      	bne.n	800992a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800991a:	4b07      	ldr	r3, [pc, #28]	; (8009938 <SD_CheckStatus+0x38>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	f023 0301 	bic.w	r3, r3, #1
 8009924:	b2da      	uxtb	r2, r3
 8009926:	4b04      	ldr	r3, [pc, #16]	; (8009938 <SD_CheckStatus+0x38>)
 8009928:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800992a:	4b03      	ldr	r3, [pc, #12]	; (8009938 <SD_CheckStatus+0x38>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b2db      	uxtb	r3, r3
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	2000000d 	.word	0x2000000d

0800993c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009946:	f7ff fef7 	bl	8009738 <BSP_SD_Init>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff ffd4 	bl	8009900 <SD_CheckStatus>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	4b04      	ldr	r3, [pc, #16]	; (8009970 <SD_initialize+0x34>)
 800995e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009960:	4b03      	ldr	r3, [pc, #12]	; (8009970 <SD_initialize+0x34>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b2db      	uxtb	r3, r3
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	2000000d 	.word	0x2000000d

08009974 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff ffbd 	bl	8009900 <SD_CheckStatus>
 8009986:	4603      	mov	r3, r0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80099a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80099a8:	f7ff ff8c 	bl	80098c4 <SD_CheckStatusWithTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da01      	bge.n	80099b6 <SD_read+0x26>
  {
    return res;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	e03b      	b.n	8009a2e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	68b8      	ldr	r0, [r7, #8]
 80099bc:	f7ff fee2 	bl	8009784 <BSP_SD_ReadBlocks_DMA>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d132      	bne.n	8009a2c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <SD_read+0xa8>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80099cc:	f7f7 fd70 	bl	80014b0 <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80099d2:	bf00      	nop
 80099d4:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <SD_read+0xa8>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d108      	bne.n	80099ee <SD_read+0x5e>
 80099dc:	f7f7 fd68 	bl	80014b0 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d9f2      	bls.n	80099d4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80099ee:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <SD_read+0xa8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]
 80099fa:	e017      	b.n	8009a2c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80099fc:	4b0e      	ldr	r3, [pc, #56]	; (8009a38 <SD_read+0xa8>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009a02:	f7f7 fd55 	bl	80014b0 <HAL_GetTick>
 8009a06:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009a08:	e007      	b.n	8009a1a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a0a:	f7ff feef 	bl	80097ec <BSP_SD_GetCardState>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <SD_read+0x8a>
          {
            res = RES_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009a18:	e008      	b.n	8009a2c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009a1a:	f7f7 fd49 	bl	80014b0 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d9ee      	bls.n	8009a0a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	2000038c 	.word	0x2000038c

08009a3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009a50:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <SD_write+0xa8>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a56:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a5a:	f7ff ff33 	bl	80098c4 <SD_CheckStatusWithTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da01      	bge.n	8009a68 <SD_write+0x2c>
  {
    return res;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	e038      	b.n	8009ada <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	68b8      	ldr	r0, [r7, #8]
 8009a6e:	f7ff fea3 	bl	80097b8 <BSP_SD_WriteBlocks_DMA>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d12f      	bne.n	8009ad8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009a78:	f7f7 fd1a 	bl	80014b0 <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009a7e:	bf00      	nop
 8009a80:	4b18      	ldr	r3, [pc, #96]	; (8009ae4 <SD_write+0xa8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d108      	bne.n	8009a9a <SD_write+0x5e>
 8009a88:	f7f7 fd12 	bl	80014b0 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d9f2      	bls.n	8009a80 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009a9a:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <SD_write+0xa8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
 8009aa6:	e017      	b.n	8009ad8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <SD_write+0xa8>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009aae:	f7f7 fcff 	bl	80014b0 <HAL_GetTick>
 8009ab2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ab4:	e007      	b.n	8009ac6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ab6:	f7ff fe99 	bl	80097ec <BSP_SD_GetCardState>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <SD_write+0x8a>
          {
            res = RES_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]
            break;
 8009ac4:	e008      	b.n	8009ad8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ac6:	f7f7 fcf3 	bl	80014b0 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d9ee      	bls.n	8009ab6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000388 	.word	0x20000388

08009ae8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08c      	sub	sp, #48	; 0x30
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	603a      	str	r2, [r7, #0]
 8009af2:	71fb      	strb	r3, [r7, #7]
 8009af4:	460b      	mov	r3, r1
 8009af6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009afe:	4b25      	ldr	r3, [pc, #148]	; (8009b94 <SD_ioctl+0xac>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <SD_ioctl+0x28>
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e03c      	b.n	8009b8a <SD_ioctl+0xa2>

  switch (cmd)
 8009b10:	79bb      	ldrb	r3, [r7, #6]
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d834      	bhi.n	8009b80 <SD_ioctl+0x98>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <SD_ioctl+0x34>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b2d 	.word	0x08009b2d
 8009b20:	08009b35 	.word	0x08009b35
 8009b24:	08009b4d 	.word	0x08009b4d
 8009b28:	08009b67 	.word	0x08009b67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b32:	e028      	b.n	8009b86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b34:	f107 030c 	add.w	r3, r7, #12
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff fe67 	bl	800980c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b4a:	e01c      	b.n	8009b86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b4c:	f107 030c 	add.w	r3, r7, #12
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fe5b 	bl	800980c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b64:	e00f      	b.n	8009b86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b66:	f107 030c 	add.w	r3, r7, #12
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff fe4e 	bl	800980c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	0a5a      	lsrs	r2, r3, #9
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b7e:	e002      	b.n	8009b86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009b80:	2304      	movs	r3, #4
 8009b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3730      	adds	r7, #48	; 0x30
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2000000d 	.word	0x2000000d

08009b98 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009b9c:	4b03      	ldr	r3, [pc, #12]	; (8009bac <BSP_SD_WriteCpltCallback+0x14>)
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	20000388 	.word	0x20000388

08009bb0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <BSP_SD_ReadCpltCallback+0x14>)
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]
}
 8009bba:	bf00      	nop
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	2000038c 	.word	0x2000038c

08009bc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bd8:	f002 fe56 	bl	800c888 <USBD_static_malloc>
 8009bdc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d109      	bne.n	8009bf8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	32b0      	adds	r2, #176	; 0xb0
 8009bee:	2100      	movs	r1, #0
 8009bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e0d4      	b.n	8009da2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009bf8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f002 fe80 	bl	800c904 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32b0      	adds	r2, #176	; 0xb0
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	32b0      	adds	r2, #176	; 0xb0
 8009c1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	7c1b      	ldrb	r3, [r3, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d138      	bne.n	8009ca2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c30:	4b5e      	ldr	r3, [pc, #376]	; (8009dac <USBD_CDC_Init+0x1e4>)
 8009c32:	7819      	ldrb	r1, [r3, #0]
 8009c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c38:	2202      	movs	r2, #2
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f002 fc10 	bl	800c460 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c40:	4b5a      	ldr	r3, [pc, #360]	; (8009dac <USBD_CDC_Init+0x1e4>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	3324      	adds	r3, #36	; 0x24
 8009c56:	2201      	movs	r2, #1
 8009c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c5a:	4b55      	ldr	r3, [pc, #340]	; (8009db0 <USBD_CDC_Init+0x1e8>)
 8009c5c:	7819      	ldrb	r1, [r3, #0]
 8009c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c62:	2202      	movs	r2, #2
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f002 fbfb 	bl	800c460 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c6a:	4b51      	ldr	r3, [pc, #324]	; (8009db0 <USBD_CDC_Init+0x1e8>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	f003 020f 	and.w	r2, r3, #15
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c82:	2201      	movs	r2, #1
 8009c84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c86:	4b4b      	ldr	r3, [pc, #300]	; (8009db4 <USBD_CDC_Init+0x1ec>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	f003 020f 	and.w	r2, r3, #15
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	3326      	adds	r3, #38	; 0x26
 8009c9c:	2210      	movs	r2, #16
 8009c9e:	801a      	strh	r2, [r3, #0]
 8009ca0:	e035      	b.n	8009d0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ca2:	4b42      	ldr	r3, [pc, #264]	; (8009dac <USBD_CDC_Init+0x1e4>)
 8009ca4:	7819      	ldrb	r1, [r3, #0]
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	2202      	movs	r2, #2
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f002 fbd8 	bl	800c460 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cb0:	4b3e      	ldr	r3, [pc, #248]	; (8009dac <USBD_CDC_Init+0x1e4>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 020f 	and.w	r2, r3, #15
 8009cb8:	6879      	ldr	r1, [r7, #4]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	3324      	adds	r3, #36	; 0x24
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cca:	4b39      	ldr	r3, [pc, #228]	; (8009db0 <USBD_CDC_Init+0x1e8>)
 8009ccc:	7819      	ldrb	r1, [r3, #0]
 8009cce:	2340      	movs	r3, #64	; 0x40
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f002 fbc4 	bl	800c460 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cd8:	4b35      	ldr	r3, [pc, #212]	; (8009db0 <USBD_CDC_Init+0x1e8>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 020f 	and.w	r2, r3, #15
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009cf4:	4b2f      	ldr	r3, [pc, #188]	; (8009db4 <USBD_CDC_Init+0x1ec>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 020f 	and.w	r2, r3, #15
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	440b      	add	r3, r1
 8009d08:	3326      	adds	r3, #38	; 0x26
 8009d0a:	2210      	movs	r2, #16
 8009d0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d0e:	4b29      	ldr	r3, [pc, #164]	; (8009db4 <USBD_CDC_Init+0x1ec>)
 8009d10:	7819      	ldrb	r1, [r3, #0]
 8009d12:	2308      	movs	r3, #8
 8009d14:	2203      	movs	r2, #3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f002 fba2 	bl	800c460 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d1c:	4b25      	ldr	r3, [pc, #148]	; (8009db4 <USBD_CDC_Init+0x1ec>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	440b      	add	r3, r1
 8009d30:	3324      	adds	r3, #36	; 0x24
 8009d32:	2201      	movs	r2, #1
 8009d34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	33b0      	adds	r3, #176	; 0xb0
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e018      	b.n	8009da2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7c1b      	ldrb	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10a      	bne.n	8009d8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d78:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <USBD_CDC_Init+0x1e8>)
 8009d7a:	7819      	ldrb	r1, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f002 fce4 	bl	800c754 <USBD_LL_PrepareReceive>
 8009d8c:	e008      	b.n	8009da0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d8e:	4b08      	ldr	r3, [pc, #32]	; (8009db0 <USBD_CDC_Init+0x1e8>)
 8009d90:	7819      	ldrb	r1, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f002 fcda 	bl	800c754 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20000097 	.word	0x20000097
 8009db0:	20000098 	.word	0x20000098
 8009db4:	20000099 	.word	0x20000099

08009db8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009dc4:	4b3a      	ldr	r3, [pc, #232]	; (8009eb0 <USBD_CDC_DeInit+0xf8>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f002 fb86 	bl	800c4dc <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009dd0:	4b37      	ldr	r3, [pc, #220]	; (8009eb0 <USBD_CDC_DeInit+0xf8>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 020f 	and.w	r2, r3, #15
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	440b      	add	r3, r1
 8009de4:	3324      	adds	r3, #36	; 0x24
 8009de6:	2200      	movs	r2, #0
 8009de8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009dea:	4b32      	ldr	r3, [pc, #200]	; (8009eb4 <USBD_CDC_DeInit+0xfc>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f002 fb73 	bl	800c4dc <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009df6:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <USBD_CDC_DeInit+0xfc>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f003 020f 	and.w	r2, r3, #15
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e0e:	2200      	movs	r2, #0
 8009e10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e12:	4b29      	ldr	r3, [pc, #164]	; (8009eb8 <USBD_CDC_DeInit+0x100>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f002 fb5f 	bl	800c4dc <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e1e:	4b26      	ldr	r3, [pc, #152]	; (8009eb8 <USBD_CDC_DeInit+0x100>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	f003 020f 	and.w	r2, r3, #15
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	3324      	adds	r3, #36	; 0x24
 8009e34:	2200      	movs	r2, #0
 8009e36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e38:	4b1f      	ldr	r3, [pc, #124]	; (8009eb8 <USBD_CDC_DeInit+0x100>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 020f 	and.w	r2, r3, #15
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	3326      	adds	r3, #38	; 0x26
 8009e4e:	2200      	movs	r2, #0
 8009e50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	32b0      	adds	r2, #176	; 0xb0
 8009e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01f      	beq.n	8009ea4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	33b0      	adds	r3, #176	; 0xb0
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	32b0      	adds	r2, #176	; 0xb0
 8009e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 fd0c 	bl	800c8a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	32b0      	adds	r2, #176	; 0xb0
 8009e96:	2100      	movs	r1, #0
 8009e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000097 	.word	0x20000097
 8009eb4:	20000098 	.word	0x20000098
 8009eb8:	20000099 	.word	0x20000099

08009ebc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	32b0      	adds	r2, #176	; 0xb0
 8009ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e0bf      	b.n	800a06c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d050      	beq.n	8009f9a <USBD_CDC_Setup+0xde>
 8009ef8:	2b20      	cmp	r3, #32
 8009efa:	f040 80af 	bne.w	800a05c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d03a      	beq.n	8009f7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b25b      	sxtb	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da1b      	bge.n	8009f48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	33b0      	adds	r3, #176	; 0xb0
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	88d2      	ldrh	r2, [r2, #6]
 8009f2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	2b07      	cmp	r3, #7
 8009f34:	bf28      	it	cs
 8009f36:	2307      	movcs	r3, #7
 8009f38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	89fa      	ldrh	r2, [r7, #14]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 fdb3 	bl	800baac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f46:	e090      	b.n	800a06a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	785a      	ldrb	r2, [r3, #1]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	2b3f      	cmp	r3, #63	; 0x3f
 8009f58:	d803      	bhi.n	8009f62 <USBD_CDC_Setup+0xa6>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	88db      	ldrh	r3, [r3, #6]
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	e000      	b.n	8009f64 <USBD_CDC_Setup+0xa8>
 8009f62:	2240      	movs	r2, #64	; 0x40
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f6a:	6939      	ldr	r1, [r7, #16]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f72:	461a      	mov	r2, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 fdc5 	bl	800bb04 <USBD_CtlPrepareRx>
      break;
 8009f7a:	e076      	b.n	800a06a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	33b0      	adds	r3, #176	; 0xb0
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	7850      	ldrb	r0, [r2, #1]
 8009f92:	2200      	movs	r2, #0
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	4798      	blx	r3
      break;
 8009f98:	e067      	b.n	800a06a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	2b0b      	cmp	r3, #11
 8009fa0:	d851      	bhi.n	800a046 <USBD_CDC_Setup+0x18a>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <USBD_CDC_Setup+0xec>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	08009fd9 	.word	0x08009fd9
 8009fac:	0800a055 	.word	0x0800a055
 8009fb0:	0800a047 	.word	0x0800a047
 8009fb4:	0800a047 	.word	0x0800a047
 8009fb8:	0800a047 	.word	0x0800a047
 8009fbc:	0800a047 	.word	0x0800a047
 8009fc0:	0800a047 	.word	0x0800a047
 8009fc4:	0800a047 	.word	0x0800a047
 8009fc8:	0800a047 	.word	0x0800a047
 8009fcc:	0800a047 	.word	0x0800a047
 8009fd0:	0800a003 	.word	0x0800a003
 8009fd4:	0800a02d 	.word	0x0800a02d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d107      	bne.n	8009ff4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fe4:	f107 030a 	add.w	r3, r7, #10
 8009fe8:	2202      	movs	r2, #2
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 fd5d 	bl	800baac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ff2:	e032      	b.n	800a05a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 fce7 	bl	800b9ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	75fb      	strb	r3, [r7, #23]
          break;
 800a000:	e02b      	b.n	800a05a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d107      	bne.n	800a01e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a00e:	f107 030d 	add.w	r3, r7, #13
 800a012:	2201      	movs	r2, #1
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fd48 	bl	800baac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a01c:	e01d      	b.n	800a05a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f001 fcd2 	bl	800b9ca <USBD_CtlError>
            ret = USBD_FAIL;
 800a026:	2303      	movs	r3, #3
 800a028:	75fb      	strb	r3, [r7, #23]
          break;
 800a02a:	e016      	b.n	800a05a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b03      	cmp	r3, #3
 800a036:	d00f      	beq.n	800a058 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f001 fcc5 	bl	800b9ca <USBD_CtlError>
            ret = USBD_FAIL;
 800a040:	2303      	movs	r3, #3
 800a042:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a044:	e008      	b.n	800a058 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f001 fcbe 	bl	800b9ca <USBD_CtlError>
          ret = USBD_FAIL;
 800a04e:	2303      	movs	r3, #3
 800a050:	75fb      	strb	r3, [r7, #23]
          break;
 800a052:	e002      	b.n	800a05a <USBD_CDC_Setup+0x19e>
          break;
 800a054:	bf00      	nop
 800a056:	e008      	b.n	800a06a <USBD_CDC_Setup+0x1ae>
          break;
 800a058:	bf00      	nop
      }
      break;
 800a05a:	e006      	b.n	800a06a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 fcb3 	bl	800b9ca <USBD_CtlError>
      ret = USBD_FAIL;
 800a064:	2303      	movs	r3, #3
 800a066:	75fb      	strb	r3, [r7, #23]
      break;
 800a068:	bf00      	nop
  }

  return (uint8_t)ret;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a086:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	32b0      	adds	r2, #176	; 0xb0
 800a092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e065      	b.n	800a16a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	32b0      	adds	r2, #176	; 0xb0
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	f003 020f 	and.w	r2, r3, #15
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	3318      	adds	r3, #24
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d02f      	beq.n	800a128 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	f003 020f 	and.w	r2, r3, #15
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	440b      	add	r3, r1
 800a0da:	3318      	adds	r3, #24
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	f003 010f 	and.w	r1, r3, #15
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	440b      	add	r3, r1
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4403      	add	r3, r0
 800a0f0:	3344      	adds	r3, #68	; 0x44
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d112      	bne.n	800a128 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a102:	78fb      	ldrb	r3, [r7, #3]
 800a104:	f003 020f 	and.w	r2, r3, #15
 800a108:	6879      	ldr	r1, [r7, #4]
 800a10a:	4613      	mov	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	440b      	add	r3, r1
 800a114:	3318      	adds	r3, #24
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a11a:	78f9      	ldrb	r1, [r7, #3]
 800a11c:	2300      	movs	r3, #0
 800a11e:	2200      	movs	r2, #0
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 fadf 	bl	800c6e4 <USBD_LL_Transmit>
 800a126:	e01f      	b.n	800a168 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	33b0      	adds	r3, #176	; 0xb0
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d010      	beq.n	800a168 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	33b0      	adds	r3, #176	; 0xb0
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	32b0      	adds	r2, #176	; 0xb0
 800a188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	32b0      	adds	r2, #176	; 0xb0
 800a198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e01a      	b.n	800a1da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f002 fb0b 	bl	800c7c4 <USBD_LL_GetRxDataSize>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	33b0      	adds	r3, #176	; 0xb0
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	32b0      	adds	r2, #176	; 0xb0
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a200:	2303      	movs	r3, #3
 800a202:	e025      	b.n	800a250 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	33b0      	adds	r3, #176	; 0xb0
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01a      	beq.n	800a24e <USBD_CDC_EP0_RxReady+0x6c>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a21e:	2bff      	cmp	r3, #255	; 0xff
 800a220:	d015      	beq.n	800a24e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	33b0      	adds	r3, #176	; 0xb0
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a23a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a242:	b292      	uxth	r2, r2
 800a244:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	22ff      	movs	r2, #255	; 0xff
 800a24a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a260:	2182      	movs	r1, #130	; 0x82
 800a262:	4818      	ldr	r0, [pc, #96]	; (800a2c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a264:	f000 fd4f 	bl	800ad06 <USBD_GetEpDesc>
 800a268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a26a:	2101      	movs	r1, #1
 800a26c:	4815      	ldr	r0, [pc, #84]	; (800a2c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a26e:	f000 fd4a 	bl	800ad06 <USBD_GetEpDesc>
 800a272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a274:	2181      	movs	r1, #129	; 0x81
 800a276:	4813      	ldr	r0, [pc, #76]	; (800a2c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a278:	f000 fd45 	bl	800ad06 <USBD_GetEpDesc>
 800a27c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2210      	movs	r2, #16
 800a288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2200      	movs	r2, #0
 800a294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a298:	711a      	strb	r2, [r3, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2ac:	711a      	strb	r2, [r3, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2243      	movs	r2, #67	; 0x43
 800a2b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2b8:	4b02      	ldr	r3, [pc, #8]	; (800a2c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000054 	.word	0x20000054

0800a2c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2d0:	2182      	movs	r1, #130	; 0x82
 800a2d2:	4818      	ldr	r0, [pc, #96]	; (800a334 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2d4:	f000 fd17 	bl	800ad06 <USBD_GetEpDesc>
 800a2d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2da:	2101      	movs	r1, #1
 800a2dc:	4815      	ldr	r0, [pc, #84]	; (800a334 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2de:	f000 fd12 	bl	800ad06 <USBD_GetEpDesc>
 800a2e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2e4:	2181      	movs	r1, #129	; 0x81
 800a2e6:	4813      	ldr	r0, [pc, #76]	; (800a334 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2e8:	f000 fd0d 	bl	800ad06 <USBD_GetEpDesc>
 800a2ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2200      	movs	r2, #0
 800a304:	711a      	strb	r2, [r3, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f042 0202 	orr.w	r2, r2, #2
 800a30c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	711a      	strb	r2, [r3, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f042 0202 	orr.w	r2, r2, #2
 800a320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2243      	movs	r2, #67	; 0x43
 800a326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a328:	4b02      	ldr	r3, [pc, #8]	; (800a334 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20000054 	.word	0x20000054

0800a338 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a340:	2182      	movs	r1, #130	; 0x82
 800a342:	4818      	ldr	r0, [pc, #96]	; (800a3a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a344:	f000 fcdf 	bl	800ad06 <USBD_GetEpDesc>
 800a348:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a34a:	2101      	movs	r1, #1
 800a34c:	4815      	ldr	r0, [pc, #84]	; (800a3a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a34e:	f000 fcda 	bl	800ad06 <USBD_GetEpDesc>
 800a352:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a354:	2181      	movs	r1, #129	; 0x81
 800a356:	4813      	ldr	r0, [pc, #76]	; (800a3a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a358:	f000 fcd5 	bl	800ad06 <USBD_GetEpDesc>
 800a35c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2210      	movs	r2, #16
 800a368:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d006      	beq.n	800a37e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2200      	movs	r2, #0
 800a374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a378:	711a      	strb	r2, [r3, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a38c:	711a      	strb	r2, [r3, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2243      	movs	r2, #67	; 0x43
 800a396:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000054 	.word	0x20000054

0800a3a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	220a      	movs	r2, #10
 800a3b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3b6:	4b03      	ldr	r3, [pc, #12]	; (800a3c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	20000010 	.word	0x20000010

0800a3c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e009      	b.n	800a3f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	33b0      	adds	r3, #176	; 0xb0
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	32b0      	adds	r2, #176	; 0xb0
 800a412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a416:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a41e:	2303      	movs	r3, #3
 800a420:	e008      	b.n	800a434 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	32b0      	adds	r2, #176	; 0xb0
 800a454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a458:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a460:	2303      	movs	r3, #3
 800a462:	e004      	b.n	800a46e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
	...

0800a47c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	32b0      	adds	r2, #176	; 0xb0
 800a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a492:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a494:	2301      	movs	r3, #1
 800a496:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	e025      	b.n	800a4ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11f      	bne.n	800a4ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a4b4:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <USBD_CDC_TransmitPacket+0x7c>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	f003 020f 	and.w	r2, r3, #15
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4403      	add	r3, r0
 800a4ce:	3318      	adds	r3, #24
 800a4d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <USBD_CDC_TransmitPacket+0x7c>)
 800a4d4:	7819      	ldrb	r1, [r3, #0]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f002 f8fe 	bl	800c6e4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000097 	.word	0x20000097

0800a4fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	32b0      	adds	r2, #176	; 0xb0
 800a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a512:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	32b0      	adds	r2, #176	; 0xb0
 800a51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a526:	2303      	movs	r3, #3
 800a528:	e018      	b.n	800a55c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7c1b      	ldrb	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10a      	bne.n	800a548 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a532:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <USBD_CDC_ReceivePacket+0x68>)
 800a534:	7819      	ldrb	r1, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a53c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f002 f907 	bl	800c754 <USBD_LL_PrepareReceive>
 800a546:	e008      	b.n	800a55a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a548:	4b06      	ldr	r3, [pc, #24]	; (800a564 <USBD_CDC_ReceivePacket+0x68>)
 800a54a:	7819      	ldrb	r1, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a552:	2340      	movs	r3, #64	; 0x40
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f002 f8fd 	bl	800c754 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20000098 	.word	0x20000098

0800a568 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	4613      	mov	r3, r2
 800a574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e01f      	b.n	800a5c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	79fa      	ldrb	r2, [r7, #7]
 800a5b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f001 fed5 	bl	800c364 <USBD_LL_Init>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e025      	b.n	800a62c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32ae      	adds	r2, #174	; 0xae
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00f      	beq.n	800a61c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32ae      	adds	r2, #174	; 0xae
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	f107 020e 	add.w	r2, r7, #14
 800a610:	4610      	mov	r0, r2
 800a612:	4798      	blx	r3
 800a614:	4602      	mov	r2, r0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f001 fedd 	bl	800c3fc <USBD_LL_Start>
 800a642:	4603      	mov	r3, r0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a654:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d009      	beq.n	800a690 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	78fa      	ldrb	r2, [r7, #3]
 800a686:	4611      	mov	r1, r2
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 f938 	bl	800b956 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	2b02      	cmp	r3, #2
 800a708:	d01a      	beq.n	800a740 <USBD_LL_SetupStage+0x72>
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d822      	bhi.n	800a754 <USBD_LL_SetupStage+0x86>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <USBD_LL_SetupStage+0x4a>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d00a      	beq.n	800a72c <USBD_LL_SetupStage+0x5e>
 800a716:	e01d      	b.n	800a754 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fb65 	bl	800adf0 <USBD_StdDevReq>
 800a726:	4603      	mov	r3, r0
 800a728:	73fb      	strb	r3, [r7, #15]
      break;
 800a72a:	e020      	b.n	800a76e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fbcd 	bl	800aed4 <USBD_StdItfReq>
 800a73a:	4603      	mov	r3, r0
 800a73c:	73fb      	strb	r3, [r7, #15]
      break;
 800a73e:	e016      	b.n	800a76e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fc2f 	bl	800afac <USBD_StdEPReq>
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]
      break;
 800a752:	e00c      	b.n	800a76e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a75a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 fef0 	bl	800c548 <USBD_LL_StallEP>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
      break;
 800a76c:	bf00      	nop
  }

  return ret;
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	460b      	mov	r3, r1
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a78a:	7afb      	ldrb	r3, [r7, #11]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d16e      	bne.n	800a86e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	f040 8098 	bne.w	800a8d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d913      	bls.n	800a7d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	1ad2      	subs	r2, r2, r3
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	bf28      	it	cs
 800a7ca:	4613      	movcs	r3, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f001 f9b4 	bl	800bb3e <USBD_CtlContinueRx>
 800a7d6:	e07d      	b.n	800a8d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7de:	f003 031f 	and.w	r3, r3, #31
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d014      	beq.n	800a810 <USBD_LL_DataOutStage+0x98>
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d81d      	bhi.n	800a826 <USBD_LL_DataOutStage+0xae>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <USBD_LL_DataOutStage+0x7c>
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d003      	beq.n	800a7fa <USBD_LL_DataOutStage+0x82>
 800a7f2:	e018      	b.n	800a826 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	75bb      	strb	r3, [r7, #22]
            break;
 800a7f8:	e018      	b.n	800a82c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a800:	b2db      	uxtb	r3, r3
 800a802:	4619      	mov	r1, r3
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fa64 	bl	800acd2 <USBD_CoreFindIF>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75bb      	strb	r3, [r7, #22]
            break;
 800a80e:	e00d      	b.n	800a82c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a816:	b2db      	uxtb	r3, r3
 800a818:	4619      	mov	r1, r3
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 fa66 	bl	800acec <USBD_CoreFindEP>
 800a820:	4603      	mov	r3, r0
 800a822:	75bb      	strb	r3, [r7, #22]
            break;
 800a824:	e002      	b.n	800a82c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	75bb      	strb	r3, [r7, #22]
            break;
 800a82a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a82c:	7dbb      	ldrb	r3, [r7, #22]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d119      	bne.n	800a866 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d113      	bne.n	800a866 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a83e:	7dba      	ldrb	r2, [r7, #22]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	32ae      	adds	r2, #174	; 0xae
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a84e:	7dba      	ldrb	r2, [r7, #22]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a856:	7dba      	ldrb	r2, [r7, #22]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	32ae      	adds	r2, #174	; 0xae
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f001 f97a 	bl	800bb60 <USBD_CtlSendStatus>
 800a86c:	e032      	b.n	800a8d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a86e:	7afb      	ldrb	r3, [r7, #11]
 800a870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a874:	b2db      	uxtb	r3, r3
 800a876:	4619      	mov	r1, r3
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 fa37 	bl	800acec <USBD_CoreFindEP>
 800a87e:	4603      	mov	r3, r0
 800a880:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a882:	7dbb      	ldrb	r3, [r7, #22]
 800a884:	2bff      	cmp	r3, #255	; 0xff
 800a886:	d025      	beq.n	800a8d4 <USBD_LL_DataOutStage+0x15c>
 800a888:	7dbb      	ldrb	r3, [r7, #22]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d122      	bne.n	800a8d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b03      	cmp	r3, #3
 800a898:	d117      	bne.n	800a8ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a89a:	7dba      	ldrb	r2, [r7, #22]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	32ae      	adds	r2, #174	; 0xae
 800a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00f      	beq.n	800a8ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a8aa:	7dba      	ldrb	r2, [r7, #22]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a8b2:	7dba      	ldrb	r2, [r7, #22]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	32ae      	adds	r2, #174	; 0xae
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	7afa      	ldrb	r2, [r7, #11]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	e000      	b.n	800a8d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b086      	sub	sp, #24
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	60f8      	str	r0, [r7, #12]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	607a      	str	r2, [r7, #4]
 800a8ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a8ec:	7afb      	ldrb	r3, [r7, #11]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d16f      	bne.n	800a9d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3314      	adds	r3, #20
 800a8f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d15a      	bne.n	800a9b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d914      	bls.n	800a938 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	689a      	ldr	r2, [r3, #8]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	461a      	mov	r2, r3
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f001 f8dc 	bl	800bae2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a92a:	2300      	movs	r3, #0
 800a92c:	2200      	movs	r2, #0
 800a92e:	2100      	movs	r1, #0
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f001 ff0f 	bl	800c754 <USBD_LL_PrepareReceive>
 800a936:	e03f      	b.n	800a9b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	429a      	cmp	r2, r3
 800a942:	d11c      	bne.n	800a97e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d316      	bcc.n	800a97e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d20f      	bcs.n	800a97e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a95e:	2200      	movs	r2, #0
 800a960:	2100      	movs	r1, #0
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f001 f8bd 	bl	800bae2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a970:	2300      	movs	r3, #0
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f001 feec 	bl	800c754 <USBD_LL_PrepareReceive>
 800a97c:	e01c      	b.n	800a9b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b03      	cmp	r3, #3
 800a988:	d10f      	bne.n	800a9aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9aa:	2180      	movs	r1, #128	; 0x80
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f001 fdcb 	bl	800c548 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f001 f8e7 	bl	800bb86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d03a      	beq.n	800aa38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fe42 	bl	800a64c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a9d0:	e032      	b.n	800aa38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a9d2:	7afb      	ldrb	r3, [r7, #11]
 800a9d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	4619      	mov	r1, r3
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f985 	bl	800acec <USBD_CoreFindEP>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	2bff      	cmp	r3, #255	; 0xff
 800a9ea:	d025      	beq.n	800aa38 <USBD_LL_DataInStage+0x15a>
 800a9ec:	7dfb      	ldrb	r3, [r7, #23]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d122      	bne.n	800aa38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d11c      	bne.n	800aa38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9fe:	7dfa      	ldrb	r2, [r7, #23]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	32ae      	adds	r2, #174	; 0xae
 800aa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d014      	beq.n	800aa38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa0e:	7dfa      	ldrb	r2, [r7, #23]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa16:	7dfa      	ldrb	r2, [r7, #23]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	32ae      	adds	r2, #174	; 0xae
 800aa1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	7afa      	ldrb	r2, [r7, #11]
 800aa24:	4611      	mov	r1, r2
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	4798      	blx	r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa2e:	7dbb      	ldrb	r3, [r7, #22]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa34:	7dbb      	ldrb	r3, [r7, #22]
 800aa36:	e000      	b.n	800aa3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d014      	beq.n	800aaa8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6852      	ldr	r2, [r2, #4]
 800aa96:	b2d2      	uxtb	r2, r2
 800aa98:	4611      	mov	r1, r2
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaa8:	2340      	movs	r3, #64	; 0x40
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 fcd6 	bl	800c460 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2240      	movs	r2, #64	; 0x40
 800aac0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	2200      	movs	r2, #0
 800aac8:	2180      	movs	r1, #128	; 0x80
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 fcc8 	bl	800c460 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2240      	movs	r2, #64	; 0x40
 800aada:	621a      	str	r2, [r3, #32]

  return ret;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	d006      	beq.n	800ab28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d106      	bne.n	800ab60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d110      	bne.n	800aba4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d005      	beq.n	800aba4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b082      	sub	sp, #8
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	460b      	mov	r3, r1
 800abb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	32ae      	adds	r2, #174	; 0xae
 800abc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800abcc:	2303      	movs	r3, #3
 800abce:	e01c      	b.n	800ac0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d115      	bne.n	800ac08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	32ae      	adds	r2, #174	; 0xae
 800abe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	32ae      	adds	r2, #174	; 0xae
 800abfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	78fa      	ldrb	r2, [r7, #3]
 800ac02:	4611      	mov	r1, r2
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	32ae      	adds	r2, #174	; 0xae
 800ac28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e01c      	b.n	800ac6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d115      	bne.n	800ac6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	32ae      	adds	r2, #174	; 0xae
 800ac4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00b      	beq.n	800ac6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	32ae      	adds	r2, #174	; 0xae
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	4611      	mov	r1, r2
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00e      	beq.n	800acc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	6852      	ldr	r2, [r2, #4]
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	4611      	mov	r1, r2
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	4798      	blx	r3
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800acc4:	2303      	movs	r3, #3
 800acc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	885b      	ldrh	r3, [r3, #2]
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d920      	bls.n	800ad70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad36:	e013      	b.n	800ad60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad38:	f107 030a 	add.w	r3, r7, #10
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6978      	ldr	r0, [r7, #20]
 800ad40:	f000 f81b 	bl	800ad7a <USBD_GetNextDesc>
 800ad44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	2b05      	cmp	r3, #5
 800ad4c:	d108      	bne.n	800ad60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	789b      	ldrb	r3, [r3, #2]
 800ad56:	78fa      	ldrb	r2, [r7, #3]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d008      	beq.n	800ad6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	885b      	ldrh	r3, [r3, #2]
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	897b      	ldrh	r3, [r7, #10]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d8e5      	bhi.n	800ad38 <USBD_GetEpDesc+0x32>
 800ad6c:	e000      	b.n	800ad70 <USBD_GetEpDesc+0x6a>
          break;
 800ad6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad70:	693b      	ldr	r3, [r7, #16]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	881a      	ldrh	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	4413      	add	r3, r2
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4413      	add	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ada6:	68fb      	ldr	r3, [r7, #12]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	3301      	adds	r3, #1
 800adca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800add2:	8a3b      	ldrh	r3, [r7, #16]
 800add4:	021b      	lsls	r3, r3, #8
 800add6:	b21a      	sxth	r2, r3
 800add8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800addc:	4313      	orrs	r3, r2
 800adde:	b21b      	sxth	r3, r3
 800ade0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ade2:	89fb      	ldrh	r3, [r7, #14]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	371c      	adds	r7, #28
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae06:	2b40      	cmp	r3, #64	; 0x40
 800ae08:	d005      	beq.n	800ae16 <USBD_StdDevReq+0x26>
 800ae0a:	2b40      	cmp	r3, #64	; 0x40
 800ae0c:	d857      	bhi.n	800aebe <USBD_StdDevReq+0xce>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00f      	beq.n	800ae32 <USBD_StdDevReq+0x42>
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d153      	bne.n	800aebe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	32ae      	adds	r2, #174	; 0xae
 800ae20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	4798      	blx	r3
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae30:	e04a      	b.n	800aec8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	d83b      	bhi.n	800aeb2 <USBD_StdDevReq+0xc2>
 800ae3a:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <USBD_StdDevReq+0x50>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae95 	.word	0x0800ae95
 800ae44:	0800aea9 	.word	0x0800aea9
 800ae48:	0800aeb3 	.word	0x0800aeb3
 800ae4c:	0800ae9f 	.word	0x0800ae9f
 800ae50:	0800aeb3 	.word	0x0800aeb3
 800ae54:	0800ae73 	.word	0x0800ae73
 800ae58:	0800ae69 	.word	0x0800ae69
 800ae5c:	0800aeb3 	.word	0x0800aeb3
 800ae60:	0800ae8b 	.word	0x0800ae8b
 800ae64:	0800ae7d 	.word	0x0800ae7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa3c 	bl	800b2e8 <USBD_GetDescriptor>
          break;
 800ae70:	e024      	b.n	800aebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fbcb 	bl	800b610 <USBD_SetAddress>
          break;
 800ae7a:	e01f      	b.n	800aebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fc0a 	bl	800b698 <USBD_SetConfig>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
          break;
 800ae88:	e018      	b.n	800aebc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fcad 	bl	800b7ec <USBD_GetConfig>
          break;
 800ae92:	e013      	b.n	800aebc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fcde 	bl	800b858 <USBD_GetStatus>
          break;
 800ae9c:	e00e      	b.n	800aebc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fd0d 	bl	800b8c0 <USBD_SetFeature>
          break;
 800aea6:	e009      	b.n	800aebc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fd31 	bl	800b912 <USBD_ClrFeature>
          break;
 800aeb0:	e004      	b.n	800aebc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fd88 	bl	800b9ca <USBD_CtlError>
          break;
 800aeba:	bf00      	nop
      }
      break;
 800aebc:	e004      	b.n	800aec8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fd82 	bl	800b9ca <USBD_CtlError>
      break;
 800aec6:	bf00      	nop
  }

  return ret;
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop

0800aed4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeea:	2b40      	cmp	r3, #64	; 0x40
 800aeec:	d005      	beq.n	800aefa <USBD_StdItfReq+0x26>
 800aeee:	2b40      	cmp	r3, #64	; 0x40
 800aef0:	d852      	bhi.n	800af98 <USBD_StdItfReq+0xc4>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <USBD_StdItfReq+0x26>
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d14e      	bne.n	800af98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af00:	b2db      	uxtb	r3, r3
 800af02:	3b01      	subs	r3, #1
 800af04:	2b02      	cmp	r3, #2
 800af06:	d840      	bhi.n	800af8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	889b      	ldrh	r3, [r3, #4]
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d836      	bhi.n	800af80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	889b      	ldrh	r3, [r3, #4]
 800af16:	b2db      	uxtb	r3, r3
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fed9 	bl	800acd2 <USBD_CoreFindIF>
 800af20:	4603      	mov	r3, r0
 800af22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2bff      	cmp	r3, #255	; 0xff
 800af28:	d01d      	beq.n	800af66 <USBD_StdItfReq+0x92>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d11a      	bne.n	800af66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af30:	7bba      	ldrb	r2, [r7, #14]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	32ae      	adds	r2, #174	; 0xae
 800af36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00f      	beq.n	800af60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af40:	7bba      	ldrb	r2, [r7, #14]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af48:	7bba      	ldrb	r2, [r7, #14]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32ae      	adds	r2, #174	; 0xae
 800af4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
 800af5a:	4603      	mov	r3, r0
 800af5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af5e:	e004      	b.n	800af6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af60:	2303      	movs	r3, #3
 800af62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af64:	e001      	b.n	800af6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af66:	2303      	movs	r3, #3
 800af68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	88db      	ldrh	r3, [r3, #6]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d110      	bne.n	800af94 <USBD_StdItfReq+0xc0>
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10d      	bne.n	800af94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fdf1 	bl	800bb60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af7e:	e009      	b.n	800af94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fd21 	bl	800b9ca <USBD_CtlError>
          break;
 800af88:	e004      	b.n	800af94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fd1c 	bl	800b9ca <USBD_CtlError>
          break;
 800af92:	e000      	b.n	800af96 <USBD_StdItfReq+0xc2>
          break;
 800af94:	bf00      	nop
      }
      break;
 800af96:	e004      	b.n	800afa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fd15 	bl	800b9ca <USBD_CtlError>
      break;
 800afa0:	bf00      	nop
  }

  return ret;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	889b      	ldrh	r3, [r3, #4]
 800afbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afc8:	2b40      	cmp	r3, #64	; 0x40
 800afca:	d007      	beq.n	800afdc <USBD_StdEPReq+0x30>
 800afcc:	2b40      	cmp	r3, #64	; 0x40
 800afce:	f200 817f 	bhi.w	800b2d0 <USBD_StdEPReq+0x324>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d02a      	beq.n	800b02c <USBD_StdEPReq+0x80>
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	f040 817a 	bne.w	800b2d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff fe83 	bl	800acec <USBD_CoreFindEP>
 800afe6:	4603      	mov	r3, r0
 800afe8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afea:	7b7b      	ldrb	r3, [r7, #13]
 800afec:	2bff      	cmp	r3, #255	; 0xff
 800afee:	f000 8174 	beq.w	800b2da <USBD_StdEPReq+0x32e>
 800aff2:	7b7b      	ldrb	r3, [r7, #13]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f040 8170 	bne.w	800b2da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800affa:	7b7a      	ldrb	r2, [r7, #13]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b002:	7b7a      	ldrb	r2, [r7, #13]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	32ae      	adds	r2, #174	; 0xae
 800b008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 8163 	beq.w	800b2da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b014:	7b7a      	ldrb	r2, [r7, #13]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	32ae      	adds	r2, #174	; 0xae
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
 800b026:	4603      	mov	r3, r0
 800b028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b02a:	e156      	b.n	800b2da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	785b      	ldrb	r3, [r3, #1]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d008      	beq.n	800b046 <USBD_StdEPReq+0x9a>
 800b034:	2b03      	cmp	r3, #3
 800b036:	f300 8145 	bgt.w	800b2c4 <USBD_StdEPReq+0x318>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 809b 	beq.w	800b176 <USBD_StdEPReq+0x1ca>
 800b040:	2b01      	cmp	r3, #1
 800b042:	d03c      	beq.n	800b0be <USBD_StdEPReq+0x112>
 800b044:	e13e      	b.n	800b2c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d002      	beq.n	800b058 <USBD_StdEPReq+0xac>
 800b052:	2b03      	cmp	r3, #3
 800b054:	d016      	beq.n	800b084 <USBD_StdEPReq+0xd8>
 800b056:	e02c      	b.n	800b0b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00d      	beq.n	800b07a <USBD_StdEPReq+0xce>
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	2b80      	cmp	r3, #128	; 0x80
 800b062:	d00a      	beq.n	800b07a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 fa6d 	bl	800c548 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b06e:	2180      	movs	r1, #128	; 0x80
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f001 fa69 	bl	800c548 <USBD_LL_StallEP>
 800b076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b078:	e020      	b.n	800b0bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fca4 	bl	800b9ca <USBD_CtlError>
              break;
 800b082:	e01b      	b.n	800b0bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	885b      	ldrh	r3, [r3, #2]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10e      	bne.n	800b0aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00b      	beq.n	800b0aa <USBD_StdEPReq+0xfe>
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	2b80      	cmp	r3, #128	; 0x80
 800b096:	d008      	beq.n	800b0aa <USBD_StdEPReq+0xfe>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	88db      	ldrh	r3, [r3, #6]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0a0:	7bbb      	ldrb	r3, [r7, #14]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fa4f 	bl	800c548 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fd58 	bl	800bb60 <USBD_CtlSendStatus>

              break;
 800b0b0:	e004      	b.n	800b0bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fc88 	bl	800b9ca <USBD_CtlError>
              break;
 800b0ba:	bf00      	nop
          }
          break;
 800b0bc:	e107      	b.n	800b2ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d002      	beq.n	800b0d0 <USBD_StdEPReq+0x124>
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d016      	beq.n	800b0fc <USBD_StdEPReq+0x150>
 800b0ce:	e04b      	b.n	800b168 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00d      	beq.n	800b0f2 <USBD_StdEPReq+0x146>
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	2b80      	cmp	r3, #128	; 0x80
 800b0da:	d00a      	beq.n	800b0f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f001 fa31 	bl	800c548 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0e6:	2180      	movs	r1, #128	; 0x80
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 fa2d 	bl	800c548 <USBD_LL_StallEP>
 800b0ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0f0:	e040      	b.n	800b174 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fc68 	bl	800b9ca <USBD_CtlError>
              break;
 800b0fa:	e03b      	b.n	800b174 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	885b      	ldrh	r3, [r3, #2]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d136      	bne.n	800b172 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b104:	7bbb      	ldrb	r3, [r7, #14]
 800b106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d004      	beq.n	800b118 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fa4e 	bl	800c5b4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fd21 	bl	800bb60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7ff fde2 	bl	800acec <USBD_CoreFindEP>
 800b128:	4603      	mov	r3, r0
 800b12a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b12c:	7b7b      	ldrb	r3, [r7, #13]
 800b12e:	2bff      	cmp	r3, #255	; 0xff
 800b130:	d01f      	beq.n	800b172 <USBD_StdEPReq+0x1c6>
 800b132:	7b7b      	ldrb	r3, [r7, #13]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d11c      	bne.n	800b172 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b138:	7b7a      	ldrb	r2, [r7, #13]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b140:	7b7a      	ldrb	r2, [r7, #13]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	32ae      	adds	r2, #174	; 0xae
 800b146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d010      	beq.n	800b172 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b150:	7b7a      	ldrb	r2, [r7, #13]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	32ae      	adds	r2, #174	; 0xae
 800b156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	4798      	blx	r3
 800b162:	4603      	mov	r3, r0
 800b164:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b166:	e004      	b.n	800b172 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fc2d 	bl	800b9ca <USBD_CtlError>
              break;
 800b170:	e000      	b.n	800b174 <USBD_StdEPReq+0x1c8>
              break;
 800b172:	bf00      	nop
          }
          break;
 800b174:	e0ab      	b.n	800b2ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d002      	beq.n	800b188 <USBD_StdEPReq+0x1dc>
 800b182:	2b03      	cmp	r3, #3
 800b184:	d032      	beq.n	800b1ec <USBD_StdEPReq+0x240>
 800b186:	e097      	b.n	800b2b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d007      	beq.n	800b19e <USBD_StdEPReq+0x1f2>
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	2b80      	cmp	r3, #128	; 0x80
 800b192:	d004      	beq.n	800b19e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b194:	6839      	ldr	r1, [r7, #0]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 fc17 	bl	800b9ca <USBD_CtlError>
                break;
 800b19c:	e091      	b.n	800b2c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b19e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	da0b      	bge.n	800b1be <USBD_StdEPReq+0x212>
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	3310      	adds	r3, #16
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	e00b      	b.n	800b1d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fc61 	bl	800baac <USBD_CtlSendData>
              break;
 800b1ea:	e06a      	b.n	800b2c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	da11      	bge.n	800b218 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	f003 020f 	and.w	r2, r3, #15
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	440b      	add	r3, r1
 800b206:	3324      	adds	r3, #36	; 0x24
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d117      	bne.n	800b23e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fbda 	bl	800b9ca <USBD_CtlError>
                  break;
 800b216:	e054      	b.n	800b2c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	f003 020f 	and.w	r2, r3, #15
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4613      	mov	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	440b      	add	r3, r1
 800b22a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d104      	bne.n	800b23e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fbc7 	bl	800b9ca <USBD_CtlError>
                  break;
 800b23c:	e041      	b.n	800b2c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b23e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b242:	2b00      	cmp	r3, #0
 800b244:	da0b      	bge.n	800b25e <USBD_StdEPReq+0x2b2>
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b24c:	4613      	mov	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	3310      	adds	r3, #16
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	4413      	add	r3, r2
 800b25a:	3304      	adds	r3, #4
 800b25c:	e00b      	b.n	800b276 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b264:	4613      	mov	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4413      	add	r3, r2
 800b274:	3304      	adds	r3, #4
 800b276:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <USBD_StdEPReq+0x2d8>
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
 800b280:	2b80      	cmp	r3, #128	; 0x80
 800b282:	d103      	bne.n	800b28c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	e00e      	b.n	800b2aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b28c:	7bbb      	ldrb	r3, [r7, #14]
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f001 f9c5 	bl	800c620 <USBD_LL_IsStallEP>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	e002      	b.n	800b2aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fbfb 	bl	800baac <USBD_CtlSendData>
              break;
 800b2b6:	e004      	b.n	800b2c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fb85 	bl	800b9ca <USBD_CtlError>
              break;
 800b2c0:	bf00      	nop
          }
          break;
 800b2c2:	e004      	b.n	800b2ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fb7f 	bl	800b9ca <USBD_CtlError>
          break;
 800b2cc:	bf00      	nop
      }
      break;
 800b2ce:	e005      	b.n	800b2dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fb79 	bl	800b9ca <USBD_CtlError>
      break;
 800b2d8:	e000      	b.n	800b2dc <USBD_StdEPReq+0x330>
      break;
 800b2da:	bf00      	nop
  }

  return ret;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	0a1b      	lsrs	r3, r3, #8
 800b304:	b29b      	uxth	r3, r3
 800b306:	3b01      	subs	r3, #1
 800b308:	2b0e      	cmp	r3, #14
 800b30a:	f200 8152 	bhi.w	800b5b2 <USBD_GetDescriptor+0x2ca>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <USBD_GetDescriptor+0x2c>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b385 	.word	0x0800b385
 800b318:	0800b39d 	.word	0x0800b39d
 800b31c:	0800b3dd 	.word	0x0800b3dd
 800b320:	0800b5b3 	.word	0x0800b5b3
 800b324:	0800b5b3 	.word	0x0800b5b3
 800b328:	0800b553 	.word	0x0800b553
 800b32c:	0800b57f 	.word	0x0800b57f
 800b330:	0800b5b3 	.word	0x0800b5b3
 800b334:	0800b5b3 	.word	0x0800b5b3
 800b338:	0800b5b3 	.word	0x0800b5b3
 800b33c:	0800b5b3 	.word	0x0800b5b3
 800b340:	0800b5b3 	.word	0x0800b5b3
 800b344:	0800b5b3 	.word	0x0800b5b3
 800b348:	0800b5b3 	.word	0x0800b5b3
 800b34c:	0800b351 	.word	0x0800b351
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b372:	e126      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fb27 	bl	800b9ca <USBD_CtlError>
        err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
      break;
 800b382:	e11e      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
      break;
 800b39a:	e112      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7c1b      	ldrb	r3, [r3, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10d      	bne.n	800b3c0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	f107 0208 	add.w	r2, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3be:	e100      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	f107 0208 	add.w	r2, r7, #8
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	4798      	blx	r3
 800b3d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	701a      	strb	r2, [r3, #0]
      break;
 800b3da:	e0f2      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	885b      	ldrh	r3, [r3, #2]
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b05      	cmp	r3, #5
 800b3e4:	f200 80ac 	bhi.w	800b540 <USBD_GetDescriptor+0x258>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <USBD_GetDescriptor+0x108>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b409 	.word	0x0800b409
 800b3f4:	0800b43d 	.word	0x0800b43d
 800b3f8:	0800b471 	.word	0x0800b471
 800b3fc:	0800b4a5 	.word	0x0800b4a5
 800b400:	0800b4d9 	.word	0x0800b4d9
 800b404:	0800b50d 	.word	0x0800b50d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00b      	beq.n	800b42c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	7c12      	ldrb	r2, [r2, #16]
 800b420:	f107 0108 	add.w	r1, r7, #8
 800b424:	4610      	mov	r0, r2
 800b426:	4798      	blx	r3
 800b428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b42a:	e091      	b.n	800b550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 facb 	bl	800b9ca <USBD_CtlError>
            err++;
 800b434:	7afb      	ldrb	r3, [r7, #11]
 800b436:	3301      	adds	r3, #1
 800b438:	72fb      	strb	r3, [r7, #11]
          break;
 800b43a:	e089      	b.n	800b550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00b      	beq.n	800b460 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	7c12      	ldrb	r2, [r2, #16]
 800b454:	f107 0108 	add.w	r1, r7, #8
 800b458:	4610      	mov	r0, r2
 800b45a:	4798      	blx	r3
 800b45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b45e:	e077      	b.n	800b550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fab1 	bl	800b9ca <USBD_CtlError>
            err++;
 800b468:	7afb      	ldrb	r3, [r7, #11]
 800b46a:	3301      	adds	r3, #1
 800b46c:	72fb      	strb	r3, [r7, #11]
          break;
 800b46e:	e06f      	b.n	800b550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00b      	beq.n	800b494 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	7c12      	ldrb	r2, [r2, #16]
 800b488:	f107 0108 	add.w	r1, r7, #8
 800b48c:	4610      	mov	r0, r2
 800b48e:	4798      	blx	r3
 800b490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b492:	e05d      	b.n	800b550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fa97 	bl	800b9ca <USBD_CtlError>
            err++;
 800b49c:	7afb      	ldrb	r3, [r7, #11]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4a2:	e055      	b.n	800b550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	7c12      	ldrb	r2, [r2, #16]
 800b4bc:	f107 0108 	add.w	r1, r7, #8
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	4798      	blx	r3
 800b4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4c6:	e043      	b.n	800b550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fa7d 	bl	800b9ca <USBD_CtlError>
            err++;
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4d6:	e03b      	b.n	800b550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00b      	beq.n	800b4fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ea:	695b      	ldr	r3, [r3, #20]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	7c12      	ldrb	r2, [r2, #16]
 800b4f0:	f107 0108 	add.w	r1, r7, #8
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4798      	blx	r3
 800b4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4fa:	e029      	b.n	800b550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa63 	bl	800b9ca <USBD_CtlError>
            err++;
 800b504:	7afb      	ldrb	r3, [r7, #11]
 800b506:	3301      	adds	r3, #1
 800b508:	72fb      	strb	r3, [r7, #11]
          break;
 800b50a:	e021      	b.n	800b550 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00b      	beq.n	800b530 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	7c12      	ldrb	r2, [r2, #16]
 800b524:	f107 0108 	add.w	r1, r7, #8
 800b528:	4610      	mov	r0, r2
 800b52a:	4798      	blx	r3
 800b52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b52e:	e00f      	b.n	800b550 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa49 	bl	800b9ca <USBD_CtlError>
            err++;
 800b538:	7afb      	ldrb	r3, [r7, #11]
 800b53a:	3301      	adds	r3, #1
 800b53c:	72fb      	strb	r3, [r7, #11]
          break;
 800b53e:	e007      	b.n	800b550 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa41 	bl	800b9ca <USBD_CtlError>
          err++;
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	3301      	adds	r3, #1
 800b54c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b54e:	bf00      	nop
      }
      break;
 800b550:	e037      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	7c1b      	ldrb	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b562:	f107 0208 	add.w	r2, r7, #8
 800b566:	4610      	mov	r0, r2
 800b568:	4798      	blx	r3
 800b56a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b56c:	e029      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fa2a 	bl	800b9ca <USBD_CtlError>
        err++;
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	3301      	adds	r3, #1
 800b57a:	72fb      	strb	r3, [r7, #11]
      break;
 800b57c:	e021      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7c1b      	ldrb	r3, [r3, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10d      	bne.n	800b5a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	4610      	mov	r0, r2
 800b594:	4798      	blx	r3
 800b596:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3301      	adds	r3, #1
 800b59c:	2207      	movs	r2, #7
 800b59e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5a0:	e00f      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa10 	bl	800b9ca <USBD_CtlError>
        err++;
 800b5aa:	7afb      	ldrb	r3, [r7, #11]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b5b0:	e007      	b.n	800b5c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa08 	bl	800b9ca <USBD_CtlError>
      err++;
 800b5ba:	7afb      	ldrb	r3, [r7, #11]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c0:	bf00      	nop
  }

  if (err != 0U)
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d11e      	bne.n	800b606 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	88db      	ldrh	r3, [r3, #6]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d016      	beq.n	800b5fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b5d0:	893b      	ldrh	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00e      	beq.n	800b5f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	88da      	ldrh	r2, [r3, #6]
 800b5da:	893b      	ldrh	r3, [r7, #8]
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	bf28      	it	cs
 800b5e0:	4613      	movcs	r3, r2
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5e6:	893b      	ldrh	r3, [r7, #8]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	68f9      	ldr	r1, [r7, #12]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa5d 	bl	800baac <USBD_CtlSendData>
 800b5f2:	e009      	b.n	800b608 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f9e7 	bl	800b9ca <USBD_CtlError>
 800b5fc:	e004      	b.n	800b608 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 faae 	bl	800bb60 <USBD_CtlSendStatus>
 800b604:	e000      	b.n	800b608 <USBD_GetDescriptor+0x320>
    return;
 800b606:	bf00      	nop
  }
}
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop

0800b610 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	889b      	ldrh	r3, [r3, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d131      	bne.n	800b686 <USBD_SetAddress+0x76>
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	88db      	ldrh	r3, [r3, #6]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d12d      	bne.n	800b686 <USBD_SetAddress+0x76>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	885b      	ldrh	r3, [r3, #2]
 800b62e:	2b7f      	cmp	r3, #127	; 0x7f
 800b630:	d829      	bhi.n	800b686 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b63c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b03      	cmp	r3, #3
 800b648:	d104      	bne.n	800b654 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f9bc 	bl	800b9ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b652:	e01d      	b.n	800b690 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	7bfa      	ldrb	r2, [r7, #15]
 800b658:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 f809 	bl	800c678 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fa7a 	bl	800bb60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d004      	beq.n	800b67c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67a:	e009      	b.n	800b690 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b684:	e004      	b.n	800b690 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f99e 	bl	800b9ca <USBD_CtlError>
  }
}
 800b68e:	bf00      	nop
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	885b      	ldrh	r3, [r3, #2]
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	4b4e      	ldr	r3, [pc, #312]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6b0:	4b4d      	ldr	r3, [pc, #308]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d905      	bls.n	800b6c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f985 	bl	800b9ca <USBD_CtlError>
    return USBD_FAIL;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e08c      	b.n	800b7de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d002      	beq.n	800b6d6 <USBD_SetConfig+0x3e>
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d029      	beq.n	800b728 <USBD_SetConfig+0x90>
 800b6d4:	e075      	b.n	800b7c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6d6:	4b44      	ldr	r3, [pc, #272]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d020      	beq.n	800b720 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6de:	4b42      	ldr	r3, [pc, #264]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6e8:	4b3f      	ldr	r3, [pc, #252]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7fe ffb7 	bl	800a662 <USBD_SetClassConfig>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d008      	beq.n	800b710 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f962 	bl	800b9ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b70e:	e065      	b.n	800b7dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fa25 	bl	800bb60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2203      	movs	r2, #3
 800b71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b71e:	e05d      	b.n	800b7dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fa1d 	bl	800bb60 <USBD_CtlSendStatus>
      break;
 800b726:	e059      	b.n	800b7dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b728:	4b2f      	ldr	r3, [pc, #188]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d112      	bne.n	800b756 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b738:	4b2b      	ldr	r3, [pc, #172]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b742:	4b29      	ldr	r3, [pc, #164]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7fe ffa6 	bl	800a69a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa06 	bl	800bb60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b754:	e042      	b.n	800b7dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b756:	4b24      	ldr	r3, [pc, #144]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	461a      	mov	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	d02a      	beq.n	800b7ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7fe ff94 	bl	800a69a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b772:	4b1d      	ldr	r3, [pc, #116]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b77c:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe ff6d 	bl	800a662 <USBD_SetClassConfig>
 800b788:	4603      	mov	r3, r0
 800b78a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00f      	beq.n	800b7b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f918 	bl	800b9ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7fe ff79 	bl	800a69a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7b0:	e014      	b.n	800b7dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f9d4 	bl	800bb60 <USBD_CtlSendStatus>
      break;
 800b7b8:	e010      	b.n	800b7dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9d0 	bl	800bb60 <USBD_CtlSendStatus>
      break;
 800b7c0:	e00c      	b.n	800b7dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f900 	bl	800b9ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7fe ff62 	bl	800a69a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7da:	bf00      	nop
  }

  return ret;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000390 	.word	0x20000390

0800b7ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	88db      	ldrh	r3, [r3, #6]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d004      	beq.n	800b808 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f8e2 	bl	800b9ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b806:	e023      	b.n	800b850 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b02      	cmp	r3, #2
 800b812:	dc02      	bgt.n	800b81a <USBD_GetConfig+0x2e>
 800b814:	2b00      	cmp	r3, #0
 800b816:	dc03      	bgt.n	800b820 <USBD_GetConfig+0x34>
 800b818:	e015      	b.n	800b846 <USBD_GetConfig+0x5a>
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d00b      	beq.n	800b836 <USBD_GetConfig+0x4a>
 800b81e:	e012      	b.n	800b846 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3308      	adds	r3, #8
 800b82a:	2201      	movs	r2, #1
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f93c 	bl	800baac <USBD_CtlSendData>
        break;
 800b834:	e00c      	b.n	800b850 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3304      	adds	r3, #4
 800b83a:	2201      	movs	r2, #1
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f934 	bl	800baac <USBD_CtlSendData>
        break;
 800b844:	e004      	b.n	800b850 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f8be 	bl	800b9ca <USBD_CtlError>
        break;
 800b84e:	bf00      	nop
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	3b01      	subs	r3, #1
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d81e      	bhi.n	800b8ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	88db      	ldrh	r3, [r3, #6]
 800b874:	2b02      	cmp	r3, #2
 800b876:	d004      	beq.n	800b882 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f8a5 	bl	800b9ca <USBD_CtlError>
        break;
 800b880:	e01a      	b.n	800b8b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d005      	beq.n	800b89e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f043 0202 	orr.w	r2, r3, #2
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	330c      	adds	r3, #12
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f900 	bl	800baac <USBD_CtlSendData>
      break;
 800b8ac:	e004      	b.n	800b8b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f88a 	bl	800b9ca <USBD_CtlError>
      break;
 800b8b6:	bf00      	nop
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	885b      	ldrh	r3, [r3, #2]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d107      	bne.n	800b8e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f940 	bl	800bb60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8e0:	e013      	b.n	800b90a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d10b      	bne.n	800b902 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	889b      	ldrh	r3, [r3, #4]
 800b8ee:	0a1b      	lsrs	r3, r3, #8
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f930 	bl	800bb60 <USBD_CtlSendStatus>
}
 800b900:	e003      	b.n	800b90a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f860 	bl	800b9ca <USBD_CtlError>
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b922:	b2db      	uxtb	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	2b02      	cmp	r3, #2
 800b928:	d80b      	bhi.n	800b942 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	885b      	ldrh	r3, [r3, #2]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d10c      	bne.n	800b94c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f910 	bl	800bb60 <USBD_CtlSendStatus>
      }
      break;
 800b940:	e004      	b.n	800b94c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f840 	bl	800b9ca <USBD_CtlError>
      break;
 800b94a:	e000      	b.n	800b94e <USBD_ClrFeature+0x3c>
      break;
 800b94c:	bf00      	nop
  }
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	781a      	ldrb	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3301      	adds	r3, #1
 800b970:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	781a      	ldrb	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3301      	adds	r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff fa17 	bl	800adb4 <SWAPBYTE>
 800b986:	4603      	mov	r3, r0
 800b988:	461a      	mov	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3301      	adds	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fa0a 	bl	800adb4 <SWAPBYTE>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff f9fd 	bl	800adb4 <SWAPBYTE>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	461a      	mov	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	80da      	strh	r2, [r3, #6]
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d4:	2180      	movs	r1, #128	; 0x80
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fdb6 	bl	800c548 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fdb2 	bl	800c548 <USBD_LL_StallEP>
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d036      	beq.n	800ba70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba06:	6938      	ldr	r0, [r7, #16]
 800ba08:	f000 f836 	bl	800ba78 <USBD_GetLen>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	3301      	adds	r3, #1
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	4413      	add	r3, r2
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	7812      	ldrb	r2, [r2, #0]
 800ba24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	4413      	add	r3, r2
 800ba32:	2203      	movs	r2, #3
 800ba34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba3c:	e013      	b.n	800ba66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	4413      	add	r3, r2
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	7812      	ldrb	r2, [r2, #0]
 800ba48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	613b      	str	r3, [r7, #16]
    idx++;
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	3301      	adds	r3, #1
 800ba54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	3301      	adds	r3, #1
 800ba64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1e7      	bne.n	800ba3e <USBD_GetString+0x52>
 800ba6e:	e000      	b.n	800ba72 <USBD_GetString+0x86>
    return;
 800ba70:	bf00      	nop
  }
}
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba88:	e005      	b.n	800ba96 <USBD_GetLen+0x1e>
  {
    len++;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1f5      	bne.n	800ba8a <USBD_GetLen+0x12>
  }

  return len;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2202      	movs	r2, #2
 800babc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 fe06 	bl	800c6e4 <USBD_LL_Transmit>

  return USBD_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	2100      	movs	r1, #0
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 fdf5 	bl	800c6e4 <USBD_LL_Transmit>

  return USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2203      	movs	r2, #3
 800bb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 fe10 	bl	800c754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	2100      	movs	r1, #0
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fdff 	bl	800c754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb70:	2300      	movs	r3, #0
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fdb4 	bl	800c6e4 <USBD_LL_Transmit>

  return USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2205      	movs	r2, #5
 800bb92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb96:	2300      	movs	r3, #0
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fdd9 	bl	800c754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbc2:	4b1f      	ldr	r3, [pc, #124]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbc4:	7a5b      	ldrb	r3, [r3, #9]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d131      	bne.n	800bc30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbce:	7a5b      	ldrb	r3, [r3, #9]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	4b1a      	ldr	r3, [pc, #104]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bbda:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbdc:	7a5b      	ldrb	r3, [r3, #9]
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	4a17      	ldr	r2, [pc, #92]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bbea:	4b15      	ldr	r3, [pc, #84]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbec:	7a5b      	ldrb	r3, [r3, #9]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbf4:	4413      	add	r3, r2
 800bbf6:	79fa      	ldrb	r2, [r7, #7]
 800bbf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bbfa:	4b11      	ldr	r3, [pc, #68]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bbfc:	7a5b      	ldrb	r3, [r3, #9]
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	b2d1      	uxtb	r1, r2
 800bc04:	4a0e      	ldr	r2, [pc, #56]	; (800bc40 <FATFS_LinkDriverEx+0x94>)
 800bc06:	7251      	strb	r1, [r2, #9]
 800bc08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc0a:	7dbb      	ldrb	r3, [r7, #22]
 800bc0c:	3330      	adds	r3, #48	; 0x30
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	3301      	adds	r3, #1
 800bc18:	223a      	movs	r2, #58	; 0x3a
 800bc1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	3302      	adds	r3, #2
 800bc20:	222f      	movs	r2, #47	; 0x2f
 800bc22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3303      	adds	r3, #3
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	20000394 	.word	0x20000394

0800bc44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc4e:	2200      	movs	r2, #0
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff ffaa 	bl	800bbac <FATFS_LinkDriverEx>
 800bc58:	4603      	mov	r3, r0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4912      	ldr	r1, [pc, #72]	; (800bcb4 <MX_USB_DEVICE_Init+0x50>)
 800bc6c:	4812      	ldr	r0, [pc, #72]	; (800bcb8 <MX_USB_DEVICE_Init+0x54>)
 800bc6e:	f7fe fc7b 	bl	800a568 <USBD_Init>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc78:	f7f5 f9b0 	bl	8000fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc7c:	490f      	ldr	r1, [pc, #60]	; (800bcbc <MX_USB_DEVICE_Init+0x58>)
 800bc7e:	480e      	ldr	r0, [pc, #56]	; (800bcb8 <MX_USB_DEVICE_Init+0x54>)
 800bc80:	f7fe fca2 	bl	800a5c8 <USBD_RegisterClass>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc8a:	f7f5 f9a7 	bl	8000fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc8e:	490c      	ldr	r1, [pc, #48]	; (800bcc0 <MX_USB_DEVICE_Init+0x5c>)
 800bc90:	4809      	ldr	r0, [pc, #36]	; (800bcb8 <MX_USB_DEVICE_Init+0x54>)
 800bc92:	f7fe fb99 	bl	800a3c8 <USBD_CDC_RegisterInterface>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc9c:	f7f5 f99e 	bl	8000fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bca0:	4805      	ldr	r0, [pc, #20]	; (800bcb8 <MX_USB_DEVICE_Init+0x54>)
 800bca2:	f7fe fcc7 	bl	800a634 <USBD_Start>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bcac:	f7f5 f996 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bcb0:	bf00      	nop
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	200000b0 	.word	0x200000b0
 800bcb8:	200003a0 	.word	0x200003a0
 800bcbc:	2000001c 	.word	0x2000001c
 800bcc0:	2000009c 	.word	0x2000009c

0800bcc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4905      	ldr	r1, [pc, #20]	; (800bce0 <CDC_Init_FS+0x1c>)
 800bccc:	4805      	ldr	r0, [pc, #20]	; (800bce4 <CDC_Init_FS+0x20>)
 800bcce:	f7fe fb95 	bl	800a3fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcd2:	4905      	ldr	r1, [pc, #20]	; (800bce8 <CDC_Init_FS+0x24>)
 800bcd4:	4803      	ldr	r0, [pc, #12]	; (800bce4 <CDC_Init_FS+0x20>)
 800bcd6:	f7fe fbb3 	bl	800a440 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20000e7c 	.word	0x20000e7c
 800bce4:	200003a0 	.word	0x200003a0
 800bce8:	2000067c 	.word	0x2000067c

0800bcec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcec:	b480      	push	{r7}
 800bcee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd0c:	79fb      	ldrb	r3, [r7, #7]
 800bd0e:	2b23      	cmp	r3, #35	; 0x23
 800bd10:	d84a      	bhi.n	800bda8 <CDC_Control_FS+0xac>
 800bd12:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <CDC_Control_FS+0x1c>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bda9 	.word	0x0800bda9
 800bd1c:	0800bda9 	.word	0x0800bda9
 800bd20:	0800bda9 	.word	0x0800bda9
 800bd24:	0800bda9 	.word	0x0800bda9
 800bd28:	0800bda9 	.word	0x0800bda9
 800bd2c:	0800bda9 	.word	0x0800bda9
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800bda9 	.word	0x0800bda9
 800bd38:	0800bda9 	.word	0x0800bda9
 800bd3c:	0800bda9 	.word	0x0800bda9
 800bd40:	0800bda9 	.word	0x0800bda9
 800bd44:	0800bda9 	.word	0x0800bda9
 800bd48:	0800bda9 	.word	0x0800bda9
 800bd4c:	0800bda9 	.word	0x0800bda9
 800bd50:	0800bda9 	.word	0x0800bda9
 800bd54:	0800bda9 	.word	0x0800bda9
 800bd58:	0800bda9 	.word	0x0800bda9
 800bd5c:	0800bda9 	.word	0x0800bda9
 800bd60:	0800bda9 	.word	0x0800bda9
 800bd64:	0800bda9 	.word	0x0800bda9
 800bd68:	0800bda9 	.word	0x0800bda9
 800bd6c:	0800bda9 	.word	0x0800bda9
 800bd70:	0800bda9 	.word	0x0800bda9
 800bd74:	0800bda9 	.word	0x0800bda9
 800bd78:	0800bda9 	.word	0x0800bda9
 800bd7c:	0800bda9 	.word	0x0800bda9
 800bd80:	0800bda9 	.word	0x0800bda9
 800bd84:	0800bda9 	.word	0x0800bda9
 800bd88:	0800bda9 	.word	0x0800bda9
 800bd8c:	0800bda9 	.word	0x0800bda9
 800bd90:	0800bda9 	.word	0x0800bda9
 800bd94:	0800bda9 	.word	0x0800bda9
 800bd98:	0800bda9 	.word	0x0800bda9
 800bd9c:	0800bda9 	.word	0x0800bda9
 800bda0:	0800bda9 	.word	0x0800bda9
 800bda4:	0800bda9 	.word	0x0800bda9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bda8:	bf00      	nop
  }

  return (USBD_OK);
 800bdaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	4805      	ldr	r0, [pc, #20]	; (800bddc <CDC_Receive_FS+0x24>)
 800bdc6:	f7fe fb3b 	bl	800a440 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdca:	4804      	ldr	r0, [pc, #16]	; (800bddc <CDC_Receive_FS+0x24>)
 800bdcc:	f7fe fb96 	bl	800a4fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bdd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	200003a0 	.word	0x200003a0

0800bde0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bdf0:	4b0d      	ldr	r3, [pc, #52]	; (800be28 <CDC_Transmit_FS+0x48>)
 800bdf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be02:	2301      	movs	r3, #1
 800be04:	e00b      	b.n	800be1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be06:	887b      	ldrh	r3, [r7, #2]
 800be08:	461a      	mov	r2, r3
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4806      	ldr	r0, [pc, #24]	; (800be28 <CDC_Transmit_FS+0x48>)
 800be0e:	f7fe faf5 	bl	800a3fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be12:	4805      	ldr	r0, [pc, #20]	; (800be28 <CDC_Transmit_FS+0x48>)
 800be14:	f7fe fb32 	bl	800a47c <USBD_CDC_TransmitPacket>
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	200003a0 	.word	0x200003a0

0800be2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be42:	4618      	mov	r0, r3
 800be44:	371c      	adds	r7, #28
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
	...

0800be50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2212      	movs	r2, #18
 800be60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be62:	4b03      	ldr	r3, [pc, #12]	; (800be70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be64:	4618      	mov	r0, r3
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	200000d0 	.word	0x200000d0

0800be74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	6039      	str	r1, [r7, #0]
 800be7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2204      	movs	r2, #4
 800be84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be86:	4b03      	ldr	r3, [pc, #12]	; (800be94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be88:	4618      	mov	r0, r3
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	200000f0 	.word	0x200000f0

0800be98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	6039      	str	r1, [r7, #0]
 800bea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4907      	ldr	r1, [pc, #28]	; (800becc <USBD_FS_ProductStrDescriptor+0x34>)
 800beae:	4808      	ldr	r0, [pc, #32]	; (800bed0 <USBD_FS_ProductStrDescriptor+0x38>)
 800beb0:	f7ff fd9c 	bl	800b9ec <USBD_GetString>
 800beb4:	e004      	b.n	800bec0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	4904      	ldr	r1, [pc, #16]	; (800becc <USBD_FS_ProductStrDescriptor+0x34>)
 800beba:	4805      	ldr	r0, [pc, #20]	; (800bed0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bebc:	f7ff fd96 	bl	800b9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec0:	4b02      	ldr	r3, [pc, #8]	; (800becc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	2000167c 	.word	0x2000167c
 800bed0:	0800d244 	.word	0x0800d244

0800bed4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	6039      	str	r1, [r7, #0]
 800bede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	4904      	ldr	r1, [pc, #16]	; (800bef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bee4:	4804      	ldr	r0, [pc, #16]	; (800bef8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bee6:	f7ff fd81 	bl	800b9ec <USBD_GetString>
  return USBD_StrDesc;
 800beea:	4b02      	ldr	r3, [pc, #8]	; (800bef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	2000167c 	.word	0x2000167c
 800bef8:	0800d25c 	.word	0x0800d25c

0800befc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	221a      	movs	r2, #26
 800bf0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf0e:	f000 f855 	bl	800bfbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf12:	4b02      	ldr	r3, [pc, #8]	; (800bf1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	200000f4 	.word	0x200000f4

0800bf20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	6039      	str	r1, [r7, #0]
 800bf2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d105      	bne.n	800bf3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	4907      	ldr	r1, [pc, #28]	; (800bf54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf36:	4808      	ldr	r0, [pc, #32]	; (800bf58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf38:	f7ff fd58 	bl	800b9ec <USBD_GetString>
 800bf3c:	e004      	b.n	800bf48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	4904      	ldr	r1, [pc, #16]	; (800bf54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf42:	4805      	ldr	r0, [pc, #20]	; (800bf58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf44:	f7ff fd52 	bl	800b9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf48:	4b02      	ldr	r3, [pc, #8]	; (800bf54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	2000167c 	.word	0x2000167c
 800bf58:	0800d270 	.word	0x0800d270

0800bf5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	6039      	str	r1, [r7, #0]
 800bf66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d105      	bne.n	800bf7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4907      	ldr	r1, [pc, #28]	; (800bf90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf72:	4808      	ldr	r0, [pc, #32]	; (800bf94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf74:	f7ff fd3a 	bl	800b9ec <USBD_GetString>
 800bf78:	e004      	b.n	800bf84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	4904      	ldr	r1, [pc, #16]	; (800bf90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf7e:	4805      	ldr	r0, [pc, #20]	; (800bf94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf80:	f7ff fd34 	bl	800b9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	2000167c 	.word	0x2000167c
 800bf94:	0800d27c 	.word	0x0800d27c

0800bf98 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	6039      	str	r1, [r7, #0]
 800bfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	220c      	movs	r2, #12
 800bfa8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bfaa:	4b03      	ldr	r3, [pc, #12]	; (800bfb8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	200000e4 	.word	0x200000e4

0800bfbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfc2:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <Get_SerialNum+0x44>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfc8:	4b0e      	ldr	r3, [pc, #56]	; (800c004 <Get_SerialNum+0x48>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfce:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <Get_SerialNum+0x4c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4413      	add	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d009      	beq.n	800bff6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfe2:	2208      	movs	r2, #8
 800bfe4:	4909      	ldr	r1, [pc, #36]	; (800c00c <Get_SerialNum+0x50>)
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 f814 	bl	800c014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bfec:	2204      	movs	r2, #4
 800bfee:	4908      	ldr	r1, [pc, #32]	; (800c010 <Get_SerialNum+0x54>)
 800bff0:	68b8      	ldr	r0, [r7, #8]
 800bff2:	f000 f80f 	bl	800c014 <IntToUnicode>
  }
}
 800bff6:	bf00      	nop
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	1fff7590 	.word	0x1fff7590
 800c004:	1fff7594 	.word	0x1fff7594
 800c008:	1fff7598 	.word	0x1fff7598
 800c00c:	200000f6 	.word	0x200000f6
 800c010:	20000106 	.word	0x20000106

0800c014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	4613      	mov	r3, r2
 800c020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c026:	2300      	movs	r3, #0
 800c028:	75fb      	strb	r3, [r7, #23]
 800c02a:	e027      	b.n	800c07c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	0f1b      	lsrs	r3, r3, #28
 800c030:	2b09      	cmp	r3, #9
 800c032:	d80b      	bhi.n	800c04c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	0f1b      	lsrs	r3, r3, #28
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	4619      	mov	r1, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	440b      	add	r3, r1
 800c044:	3230      	adds	r2, #48	; 0x30
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	e00a      	b.n	800c062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	0f1b      	lsrs	r3, r3, #28
 800c050:	b2da      	uxtb	r2, r3
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	4619      	mov	r1, r3
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	440b      	add	r3, r1
 800c05c:	3237      	adds	r2, #55	; 0x37
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	011b      	lsls	r3, r3, #4
 800c066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	3301      	adds	r3, #1
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	4413      	add	r3, r2
 800c072:	2200      	movs	r2, #0
 800c074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c076:	7dfb      	ldrb	r3, [r7, #23]
 800c078:	3301      	adds	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
 800c07c:	7dfa      	ldrb	r2, [r7, #23]
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	429a      	cmp	r2, r3
 800c082:	d3d3      	bcc.n	800c02c <IntToUnicode+0x18>
  }
}
 800c084:	bf00      	nop
 800c086:	bf00      	nop
 800c088:	371c      	adds	r7, #28
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
	...

0800c094 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c09c:	f107 0314 	add.w	r3, r7, #20
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	605a      	str	r2, [r3, #4]
 800c0a6:	609a      	str	r2, [r3, #8]
 800c0a8:	60da      	str	r2, [r3, #12]
 800c0aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0b4:	d14e      	bne.n	800c154 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0b6:	4b29      	ldr	r3, [pc, #164]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ba:	4a28      	ldr	r2, [pc, #160]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c0bc:	f043 0301 	orr.w	r3, r3, #1
 800c0c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0c2:	4b26      	ldr	r3, [pc, #152]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
 800c0cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c0d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0e0:	230a      	movs	r3, #10
 800c0e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0e4:	f107 0314 	add.w	r3, r7, #20
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c0ee:	f7f5 fd59 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0f2:	4b1a      	ldr	r3, [pc, #104]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f6:	4a19      	ldr	r2, [pc, #100]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c0f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c0fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0fe:	4b17      	ldr	r3, [pc, #92]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c10a:	4b14      	ldr	r3, [pc, #80]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d114      	bne.n	800c140 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c116:	4b11      	ldr	r3, [pc, #68]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11a:	4a10      	ldr	r2, [pc, #64]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c11c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c120:	6593      	str	r3, [r2, #88]	; 0x58
 800c122:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c12a:	60bb      	str	r3, [r7, #8]
 800c12c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800c12e:	f7f7 f91f 	bl	8003370 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c132:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c136:	4a09      	ldr	r2, [pc, #36]	; (800c15c <HAL_PCD_MspInit+0xc8>)
 800c138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c13c:	6593      	str	r3, [r2, #88]	; 0x58
 800c13e:	e001      	b.n	800c144 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c140:	f7f7 f916 	bl	8003370 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c144:	2200      	movs	r2, #0
 800c146:	2100      	movs	r1, #0
 800c148:	2043      	movs	r0, #67	; 0x43
 800c14a:	f7f5 fabc 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c14e:	2043      	movs	r0, #67	; 0x43
 800c150:	f7f5 fad5 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c154:	bf00      	nop
 800c156:	3728      	adds	r7, #40	; 0x28
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	40021000 	.word	0x40021000

0800c160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f7fe faa9 	bl	800a6ce <USBD_LL_SetupStage>
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	4613      	mov	r3, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	440b      	add	r3, r1
 800c1a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	f7fe fae3 	bl	800a778 <USBD_LL_DataOutStage>
}
 800c1b2:	bf00      	nop
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c1cc:	78fa      	ldrb	r2, [r7, #3]
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	440b      	add	r3, r1
 800c1da:	3348      	adds	r3, #72	; 0x48
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	78fb      	ldrb	r3, [r7, #3]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f7fe fb7c 	bl	800a8de <USBD_LL_DataInStage>
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fe fcb6 	bl	800ab6e <USBD_LL_SOF>
}
 800c202:	bf00      	nop
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b084      	sub	sp, #16
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c212:	2301      	movs	r3, #1
 800c214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d001      	beq.n	800c222 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c21e:	f7f4 fedd 	bl	8000fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c228:	7bfa      	ldrb	r2, [r7, #15]
 800c22a:	4611      	mov	r1, r2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe fc5a 	bl	800aae6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fe fc02 	bl	800aa42 <USBD_LL_Reset>
}
 800c23e:	bf00      	nop
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
	...

0800c248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	6812      	ldr	r2, [r2, #0]
 800c25e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c262:	f043 0301 	orr.w	r3, r3, #1
 800c266:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fc49 	bl	800ab06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6a1b      	ldr	r3, [r3, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c27c:	4b04      	ldr	r3, [pc, #16]	; (800c290 <HAL_PCD_SuspendCallback+0x48>)
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	4a03      	ldr	r2, [pc, #12]	; (800c290 <HAL_PCD_SuspendCallback+0x48>)
 800c282:	f043 0306 	orr.w	r3, r3, #6
 800c286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	e000ed00 	.word	0xe000ed00

0800c294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c2ae:	f023 0301 	bic.w	r3, r3, #1
 800c2b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d007      	beq.n	800c2cc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2bc:	4b08      	ldr	r3, [pc, #32]	; (800c2e0 <HAL_PCD_ResumeCallback+0x4c>)
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	4a07      	ldr	r2, [pc, #28]	; (800c2e0 <HAL_PCD_ResumeCallback+0x4c>)
 800c2c2:	f023 0306 	bic.w	r3, r3, #6
 800c2c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c2c8:	f000 faf6 	bl	800c8b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fc33 	bl	800ab3e <USBD_LL_Resume>
}
 800c2d8:	bf00      	nop
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	e000ed00 	.word	0xe000ed00

0800c2e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2f6:	78fa      	ldrb	r2, [r7, #3]
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fc89 	bl	800ac12 <USBD_LL_IsoOUTIncomplete>
}
 800c300:	bf00      	nop
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c31a:	78fa      	ldrb	r2, [r7, #3]
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe fc45 	bl	800abae <USBD_LL_IsoINIncomplete>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe fc9b 	bl	800ac76 <USBD_LL_DevConnected>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe fc98 	bl	800ac8c <USBD_LL_DevDisconnected>
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d13c      	bne.n	800c3ee <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c374:	4a20      	ldr	r2, [pc, #128]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a1e      	ldr	r2, [pc, #120]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c380:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c384:	4b1c      	ldr	r3, [pc, #112]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c38a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c38c:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c38e:	2206      	movs	r2, #6
 800c390:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c392:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c394:	2202      	movs	r2, #2
 800c396:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c398:	4b17      	ldr	r3, [pc, #92]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c39a:	2202      	movs	r2, #2
 800c39c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c39e:	4b16      	ldr	r3, [pc, #88]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c3a4:	4b14      	ldr	r3, [pc, #80]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c3aa:	4b13      	ldr	r3, [pc, #76]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c3b0:	4b11      	ldr	r3, [pc, #68]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c3b6:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c3bc:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c3c2:	480d      	ldr	r0, [pc, #52]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3c4:	f7f5 fdc8 	bl	8001f58 <HAL_PCD_Init>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c3ce:	f7f4 fe05 	bl	8000fdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c3d2:	2180      	movs	r1, #128	; 0x80
 800c3d4:	4808      	ldr	r0, [pc, #32]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3d6:	f7f6 ff32 	bl	800323e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3da:	2240      	movs	r2, #64	; 0x40
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4806      	ldr	r0, [pc, #24]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3e0:	f7f6 fee6 	bl	80031b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3e4:	2280      	movs	r2, #128	; 0x80
 800c3e6:	2101      	movs	r1, #1
 800c3e8:	4803      	ldr	r0, [pc, #12]	; (800c3f8 <USBD_LL_Init+0x94>)
 800c3ea:	f7f6 fee1 	bl	80031b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	2000187c 	.word	0x2000187c

0800c3fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c412:	4618      	mov	r0, r3
 800c414:	f7f5 fec4 	bl	80021a0 <HAL_PCD_Start>
 800c418:	4603      	mov	r3, r0
 800c41a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d816      	bhi.n	800c450 <USBD_LL_Start+0x54>
 800c422:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <USBD_LL_Start+0x2c>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c439 	.word	0x0800c439
 800c42c:	0800c43f 	.word	0x0800c43f
 800c430:	0800c445 	.word	0x0800c445
 800c434:	0800c44b 	.word	0x0800c44b
    case HAL_OK :
      usb_status = USBD_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	73fb      	strb	r3, [r7, #15]
    break;
 800c43c:	e00b      	b.n	800c456 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c43e:	2303      	movs	r3, #3
 800c440:	73fb      	strb	r3, [r7, #15]
    break;
 800c442:	e008      	b.n	800c456 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c444:	2301      	movs	r3, #1
 800c446:	73fb      	strb	r3, [r7, #15]
    break;
 800c448:	e005      	b.n	800c456 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c44a:	2303      	movs	r3, #3
 800c44c:	73fb      	strb	r3, [r7, #15]
    break;
 800c44e:	e002      	b.n	800c456 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c450:	2303      	movs	r3, #3
 800c452:	73fb      	strb	r3, [r7, #15]
    break;
 800c454:	bf00      	nop
  }
  return usb_status;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	4608      	mov	r0, r1
 800c46a:	4611      	mov	r1, r2
 800c46c:	461a      	mov	r2, r3
 800c46e:	4603      	mov	r3, r0
 800c470:	70fb      	strb	r3, [r7, #3]
 800c472:	460b      	mov	r3, r1
 800c474:	70bb      	strb	r3, [r7, #2]
 800c476:	4613      	mov	r3, r2
 800c478:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c488:	78bb      	ldrb	r3, [r7, #2]
 800c48a:	883a      	ldrh	r2, [r7, #0]
 800c48c:	78f9      	ldrb	r1, [r7, #3]
 800c48e:	f7f6 fb6e 	bl	8002b6e <HAL_PCD_EP_Open>
 800c492:	4603      	mov	r3, r0
 800c494:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	2b03      	cmp	r3, #3
 800c49a:	d817      	bhi.n	800c4cc <USBD_LL_OpenEP+0x6c>
 800c49c:	a201      	add	r2, pc, #4	; (adr r2, 800c4a4 <USBD_LL_OpenEP+0x44>)
 800c49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a2:	bf00      	nop
 800c4a4:	0800c4b5 	.word	0x0800c4b5
 800c4a8:	0800c4bb 	.word	0x0800c4bb
 800c4ac:	0800c4c1 	.word	0x0800c4c1
 800c4b0:	0800c4c7 	.word	0x0800c4c7
    case HAL_OK :
      usb_status = USBD_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b8:	e00b      	b.n	800c4d2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4be:	e008      	b.n	800c4d2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c4:	e005      	b.n	800c4d2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ca:	e002      	b.n	800c4d2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d0:	bf00      	nop
  }
  return usb_status;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4f6:	78fa      	ldrb	r2, [r7, #3]
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7f6 fb9f 	bl	8002c3e <HAL_PCD_EP_Close>
 800c500:	4603      	mov	r3, r0
 800c502:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	2b03      	cmp	r3, #3
 800c508:	d816      	bhi.n	800c538 <USBD_LL_CloseEP+0x5c>
 800c50a:	a201      	add	r2, pc, #4	; (adr r2, 800c510 <USBD_LL_CloseEP+0x34>)
 800c50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c510:	0800c521 	.word	0x0800c521
 800c514:	0800c527 	.word	0x0800c527
 800c518:	0800c52d 	.word	0x0800c52d
 800c51c:	0800c533 	.word	0x0800c533
    case HAL_OK :
      usb_status = USBD_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
    break;
 800c524:	e00b      	b.n	800c53e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c526:	2303      	movs	r3, #3
 800c528:	73fb      	strb	r3, [r7, #15]
    break;
 800c52a:	e008      	b.n	800c53e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c52c:	2301      	movs	r3, #1
 800c52e:	73fb      	strb	r3, [r7, #15]
    break;
 800c530:	e005      	b.n	800c53e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c532:	2303      	movs	r3, #3
 800c534:	73fb      	strb	r3, [r7, #15]
    break;
 800c536:	e002      	b.n	800c53e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c538:	2303      	movs	r3, #3
 800c53a:	73fb      	strb	r3, [r7, #15]
    break;
 800c53c:	bf00      	nop
  }
  return usb_status;
 800c53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c562:	78fa      	ldrb	r2, [r7, #3]
 800c564:	4611      	mov	r1, r2
 800c566:	4618      	mov	r0, r3
 800c568:	f7f6 fc2e 	bl	8002dc8 <HAL_PCD_EP_SetStall>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	2b03      	cmp	r3, #3
 800c574:	d816      	bhi.n	800c5a4 <USBD_LL_StallEP+0x5c>
 800c576:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <USBD_LL_StallEP+0x34>)
 800c578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57c:	0800c58d 	.word	0x0800c58d
 800c580:	0800c593 	.word	0x0800c593
 800c584:	0800c599 	.word	0x0800c599
 800c588:	0800c59f 	.word	0x0800c59f
    case HAL_OK :
      usb_status = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
    break;
 800c590:	e00b      	b.n	800c5aa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	73fb      	strb	r3, [r7, #15]
    break;
 800c596:	e008      	b.n	800c5aa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c598:	2301      	movs	r3, #1
 800c59a:	73fb      	strb	r3, [r7, #15]
    break;
 800c59c:	e005      	b.n	800c5aa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a2:	e002      	b.n	800c5aa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a8:	bf00      	nop
  }
  return usb_status;
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5ce:	78fa      	ldrb	r2, [r7, #3]
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7f6 fc5a 	bl	8002e8c <HAL_PCD_EP_ClrStall>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5dc:	7bbb      	ldrb	r3, [r7, #14]
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d816      	bhi.n	800c610 <USBD_LL_ClearStallEP+0x5c>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <USBD_LL_ClearStallEP+0x34>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c5f9 	.word	0x0800c5f9
 800c5ec:	0800c5ff 	.word	0x0800c5ff
 800c5f0:	0800c605 	.word	0x0800c605
 800c5f4:	0800c60b 	.word	0x0800c60b
    case HAL_OK :
      usb_status = USBD_OK;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5fc:	e00b      	b.n	800c616 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5fe:	2303      	movs	r3, #3
 800c600:	73fb      	strb	r3, [r7, #15]
    break;
 800c602:	e008      	b.n	800c616 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c604:	2301      	movs	r3, #1
 800c606:	73fb      	strb	r3, [r7, #15]
    break;
 800c608:	e005      	b.n	800c616 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c60a:	2303      	movs	r3, #3
 800c60c:	73fb      	strb	r3, [r7, #15]
    break;
 800c60e:	e002      	b.n	800c616 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c610:	2303      	movs	r3, #3
 800c612:	73fb      	strb	r3, [r7, #15]
    break;
 800c614:	bf00      	nop
  }
  return usb_status;
 800c616:	7bfb      	ldrb	r3, [r7, #15]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c632:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	da0b      	bge.n	800c654 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c63c:	78fb      	ldrb	r3, [r7, #3]
 800c63e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c642:	68f9      	ldr	r1, [r7, #12]
 800c644:	4613      	mov	r3, r2
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	440b      	add	r3, r1
 800c64e:	333e      	adds	r3, #62	; 0x3e
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	e00b      	b.n	800c66c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	4613      	mov	r3, r2
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	440b      	add	r3, r1
 800c666:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c66a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c692:	78fa      	ldrb	r2, [r7, #3]
 800c694:	4611      	mov	r1, r2
 800c696:	4618      	mov	r0, r3
 800c698:	f7f6 fa44 	bl	8002b24 <HAL_PCD_SetAddress>
 800c69c:	4603      	mov	r3, r0
 800c69e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c6a0:	7bbb      	ldrb	r3, [r7, #14]
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d816      	bhi.n	800c6d4 <USBD_LL_SetUSBAddress+0x5c>
 800c6a6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ac <USBD_LL_SetUSBAddress+0x34>)
 800c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ac:	0800c6bd 	.word	0x0800c6bd
 800c6b0:	0800c6c3 	.word	0x0800c6c3
 800c6b4:	0800c6c9 	.word	0x0800c6c9
 800c6b8:	0800c6cf 	.word	0x0800c6cf
    case HAL_OK :
      usb_status = USBD_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c0:	e00b      	b.n	800c6da <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c6c6:	e008      	b.n	800c6da <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c6cc:	e005      	b.n	800c6da <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d2:	e002      	b.n	800c6da <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d8:	bf00      	nop
  }
  return usb_status;
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c702:	7af9      	ldrb	r1, [r7, #11]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f7f6 fb2d 	bl	8002d66 <HAL_PCD_EP_Transmit>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c710:	7dbb      	ldrb	r3, [r7, #22]
 800c712:	2b03      	cmp	r3, #3
 800c714:	d816      	bhi.n	800c744 <USBD_LL_Transmit+0x60>
 800c716:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <USBD_LL_Transmit+0x38>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c72d 	.word	0x0800c72d
 800c720:	0800c733 	.word	0x0800c733
 800c724:	0800c739 	.word	0x0800c739
 800c728:	0800c73f 	.word	0x0800c73f
    case HAL_OK :
      usb_status = USBD_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	75fb      	strb	r3, [r7, #23]
    break;
 800c730:	e00b      	b.n	800c74a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c732:	2303      	movs	r3, #3
 800c734:	75fb      	strb	r3, [r7, #23]
    break;
 800c736:	e008      	b.n	800c74a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c738:	2301      	movs	r3, #1
 800c73a:	75fb      	strb	r3, [r7, #23]
    break;
 800c73c:	e005      	b.n	800c74a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c73e:	2303      	movs	r3, #3
 800c740:	75fb      	strb	r3, [r7, #23]
    break;
 800c742:	e002      	b.n	800c74a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c744:	2303      	movs	r3, #3
 800c746:	75fb      	strb	r3, [r7, #23]
    break;
 800c748:	bf00      	nop
  }
  return usb_status;
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	607a      	str	r2, [r7, #4]
 800c75e:	603b      	str	r3, [r7, #0]
 800c760:	460b      	mov	r3, r1
 800c762:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c772:	7af9      	ldrb	r1, [r7, #11]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	f7f6 faab 	bl	8002cd2 <HAL_PCD_EP_Receive>
 800c77c:	4603      	mov	r3, r0
 800c77e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c780:	7dbb      	ldrb	r3, [r7, #22]
 800c782:	2b03      	cmp	r3, #3
 800c784:	d816      	bhi.n	800c7b4 <USBD_LL_PrepareReceive+0x60>
 800c786:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <USBD_LL_PrepareReceive+0x38>)
 800c788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78c:	0800c79d 	.word	0x0800c79d
 800c790:	0800c7a3 	.word	0x0800c7a3
 800c794:	0800c7a9 	.word	0x0800c7a9
 800c798:	0800c7af 	.word	0x0800c7af
    case HAL_OK :
      usb_status = USBD_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75fb      	strb	r3, [r7, #23]
    break;
 800c7a0:	e00b      	b.n	800c7ba <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	75fb      	strb	r3, [r7, #23]
    break;
 800c7a6:	e008      	b.n	800c7ba <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	75fb      	strb	r3, [r7, #23]
    break;
 800c7ac:	e005      	b.n	800c7ba <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	75fb      	strb	r3, [r7, #23]
    break;
 800c7b2:	e002      	b.n	800c7ba <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	75fb      	strb	r3, [r7, #23]
    break;
 800c7b8:	bf00      	nop
  }
  return usb_status;
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7d6:	78fa      	ldrb	r2, [r7, #3]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f6 faab 	bl	8002d36 <HAL_PCD_EP_GetRxCount>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c7f8:	78fb      	ldrb	r3, [r7, #3]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <HAL_PCDEx_LPM_Callback+0x18>
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d01f      	beq.n	800c842 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c802:	e03b      	b.n	800c87c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a1b      	ldr	r3, [r3, #32]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d007      	beq.n	800c81c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c80c:	f000 f854 	bl	800c8b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c810:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <HAL_PCDEx_LPM_Callback+0x98>)
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	4a1b      	ldr	r2, [pc, #108]	; (800c884 <HAL_PCDEx_LPM_Callback+0x98>)
 800c816:	f023 0306 	bic.w	r3, r3, #6
 800c81a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	6812      	ldr	r2, [r2, #0]
 800c82a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c82e:	f023 0301 	bic.w	r3, r3, #1
 800c832:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe f97f 	bl	800ab3e <USBD_LL_Resume>
    break;
 800c840:	e01c      	b.n	800c87c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	6812      	ldr	r2, [r2, #0]
 800c850:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c854:	f043 0301 	orr.w	r3, r3, #1
 800c858:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe f950 	bl	800ab06 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d005      	beq.n	800c87a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <HAL_PCDEx_LPM_Callback+0x98>)
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	4a04      	ldr	r2, [pc, #16]	; (800c884 <HAL_PCDEx_LPM_Callback+0x98>)
 800c874:	f043 0306 	orr.w	r3, r3, #6
 800c878:	6113      	str	r3, [r2, #16]
    break;
 800c87a:	bf00      	nop
}
 800c87c:	bf00      	nop
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	e000ed00 	.word	0xe000ed00

0800c888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c890:	4b03      	ldr	r3, [pc, #12]	; (800c8a0 <USBD_static_malloc+0x18>)
}
 800c892:	4618      	mov	r0, r3
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	20001d88 	.word	0x20001d88

0800c8a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]

}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c8bc:	f7f4 f9c6 	bl	8000c4c <SystemClock_Config>
}
 800c8c0:	bf00      	nop
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <siprintf>:
 800c8c4:	b40e      	push	{r1, r2, r3}
 800c8c6:	b500      	push	{lr}
 800c8c8:	b09c      	sub	sp, #112	; 0x70
 800c8ca:	ab1d      	add	r3, sp, #116	; 0x74
 800c8cc:	9002      	str	r0, [sp, #8]
 800c8ce:	9006      	str	r0, [sp, #24]
 800c8d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8d4:	4809      	ldr	r0, [pc, #36]	; (800c8fc <siprintf+0x38>)
 800c8d6:	9107      	str	r1, [sp, #28]
 800c8d8:	9104      	str	r1, [sp, #16]
 800c8da:	4909      	ldr	r1, [pc, #36]	; (800c900 <siprintf+0x3c>)
 800c8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e0:	9105      	str	r1, [sp, #20]
 800c8e2:	6800      	ldr	r0, [r0, #0]
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	a902      	add	r1, sp, #8
 800c8e8:	f000 f89a 	bl	800ca20 <_svfiprintf_r>
 800c8ec:	9b02      	ldr	r3, [sp, #8]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	b01c      	add	sp, #112	; 0x70
 800c8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8f8:	b003      	add	sp, #12
 800c8fa:	4770      	bx	lr
 800c8fc:	2000015c 	.word	0x2000015c
 800c900:	ffff0208 	.word	0xffff0208

0800c904 <memset>:
 800c904:	4402      	add	r2, r0
 800c906:	4603      	mov	r3, r0
 800c908:	4293      	cmp	r3, r2
 800c90a:	d100      	bne.n	800c90e <memset+0xa>
 800c90c:	4770      	bx	lr
 800c90e:	f803 1b01 	strb.w	r1, [r3], #1
 800c912:	e7f9      	b.n	800c908 <memset+0x4>

0800c914 <__errno>:
 800c914:	4b01      	ldr	r3, [pc, #4]	; (800c91c <__errno+0x8>)
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	2000015c 	.word	0x2000015c

0800c920 <__libc_init_array>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	4d0d      	ldr	r5, [pc, #52]	; (800c958 <__libc_init_array+0x38>)
 800c924:	4c0d      	ldr	r4, [pc, #52]	; (800c95c <__libc_init_array+0x3c>)
 800c926:	1b64      	subs	r4, r4, r5
 800c928:	10a4      	asrs	r4, r4, #2
 800c92a:	2600      	movs	r6, #0
 800c92c:	42a6      	cmp	r6, r4
 800c92e:	d109      	bne.n	800c944 <__libc_init_array+0x24>
 800c930:	4d0b      	ldr	r5, [pc, #44]	; (800c960 <__libc_init_array+0x40>)
 800c932:	4c0c      	ldr	r4, [pc, #48]	; (800c964 <__libc_init_array+0x44>)
 800c934:	f000 fc6a 	bl	800d20c <_init>
 800c938:	1b64      	subs	r4, r4, r5
 800c93a:	10a4      	asrs	r4, r4, #2
 800c93c:	2600      	movs	r6, #0
 800c93e:	42a6      	cmp	r6, r4
 800c940:	d105      	bne.n	800c94e <__libc_init_array+0x2e>
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	f855 3b04 	ldr.w	r3, [r5], #4
 800c948:	4798      	blx	r3
 800c94a:	3601      	adds	r6, #1
 800c94c:	e7ee      	b.n	800c92c <__libc_init_array+0xc>
 800c94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c952:	4798      	blx	r3
 800c954:	3601      	adds	r6, #1
 800c956:	e7f2      	b.n	800c93e <__libc_init_array+0x1e>
 800c958:	0800d31c 	.word	0x0800d31c
 800c95c:	0800d31c 	.word	0x0800d31c
 800c960:	0800d31c 	.word	0x0800d31c
 800c964:	0800d320 	.word	0x0800d320

0800c968 <__retarget_lock_acquire_recursive>:
 800c968:	4770      	bx	lr

0800c96a <__retarget_lock_release_recursive>:
 800c96a:	4770      	bx	lr

0800c96c <__ssputs_r>:
 800c96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c970:	688e      	ldr	r6, [r1, #8]
 800c972:	461f      	mov	r7, r3
 800c974:	42be      	cmp	r6, r7
 800c976:	680b      	ldr	r3, [r1, #0]
 800c978:	4682      	mov	sl, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	4690      	mov	r8, r2
 800c97e:	d82c      	bhi.n	800c9da <__ssputs_r+0x6e>
 800c980:	898a      	ldrh	r2, [r1, #12]
 800c982:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c986:	d026      	beq.n	800c9d6 <__ssputs_r+0x6a>
 800c988:	6965      	ldr	r5, [r4, #20]
 800c98a:	6909      	ldr	r1, [r1, #16]
 800c98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c990:	eba3 0901 	sub.w	r9, r3, r1
 800c994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c998:	1c7b      	adds	r3, r7, #1
 800c99a:	444b      	add	r3, r9
 800c99c:	106d      	asrs	r5, r5, #1
 800c99e:	429d      	cmp	r5, r3
 800c9a0:	bf38      	it	cc
 800c9a2:	461d      	movcc	r5, r3
 800c9a4:	0553      	lsls	r3, r2, #21
 800c9a6:	d527      	bpl.n	800c9f8 <__ssputs_r+0x8c>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f000 f957 	bl	800cc5c <_malloc_r>
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	b360      	cbz	r0, 800ca0c <__ssputs_r+0xa0>
 800c9b2:	6921      	ldr	r1, [r4, #16]
 800c9b4:	464a      	mov	r2, r9
 800c9b6:	f000 fbc7 	bl	800d148 <memcpy>
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	6126      	str	r6, [r4, #16]
 800c9c8:	6165      	str	r5, [r4, #20]
 800c9ca:	444e      	add	r6, r9
 800c9cc:	eba5 0509 	sub.w	r5, r5, r9
 800c9d0:	6026      	str	r6, [r4, #0]
 800c9d2:	60a5      	str	r5, [r4, #8]
 800c9d4:	463e      	mov	r6, r7
 800c9d6:	42be      	cmp	r6, r7
 800c9d8:	d900      	bls.n	800c9dc <__ssputs_r+0x70>
 800c9da:	463e      	mov	r6, r7
 800c9dc:	6820      	ldr	r0, [r4, #0]
 800c9de:	4632      	mov	r2, r6
 800c9e0:	4641      	mov	r1, r8
 800c9e2:	f000 fb86 	bl	800d0f2 <memmove>
 800c9e6:	68a3      	ldr	r3, [r4, #8]
 800c9e8:	1b9b      	subs	r3, r3, r6
 800c9ea:	60a3      	str	r3, [r4, #8]
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	4433      	add	r3, r6
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f8:	462a      	mov	r2, r5
 800c9fa:	f000 fb4b 	bl	800d094 <_realloc_r>
 800c9fe:	4606      	mov	r6, r0
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d1e0      	bne.n	800c9c6 <__ssputs_r+0x5a>
 800ca04:	6921      	ldr	r1, [r4, #16]
 800ca06:	4650      	mov	r0, sl
 800ca08:	f000 fbac 	bl	800d164 <_free_r>
 800ca0c:	230c      	movs	r3, #12
 800ca0e:	f8ca 3000 	str.w	r3, [sl]
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca18:	81a3      	strh	r3, [r4, #12]
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca1e:	e7e9      	b.n	800c9f4 <__ssputs_r+0x88>

0800ca20 <_svfiprintf_r>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	4698      	mov	r8, r3
 800ca26:	898b      	ldrh	r3, [r1, #12]
 800ca28:	061b      	lsls	r3, r3, #24
 800ca2a:	b09d      	sub	sp, #116	; 0x74
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	460d      	mov	r5, r1
 800ca30:	4614      	mov	r4, r2
 800ca32:	d50e      	bpl.n	800ca52 <_svfiprintf_r+0x32>
 800ca34:	690b      	ldr	r3, [r1, #16]
 800ca36:	b963      	cbnz	r3, 800ca52 <_svfiprintf_r+0x32>
 800ca38:	2140      	movs	r1, #64	; 0x40
 800ca3a:	f000 f90f 	bl	800cc5c <_malloc_r>
 800ca3e:	6028      	str	r0, [r5, #0]
 800ca40:	6128      	str	r0, [r5, #16]
 800ca42:	b920      	cbnz	r0, 800ca4e <_svfiprintf_r+0x2e>
 800ca44:	230c      	movs	r3, #12
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca4c:	e0d0      	b.n	800cbf0 <_svfiprintf_r+0x1d0>
 800ca4e:	2340      	movs	r3, #64	; 0x40
 800ca50:	616b      	str	r3, [r5, #20]
 800ca52:	2300      	movs	r3, #0
 800ca54:	9309      	str	r3, [sp, #36]	; 0x24
 800ca56:	2320      	movs	r3, #32
 800ca58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca60:	2330      	movs	r3, #48	; 0x30
 800ca62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc08 <_svfiprintf_r+0x1e8>
 800ca66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca6a:	f04f 0901 	mov.w	r9, #1
 800ca6e:	4623      	mov	r3, r4
 800ca70:	469a      	mov	sl, r3
 800ca72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca76:	b10a      	cbz	r2, 800ca7c <_svfiprintf_r+0x5c>
 800ca78:	2a25      	cmp	r2, #37	; 0x25
 800ca7a:	d1f9      	bne.n	800ca70 <_svfiprintf_r+0x50>
 800ca7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca80:	d00b      	beq.n	800ca9a <_svfiprintf_r+0x7a>
 800ca82:	465b      	mov	r3, fp
 800ca84:	4622      	mov	r2, r4
 800ca86:	4629      	mov	r1, r5
 800ca88:	4638      	mov	r0, r7
 800ca8a:	f7ff ff6f 	bl	800c96c <__ssputs_r>
 800ca8e:	3001      	adds	r0, #1
 800ca90:	f000 80a9 	beq.w	800cbe6 <_svfiprintf_r+0x1c6>
 800ca94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca96:	445a      	add	r2, fp
 800ca98:	9209      	str	r2, [sp, #36]	; 0x24
 800ca9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80a1 	beq.w	800cbe6 <_svfiprintf_r+0x1c6>
 800caa4:	2300      	movs	r3, #0
 800caa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caae:	f10a 0a01 	add.w	sl, sl, #1
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	9307      	str	r3, [sp, #28]
 800cab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caba:	931a      	str	r3, [sp, #104]	; 0x68
 800cabc:	4654      	mov	r4, sl
 800cabe:	2205      	movs	r2, #5
 800cac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac4:	4850      	ldr	r0, [pc, #320]	; (800cc08 <_svfiprintf_r+0x1e8>)
 800cac6:	f7f3 fb8b 	bl	80001e0 <memchr>
 800caca:	9a04      	ldr	r2, [sp, #16]
 800cacc:	b9d8      	cbnz	r0, 800cb06 <_svfiprintf_r+0xe6>
 800cace:	06d0      	lsls	r0, r2, #27
 800cad0:	bf44      	itt	mi
 800cad2:	2320      	movmi	r3, #32
 800cad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cad8:	0711      	lsls	r1, r2, #28
 800cada:	bf44      	itt	mi
 800cadc:	232b      	movmi	r3, #43	; 0x2b
 800cade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae2:	f89a 3000 	ldrb.w	r3, [sl]
 800cae6:	2b2a      	cmp	r3, #42	; 0x2a
 800cae8:	d015      	beq.n	800cb16 <_svfiprintf_r+0xf6>
 800caea:	9a07      	ldr	r2, [sp, #28]
 800caec:	4654      	mov	r4, sl
 800caee:	2000      	movs	r0, #0
 800caf0:	f04f 0c0a 	mov.w	ip, #10
 800caf4:	4621      	mov	r1, r4
 800caf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cafa:	3b30      	subs	r3, #48	; 0x30
 800cafc:	2b09      	cmp	r3, #9
 800cafe:	d94d      	bls.n	800cb9c <_svfiprintf_r+0x17c>
 800cb00:	b1b0      	cbz	r0, 800cb30 <_svfiprintf_r+0x110>
 800cb02:	9207      	str	r2, [sp, #28]
 800cb04:	e014      	b.n	800cb30 <_svfiprintf_r+0x110>
 800cb06:	eba0 0308 	sub.w	r3, r0, r8
 800cb0a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	46a2      	mov	sl, r4
 800cb14:	e7d2      	b.n	800cabc <_svfiprintf_r+0x9c>
 800cb16:	9b03      	ldr	r3, [sp, #12]
 800cb18:	1d19      	adds	r1, r3, #4
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	9103      	str	r1, [sp, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bfbb      	ittet	lt
 800cb22:	425b      	neglt	r3, r3
 800cb24:	f042 0202 	orrlt.w	r2, r2, #2
 800cb28:	9307      	strge	r3, [sp, #28]
 800cb2a:	9307      	strlt	r3, [sp, #28]
 800cb2c:	bfb8      	it	lt
 800cb2e:	9204      	strlt	r2, [sp, #16]
 800cb30:	7823      	ldrb	r3, [r4, #0]
 800cb32:	2b2e      	cmp	r3, #46	; 0x2e
 800cb34:	d10c      	bne.n	800cb50 <_svfiprintf_r+0x130>
 800cb36:	7863      	ldrb	r3, [r4, #1]
 800cb38:	2b2a      	cmp	r3, #42	; 0x2a
 800cb3a:	d134      	bne.n	800cba6 <_svfiprintf_r+0x186>
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	1d1a      	adds	r2, r3, #4
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	9203      	str	r2, [sp, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	bfb8      	it	lt
 800cb48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb4c:	3402      	adds	r4, #2
 800cb4e:	9305      	str	r3, [sp, #20]
 800cb50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cc18 <_svfiprintf_r+0x1f8>
 800cb54:	7821      	ldrb	r1, [r4, #0]
 800cb56:	2203      	movs	r2, #3
 800cb58:	4650      	mov	r0, sl
 800cb5a:	f7f3 fb41 	bl	80001e0 <memchr>
 800cb5e:	b138      	cbz	r0, 800cb70 <_svfiprintf_r+0x150>
 800cb60:	9b04      	ldr	r3, [sp, #16]
 800cb62:	eba0 000a 	sub.w	r0, r0, sl
 800cb66:	2240      	movs	r2, #64	; 0x40
 800cb68:	4082      	lsls	r2, r0
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	3401      	adds	r4, #1
 800cb6e:	9304      	str	r3, [sp, #16]
 800cb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb74:	4825      	ldr	r0, [pc, #148]	; (800cc0c <_svfiprintf_r+0x1ec>)
 800cb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb7a:	2206      	movs	r2, #6
 800cb7c:	f7f3 fb30 	bl	80001e0 <memchr>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d038      	beq.n	800cbf6 <_svfiprintf_r+0x1d6>
 800cb84:	4b22      	ldr	r3, [pc, #136]	; (800cc10 <_svfiprintf_r+0x1f0>)
 800cb86:	bb1b      	cbnz	r3, 800cbd0 <_svfiprintf_r+0x1b0>
 800cb88:	9b03      	ldr	r3, [sp, #12]
 800cb8a:	3307      	adds	r3, #7
 800cb8c:	f023 0307 	bic.w	r3, r3, #7
 800cb90:	3308      	adds	r3, #8
 800cb92:	9303      	str	r3, [sp, #12]
 800cb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb96:	4433      	add	r3, r6
 800cb98:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9a:	e768      	b.n	800ca6e <_svfiprintf_r+0x4e>
 800cb9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cba0:	460c      	mov	r4, r1
 800cba2:	2001      	movs	r0, #1
 800cba4:	e7a6      	b.n	800caf4 <_svfiprintf_r+0xd4>
 800cba6:	2300      	movs	r3, #0
 800cba8:	3401      	adds	r4, #1
 800cbaa:	9305      	str	r3, [sp, #20]
 800cbac:	4619      	mov	r1, r3
 800cbae:	f04f 0c0a 	mov.w	ip, #10
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb8:	3a30      	subs	r2, #48	; 0x30
 800cbba:	2a09      	cmp	r2, #9
 800cbbc:	d903      	bls.n	800cbc6 <_svfiprintf_r+0x1a6>
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0c6      	beq.n	800cb50 <_svfiprintf_r+0x130>
 800cbc2:	9105      	str	r1, [sp, #20]
 800cbc4:	e7c4      	b.n	800cb50 <_svfiprintf_r+0x130>
 800cbc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbca:	4604      	mov	r4, r0
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e7f0      	b.n	800cbb2 <_svfiprintf_r+0x192>
 800cbd0:	ab03      	add	r3, sp, #12
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	462a      	mov	r2, r5
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	; (800cc14 <_svfiprintf_r+0x1f4>)
 800cbd8:	a904      	add	r1, sp, #16
 800cbda:	4638      	mov	r0, r7
 800cbdc:	f3af 8000 	nop.w
 800cbe0:	1c42      	adds	r2, r0, #1
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	d1d6      	bne.n	800cb94 <_svfiprintf_r+0x174>
 800cbe6:	89ab      	ldrh	r3, [r5, #12]
 800cbe8:	065b      	lsls	r3, r3, #25
 800cbea:	f53f af2d 	bmi.w	800ca48 <_svfiprintf_r+0x28>
 800cbee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbf0:	b01d      	add	sp, #116	; 0x74
 800cbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf6:	ab03      	add	r3, sp, #12
 800cbf8:	9300      	str	r3, [sp, #0]
 800cbfa:	462a      	mov	r2, r5
 800cbfc:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <_svfiprintf_r+0x1f4>)
 800cbfe:	a904      	add	r1, sp, #16
 800cc00:	4638      	mov	r0, r7
 800cc02:	f000 f919 	bl	800ce38 <_printf_i>
 800cc06:	e7eb      	b.n	800cbe0 <_svfiprintf_r+0x1c0>
 800cc08:	0800d2e8 	.word	0x0800d2e8
 800cc0c:	0800d2f2 	.word	0x0800d2f2
 800cc10:	00000000 	.word	0x00000000
 800cc14:	0800c96d 	.word	0x0800c96d
 800cc18:	0800d2ee 	.word	0x0800d2ee

0800cc1c <sbrk_aligned>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	4e0e      	ldr	r6, [pc, #56]	; (800cc58 <sbrk_aligned+0x3c>)
 800cc20:	460c      	mov	r4, r1
 800cc22:	6831      	ldr	r1, [r6, #0]
 800cc24:	4605      	mov	r5, r0
 800cc26:	b911      	cbnz	r1, 800cc2e <sbrk_aligned+0x12>
 800cc28:	f000 fa7e 	bl	800d128 <_sbrk_r>
 800cc2c:	6030      	str	r0, [r6, #0]
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4628      	mov	r0, r5
 800cc32:	f000 fa79 	bl	800d128 <_sbrk_r>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d00a      	beq.n	800cc50 <sbrk_aligned+0x34>
 800cc3a:	1cc4      	adds	r4, r0, #3
 800cc3c:	f024 0403 	bic.w	r4, r4, #3
 800cc40:	42a0      	cmp	r0, r4
 800cc42:	d007      	beq.n	800cc54 <sbrk_aligned+0x38>
 800cc44:	1a21      	subs	r1, r4, r0
 800cc46:	4628      	mov	r0, r5
 800cc48:	f000 fa6e 	bl	800d128 <_sbrk_r>
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d101      	bne.n	800cc54 <sbrk_aligned+0x38>
 800cc50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc54:	4620      	mov	r0, r4
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	200020e8 	.word	0x200020e8

0800cc5c <_malloc_r>:
 800cc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc60:	1ccd      	adds	r5, r1, #3
 800cc62:	f025 0503 	bic.w	r5, r5, #3
 800cc66:	3508      	adds	r5, #8
 800cc68:	2d0c      	cmp	r5, #12
 800cc6a:	bf38      	it	cc
 800cc6c:	250c      	movcc	r5, #12
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	4607      	mov	r7, r0
 800cc72:	db01      	blt.n	800cc78 <_malloc_r+0x1c>
 800cc74:	42a9      	cmp	r1, r5
 800cc76:	d905      	bls.n	800cc84 <_malloc_r+0x28>
 800cc78:	230c      	movs	r3, #12
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	2600      	movs	r6, #0
 800cc7e:	4630      	mov	r0, r6
 800cc80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd58 <_malloc_r+0xfc>
 800cc88:	f000 f9f8 	bl	800d07c <__malloc_lock>
 800cc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc90:	461c      	mov	r4, r3
 800cc92:	bb5c      	cbnz	r4, 800ccec <_malloc_r+0x90>
 800cc94:	4629      	mov	r1, r5
 800cc96:	4638      	mov	r0, r7
 800cc98:	f7ff ffc0 	bl	800cc1c <sbrk_aligned>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	4604      	mov	r4, r0
 800cca0:	d155      	bne.n	800cd4e <_malloc_r+0xf2>
 800cca2:	f8d8 4000 	ldr.w	r4, [r8]
 800cca6:	4626      	mov	r6, r4
 800cca8:	2e00      	cmp	r6, #0
 800ccaa:	d145      	bne.n	800cd38 <_malloc_r+0xdc>
 800ccac:	2c00      	cmp	r4, #0
 800ccae:	d048      	beq.n	800cd42 <_malloc_r+0xe6>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	eb04 0903 	add.w	r9, r4, r3
 800ccba:	f000 fa35 	bl	800d128 <_sbrk_r>
 800ccbe:	4581      	cmp	r9, r0
 800ccc0:	d13f      	bne.n	800cd42 <_malloc_r+0xe6>
 800ccc2:	6821      	ldr	r1, [r4, #0]
 800ccc4:	1a6d      	subs	r5, r5, r1
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4638      	mov	r0, r7
 800ccca:	f7ff ffa7 	bl	800cc1c <sbrk_aligned>
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d037      	beq.n	800cd42 <_malloc_r+0xe6>
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	442b      	add	r3, r5
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d038      	beq.n	800cd52 <_malloc_r+0xf6>
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	42a2      	cmp	r2, r4
 800cce4:	d12b      	bne.n	800cd3e <_malloc_r+0xe2>
 800cce6:	2200      	movs	r2, #0
 800cce8:	605a      	str	r2, [r3, #4]
 800ccea:	e00f      	b.n	800cd0c <_malloc_r+0xb0>
 800ccec:	6822      	ldr	r2, [r4, #0]
 800ccee:	1b52      	subs	r2, r2, r5
 800ccf0:	d41f      	bmi.n	800cd32 <_malloc_r+0xd6>
 800ccf2:	2a0b      	cmp	r2, #11
 800ccf4:	d917      	bls.n	800cd26 <_malloc_r+0xca>
 800ccf6:	1961      	adds	r1, r4, r5
 800ccf8:	42a3      	cmp	r3, r4
 800ccfa:	6025      	str	r5, [r4, #0]
 800ccfc:	bf18      	it	ne
 800ccfe:	6059      	strne	r1, [r3, #4]
 800cd00:	6863      	ldr	r3, [r4, #4]
 800cd02:	bf08      	it	eq
 800cd04:	f8c8 1000 	streq.w	r1, [r8]
 800cd08:	5162      	str	r2, [r4, r5]
 800cd0a:	604b      	str	r3, [r1, #4]
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	f104 060b 	add.w	r6, r4, #11
 800cd12:	f000 f9b9 	bl	800d088 <__malloc_unlock>
 800cd16:	f026 0607 	bic.w	r6, r6, #7
 800cd1a:	1d23      	adds	r3, r4, #4
 800cd1c:	1af2      	subs	r2, r6, r3
 800cd1e:	d0ae      	beq.n	800cc7e <_malloc_r+0x22>
 800cd20:	1b9b      	subs	r3, r3, r6
 800cd22:	50a3      	str	r3, [r4, r2]
 800cd24:	e7ab      	b.n	800cc7e <_malloc_r+0x22>
 800cd26:	42a3      	cmp	r3, r4
 800cd28:	6862      	ldr	r2, [r4, #4]
 800cd2a:	d1dd      	bne.n	800cce8 <_malloc_r+0x8c>
 800cd2c:	f8c8 2000 	str.w	r2, [r8]
 800cd30:	e7ec      	b.n	800cd0c <_malloc_r+0xb0>
 800cd32:	4623      	mov	r3, r4
 800cd34:	6864      	ldr	r4, [r4, #4]
 800cd36:	e7ac      	b.n	800cc92 <_malloc_r+0x36>
 800cd38:	4634      	mov	r4, r6
 800cd3a:	6876      	ldr	r6, [r6, #4]
 800cd3c:	e7b4      	b.n	800cca8 <_malloc_r+0x4c>
 800cd3e:	4613      	mov	r3, r2
 800cd40:	e7cc      	b.n	800ccdc <_malloc_r+0x80>
 800cd42:	230c      	movs	r3, #12
 800cd44:	603b      	str	r3, [r7, #0]
 800cd46:	4638      	mov	r0, r7
 800cd48:	f000 f99e 	bl	800d088 <__malloc_unlock>
 800cd4c:	e797      	b.n	800cc7e <_malloc_r+0x22>
 800cd4e:	6025      	str	r5, [r4, #0]
 800cd50:	e7dc      	b.n	800cd0c <_malloc_r+0xb0>
 800cd52:	605b      	str	r3, [r3, #4]
 800cd54:	deff      	udf	#255	; 0xff
 800cd56:	bf00      	nop
 800cd58:	200020e4 	.word	0x200020e4

0800cd5c <_printf_common>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	4616      	mov	r6, r2
 800cd62:	4699      	mov	r9, r3
 800cd64:	688a      	ldr	r2, [r1, #8]
 800cd66:	690b      	ldr	r3, [r1, #16]
 800cd68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	bfb8      	it	lt
 800cd70:	4613      	movlt	r3, r2
 800cd72:	6033      	str	r3, [r6, #0]
 800cd74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd78:	4607      	mov	r7, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	b10a      	cbz	r2, 800cd82 <_printf_common+0x26>
 800cd7e:	3301      	adds	r3, #1
 800cd80:	6033      	str	r3, [r6, #0]
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	0699      	lsls	r1, r3, #26
 800cd86:	bf42      	ittt	mi
 800cd88:	6833      	ldrmi	r3, [r6, #0]
 800cd8a:	3302      	addmi	r3, #2
 800cd8c:	6033      	strmi	r3, [r6, #0]
 800cd8e:	6825      	ldr	r5, [r4, #0]
 800cd90:	f015 0506 	ands.w	r5, r5, #6
 800cd94:	d106      	bne.n	800cda4 <_printf_common+0x48>
 800cd96:	f104 0a19 	add.w	sl, r4, #25
 800cd9a:	68e3      	ldr	r3, [r4, #12]
 800cd9c:	6832      	ldr	r2, [r6, #0]
 800cd9e:	1a9b      	subs	r3, r3, r2
 800cda0:	42ab      	cmp	r3, r5
 800cda2:	dc26      	bgt.n	800cdf2 <_printf_common+0x96>
 800cda4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cda8:	1e13      	subs	r3, r2, #0
 800cdaa:	6822      	ldr	r2, [r4, #0]
 800cdac:	bf18      	it	ne
 800cdae:	2301      	movne	r3, #1
 800cdb0:	0692      	lsls	r2, r2, #26
 800cdb2:	d42b      	bmi.n	800ce0c <_printf_common+0xb0>
 800cdb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdb8:	4649      	mov	r1, r9
 800cdba:	4638      	mov	r0, r7
 800cdbc:	47c0      	blx	r8
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d01e      	beq.n	800ce00 <_printf_common+0xa4>
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	6922      	ldr	r2, [r4, #16]
 800cdc6:	f003 0306 	and.w	r3, r3, #6
 800cdca:	2b04      	cmp	r3, #4
 800cdcc:	bf02      	ittt	eq
 800cdce:	68e5      	ldreq	r5, [r4, #12]
 800cdd0:	6833      	ldreq	r3, [r6, #0]
 800cdd2:	1aed      	subeq	r5, r5, r3
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	bf0c      	ite	eq
 800cdd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cddc:	2500      	movne	r5, #0
 800cdde:	4293      	cmp	r3, r2
 800cde0:	bfc4      	itt	gt
 800cde2:	1a9b      	subgt	r3, r3, r2
 800cde4:	18ed      	addgt	r5, r5, r3
 800cde6:	2600      	movs	r6, #0
 800cde8:	341a      	adds	r4, #26
 800cdea:	42b5      	cmp	r5, r6
 800cdec:	d11a      	bne.n	800ce24 <_printf_common+0xc8>
 800cdee:	2000      	movs	r0, #0
 800cdf0:	e008      	b.n	800ce04 <_printf_common+0xa8>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	4652      	mov	r2, sl
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	47c0      	blx	r8
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d103      	bne.n	800ce08 <_printf_common+0xac>
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce08:	3501      	adds	r5, #1
 800ce0a:	e7c6      	b.n	800cd9a <_printf_common+0x3e>
 800ce0c:	18e1      	adds	r1, r4, r3
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	2030      	movs	r0, #48	; 0x30
 800ce12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce16:	4422      	add	r2, r4
 800ce18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce20:	3302      	adds	r3, #2
 800ce22:	e7c7      	b.n	800cdb4 <_printf_common+0x58>
 800ce24:	2301      	movs	r3, #1
 800ce26:	4622      	mov	r2, r4
 800ce28:	4649      	mov	r1, r9
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	47c0      	blx	r8
 800ce2e:	3001      	adds	r0, #1
 800ce30:	d0e6      	beq.n	800ce00 <_printf_common+0xa4>
 800ce32:	3601      	adds	r6, #1
 800ce34:	e7d9      	b.n	800cdea <_printf_common+0x8e>
	...

0800ce38 <_printf_i>:
 800ce38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	7e0f      	ldrb	r7, [r1, #24]
 800ce3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce40:	2f78      	cmp	r7, #120	; 0x78
 800ce42:	4691      	mov	r9, r2
 800ce44:	4680      	mov	r8, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	469a      	mov	sl, r3
 800ce4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce4e:	d807      	bhi.n	800ce60 <_printf_i+0x28>
 800ce50:	2f62      	cmp	r7, #98	; 0x62
 800ce52:	d80a      	bhi.n	800ce6a <_printf_i+0x32>
 800ce54:	2f00      	cmp	r7, #0
 800ce56:	f000 80d4 	beq.w	800d002 <_printf_i+0x1ca>
 800ce5a:	2f58      	cmp	r7, #88	; 0x58
 800ce5c:	f000 80c0 	beq.w	800cfe0 <_printf_i+0x1a8>
 800ce60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce68:	e03a      	b.n	800cee0 <_printf_i+0xa8>
 800ce6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce6e:	2b15      	cmp	r3, #21
 800ce70:	d8f6      	bhi.n	800ce60 <_printf_i+0x28>
 800ce72:	a101      	add	r1, pc, #4	; (adr r1, 800ce78 <_printf_i+0x40>)
 800ce74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce78:	0800ced1 	.word	0x0800ced1
 800ce7c:	0800cee5 	.word	0x0800cee5
 800ce80:	0800ce61 	.word	0x0800ce61
 800ce84:	0800ce61 	.word	0x0800ce61
 800ce88:	0800ce61 	.word	0x0800ce61
 800ce8c:	0800ce61 	.word	0x0800ce61
 800ce90:	0800cee5 	.word	0x0800cee5
 800ce94:	0800ce61 	.word	0x0800ce61
 800ce98:	0800ce61 	.word	0x0800ce61
 800ce9c:	0800ce61 	.word	0x0800ce61
 800cea0:	0800ce61 	.word	0x0800ce61
 800cea4:	0800cfe9 	.word	0x0800cfe9
 800cea8:	0800cf11 	.word	0x0800cf11
 800ceac:	0800cfa3 	.word	0x0800cfa3
 800ceb0:	0800ce61 	.word	0x0800ce61
 800ceb4:	0800ce61 	.word	0x0800ce61
 800ceb8:	0800d00b 	.word	0x0800d00b
 800cebc:	0800ce61 	.word	0x0800ce61
 800cec0:	0800cf11 	.word	0x0800cf11
 800cec4:	0800ce61 	.word	0x0800ce61
 800cec8:	0800ce61 	.word	0x0800ce61
 800cecc:	0800cfab 	.word	0x0800cfab
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	1d1a      	adds	r2, r3, #4
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	602a      	str	r2, [r5, #0]
 800ced8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cedc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cee0:	2301      	movs	r3, #1
 800cee2:	e09f      	b.n	800d024 <_printf_i+0x1ec>
 800cee4:	6820      	ldr	r0, [r4, #0]
 800cee6:	682b      	ldr	r3, [r5, #0]
 800cee8:	0607      	lsls	r7, r0, #24
 800ceea:	f103 0104 	add.w	r1, r3, #4
 800ceee:	6029      	str	r1, [r5, #0]
 800cef0:	d501      	bpl.n	800cef6 <_printf_i+0xbe>
 800cef2:	681e      	ldr	r6, [r3, #0]
 800cef4:	e003      	b.n	800cefe <_printf_i+0xc6>
 800cef6:	0646      	lsls	r6, r0, #25
 800cef8:	d5fb      	bpl.n	800cef2 <_printf_i+0xba>
 800cefa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cefe:	2e00      	cmp	r6, #0
 800cf00:	da03      	bge.n	800cf0a <_printf_i+0xd2>
 800cf02:	232d      	movs	r3, #45	; 0x2d
 800cf04:	4276      	negs	r6, r6
 800cf06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf0a:	485a      	ldr	r0, [pc, #360]	; (800d074 <_printf_i+0x23c>)
 800cf0c:	230a      	movs	r3, #10
 800cf0e:	e012      	b.n	800cf36 <_printf_i+0xfe>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	6820      	ldr	r0, [r4, #0]
 800cf14:	1d19      	adds	r1, r3, #4
 800cf16:	6029      	str	r1, [r5, #0]
 800cf18:	0605      	lsls	r5, r0, #24
 800cf1a:	d501      	bpl.n	800cf20 <_printf_i+0xe8>
 800cf1c:	681e      	ldr	r6, [r3, #0]
 800cf1e:	e002      	b.n	800cf26 <_printf_i+0xee>
 800cf20:	0641      	lsls	r1, r0, #25
 800cf22:	d5fb      	bpl.n	800cf1c <_printf_i+0xe4>
 800cf24:	881e      	ldrh	r6, [r3, #0]
 800cf26:	4853      	ldr	r0, [pc, #332]	; (800d074 <_printf_i+0x23c>)
 800cf28:	2f6f      	cmp	r7, #111	; 0x6f
 800cf2a:	bf0c      	ite	eq
 800cf2c:	2308      	moveq	r3, #8
 800cf2e:	230a      	movne	r3, #10
 800cf30:	2100      	movs	r1, #0
 800cf32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf36:	6865      	ldr	r5, [r4, #4]
 800cf38:	60a5      	str	r5, [r4, #8]
 800cf3a:	2d00      	cmp	r5, #0
 800cf3c:	bfa2      	ittt	ge
 800cf3e:	6821      	ldrge	r1, [r4, #0]
 800cf40:	f021 0104 	bicge.w	r1, r1, #4
 800cf44:	6021      	strge	r1, [r4, #0]
 800cf46:	b90e      	cbnz	r6, 800cf4c <_printf_i+0x114>
 800cf48:	2d00      	cmp	r5, #0
 800cf4a:	d04b      	beq.n	800cfe4 <_printf_i+0x1ac>
 800cf4c:	4615      	mov	r5, r2
 800cf4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf52:	fb03 6711 	mls	r7, r3, r1, r6
 800cf56:	5dc7      	ldrb	r7, [r0, r7]
 800cf58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf5c:	4637      	mov	r7, r6
 800cf5e:	42bb      	cmp	r3, r7
 800cf60:	460e      	mov	r6, r1
 800cf62:	d9f4      	bls.n	800cf4e <_printf_i+0x116>
 800cf64:	2b08      	cmp	r3, #8
 800cf66:	d10b      	bne.n	800cf80 <_printf_i+0x148>
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	07de      	lsls	r6, r3, #31
 800cf6c:	d508      	bpl.n	800cf80 <_printf_i+0x148>
 800cf6e:	6923      	ldr	r3, [r4, #16]
 800cf70:	6861      	ldr	r1, [r4, #4]
 800cf72:	4299      	cmp	r1, r3
 800cf74:	bfde      	ittt	le
 800cf76:	2330      	movle	r3, #48	; 0x30
 800cf78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cf80:	1b52      	subs	r2, r2, r5
 800cf82:	6122      	str	r2, [r4, #16]
 800cf84:	f8cd a000 	str.w	sl, [sp]
 800cf88:	464b      	mov	r3, r9
 800cf8a:	aa03      	add	r2, sp, #12
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4640      	mov	r0, r8
 800cf90:	f7ff fee4 	bl	800cd5c <_printf_common>
 800cf94:	3001      	adds	r0, #1
 800cf96:	d14a      	bne.n	800d02e <_printf_i+0x1f6>
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf9c:	b004      	add	sp, #16
 800cf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	f043 0320 	orr.w	r3, r3, #32
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	4833      	ldr	r0, [pc, #204]	; (800d078 <_printf_i+0x240>)
 800cfac:	2778      	movs	r7, #120	; 0x78
 800cfae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	6829      	ldr	r1, [r5, #0]
 800cfb6:	061f      	lsls	r7, r3, #24
 800cfb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfbc:	d402      	bmi.n	800cfc4 <_printf_i+0x18c>
 800cfbe:	065f      	lsls	r7, r3, #25
 800cfc0:	bf48      	it	mi
 800cfc2:	b2b6      	uxthmi	r6, r6
 800cfc4:	07df      	lsls	r7, r3, #31
 800cfc6:	bf48      	it	mi
 800cfc8:	f043 0320 	orrmi.w	r3, r3, #32
 800cfcc:	6029      	str	r1, [r5, #0]
 800cfce:	bf48      	it	mi
 800cfd0:	6023      	strmi	r3, [r4, #0]
 800cfd2:	b91e      	cbnz	r6, 800cfdc <_printf_i+0x1a4>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	f023 0320 	bic.w	r3, r3, #32
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	2310      	movs	r3, #16
 800cfde:	e7a7      	b.n	800cf30 <_printf_i+0xf8>
 800cfe0:	4824      	ldr	r0, [pc, #144]	; (800d074 <_printf_i+0x23c>)
 800cfe2:	e7e4      	b.n	800cfae <_printf_i+0x176>
 800cfe4:	4615      	mov	r5, r2
 800cfe6:	e7bd      	b.n	800cf64 <_printf_i+0x12c>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	6826      	ldr	r6, [r4, #0]
 800cfec:	6961      	ldr	r1, [r4, #20]
 800cfee:	1d18      	adds	r0, r3, #4
 800cff0:	6028      	str	r0, [r5, #0]
 800cff2:	0635      	lsls	r5, r6, #24
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	d501      	bpl.n	800cffc <_printf_i+0x1c4>
 800cff8:	6019      	str	r1, [r3, #0]
 800cffa:	e002      	b.n	800d002 <_printf_i+0x1ca>
 800cffc:	0670      	lsls	r0, r6, #25
 800cffe:	d5fb      	bpl.n	800cff8 <_printf_i+0x1c0>
 800d000:	8019      	strh	r1, [r3, #0]
 800d002:	2300      	movs	r3, #0
 800d004:	6123      	str	r3, [r4, #16]
 800d006:	4615      	mov	r5, r2
 800d008:	e7bc      	b.n	800cf84 <_printf_i+0x14c>
 800d00a:	682b      	ldr	r3, [r5, #0]
 800d00c:	1d1a      	adds	r2, r3, #4
 800d00e:	602a      	str	r2, [r5, #0]
 800d010:	681d      	ldr	r5, [r3, #0]
 800d012:	6862      	ldr	r2, [r4, #4]
 800d014:	2100      	movs	r1, #0
 800d016:	4628      	mov	r0, r5
 800d018:	f7f3 f8e2 	bl	80001e0 <memchr>
 800d01c:	b108      	cbz	r0, 800d022 <_printf_i+0x1ea>
 800d01e:	1b40      	subs	r0, r0, r5
 800d020:	6060      	str	r0, [r4, #4]
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	6123      	str	r3, [r4, #16]
 800d026:	2300      	movs	r3, #0
 800d028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d02c:	e7aa      	b.n	800cf84 <_printf_i+0x14c>
 800d02e:	6923      	ldr	r3, [r4, #16]
 800d030:	462a      	mov	r2, r5
 800d032:	4649      	mov	r1, r9
 800d034:	4640      	mov	r0, r8
 800d036:	47d0      	blx	sl
 800d038:	3001      	adds	r0, #1
 800d03a:	d0ad      	beq.n	800cf98 <_printf_i+0x160>
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	079b      	lsls	r3, r3, #30
 800d040:	d413      	bmi.n	800d06a <_printf_i+0x232>
 800d042:	68e0      	ldr	r0, [r4, #12]
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	4298      	cmp	r0, r3
 800d048:	bfb8      	it	lt
 800d04a:	4618      	movlt	r0, r3
 800d04c:	e7a6      	b.n	800cf9c <_printf_i+0x164>
 800d04e:	2301      	movs	r3, #1
 800d050:	4632      	mov	r2, r6
 800d052:	4649      	mov	r1, r9
 800d054:	4640      	mov	r0, r8
 800d056:	47d0      	blx	sl
 800d058:	3001      	adds	r0, #1
 800d05a:	d09d      	beq.n	800cf98 <_printf_i+0x160>
 800d05c:	3501      	adds	r5, #1
 800d05e:	68e3      	ldr	r3, [r4, #12]
 800d060:	9903      	ldr	r1, [sp, #12]
 800d062:	1a5b      	subs	r3, r3, r1
 800d064:	42ab      	cmp	r3, r5
 800d066:	dcf2      	bgt.n	800d04e <_printf_i+0x216>
 800d068:	e7eb      	b.n	800d042 <_printf_i+0x20a>
 800d06a:	2500      	movs	r5, #0
 800d06c:	f104 0619 	add.w	r6, r4, #25
 800d070:	e7f5      	b.n	800d05e <_printf_i+0x226>
 800d072:	bf00      	nop
 800d074:	0800d2f9 	.word	0x0800d2f9
 800d078:	0800d30a 	.word	0x0800d30a

0800d07c <__malloc_lock>:
 800d07c:	4801      	ldr	r0, [pc, #4]	; (800d084 <__malloc_lock+0x8>)
 800d07e:	f7ff bc73 	b.w	800c968 <__retarget_lock_acquire_recursive>
 800d082:	bf00      	nop
 800d084:	200020e0 	.word	0x200020e0

0800d088 <__malloc_unlock>:
 800d088:	4801      	ldr	r0, [pc, #4]	; (800d090 <__malloc_unlock+0x8>)
 800d08a:	f7ff bc6e 	b.w	800c96a <__retarget_lock_release_recursive>
 800d08e:	bf00      	nop
 800d090:	200020e0 	.word	0x200020e0

0800d094 <_realloc_r>:
 800d094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d098:	4680      	mov	r8, r0
 800d09a:	4614      	mov	r4, r2
 800d09c:	460e      	mov	r6, r1
 800d09e:	b921      	cbnz	r1, 800d0aa <_realloc_r+0x16>
 800d0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	f7ff bdd9 	b.w	800cc5c <_malloc_r>
 800d0aa:	b92a      	cbnz	r2, 800d0b8 <_realloc_r+0x24>
 800d0ac:	f000 f85a 	bl	800d164 <_free_r>
 800d0b0:	4625      	mov	r5, r4
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b8:	f000 f8a0 	bl	800d1fc <_malloc_usable_size_r>
 800d0bc:	4284      	cmp	r4, r0
 800d0be:	4607      	mov	r7, r0
 800d0c0:	d802      	bhi.n	800d0c8 <_realloc_r+0x34>
 800d0c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0c6:	d812      	bhi.n	800d0ee <_realloc_r+0x5a>
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	f7ff fdc6 	bl	800cc5c <_malloc_r>
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d0ed      	beq.n	800d0b2 <_realloc_r+0x1e>
 800d0d6:	42bc      	cmp	r4, r7
 800d0d8:	4622      	mov	r2, r4
 800d0da:	4631      	mov	r1, r6
 800d0dc:	bf28      	it	cs
 800d0de:	463a      	movcs	r2, r7
 800d0e0:	f000 f832 	bl	800d148 <memcpy>
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f000 f83c 	bl	800d164 <_free_r>
 800d0ec:	e7e1      	b.n	800d0b2 <_realloc_r+0x1e>
 800d0ee:	4635      	mov	r5, r6
 800d0f0:	e7df      	b.n	800d0b2 <_realloc_r+0x1e>

0800d0f2 <memmove>:
 800d0f2:	4288      	cmp	r0, r1
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	eb01 0402 	add.w	r4, r1, r2
 800d0fa:	d902      	bls.n	800d102 <memmove+0x10>
 800d0fc:	4284      	cmp	r4, r0
 800d0fe:	4623      	mov	r3, r4
 800d100:	d807      	bhi.n	800d112 <memmove+0x20>
 800d102:	1e43      	subs	r3, r0, #1
 800d104:	42a1      	cmp	r1, r4
 800d106:	d008      	beq.n	800d11a <memmove+0x28>
 800d108:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d10c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d110:	e7f8      	b.n	800d104 <memmove+0x12>
 800d112:	4402      	add	r2, r0
 800d114:	4601      	mov	r1, r0
 800d116:	428a      	cmp	r2, r1
 800d118:	d100      	bne.n	800d11c <memmove+0x2a>
 800d11a:	bd10      	pop	{r4, pc}
 800d11c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d120:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d124:	e7f7      	b.n	800d116 <memmove+0x24>
	...

0800d128 <_sbrk_r>:
 800d128:	b538      	push	{r3, r4, r5, lr}
 800d12a:	4d06      	ldr	r5, [pc, #24]	; (800d144 <_sbrk_r+0x1c>)
 800d12c:	2300      	movs	r3, #0
 800d12e:	4604      	mov	r4, r0
 800d130:	4608      	mov	r0, r1
 800d132:	602b      	str	r3, [r5, #0]
 800d134:	f7f4 f8e2 	bl	80012fc <_sbrk>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_sbrk_r+0x1a>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_sbrk_r+0x1a>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	200020ec 	.word	0x200020ec

0800d148 <memcpy>:
 800d148:	440a      	add	r2, r1
 800d14a:	4291      	cmp	r1, r2
 800d14c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d150:	d100      	bne.n	800d154 <memcpy+0xc>
 800d152:	4770      	bx	lr
 800d154:	b510      	push	{r4, lr}
 800d156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d15e:	4291      	cmp	r1, r2
 800d160:	d1f9      	bne.n	800d156 <memcpy+0xe>
 800d162:	bd10      	pop	{r4, pc}

0800d164 <_free_r>:
 800d164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d166:	2900      	cmp	r1, #0
 800d168:	d044      	beq.n	800d1f4 <_free_r+0x90>
 800d16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d16e:	9001      	str	r0, [sp, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f1a1 0404 	sub.w	r4, r1, #4
 800d176:	bfb8      	it	lt
 800d178:	18e4      	addlt	r4, r4, r3
 800d17a:	f7ff ff7f 	bl	800d07c <__malloc_lock>
 800d17e:	4a1e      	ldr	r2, [pc, #120]	; (800d1f8 <_free_r+0x94>)
 800d180:	9801      	ldr	r0, [sp, #4]
 800d182:	6813      	ldr	r3, [r2, #0]
 800d184:	b933      	cbnz	r3, 800d194 <_free_r+0x30>
 800d186:	6063      	str	r3, [r4, #4]
 800d188:	6014      	str	r4, [r2, #0]
 800d18a:	b003      	add	sp, #12
 800d18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d190:	f7ff bf7a 	b.w	800d088 <__malloc_unlock>
 800d194:	42a3      	cmp	r3, r4
 800d196:	d908      	bls.n	800d1aa <_free_r+0x46>
 800d198:	6825      	ldr	r5, [r4, #0]
 800d19a:	1961      	adds	r1, r4, r5
 800d19c:	428b      	cmp	r3, r1
 800d19e:	bf01      	itttt	eq
 800d1a0:	6819      	ldreq	r1, [r3, #0]
 800d1a2:	685b      	ldreq	r3, [r3, #4]
 800d1a4:	1949      	addeq	r1, r1, r5
 800d1a6:	6021      	streq	r1, [r4, #0]
 800d1a8:	e7ed      	b.n	800d186 <_free_r+0x22>
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	b10b      	cbz	r3, 800d1b4 <_free_r+0x50>
 800d1b0:	42a3      	cmp	r3, r4
 800d1b2:	d9fa      	bls.n	800d1aa <_free_r+0x46>
 800d1b4:	6811      	ldr	r1, [r2, #0]
 800d1b6:	1855      	adds	r5, r2, r1
 800d1b8:	42a5      	cmp	r5, r4
 800d1ba:	d10b      	bne.n	800d1d4 <_free_r+0x70>
 800d1bc:	6824      	ldr	r4, [r4, #0]
 800d1be:	4421      	add	r1, r4
 800d1c0:	1854      	adds	r4, r2, r1
 800d1c2:	42a3      	cmp	r3, r4
 800d1c4:	6011      	str	r1, [r2, #0]
 800d1c6:	d1e0      	bne.n	800d18a <_free_r+0x26>
 800d1c8:	681c      	ldr	r4, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	6053      	str	r3, [r2, #4]
 800d1ce:	440c      	add	r4, r1
 800d1d0:	6014      	str	r4, [r2, #0]
 800d1d2:	e7da      	b.n	800d18a <_free_r+0x26>
 800d1d4:	d902      	bls.n	800d1dc <_free_r+0x78>
 800d1d6:	230c      	movs	r3, #12
 800d1d8:	6003      	str	r3, [r0, #0]
 800d1da:	e7d6      	b.n	800d18a <_free_r+0x26>
 800d1dc:	6825      	ldr	r5, [r4, #0]
 800d1de:	1961      	adds	r1, r4, r5
 800d1e0:	428b      	cmp	r3, r1
 800d1e2:	bf04      	itt	eq
 800d1e4:	6819      	ldreq	r1, [r3, #0]
 800d1e6:	685b      	ldreq	r3, [r3, #4]
 800d1e8:	6063      	str	r3, [r4, #4]
 800d1ea:	bf04      	itt	eq
 800d1ec:	1949      	addeq	r1, r1, r5
 800d1ee:	6021      	streq	r1, [r4, #0]
 800d1f0:	6054      	str	r4, [r2, #4]
 800d1f2:	e7ca      	b.n	800d18a <_free_r+0x26>
 800d1f4:	b003      	add	sp, #12
 800d1f6:	bd30      	pop	{r4, r5, pc}
 800d1f8:	200020e4 	.word	0x200020e4

0800d1fc <_malloc_usable_size_r>:
 800d1fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d200:	1f18      	subs	r0, r3, #4
 800d202:	2b00      	cmp	r3, #0
 800d204:	bfbc      	itt	lt
 800d206:	580b      	ldrlt	r3, [r1, r0]
 800d208:	18c0      	addlt	r0, r0, r3
 800d20a:	4770      	bx	lr

0800d20c <_init>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr

0800d218 <_fini>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	bf00      	nop
 800d21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21e:	bc08      	pop	{r3}
 800d220:	469e      	mov	lr, r3
 800d222:	4770      	bx	lr

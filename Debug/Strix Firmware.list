
Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800860c  0800860c  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  0800860c  0800860c  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800860c  0800860c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e48  20000160  08008774  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00001a00  20001fa8  08008774  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d6a  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003374  00000000  00000000  00031f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  000352b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd9  00000000  00000000  00036298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004fa6  00000000  00000000  00036e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136e5  00000000  00000000  0003be17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9018  00000000  00000000  0004f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044cc  00000000  00000000  00138514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008530 	.word	0x08008530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	08008530 	.word	0x08008530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb2b 	bl	80008de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f838 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f902 	bl	8000494 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000290:	f000 f884 	bl	800039c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000294:	f006 fe4c 	bl	8006f30 <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 8000298:	f000 f8be 	bl	8000418 <MX_SPI3_Init>

  while (1)
  {


	sprintf(USBtxBuf, "%u\r\n", count);
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <main+0x6c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	461a      	mov	r2, r3
 80002a2:	4913      	ldr	r1, [pc, #76]	; (80002f0 <main+0x70>)
 80002a4:	4813      	ldr	r0, [pc, #76]	; (80002f4 <main+0x74>)
 80002a6:	f007 fc9f 	bl	8007be8 <siprintf>
	count++;
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <main+0x6c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3301      	adds	r3, #1
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <main+0x6c>)
 80002b4:	701a      	strb	r2, [r3, #0]

	if (count > 100) {
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <main+0x6c>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b64      	cmp	r3, #100	; 0x64
 80002bc:	d902      	bls.n	80002c4 <main+0x44>
		count = 1;
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <main+0x6c>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) USBtxBuf, strlen(USBtxBuf));
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <main+0x74>)
 80002c6:	f7ff ff83 	bl	80001d0 <strlen>
 80002ca:	4603      	mov	r3, r0
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	4619      	mov	r1, r3
 80002d0:	4808      	ldr	r0, [pc, #32]	; (80002f4 <main+0x74>)
 80002d2:	f006 feeb 	bl	80070ac <CDC_Transmit_FS>

	if (count == 50) {
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <main+0x6c>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b32      	cmp	r3, #50	; 0x32
 80002dc:	d1de      	bne.n	800029c <main+0x1c>
		HAL_GPIO_TogglePin(Pyro_F_Trigger_GPIO_Port, Pyro_F_Trigger_Pin);
 80002de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <main+0x78>)
 80002e4:	f000 fe68 	bl	8000fb8 <HAL_GPIO_TogglePin>
	sprintf(USBtxBuf, "%u\r\n", count);
 80002e8:	e7d8      	b.n	800029c <main+0x1c>
 80002ea:	bf00      	nop
 80002ec:	20000000 	.word	0x20000000
 80002f0:	08008548 	.word	0x08008548
 80002f4:	20000244 	.word	0x20000244
 80002f8:	48001000 	.word	0x48001000

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b096      	sub	sp, #88	; 0x58
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0314 	add.w	r3, r7, #20
 8000306:	2244      	movs	r2, #68	; 0x44
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f007 fc8c 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800031e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000322:	f002 f819 	bl	8002358 <HAL_PWREx_ControlVoltageScaling>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800032c:	f000 f98c 	bl	8000648 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000330:	2301      	movs	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033e:	2303      	movs	r3, #3
 8000340:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000342:	2301      	movs	r3, #1
 8000344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000346:	230a      	movs	r3, #10
 8000348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800034a:	2307      	movs	r3, #7
 800034c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800034e:	2302      	movs	r3, #2
 8000350:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000352:	2302      	movs	r3, #2
 8000354:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	4618      	mov	r0, r3
 800035c:	f002 f862 	bl	8002424 <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000366:	f000 f96f 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036e:	2303      	movs	r3, #3
 8000370:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	2104      	movs	r1, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fc2a 	bl	8002bdc <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800038e:	f000 f95b 	bl	8000648 <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3758      	adds	r7, #88	; 0x58
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_SPI1_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_SPI1_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_SPI1_Init+0x74>)
 80003a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_SPI1_Init+0x74>)
 80003b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_SPI1_Init+0x74>)
 80003be:	2202      	movs	r2, #2
 80003c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_SPI1_Init+0x74>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_SPI1_Init+0x74>)
 80003ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_SPI1_Init+0x74>)
 80003d2:	2220      	movs	r2, #32
 80003d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_SPI1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_SPI1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_SPI1_Init+0x74>)
 80003ea:	2207      	movs	r2, #7
 80003ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_SPI1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_SPI1_Init+0x74>)
 80003fc:	f003 faa0 	bl	8003940 <HAL_SPI_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 f91f 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000017c 	.word	0x2000017c
 8000414:	40013000 	.word	0x40013000

08000418 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_SPI3_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <MX_SPI3_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_SPI3_Init+0x74>)
 8000424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_SPI3_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_SPI3_Init+0x74>)
 8000432:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000436:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_SPI3_Init+0x74>)
 800043a:	2202      	movs	r2, #2
 800043c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_SPI3_Init+0x74>)
 8000440:	2201      	movs	r2, #1
 8000442:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_SPI3_Init+0x74>)
 8000446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800044a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_SPI3_Init+0x74>)
 800044e:	2220      	movs	r2, #32
 8000450:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_SPI3_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_SPI3_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_SPI3_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_SPI3_Init+0x74>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_SPI3_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_SPI3_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_SPI3_Init+0x74>)
 8000478:	f003 fa62 	bl	8003940 <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 f8e1 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200001e0 	.word	0x200001e0
 8000490:	40003c00 	.word	0x40003c00

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 031c 	add.w	r3, r7, #28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004aa:	4b63      	ldr	r3, [pc, #396]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a62      	ldr	r2, [pc, #392]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b60      	ldr	r3, [pc, #384]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0310 	and.w	r3, r3, #16
 80004be:	61bb      	str	r3, [r7, #24]
 80004c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c2:	4b5d      	ldr	r3, [pc, #372]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a5c      	ldr	r2, [pc, #368]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b5a      	ldr	r3, [pc, #360]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b57      	ldr	r3, [pc, #348]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a56      	ldr	r2, [pc, #344]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b54      	ldr	r3, [pc, #336]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f2:	4b51      	ldr	r3, [pc, #324]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a50      	ldr	r2, [pc, #320]	; (8000638 <MX_GPIO_Init+0x1a4>)
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b4e      	ldr	r3, [pc, #312]	; (8000638 <MX_GPIO_Init+0x1a4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b4b      	ldr	r3, [pc, #300]	; (8000638 <MX_GPIO_Init+0x1a4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a4a      	ldr	r2, [pc, #296]	; (8000638 <MX_GPIO_Init+0x1a4>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b48      	ldr	r3, [pc, #288]	; (8000638 <MX_GPIO_Init+0x1a4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b45      	ldr	r3, [pc, #276]	; (8000638 <MX_GPIO_Init+0x1a4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a44      	ldr	r2, [pc, #272]	; (8000638 <MX_GPIO_Init+0x1a4>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b42      	ldr	r3, [pc, #264]	; (8000638 <MX_GPIO_Init+0x1a4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 800053a:	2200      	movs	r2, #0
 800053c:	f243 3189 	movw	r1, #13193	; 0x3389
 8000540:	483e      	ldr	r0, [pc, #248]	; (800063c <MX_GPIO_Init+0x1a8>)
 8000542:	f000 fd21 	bl	8000f88 <HAL_GPIO_WritePin>
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 8000546:	2200      	movs	r2, #0
 8000548:	f24c 1144 	movw	r1, #49476	; 0xc144
 800054c:	483c      	ldr	r0, [pc, #240]	; (8000640 <MX_GPIO_Init+0x1ac>)
 800054e:	f000 fd1b 	bl	8000f88 <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8000552:	2200      	movs	r2, #0
 8000554:	f647 4104 	movw	r1, #31748	; 0x7c04
 8000558:	483a      	ldr	r0, [pc, #232]	; (8000644 <MX_GPIO_Init+0x1b0>)
 800055a:	f000 fd15 	bl	8000f88 <HAL_GPIO_WritePin>
                          |Status_LED_Pin|KX134_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS3MDL_NCS_GPIO_Port, LIS3MDL_NCS_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 fd0e 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BMP388_Int_Pin BMI088_Accel_Int_Pin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin|BMI088_Accel_Int_Pin;
 800056c:	2306      	movs	r3, #6
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	4619      	mov	r1, r3
 800057e:	482f      	ldr	r0, [pc, #188]	; (800063c <MX_GPIO_Init+0x1a8>)
 8000580:	f000 fb58 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMP388_NCS_Pin Pyro_B_Trigger_Pin Pyro_C_Trigger_Pin Pyro_D_Trigger_Pin
                           Pyro_E_Trigger_Pin Pyro_F_Trigger_Pin BMI088_Accel_NCS_Pin */
  GPIO_InitStruct.Pin = BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 8000584:	f243 3389 	movw	r3, #13193	; 0x3389
 8000588:	61fb      	str	r3, [r7, #28]
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	4619      	mov	r1, r3
 800059c:	4827      	ldr	r0, [pc, #156]	; (800063c <MX_GPIO_Init+0x1a8>)
 800059e:	f000 fb49 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pyro_A_Trigger_Pin Continuity_LED_D_Pin Continuity_LED_C_Pin ADXL375_NCS_Pin
                           BMI088_Gyro_NCS_Pin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 80005a2:	f24c 1344 	movw	r3, #49476	; 0xc144
 80005a6:	61fb      	str	r3, [r7, #28]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	4821      	ldr	r0, [pc, #132]	; (8000640 <MX_GPIO_Init+0x1ac>)
 80005bc:	f000 fb3a 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Continuity_LED_B_Pin Continuity_LED_A_Pin Continuity_LED_E_Pin Continuity_LED_F_Pin
                           Status_LED_Pin KX134_NCS_Pin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 80005c0:	f647 4304 	movw	r3, #31748	; 0x7c04
 80005c4:	61fb      	str	r3, [r7, #28]
                          |Status_LED_Pin|KX134_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	481a      	ldr	r0, [pc, #104]	; (8000644 <MX_GPIO_Init+0x1b0>)
 80005da:	f000 fb2b 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS3MDL_NCS_Pin */
  GPIO_InitStruct.Pin = LIS3MDL_NCS_Pin;
 80005de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LIS3MDL_NCS_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fb1b 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS3MDL_Int_Pin KX134_Int_Pin */
  GPIO_InitStruct.Pin = LIS3MDL_Int_Pin|KX134_Int_Pin;
 80005fe:	2303      	movs	r3, #3
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0x1b0>)
 8000612:	f000 fb0f 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_Int_Pin BMI088_Gyro_Int_Pin */
  GPIO_InitStruct.Pin = ADXL375_Int_Pin|BMI088_Gyro_Int_Pin;
 8000616:	f44f 7320 	mov.w	r3, #640	; 0x280
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_GPIO_Init+0x1ac>)
 800062c:	f000 fb02 	bl	8000c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000630:	bf00      	nop
 8000632:	3730      	adds	r7, #48	; 0x30
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48001000 	.word	0x48001000
 8000640:	48000400 	.word	0x48000400
 8000644:	48000c00 	.word	0x48000c00

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2104      	movs	r1, #4
 8000654:	4801      	ldr	r0, [pc, #4]	; (800065c <Error_Handler+0x14>)
 8000656:	f000 fc97 	bl	8000f88 <HAL_GPIO_WritePin>
  while (1)
 800065a:	e7fe      	b.n	800065a <Error_Handler+0x12>
 800065c:	48000400 	.word	0x48000400

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x44>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_MspInit+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6613      	str	r3, [r2, #96]	; 0x60
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_MspInit+0x44>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <HAL_MspInit+0x44>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6593      	str	r3, [r2, #88]	; 0x58
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <HAL_SPI_MspInit+0xd8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d128      	bne.n	800071c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 80006d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006d4:	6613      	str	r3, [r2, #96]	; 0x60
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a27      	ldr	r2, [pc, #156]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80006fa:	2338      	movs	r3, #56	; 0x38
 80006fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800070a:	2305      	movs	r3, #5
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	481c      	ldr	r0, [pc, #112]	; (8000788 <HAL_SPI_MspInit+0xe0>)
 8000716:	f000 fa8d 	bl	8000c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800071a:	e02d      	b.n	8000778 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1a      	ldr	r2, [pc, #104]	; (800078c <HAL_SPI_MspInit+0xe4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d128      	bne.n	8000778 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 800072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_SPI_MspInit+0xdc>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000756:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000768:	2306      	movs	r3, #6
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <HAL_SPI_MspInit+0xe8>)
 8000774:	f000 fa5e 	bl	8000c34 <HAL_GPIO_Init>
}
 8000778:	bf00      	nop
 800077a:	3730      	adds	r7, #48	; 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40013000 	.word	0x40013000
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400
 800078c:	40003c00 	.word	0x40003c00
 8000790:	48000800 	.word	0x48000800

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f8d2 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <OTG_FS_IRQHandler+0x10>)
 80007ee:	f000 fd50 	bl	8001292 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20001734 	.word	0x20001734

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f007 fa04 	bl	8007c38 <__errno>
 8000830:	4603      	mov	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20018000 	.word	0x20018000
 800085c:	00000800 	.word	0x00000800
 8000860:	2000024c 	.word	0x2000024c
 8000864:	20001fa8 	.word	0x20001fa8

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000890:	f7ff ffea 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f007 f9c3 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff fcdf 	bl	8000280 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80008d0:	08008614 	.word	0x08008614
  ldr r2, =_sbss
 80008d4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80008d8:	20001fa8 	.word	0x20001fa8

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>

080008de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f961 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ee:	200f      	movs	r0, #15
 80008f0:	f000 f80e 	bl	8000910 <HAL_InitTick>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	e001      	b.n	8000904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000900:	f7ff feae 	bl	8000660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000904:	79fb      	ldrb	r3, [r7, #7]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_InitTick+0x6c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d023      	beq.n	800096c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_InitTick+0x70>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_InitTick+0x6c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f96d 	bl	8000c1a <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10f      	bne.n	8000966 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d809      	bhi.n	8000960 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000954:	f000 f937 	bl	8000bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_InitTick+0x74>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e007      	b.n	8000970 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e004      	b.n	8000970 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e001      	b.n	8000970 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000000c 	.word	0x2000000c
 8000980:	20000004 	.word	0x20000004
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	20000250 	.word	0x20000250

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000250 	.word	0x20000250

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffde 	bl	80009b0 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000000c 	.word	0x2000000c

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff3e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffa2 	bl	8000b6c <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c42:	e17f      	b.n	8000f44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 8171 	beq.w	8000f3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d005      	beq.n	8000c74 <HAL_GPIO_Init+0x40>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d118      	bne.n	8000d14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	6939      	ldr	r1, [r7, #16]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80ac 	beq.w	8000f3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <HAL_GPIO_Init+0x330>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a5e      	ldr	r2, [pc, #376]	; (8000f64 <HAL_GPIO_Init+0x330>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <HAL_GPIO_Init+0x330>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dfe:	4a5a      	ldr	r2, [pc, #360]	; (8000f68 <HAL_GPIO_Init+0x334>)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e28:	d025      	beq.n	8000e76 <HAL_GPIO_Init+0x242>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <HAL_GPIO_Init+0x338>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01f      	beq.n	8000e72 <HAL_GPIO_Init+0x23e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <HAL_GPIO_Init+0x33c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x23a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4d      	ldr	r2, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x340>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x236>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x344>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x232>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_GPIO_Init+0x348>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x22e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_GPIO_Init+0x34c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x22a>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00c      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00a      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x244>
 8000e76:	2300      	movs	r3, #0
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e88:	4937      	ldr	r1, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x334>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eba:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f47f ae78 	bne.w	8000c44 <HAL_GPIO_Init+0x10>
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	48001400 	.word	0x48001400
 8000f80:	48001800 	.word	0x48001800
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43d9      	mvns	r1, r3
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	400b      	ands	r3, r1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b08f      	sub	sp, #60	; 0x3c
 8000ff0:	af0a      	add	r7, sp, #40	; 0x28
 8000ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e116      	b.n	800122c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f006 f9a1 	bl	8007360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fdfc 	bl	8003c3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	687e      	ldr	r6, [r7, #4]
 800104a:	466d      	mov	r5, sp
 800104c:	f106 0410 	add.w	r4, r6, #16
 8001050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001060:	1d33      	adds	r3, r6, #4
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f002 fd0e 	bl	8003a86 <USB_CoreInit>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0d7      	b.n	800122c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fdea 	bl	8003c5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e04a      	b.n	8001124 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	333d      	adds	r3, #61	; 0x3d
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	333c      	adds	r3, #60	; 0x3c
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	b298      	uxth	r0, r3
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3356      	adds	r3, #86	; 0x56
 80010ca:	4602      	mov	r2, r0
 80010cc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3340      	adds	r3, #64	; 0x40
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3344      	adds	r3, #68	; 0x44
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	3348      	adds	r3, #72	; 0x48
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	334c      	adds	r3, #76	; 0x4c
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3301      	adds	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3af      	bcc.n	800108e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e044      	b.n	80011be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3b5      	bcc.n	8001134 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	687e      	ldr	r6, [r7, #4]
 80011d0:	466d      	mov	r5, sp
 80011d2:	f106 0410 	add.w	r4, r6, #16
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e6:	1d33      	adds	r3, r6, #4
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f002 fd82 	bl	8003cf4 <USB_DevInit>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e014      	b.n	800122c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2b01      	cmp	r3, #1
 8001218:	d102      	bne.n	8001220 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f001 f86a 	bl	80022f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fd30 	bl	8004c8a <USB_DevDisconnect>

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001234 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_PCD_Start+0x1c>
 800124c:	2302      	movs	r3, #2
 800124e:	e01c      	b.n	800128a <HAL_PCD_Start+0x56>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001264:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fcd1 	bl	8003c18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fce4 	bl	8004c48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001292:	b590      	push	{r4, r7, lr}
 8001294:	b08d      	sub	sp, #52	; 0x34
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fda2 	bl	8004df2 <USB_GetMode>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 847e 	bne.w	8001bb2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fd06 	bl	8004ccc <USB_ReadInterrupts>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8474 	beq.w	8001bb0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fcf3 	bl	8004ccc <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d107      	bne.n	8001300 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f002 0202 	and.w	r2, r2, #2
 80012fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fce1 	bl	8004ccc <USB_ReadInterrupts>
 800130a:	4603      	mov	r3, r0
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b10      	cmp	r3, #16
 8001312:	d161      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0210 	bic.w	r2, r2, #16
 8001322:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 020f 	and.w	r2, r3, #15
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	3304      	adds	r3, #4
 8001342:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	0c5b      	lsrs	r3, r3, #17
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2b02      	cmp	r3, #2
 800134e:	d124      	bne.n	800139a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d035      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	6a38      	ldr	r0, [r7, #32]
 8001370:	f003 fb18 	bl	80049a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001380:	441a      	add	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001392:	441a      	add	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	e016      	b.n	80013c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	0c5b      	lsrs	r3, r3, #17
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d110      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013ac:	2208      	movs	r2, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f003 faf7 	bl	80049a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c2:	441a      	add	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0210 	orr.w	r2, r2, #16
 80013d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fc75 	bl	8004ccc <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013ec:	f040 80a7 	bne.w	800153e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fc7a 	bl	8004cf2 <USB_ReadDevAllOutEpInterrupt>
 80013fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001400:	e099      	b.n	8001536 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 808e 	beq.w	800152a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fc9e 	bl	8004d5a <USB_ReadDevOutEPInterrupt>
 800141e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001436:	461a      	mov	r2, r3
 8001438:	2301      	movs	r3, #1
 800143a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800143c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fe7e 	bl	8002140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00c      	beq.n	8001468 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145a:	461a      	mov	r2, r3
 800145c:	2308      	movs	r3, #8
 800145e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 feba 	bl	80021dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147e:	461a      	mov	r2, r3
 8001480:	2310      	movs	r3, #16
 8001482:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d030      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b80      	cmp	r3, #128	; 0x80
 8001498:	d109      	bne.n	80014ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	3304      	adds	r3, #4
 80014c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	78db      	ldrb	r3, [r3, #3]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d108      	bne.n	80014de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2200      	movs	r2, #0
 80014d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f006 f895 	bl	8007608 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ea:	461a      	mov	r2, r3
 80014ec:	2302      	movs	r3, #2
 80014ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	2320      	movs	r3, #32
 800150a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001522:	461a      	mov	r2, r3
 8001524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001528:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	f47f af62 	bne.w	8001402 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fbc2 	bl	8004ccc <USB_ReadInterrupts>
 8001548:	4603      	mov	r3, r0
 800154a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001552:	f040 80a4 	bne.w	800169e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fbe3 	bl	8004d26 <USB_ReadDevAllInEpInterrupt>
 8001560:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001566:	e096      	b.n	8001696 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 808b 	beq.w	800168a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fc09 	bl	8004d96 <USB_ReadDevInEPInterrupt>
 8001584:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	2201      	movs	r2, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69f9      	ldr	r1, [r7, #28]
 80015ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015b0:	4013      	ands	r3, r2
 80015b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c0:	461a      	mov	r2, r3
 80015c2:	2301      	movs	r3, #1
 80015c4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f005 ff86 	bl	80074de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2308      	movs	r3, #8
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2310      	movs	r3, #16
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001632:	6a38      	ldr	r0, [r7, #32]
 8001634:	f002 fca0 	bl	8003f78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	3338      	adds	r3, #56	; 0x38
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2200      	movs	r2, #0
 8001658:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f005 ffe3 	bl	800762c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001672:	461a      	mov	r2, r3
 8001674:	2302      	movs	r3, #2
 8001676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fcd2 	bl	800202e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f af65 	bne.w	8001568 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fb12 	bl	8004ccc <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b2:	d122      	bne.n	80016fa <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016da:	2100      	movs	r1, #0
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f006 fa17 	bl	8007b10 <HAL_PCDEx_LPM_Callback>
 80016e2:	e002      	b.n	80016ea <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f005 ff67 	bl	80075b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fae4 	bl	8004ccc <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800170e:	d112      	bne.n	8001736 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f005 ff23 	bl	800756c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001734:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fac6 	bl	8004ccc <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800174a:	d121      	bne.n	8001790 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800175a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d111      	bne.n	800178a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	f003 020f 	and.w	r2, r3, #15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001780:	2101      	movs	r1, #1
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f006 f9c4 	bl	8007b10 <HAL_PCDEx_LPM_Callback>
 8001788:	e002      	b.n	8001790 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f005 feee 	bl	800756c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fa99 	bl	8004ccc <USB_ReadInterrupts>
 800179a:	4603      	mov	r3, r0
 800179c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a4:	f040 80b5 	bne.w	8001912 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2110      	movs	r1, #16
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fbd8 	bl	8003f78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017cc:	e046      	b.n	800185c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017da:	461a      	mov	r2, r3
 80017dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180e:	461a      	mov	r2, r3
 8001810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001814:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001826:	0151      	lsls	r1, r2, #5
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	440a      	add	r2, r1
 800182c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001834:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	0151      	lsls	r1, r2, #5
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	440a      	add	r2, r1
 800184c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001854:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	429a      	cmp	r2, r3
 8001864:	d3b3      	bcc.n	80017ce <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001874:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001878:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001892:	f043 030b 	orr.w	r3, r3, #11
 8001896:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a8:	f043 030b 	orr.w	r3, r3, #11
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	e015      	b.n	80018dc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	f043 030b 	orr.w	r3, r3, #11
 80018da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f003 faa9 	bl	8004e54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f9d8 	bl	8004ccc <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001926:	d124      	bne.n	8001972 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f003 fa6e 	bl	8004e0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fb9b 	bl	8004072 <USB_GetDevSpeed>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681c      	ldr	r4, [r3, #0]
 8001948:	f001 fad2 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 800194c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4620      	mov	r0, r4
 8001958:	f002 f8c2 	bl	8003ae0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f005 fde6 	bl	800752e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001970:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 f9a8 	bl	8004ccc <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b08      	cmp	r3, #8
 8001984:	d10a      	bne.n	800199c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f005 fdc3 	bl	8007512 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f002 0208 	and.w	r2, r2, #8
 800199a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 f993 	bl	8004ccc <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	d122      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	e014      	b.n	80019ec <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 faf3 	bl	8001fcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3e5      	bcc.n	80019c2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 f966 	bl	8004ccc <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a0a:	d13b      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e02b      	b.n	8001a6a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3340      	adds	r3, #64	; 0x40
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d115      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da12      	bge.n	8001a64 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	333f      	adds	r3, #63	; 0x3f
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fab4 	bl	8001fcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3301      	adds	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3ce      	bcc.n	8001a12 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 f91f 	bl	8004ccc <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a98:	d155      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9e:	e045      	b.n	8001b2c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d12e      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da2b      	bge.n	8001b26 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ada:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d121      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6053      	str	r3, [r2, #4]
            break;
 8001b24:	e007      	b.n	8001b36 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3b4      	bcc.n	8001aa0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 f8be 	bl	8004ccc <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5a:	d10a      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f005 fd77 	bl	8007650 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f8a8 	bl	8004ccc <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d115      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f005 fd67 	bl	800766c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e000      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x920>
      return;
 8001bb0:	bf00      	nop
    }
  }
}
 8001bb2:	3734      	adds	r7, #52	; 0x34
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_SetAddress+0x1a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e013      	b.n	8001bfa <HAL_PCD_SetAddress+0x42>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f806 	bl	8004bfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	4608      	mov	r0, r1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	460b      	mov	r3, r1
 8001c16:	803b      	strh	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da0f      	bge.n	8001c48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	3338      	adds	r3, #56	; 0x38
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	705a      	strb	r2, [r3, #1]
 8001c46:	e00f      	b.n	8001c68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c74:	883a      	ldrh	r2, [r7, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	78ba      	ldrb	r2, [r7, #2]
 8001c7e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c92:	78bb      	ldrb	r3, [r7, #2]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d102      	bne.n	8001c9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_PCD_EP_Open+0xaa>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e00e      	b.n	8001cca <HAL_PCD_EP_Open+0xc8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 f9f8 	bl	80040b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da0f      	bge.n	8001d06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 020f 	and.w	r2, r3, #15
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	3338      	adds	r3, #56	; 0x38
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	705a      	strb	r2, [r3, #1]
 8001d04:	e00f      	b.n	8001d26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_PCD_EP_Close+0x6e>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e00e      	b.n	8001d5e <HAL_PCD_EP_Close+0x8c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fa36 	bl	80041c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	460b      	mov	r3, r1
 8001d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d76:	7afb      	ldrb	r3, [r7, #11]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2200      	movs	r2, #0
 8001da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6979      	ldr	r1, [r7, #20]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fadc 	bl	8004378 <USB_EPStartXfer>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001dec:	681b      	ldr	r3, [r3, #0]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	460b      	mov	r3, r1
 8001e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3338      	adds	r3, #56	; 0x38
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2201      	movs	r2, #1
 8001e38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6979      	ldr	r1, [r7, #20]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fa93 	bl	8004378 <USB_EPStartXfer>

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d901      	bls.n	8001e7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e04e      	b.n	8001f18 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da0f      	bge.n	8001ea2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	3338      	adds	r3, #56	; 0x38
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	705a      	strb	r2, [r3, #1]
 8001ea0:	e00d      	b.n	8001ebe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_SetStall+0x82>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01c      	b.n	8001f18 <HAL_PCD_EP_SetStall+0xbc>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fdb1 	bl	8004a54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f002 ffa3 	bl	8004e54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d901      	bls.n	8001f3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e042      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0f      	bge.n	8001f66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
 8001f64:	e00f      	b.n	8001f86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 020f 	and.w	r2, r3, #15
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_PCD_EP_ClrStall+0x86>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e00e      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0xa4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fdbb 	bl	8004b30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da0c      	bge.n	8001ffa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	3338      	adds	r3, #56	; 0x38
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e00c      	b.n	8002014 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fbde 	bl	80047dc <USB_EPStopXfer>
 8002020:	4603      	mov	r3, r0
 8002022:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002024:	7afb      	ldrb	r3, [r7, #11]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b088      	sub	sp, #32
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	3338      	adds	r3, #56	; 0x38
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d901      	bls.n	8002066 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e067      	b.n	8002136 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	429a      	cmp	r2, r3
 800207a:	d902      	bls.n	8002082 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3303      	adds	r3, #3
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208a:	e026      	b.n	80020da <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d902      	bls.n	80020a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3303      	adds	r3, #3
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	68d9      	ldr	r1, [r3, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f002 fc37 	bl	8004930 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	441a      	add	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	441a      	add	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d809      	bhi.n	8002104 <PCD_WriteEmptyTxFifo+0xd6>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d203      	bcs.n	8002104 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1c3      	bne.n	800208c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d811      	bhi.n	8002134 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	2201      	movs	r2, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	43db      	mvns	r3, r3
 800212a:	6939      	ldr	r1, [r7, #16]
 800212c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002130:	4013      	ands	r3, r2
 8002132:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	333c      	adds	r3, #60	; 0x3c
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d124      	bne.n	80021c0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	461a      	mov	r2, r3
 800218e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002192:	6093      	str	r3, [r2, #8]
 8002194:	e01a      	b.n	80021cc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	2320      	movs	r3, #32
 80021b0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f005 f975 	bl	80074a8 <HAL_PCD_DataOutStageCallback>
 80021be:	e005      	b.n	80021cc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f005 f96e 	bl	80074a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	4f54310a 	.word	0x4f54310a

080021dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	333c      	adds	r3, #60	; 0x3c
 80021f4:	3304      	adds	r3, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <PCD_EP_OutSetupPacket_int+0x64>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d90e      	bls.n	8002230 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002228:	461a      	mov	r2, r3
 800222a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800222e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f005 f927 	bl	8007484 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	4f54300a 	.word	0x4f54300a

08002244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
 8002250:	4613      	mov	r3, r2
 8002252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002262:	883b      	ldrh	r3, [r7, #0]
 8002264:	0419      	lsls	r1, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	430a      	orrs	r2, r1
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
 8002270:	e028      	b.n	80022c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e00d      	b.n	80022a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	3340      	adds	r3, #64	; 0x40
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3ec      	bcc.n	8002286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022ac:	883b      	ldrh	r3, [r7, #0]
 80022ae:	0418      	lsls	r0, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4302      	orrs	r2, r0
 80022bc:	3340      	adds	r3, #64	; 0x40
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002326:	f043 0303 	orr.w	r3, r3, #3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HAL_PWREx_GetVoltageRange+0x18>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40007000 	.word	0x40007000

08002358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002366:	d130      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002374:	d038      	beq.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237e:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2232      	movs	r2, #50	; 0x32
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	3301      	adds	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239c:	e002      	b.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d102      	bne.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f2      	bne.n	800239e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d110      	bne.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e00f      	b.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d007      	beq.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e0:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40007000 	.word	0x40007000
 80023fc:	20000004 	.word	0x20000004
 8002400:	431bde83 	.word	0x431bde83

08002404 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_PWREx_EnableVddUSB+0x1c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_PWREx_EnableVddUSB+0x1c>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6053      	str	r3, [r2, #4]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40007000 	.word	0x40007000

08002424 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e3ca      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	4b97      	ldr	r3, [pc, #604]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002440:	4b94      	ldr	r3, [pc, #592]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80e4 	beq.w	8002620 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_RCC_OscConfig+0x4a>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	f040 808b 	bne.w	800257c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b01      	cmp	r3, #1
 800246a:	f040 8087 	bne.w	800257c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x62>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e3a2      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <HAL_RCC_OscConfig+0x7c>
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249e:	e005      	b.n	80024ac <HAL_RCC_OscConfig+0x88>
 80024a0:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d223      	bcs.n	80024f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd27 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e383      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c4:	4b73      	ldr	r3, [pc, #460]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a72      	ldr	r2, [pc, #456]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024ca:	f043 0308 	orr.w	r3, r3, #8
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	496d      	ldr	r1, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e2:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	4968      	ldr	r1, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
 80024f6:	e025      	b.n	8002544 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4960      	ldr	r1, [pc, #384]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	495b      	ldr	r1, [pc, #364]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fce7 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e343      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002544:	f000 fc4a 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b52      	ldr	r3, [pc, #328]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	4950      	ldr	r1, [pc, #320]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	4a4e      	ldr	r2, [pc, #312]	; (800269c <HAL_RCC_OscConfig+0x278>)
 8002562:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002564:	4b4e      	ldr	r3, [pc, #312]	; (80026a0 <HAL_RCC_OscConfig+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe f9d1 	bl	8000910 <HAL_InitTick>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d052      	beq.n	800261e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	e327      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d032      	beq.n	80025ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002590:	f7fe fa0e 	bl	80009b0 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002598:	f7fe fa0a 	bl	80009b0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e310      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025aa:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a36      	ldr	r2, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4931      	ldr	r1, [pc, #196]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	492c      	ldr	r1, [pc, #176]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
 80025e8:	e01a      	b.n	8002620 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f6:	f7fe f9db 	bl	80009b0 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025fe:	f7fe f9d7 	bl	80009b0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e2dd      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x1da>
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800261e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d074      	beq.n	8002716 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b08      	cmp	r3, #8
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x21a>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d10e      	bne.n	8002656 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d10b      	bne.n	8002656 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d064      	beq.n	8002714 <HAL_RCC_OscConfig+0x2f0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d160      	bne.n	8002714 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e2ba      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x24a>
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e026      	b.n	80026bc <HAL_RCC_OscConfig+0x298>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002676:	d115      	bne.n	80026a4 <HAL_RCC_OscConfig+0x280>
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 800267e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a02      	ldr	r2, [pc, #8]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e014      	b.n	80026bc <HAL_RCC_OscConfig+0x298>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	08008598 	.word	0x08008598
 800269c:	20000004 	.word	0x20000004
 80026a0:	20000008 	.word	0x20000008
 80026a4:	4ba0      	ldr	r3, [pc, #640]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a9f      	ldr	r2, [pc, #636]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b9d      	ldr	r3, [pc, #628]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a9c      	ldr	r2, [pc, #624]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe f974 	bl	80009b0 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe f970 	bl	80009b0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e276      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	4b92      	ldr	r3, [pc, #584]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x2a8>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe f960 	bl	80009b0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe f95c 	bl	80009b0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e262      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2d0>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d060      	beq.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d005      	beq.n	8002734 <HAL_RCC_OscConfig+0x310>
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d119      	bne.n	8002762 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d116      	bne.n	8002762 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x328>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e23f      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	4973      	ldr	r1, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	e040      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d023      	beq.n	80027b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276a:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe f91b 	bl	80009b0 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7fe f917 	bl	80009b0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e21d      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	4b65      	ldr	r3, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279c:	4b62      	ldr	r3, [pc, #392]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	495f      	ldr	r1, [pc, #380]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe f8f7 	bl	80009b0 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe f8f3 	bl	80009b0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1f9      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03c      	beq.n	800286a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01c      	beq.n	8002832 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fe:	4a4a      	ldr	r2, [pc, #296]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe f8d2 	bl	80009b0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe f8ce 	bl	80009b0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1d4      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ef      	beq.n	8002810 <HAL_RCC_OscConfig+0x3ec>
 8002830:	e01b      	b.n	800286a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002838:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7fe f8b5 	bl	80009b0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284a:	f7fe f8b1 	bl	80009b0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1b7      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800285e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ef      	bne.n	800284a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80a6 	beq.w	80029c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002892:	6593      	str	r3, [r2, #88]	; 0x58
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_RCC_OscConfig+0x508>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d118      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_OscConfig+0x508>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x508>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028bc:	f7fe f878 	bl	80009b0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c4:	f7fe f874 	bl	80009b0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e17a      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_RCC_OscConfig+0x508>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_OscConfig+0x4d8>
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028fa:	e029      	b.n	8002950 <HAL_RCC_OscConfig+0x52c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d115      	bne.n	8002930 <HAL_RCC_OscConfig+0x50c>
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	4a03      	ldr	r2, [pc, #12]	; (8002928 <HAL_RCC_OscConfig+0x504>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x52c>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	4b9c      	ldr	r3, [pc, #624]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	4a9b      	ldr	r2, [pc, #620]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002940:	4b98      	ldr	r3, [pc, #608]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	4a97      	ldr	r2, [pc, #604]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d016      	beq.n	8002986 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe f82a 	bl	80009b0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe f826 	bl	80009b0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e12a      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ed      	beq.n	8002960 <HAL_RCC_OscConfig+0x53c>
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002986:	f7fe f813 	bl	80009b0 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe f80f 	bl	80009b0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e113      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a4:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ed      	bne.n	800298e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b8:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a79      	ldr	r2, [pc, #484]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80fe 	beq.w	8002bca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	f040 80d0 	bne.w	8002b78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029d8:	4b72      	ldr	r3, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d130      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	3b01      	subs	r3, #1
 80029f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d127      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a18:	2a07      	cmp	r2, #7
 8002a1a:	bf14      	ite	ne
 8002a1c:	2201      	movne	r2, #1
 8002a1e:	2200      	moveq	r2, #0
 8002a20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d113      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	085b      	lsrs	r3, r3, #1
 8002a32:	3b01      	subs	r3, #1
 8002a34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d06e      	beq.n	8002b2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d069      	beq.n	8002b28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0ad      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a70:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4b      	ldr	r2, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a7c:	f7fd ff98 	bl	80009b0 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fd ff94 	bl	80009b0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e09a      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a96:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_RCC_OscConfig+0x784>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ab2:	3a01      	subs	r2, #1
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002abc:	0212      	lsls	r2, r2, #8
 8002abe:	4311      	orrs	r1, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ac4:	0852      	lsrs	r2, r2, #1
 8002ac6:	3a01      	subs	r2, #1
 8002ac8:	0552      	lsls	r2, r2, #21
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ad0:	0852      	lsrs	r2, r2, #1
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0652      	lsls	r2, r2, #25
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002adc:	0912      	lsrs	r2, r2, #4
 8002ade:	0452      	lsls	r2, r2, #17
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	4930      	ldr	r1, [pc, #192]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b00:	f7fd ff56 	bl	80009b0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fd ff52 	bl	80009b0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e058      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b26:	e050      	b.n	8002bca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e04f      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d148      	bne.n	8002bca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b50:	f7fd ff2e 	bl	80009b0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fd ff2a 	bl	80009b0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e030      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x734>
 8002b76:	e028      	b.n	8002bca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d023      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_RCC_OscConfig+0x780>)
 8002b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fd ff11 	bl	80009b0 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	e00c      	b.n	8002bac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fd ff0d 	bl	80009b0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d905      	bls.n	8002bac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e013      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x7b0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ec      	bne.n	8002b92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x7b0>)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	4905      	ldr	r1, [pc, #20]	; (8002bd4 <HAL_RCC_OscConfig+0x7b0>)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x7b4>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
 8002bc4:	e001      	b.n	8002bca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	feeefffc 	.word	0xfeeefffc

08002bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0e7      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d910      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4970      	ldr	r1, [pc, #448]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b6e      	ldr	r3, [pc, #440]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cf      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d908      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4960      	ldr	r1, [pc, #384]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04c      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	4b5a      	ldr	r3, [pc, #360]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d121      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0a6      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d115      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e09a      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c92:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e08e      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e086      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4943      	ldr	r1, [pc, #268]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc4:	f7fd fe74 	bl	80009b0 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fd fe70 	bl	80009b0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e06e      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d208      	bcs.n	8002d22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	492b      	ldr	r1, [pc, #172]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d210      	bcs.n	8002d52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 0207 	bic.w	r2, r3, #7
 8002d38:	4923      	ldr	r1, [pc, #140]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e036      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4918      	ldr	r1, [pc, #96]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4910      	ldr	r1, [pc, #64]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d90:	f000 f824 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	490b      	ldr	r1, [pc, #44]	; (8002dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1fc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fdab 	bl	8000910 <HAL_InitTick>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08008598 	.word	0x08008598
 8002dd4:	20000004 	.word	0x20000004
 8002dd8:	20000008 	.word	0x20000008

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dea:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df4:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x34>
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d121      	bne.n	8002e4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d11e      	bne.n	8002e4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e005      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e38:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_GetSysClockFreq+0x110>)
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	e004      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_GetSysClockFreq+0x110>)
 8002e62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d134      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d003      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0xac>
 8002e80:	e005      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <HAL_RCC_GetSysClockFreq+0x110>)
 8002e84:	617b      	str	r3, [r7, #20]
      break;
 8002e86:	e005      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_RCC_GetSysClockFreq+0x110>)
 8002e8a:	617b      	str	r3, [r7, #20]
      break;
 8002e8c:	e002      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	617b      	str	r3, [r7, #20]
      break;
 8002e92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	fb03 f202 	mul.w	r2, r3, r2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	0e5b      	lsrs	r3, r3, #25
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	080085a8 	.word	0x080085a8
 8002eec:	00f42400 	.word	0x00f42400

08002ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000004 	.word	0x20000004

08002f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff fa0c 	bl	800233c <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
 8002f26:	e014      	b.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f9fc 	bl	800233c <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d10b      	bne.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d919      	bls.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2ba0      	cmp	r3, #160	; 0xa0
 8002f64:	d902      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f66:	2302      	movs	r3, #2
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e013      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e010      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d902      	bls.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f78:	2303      	movs	r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e00a      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d102      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f84:	2302      	movs	r3, #2
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e004      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b70      	cmp	r3, #112	; 0x70
 8002f8e:	d101      	bne.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 0207 	bic.w	r2, r3, #7
 8002f9c:	4909      	ldr	r1, [pc, #36]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d041      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fec:	d02a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ff2:	d824      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff8:	d008      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffe:	d81e      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003008:	d010      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800300a:	e018      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800300c:	4b86      	ldr	r3, [pc, #536]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a85      	ldr	r2, [pc, #532]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003018:	e015      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fabb 	bl	800359c <RCCEx_PLLSAI1_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800302a:	e00c      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3320      	adds	r3, #32
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fba6 	bl	8003784 <RCCEx_PLLSAI2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	74fb      	strb	r3, [r7, #19]
      break;
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800304c:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305a:	4973      	ldr	r1, [pc, #460]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003062:	e001      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d041      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003078:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800307c:	d02a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800307e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003082:	d824      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003088:	d008      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800308a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800308e:	d81e      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003098:	d010      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800309a:	e018      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800309c:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a61      	ldr	r2, [pc, #388]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a8:	e015      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fa73 	bl	800359c <RCCEx_PLLSAI1_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ba:	e00c      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3320      	adds	r3, #32
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fb5e 	bl	8003784 <RCCEx_PLLSAI2_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030cc:	e003      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	74fb      	strb	r3, [r7, #19]
      break;
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030dc:	4b52      	ldr	r3, [pc, #328]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ea:	494f      	ldr	r1, [pc, #316]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030f2:	e001      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a0 	beq.w	8003246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a40      	ldr	r2, [pc, #256]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
 800312c:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003138:	2301      	movs	r3, #1
 800313a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3a      	ldr	r2, [pc, #232]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003148:	f7fd fc32 	bl	80009b0 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800314e:	e009      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003150:	f7fd fc2e 	bl	80009b0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d902      	bls.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	74fb      	strb	r3, [r7, #19]
        break;
 8003162:	e005      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003164:	4b31      	ldr	r3, [pc, #196]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ef      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d15c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003176:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003180:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01f      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	d019      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	4a20      	ldr	r2, [pc, #128]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fd fbed 	bl	80009b0 <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d8:	e00b      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fd fbe9 	bl	80009b0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d902      	bls.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	74fb      	strb	r3, [r7, #19]
            break;
 80031f0:	e006      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ec      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	4904      	ldr	r1, [pc, #16]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800321e:	e009      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
 8003224:	e006      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003234:	7c7b      	ldrb	r3, [r7, #17]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b9e      	ldr	r3, [pc, #632]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	4a9d      	ldr	r2, [pc, #628]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003244:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003252:	4b98      	ldr	r3, [pc, #608]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f023 0203 	bic.w	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	4994      	ldr	r1, [pc, #592]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003274:	4b8f      	ldr	r3, [pc, #572]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f023 020c 	bic.w	r2, r3, #12
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	498c      	ldr	r1, [pc, #560]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003296:	4b87      	ldr	r3, [pc, #540]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4983      	ldr	r1, [pc, #524]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b8:	4b7e      	ldr	r3, [pc, #504]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	497b      	ldr	r1, [pc, #492]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032da:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	4972      	ldr	r1, [pc, #456]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032fc:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	496a      	ldr	r1, [pc, #424]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800331e:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	4961      	ldr	r1, [pc, #388]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003340:	4b5c      	ldr	r3, [pc, #368]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	4959      	ldr	r1, [pc, #356]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003362:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	4950      	ldr	r1, [pc, #320]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	4948      	ldr	r1, [pc, #288]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	493f      	ldr	r1, [pc, #252]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d028      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c8:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d6:	4937      	ldr	r1, [pc, #220]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e6:	d106      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
 80033f4:	e011      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fe:	d10c      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f8c8 	bl	800359c <RCCEx_PLLSAI1_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d028      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	491f      	ldr	r1, [pc, #124]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003444:	d106      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003446:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003450:	60d3      	str	r3, [r2, #12]
 8003452:	e011      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800345c:	d10c      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	2101      	movs	r1, #1
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f899 	bl	800359c <RCCEx_PLLSAI1_Config>
 800346a:	4603      	mov	r3, r0
 800346c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02b      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a2:	d109      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a02      	ldr	r2, [pc, #8]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ae:	60d3      	str	r3, [r2, #12]
 80034b0:	e014      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f867 	bl	800359c <RCCEx_PLLSAI1_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02f      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	4928      	ldr	r1, [pc, #160]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003506:	d10d      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	2102      	movs	r1, #2
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f844 	bl	800359c <RCCEx_PLLSAI1_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d014      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	74bb      	strb	r3, [r7, #18]
 8003522:	e011      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d10c      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3320      	adds	r3, #32
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f925 	bl	8003784 <RCCEx_PLLSAI2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003562:	490d      	ldr	r1, [pc, #52]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003586:	4904      	ldr	r1, [pc, #16]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800358e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000

0800359c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035aa:	4b75      	ldr	r3, [pc, #468]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d018      	beq.n	80035e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0203 	and.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d10d      	bne.n	80035e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
       ||
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035ce:	4b6c      	ldr	r3, [pc, #432]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
       ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d047      	beq.n	8003672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e044      	b.n	8003672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d018      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0x86>
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d825      	bhi.n	8003640 <RCCEx_PLLSAI1_Config+0xa4>
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d002      	beq.n	80035fe <RCCEx_PLLSAI1_Config+0x62>
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d009      	beq.n	8003610 <RCCEx_PLLSAI1_Config+0x74>
 80035fc:	e020      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035fe:	4b60      	ldr	r3, [pc, #384]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360e:	e01a      	b.n	8003646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003610:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d116      	bne.n	800364a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e013      	b.n	800364a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003622:	4b57      	ldr	r3, [pc, #348]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800362e:	4b54      	ldr	r3, [pc, #336]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800363e:	e006      	b.n	800364e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e004      	b.n	8003650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800364e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003656:	4b4a      	ldr	r3, [pc, #296]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	430b      	orrs	r3, r1
 800366c:	4944      	ldr	r1, [pc, #272]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d17d      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003678:	4b41      	ldr	r3, [pc, #260]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a40      	ldr	r2, [pc, #256]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fd f994 	bl	80009b0 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800368a:	e009      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800368c:	f7fd f990 	bl	80009b0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d902      	bls.n	80036a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	73fb      	strb	r3, [r7, #15]
        break;
 800369e:	e005      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ef      	bne.n	800368c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d160      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d111      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b8:	4b31      	ldr	r3, [pc, #196]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6892      	ldr	r2, [r2, #8]
 80036c8:	0211      	lsls	r1, r2, #8
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	0912      	lsrs	r2, r2, #4
 80036d0:	0452      	lsls	r2, r2, #17
 80036d2:	430a      	orrs	r2, r1
 80036d4:	492a      	ldr	r1, [pc, #168]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	610b      	str	r3, [r1, #16]
 80036da:	e027      	b.n	800372c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d112      	bne.n	8003708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	0211      	lsls	r1, r2, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6912      	ldr	r2, [r2, #16]
 80036f8:	0852      	lsrs	r2, r2, #1
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0552      	lsls	r2, r2, #21
 80036fe:	430a      	orrs	r2, r1
 8003700:	491f      	ldr	r1, [pc, #124]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	610b      	str	r3, [r1, #16]
 8003706:	e011      	b.n	800372c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6892      	ldr	r2, [r2, #8]
 8003718:	0211      	lsls	r1, r2, #8
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6952      	ldr	r2, [r2, #20]
 800371e:	0852      	lsrs	r2, r2, #1
 8003720:	3a01      	subs	r2, #1
 8003722:	0652      	lsls	r2, r2, #25
 8003724:	430a      	orrs	r2, r1
 8003726:	4916      	ldr	r1, [pc, #88]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd f93a 	bl	80009b0 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003740:	f7fd f936 	bl	80009b0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
          break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000

08003784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003792:	4b6a      	ldr	r3, [pc, #424]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800379e:	4b67      	ldr	r3, [pc, #412]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0203 	and.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d10d      	bne.n	80037ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
       ||
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037b6:	4b61      	ldr	r3, [pc, #388]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
       ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d047      	beq.n	800385a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e044      	b.n	800385a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d018      	beq.n	800380a <RCCEx_PLLSAI2_Config+0x86>
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d825      	bhi.n	8003828 <RCCEx_PLLSAI2_Config+0xa4>
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d002      	beq.n	80037e6 <RCCEx_PLLSAI2_Config+0x62>
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d009      	beq.n	80037f8 <RCCEx_PLLSAI2_Config+0x74>
 80037e4:	e020      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037e6:	4b55      	ldr	r3, [pc, #340]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11d      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f6:	e01a      	b.n	800382e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f8:	4b50      	ldr	r3, [pc, #320]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d116      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003808:	e013      	b.n	8003832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800380a:	4b4c      	ldr	r3, [pc, #304]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003816:	4b49      	ldr	r3, [pc, #292]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003826:	e006      	b.n	8003836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e004      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382e:	bf00      	nop
 8003830:	e002      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003832:	bf00      	nop
 8003834:	e000      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003836:	bf00      	nop
    }

    if(status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10d      	bne.n	800385a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800383e:	4b3f      	ldr	r3, [pc, #252]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	430b      	orrs	r3, r1
 8003854:	4939      	ldr	r1, [pc, #228]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d167      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a35      	ldr	r2, [pc, #212]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386c:	f7fd f8a0 	bl	80009b0 <HAL_GetTick>
 8003870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003872:	e009      	b.n	8003888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003874:	f7fd f89c 	bl	80009b0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	73fb      	strb	r3, [r7, #15]
        break;
 8003886:	e005      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ef      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d14a      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d111      	bne.n	80038c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a0:	4b26      	ldr	r3, [pc, #152]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6892      	ldr	r2, [r2, #8]
 80038b0:	0211      	lsls	r1, r2, #8
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	0912      	lsrs	r2, r2, #4
 80038b8:	0452      	lsls	r2, r2, #17
 80038ba:	430a      	orrs	r2, r1
 80038bc:	491f      	ldr	r1, [pc, #124]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	614b      	str	r3, [r1, #20]
 80038c2:	e011      	b.n	80038e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6892      	ldr	r2, [r2, #8]
 80038d4:	0211      	lsls	r1, r2, #8
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6912      	ldr	r2, [r2, #16]
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0652      	lsls	r2, r2, #25
 80038e0:	430a      	orrs	r2, r1
 80038e2:	4916      	ldr	r1, [pc, #88]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd f85c 	bl	80009b0 <HAL_GetTick>
 80038f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038fa:	e009      	b.n	8003910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038fc:	f7fd f858 	bl	80009b0 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d902      	bls.n	8003910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	73fb      	strb	r3, [r7, #15]
          break;
 800390e:	e005      	b.n	800391c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4904      	ldr	r1, [pc, #16]	; (800393c <RCCEx_PLLSAI2_Config+0x1b8>)
 800392c:	4313      	orrs	r3, r2
 800392e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e095      	b.n	8003a7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003962:	d009      	beq.n	8003978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	61da      	str	r2, [r3, #28]
 800396a:	e005      	b.n	8003978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fc fe88 	bl	80006a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039b8:	d902      	bls.n	80039c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e002      	b.n	80039c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039ce:	d007      	beq.n	80039e0 <HAL_SPI_Init+0xa0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	ea42 0103 	orr.w	r1, r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	f003 0204 	and.w	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a5c:	ea42 0103 	orr.w	r1, r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a86:	b084      	sub	sp, #16
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	f107 001c 	add.w	r0, r7, #28
 8003a94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f001 fa1d 	bl	8004ee4 <USB_CoreReset>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
 8003ac0:	e005      	b.n	8003ace <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ada:	b004      	add	sp, #16
 8003adc:	4770      	bx	lr
	...

08003ae0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d165      	bne.n	8003bc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4a3e      	ldr	r2, [pc, #248]	; (8003bf0 <USB_SetTurnaroundTime+0x110>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d906      	bls.n	8003b0a <USB_SetTurnaroundTime+0x2a>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <USB_SetTurnaroundTime+0x114>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d202      	bcs.n	8003b0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b04:	230f      	movs	r3, #15
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e05c      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4a39      	ldr	r2, [pc, #228]	; (8003bf4 <USB_SetTurnaroundTime+0x114>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d306      	bcc.n	8003b20 <USB_SetTurnaroundTime+0x40>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <USB_SetTurnaroundTime+0x118>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d202      	bcs.n	8003b20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b1a:	230e      	movs	r3, #14
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e051      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4a35      	ldr	r2, [pc, #212]	; (8003bf8 <USB_SetTurnaroundTime+0x118>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d306      	bcc.n	8003b36 <USB_SetTurnaroundTime+0x56>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <USB_SetTurnaroundTime+0x11c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d202      	bcs.n	8003b36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b30:	230d      	movs	r3, #13
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e046      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <USB_SetTurnaroundTime+0x11c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d306      	bcc.n	8003b4c <USB_SetTurnaroundTime+0x6c>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <USB_SetTurnaroundTime+0x120>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d802      	bhi.n	8003b4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b46:	230c      	movs	r3, #12
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e03b      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <USB_SetTurnaroundTime+0x120>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d906      	bls.n	8003b62 <USB_SetTurnaroundTime+0x82>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <USB_SetTurnaroundTime+0x124>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d802      	bhi.n	8003b62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b5c:	230b      	movs	r3, #11
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e030      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <USB_SetTurnaroundTime+0x124>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d906      	bls.n	8003b78 <USB_SetTurnaroundTime+0x98>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <USB_SetTurnaroundTime+0x128>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d802      	bhi.n	8003b78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b72:	230a      	movs	r3, #10
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e025      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <USB_SetTurnaroundTime+0x128>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d906      	bls.n	8003b8e <USB_SetTurnaroundTime+0xae>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <USB_SetTurnaroundTime+0x12c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d202      	bcs.n	8003b8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b88:	2309      	movs	r3, #9
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e01a      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <USB_SetTurnaroundTime+0x12c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d306      	bcc.n	8003ba4 <USB_SetTurnaroundTime+0xc4>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <USB_SetTurnaroundTime+0x130>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d802      	bhi.n	8003ba4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e00f      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <USB_SetTurnaroundTime+0x130>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d906      	bls.n	8003bba <USB_SetTurnaroundTime+0xda>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <USB_SetTurnaroundTime+0x134>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d202      	bcs.n	8003bba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e004      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bba:	2306      	movs	r3, #6
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e001      	b.n	8003bc4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bc0:	2309      	movs	r3, #9
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	00d8acbf 	.word	0x00d8acbf
 8003bf4:	00e4e1c0 	.word	0x00e4e1c0
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	01067380 	.word	0x01067380
 8003c00:	011a499f 	.word	0x011a499f
 8003c04:	01312cff 	.word	0x01312cff
 8003c08:	014ca43f 	.word	0x014ca43f
 8003c0c:	016e3600 	.word	0x016e3600
 8003c10:	01a6ab1f 	.word	0x01a6ab1f
 8003c14:	01e84800 	.word	0x01e84800

08003c18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0201 	bic.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d115      	bne.n	8003caa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f7fc fe9c 	bl	80009c8 <HAL_Delay>
      ms++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f001 f8ab 	bl	8004df2 <USB_GetMode>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d01e      	beq.n	8003ce0 <USB_SetCurrentMode+0x84>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b31      	cmp	r3, #49	; 0x31
 8003ca6:	d9f0      	bls.n	8003c8a <USB_SetCurrentMode+0x2e>
 8003ca8:	e01a      	b.n	8003ce0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d115      	bne.n	8003cdc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f7fc fe83 	bl	80009c8 <HAL_Delay>
      ms++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f001 f892 	bl	8004df2 <USB_GetMode>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <USB_SetCurrentMode+0x84>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b31      	cmp	r3, #49	; 0x31
 8003cd8:	d9f0      	bls.n	8003cbc <USB_SetCurrentMode+0x60>
 8003cda:	e001      	b.n	8003ce0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e005      	b.n	8003cec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b32      	cmp	r3, #50	; 0x32
 8003ce4:	d101      	bne.n	8003cea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e009      	b.n	8003d28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3340      	adds	r3, #64	; 0x40
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	2200      	movs	r2, #0
 8003d20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	3301      	adds	r3, #1
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b0e      	cmp	r3, #14
 8003d2c:	d9f2      	bls.n	8003d14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11c      	bne.n	8003d6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d42:	f043 0302 	orr.w	r3, r3, #2
 8003d46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e005      	b.n	8003d7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d80:	461a      	mov	r2, r3
 8003d82:	2300      	movs	r3, #0
 8003d84:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d86:	2103      	movs	r1, #3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f959 	bl	8004040 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d8e:	2110      	movs	r1, #16
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8f1 	bl	8003f78 <USB_FlushTxFifo>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f91d 	bl	8003fe0 <USB_FlushRxFifo>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	461a      	mov	r2, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e043      	b.n	8003e62 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df0:	d118      	bne.n	8003e24 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	461a      	mov	r2, r3
 8003e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e013      	b.n	8003e36 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e008      	b.n	8003e36 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e30:	461a      	mov	r2, r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	461a      	mov	r2, r3
 8003e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3b7      	bcc.n	8003dda <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e043      	b.n	8003ef8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e86:	d118      	bne.n	8003eba <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e013      	b.n	8003ecc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	e008      	b.n	8003ecc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eea:	461a      	mov	r2, r3
 8003eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3b7      	bcc.n	8003e70 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f043 0210 	orr.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <USB_DevInit+0x280>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f043 0208 	orr.w	r2, r3, #8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f6e:	b004      	add	sp, #16
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	803c3800 	.word	0x803c3800

08003f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <USB_FlushTxFifo+0x64>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e01b      	b.n	8003fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	daf2      	bge.n	8003f86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	019b      	lsls	r3, r3, #6
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <USB_FlushTxFifo+0x64>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e006      	b.n	8003fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d0f0      	beq.n	8003fb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	00030d40 	.word	0x00030d40

08003fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <USB_FlushRxFifo+0x5c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e018      	b.n	8004030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	daf2      	bge.n	8003fec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2210      	movs	r2, #16
 800400e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a08      	ldr	r2, [pc, #32]	; (800403c <USB_FlushRxFifo+0x5c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e006      	b.n	8004030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b10      	cmp	r3, #16
 800402c:	d0f0      	beq.n	8004010 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	00030d40 	.word	0x00030d40

08004040 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0306 	and.w	r3, r3, #6
 800408a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d002      	beq.n	8004098 <USB_GetDevSpeed+0x26>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b06      	cmp	r3, #6
 8004096:	d102      	bne.n	800409e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004098:	2302      	movs	r3, #2
 800409a:	75fb      	strb	r3, [r7, #23]
 800409c:	e001      	b.n	80040a2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800409e:	230f      	movs	r3, #15
 80040a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d13a      	bne.n	8004142 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d155      	bne.n	80041b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	791b      	ldrb	r3, [r3, #4]
 800411e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004120:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	059b      	lsls	r3, r3, #22
 8004126:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004128:	4313      	orrs	r3, r2
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e036      	b.n	80041b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004160:	4313      	orrs	r3, r2
 8004162:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d11a      	bne.n	80041b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004196:	430b      	orrs	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d161      	bne.n	80042a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f2:	d11f      	bne.n	8004234 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004212:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004232:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	b29b      	uxth	r3, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004254:	4013      	ands	r3, r2
 8004256:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	b29b      	uxth	r3, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004278:	4013      	ands	r3, r2
 800427a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	0159      	lsls	r1, r3, #5
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	440b      	add	r3, r1
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	4619      	mov	r1, r3
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <USB_DeactivateEndpoint+0x1b0>)
 800429a:	4013      	ands	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
 800429e:	e060      	b.n	8004362 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	d11f      	bne.n	80042f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	43db      	mvns	r3, r3
 8004312:	68f9      	ldr	r1, [r7, #12]
 8004314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004318:	4013      	ands	r3, r2
 800431a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	43db      	mvns	r3, r3
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800433c:	4013      	ands	r3, r2
 800433e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	0159      	lsls	r1, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	440b      	add	r3, r1
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	4619      	mov	r1, r3
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <USB_DeactivateEndpoint+0x1b4>)
 800435e:	4013      	ands	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	ec337800 	.word	0xec337800
 8004374:	eff37800 	.word	0xeff37800

08004378 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b01      	cmp	r3, #1
 8004392:	f040 8128 	bne.w	80045e6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d132      	bne.n	8004404 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fc:	0cdb      	lsrs	r3, r3, #19
 80043fe:	04db      	lsls	r3, r3, #19
 8004400:	6113      	str	r3, [r2, #16]
 8004402:	e092      	b.n	800452a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441e:	0cdb      	lsrs	r3, r3, #19
 8004420:	04db      	lsls	r3, r3, #19
 8004422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004442:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004446:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11a      	bne.n	8004484 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d903      	bls.n	8004462 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	0151      	lsls	r1, r2, #5
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	440a      	add	r2, r1
 8004478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004480:	6113      	str	r3, [r2, #16]
 8004482:	e01b      	b.n	80044bc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6919      	ldr	r1, [r3, #16]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	440b      	add	r3, r1
 800449c:	1e59      	subs	r1, r3, #1
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044a8:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <USB_EPStartXfer+0x368>)
 80044aa:	400b      	ands	r3, r1
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	0148      	lsls	r0, r1, #5
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	4401      	add	r1, r0
 80044b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d2:	6939      	ldr	r1, [r7, #16]
 80044d4:	0148      	lsls	r0, r1, #5
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	4401      	add	r1, r0
 80044da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	791b      	ldrb	r3, [r3, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d11f      	bne.n	800452a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004508:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	440a      	add	r2, r1
 8004520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004528:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004548:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	791b      	ldrb	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d015      	beq.n	800457e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8139 	beq.w	80047ce <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	6979      	ldr	r1, [r7, #20]
 8004574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004578:	4313      	orrs	r3, r2
 800457a:	634b      	str	r3, [r1, #52]	; 0x34
 800457c:	e127      	b.n	80047ce <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d110      	bne.n	80045b0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	0151      	lsls	r1, r2, #5
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	440a      	add	r2, r1
 80045a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00f      	b.n	80045d0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f9a6 	bl	8004930 <USB_WritePacket>
 80045e4:	e0f3      	b.n	80047ce <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004600:	0cdb      	lsrs	r3, r3, #19
 8004602:	04db      	lsls	r3, r3, #19
 8004604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004628:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d12f      	bne.n	8004690 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465e:	6939      	ldr	r1, [r7, #16]
 8004660:	0148      	lsls	r0, r1, #5
 8004662:	6979      	ldr	r1, [r7, #20]
 8004664:	4401      	add	r1, r0
 8004666:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800468c:	6113      	str	r3, [r2, #16]
 800468e:	e061      	b.n	8004754 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d125      	bne.n	80046e4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	0148      	lsls	r0, r1, #5
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	4401      	add	r1, r0
 80046b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046dc:	6113      	str	r3, [r2, #16]
 80046de:	e039      	b.n	8004754 <USB_EPStartXfer+0x3dc>
 80046e0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4413      	add	r3, r2
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	89fa      	ldrh	r2, [r7, #14]
 8004700:	fb03 f202 	mul.w	r2, r3, r2
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	89fb      	ldrh	r3, [r7, #14]
 8004718:	04d9      	lsls	r1, r3, #19
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <USB_EPStartXfer+0x460>)
 800471c:	400b      	ands	r3, r1
 800471e:	6939      	ldr	r1, [r7, #16]
 8004720:	0148      	lsls	r0, r1, #5
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	4401      	add	r1, r0
 8004726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800472a:	4313      	orrs	r3, r2
 800472c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	6939      	ldr	r1, [r7, #16]
 8004746:	0148      	lsls	r0, r1, #5
 8004748:	6979      	ldr	r1, [r7, #20]
 800474a:	4401      	add	r1, r0
 800474c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	791b      	ldrb	r3, [r3, #4]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d128      	bne.n	80047ae <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d110      	bne.n	800478e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e00f      	b.n	80047ae <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	1ff80000 	.word	0x1ff80000

080047dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d14a      	bne.n	8004890 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004812:	f040 8086 	bne.w	8004922 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	7812      	ldrb	r2, [r2, #0]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004838:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800485c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f242 7210 	movw	r2, #10000	; 0x2710
 800486a:	4293      	cmp	r3, r2
 800486c:	d902      	bls.n	8004874 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
          break;
 8004872:	e056      	b.n	8004922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488c:	d0e7      	beq.n	800485e <USB_EPStopXfer+0x82>
 800488e:	e048      	b.n	8004922 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a8:	d13b      	bne.n	8004922 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	7812      	ldrb	r2, [r2, #0]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	7812      	ldrb	r2, [r2, #0]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80048fe:	4293      	cmp	r3, r2
 8004900:	d902      	bls.n	8004908 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
          break;
 8004906:	e00c      	b.n	8004922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004920:	d0e7      	beq.n	80048f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	460b      	mov	r3, r1
 8004940:	71fb      	strb	r3, [r7, #7]
 8004942:	4613      	mov	r3, r2
 8004944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800494e:	88bb      	ldrh	r3, [r7, #4]
 8004950:	3303      	adds	r3, #3
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e018      	b.n	800498e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	031a      	lsls	r2, r3, #12
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4413      	add	r3, r2
 8004964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004968:	461a      	mov	r2, r3
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3301      	adds	r3, #1
 800497a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	3301      	adds	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	3301      	adds	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d3e2      	bcc.n	800495c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3724      	adds	r7, #36	; 0x24
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b08b      	sub	sp, #44	; 0x2c
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	e014      	b.n	80049fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	601a      	str	r2, [r3, #0]
    pDest++;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	3301      	adds	r3, #1
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	3301      	adds	r3, #1
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	3301      	adds	r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	3301      	adds	r3, #1
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	3301      	adds	r3, #1
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3e6      	bcc.n	80049d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a02:	8bfb      	ldrh	r3, [r7, #30]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01e      	beq.n	8004a46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a12:	461a      	mov	r2, r3
 8004a14:	f107 0310 	add.w	r3, r7, #16
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	701a      	strb	r2, [r3, #0]
      i++;
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	3301      	adds	r3, #1
 8004a32:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3301      	adds	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a3a:	8bfb      	ldrh	r3, [r7, #30]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a40:	8bfb      	ldrh	r3, [r7, #30]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ea      	bne.n	8004a1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	372c      	adds	r7, #44	; 0x2c
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d12c      	bne.n	8004aca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	db12      	blt.n	8004aa8 <USB_EPSetStall+0x54>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00f      	beq.n	8004aa8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aa6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	e02b      	b.n	8004b22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	db12      	blt.n	8004b02 <USB_EPSetStall+0xae>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00f      	beq.n	8004b02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004afc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d128      	bne.n	8004b9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	791b      	ldrb	r3, [r3, #4]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d003      	beq.n	8004b7c <USB_EPClearStall+0x4c>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	791b      	ldrb	r3, [r3, #4]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d138      	bne.n	8004bee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e027      	b.n	8004bee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	791b      	ldrb	r3, [r3, #4]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d003      	beq.n	8004bce <USB_EPClearStall+0x9e>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	791b      	ldrb	r3, [r3, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d10f      	bne.n	8004bee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c76:	f023 0302 	bic.w	r3, r3, #2
 8004c7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	0c1b      	lsrs	r3, r3, #16
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	b29b      	uxth	r3, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4013      	ands	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d88:	68bb      	ldr	r3, [r7, #8]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	01db      	lsls	r3, r3, #7
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004de4:	68bb      	ldr	r3, [r7, #8]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e2c:	f023 0307 	bic.w	r3, r3, #7
 8004e30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	333c      	adds	r3, #60	; 0x3c
 8004e66:	3304      	adds	r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ee0 <USB_EP0_OutStart+0x8c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d90a      	bls.n	8004e8a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e84:	d101      	bne.n	8004e8a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e024      	b.n	8004ed4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb8:	f043 0318 	orr.w	r3, r3, #24
 8004ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ecc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ed0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	4f54300a 	.word	0x4f54300a

08004ee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <USB_CoreReset+0x64>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e01b      	b.n	8004f3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	daf2      	bge.n	8004ef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <USB_CoreReset+0x64>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e006      	b.n	8004f3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d0f0      	beq.n	8004f1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	00030d40 	.word	0x00030d40

08004f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f5c:	f002 fe26 	bl	8007bac <USBD_static_malloc>
 8004f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	32b0      	adds	r2, #176	; 0xb0
 8004f72:	2100      	movs	r1, #0
 8004f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e0d4      	b.n	8005126 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f80:	2100      	movs	r1, #0
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f002 fe50 	bl	8007c28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	32b0      	adds	r2, #176	; 0xb0
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	32b0      	adds	r2, #176	; 0xb0
 8004fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7c1b      	ldrb	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d138      	bne.n	8005026 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fb4:	4b5e      	ldr	r3, [pc, #376]	; (8005130 <USBD_CDC_Init+0x1e4>)
 8004fb6:	7819      	ldrb	r1, [r3, #0]
 8004fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f002 fbe0 	bl	8007784 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fc4:	4b5a      	ldr	r3, [pc, #360]	; (8005130 <USBD_CDC_Init+0x1e4>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f003 020f 	and.w	r2, r3, #15
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3324      	adds	r3, #36	; 0x24
 8004fda:	2201      	movs	r2, #1
 8004fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fde:	4b55      	ldr	r3, [pc, #340]	; (8005134 <USBD_CDC_Init+0x1e8>)
 8004fe0:	7819      	ldrb	r1, [r3, #0]
 8004fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 fbcb 	bl	8007784 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fee:	4b51      	ldr	r3, [pc, #324]	; (8005134 <USBD_CDC_Init+0x1e8>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f003 020f 	and.w	r2, r3, #15
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005006:	2201      	movs	r2, #1
 8005008:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800500a:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <USBD_CDC_Init+0x1ec>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3326      	adds	r3, #38	; 0x26
 8005020:	2210      	movs	r2, #16
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e035      	b.n	8005092 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005026:	4b42      	ldr	r3, [pc, #264]	; (8005130 <USBD_CDC_Init+0x1e4>)
 8005028:	7819      	ldrb	r1, [r3, #0]
 800502a:	2340      	movs	r3, #64	; 0x40
 800502c:	2202      	movs	r2, #2
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f002 fba8 	bl	8007784 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005034:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <USBD_CDC_Init+0x1e4>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	3324      	adds	r3, #36	; 0x24
 800504a:	2201      	movs	r2, #1
 800504c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800504e:	4b39      	ldr	r3, [pc, #228]	; (8005134 <USBD_CDC_Init+0x1e8>)
 8005050:	7819      	ldrb	r1, [r3, #0]
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	2202      	movs	r2, #2
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 fb94 	bl	8007784 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800505c:	4b35      	ldr	r3, [pc, #212]	; (8005134 <USBD_CDC_Init+0x1e8>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005074:	2201      	movs	r2, #1
 8005076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005078:	4b2f      	ldr	r3, [pc, #188]	; (8005138 <USBD_CDC_Init+0x1ec>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3326      	adds	r3, #38	; 0x26
 800508e:	2210      	movs	r2, #16
 8005090:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <USBD_CDC_Init+0x1ec>)
 8005094:	7819      	ldrb	r1, [r3, #0]
 8005096:	2308      	movs	r3, #8
 8005098:	2203      	movs	r2, #3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f002 fb72 	bl	8007784 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <USBD_CDC_Init+0x1ec>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3324      	adds	r3, #36	; 0x24
 80050b6:	2201      	movs	r2, #1
 80050b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	33b0      	adds	r3, #176	; 0xb0
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050f0:	2302      	movs	r3, #2
 80050f2:	e018      	b.n	8005126 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	7c1b      	ldrb	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050fc:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <USBD_CDC_Init+0x1e8>)
 80050fe:	7819      	ldrb	r1, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f002 fcb4 	bl	8007a78 <USBD_LL_PrepareReceive>
 8005110:	e008      	b.n	8005124 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <USBD_CDC_Init+0x1e8>)
 8005114:	7819      	ldrb	r1, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f002 fcaa 	bl	8007a78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000097 	.word	0x20000097
 8005134:	20000098 	.word	0x20000098
 8005138:	20000099 	.word	0x20000099

0800513c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005148:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <USBD_CDC_DeInit+0xf8>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f002 fb56 	bl	8007800 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005154:	4b37      	ldr	r3, [pc, #220]	; (8005234 <USBD_CDC_DeInit+0xf8>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 020f 	and.w	r2, r3, #15
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3324      	adds	r3, #36	; 0x24
 800516a:	2200      	movs	r2, #0
 800516c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <USBD_CDC_DeInit+0xfc>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f002 fb43 	bl	8007800 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800517a:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <USBD_CDC_DeInit+0xfc>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005192:	2200      	movs	r2, #0
 8005194:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <USBD_CDC_DeInit+0x100>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f002 fb2f 	bl	8007800 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <USBD_CDC_DeInit+0x100>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f003 020f 	and.w	r2, r3, #15
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	2200      	movs	r2, #0
 80051ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <USBD_CDC_DeInit+0x100>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	3326      	adds	r3, #38	; 0x26
 80051d2:	2200      	movs	r2, #0
 80051d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	32b0      	adds	r2, #176	; 0xb0
 80051e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01f      	beq.n	8005228 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	33b0      	adds	r3, #176	; 0xb0
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	32b0      	adds	r2, #176	; 0xb0
 8005206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fcdc 	bl	8007bc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	32b0      	adds	r2, #176	; 0xb0
 800521a:	2100      	movs	r1, #0
 800521c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000097 	.word	0x20000097
 8005238:	20000098 	.word	0x20000098
 800523c:	20000099 	.word	0x20000099

08005240 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	32b0      	adds	r2, #176	; 0xb0
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800526c:	2303      	movs	r3, #3
 800526e:	e0bf      	b.n	80053f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005278:	2b00      	cmp	r3, #0
 800527a:	d050      	beq.n	800531e <USBD_CDC_Setup+0xde>
 800527c:	2b20      	cmp	r3, #32
 800527e:	f040 80af 	bne.w	80053e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	88db      	ldrh	r3, [r3, #6]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03a      	beq.n	8005300 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b25b      	sxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	da1b      	bge.n	80052cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	33b0      	adds	r3, #176	; 0xb0
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	88d2      	ldrh	r2, [r2, #6]
 80052b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	88db      	ldrh	r3, [r3, #6]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	bf28      	it	cs
 80052ba:	2307      	movcs	r3, #7
 80052bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	89fa      	ldrh	r2, [r7, #14]
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fdb3 	bl	8006e30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052ca:	e090      	b.n	80053ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785a      	ldrb	r2, [r3, #1]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	88db      	ldrh	r3, [r3, #6]
 80052da:	2b3f      	cmp	r3, #63	; 0x3f
 80052dc:	d803      	bhi.n	80052e6 <USBD_CDC_Setup+0xa6>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	88db      	ldrh	r3, [r3, #6]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	e000      	b.n	80052e8 <USBD_CDC_Setup+0xa8>
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052ee:	6939      	ldr	r1, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052f6:	461a      	mov	r2, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 fdc5 	bl	8006e88 <USBD_CtlPrepareRx>
      break;
 80052fe:	e076      	b.n	80053ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	33b0      	adds	r3, #176	; 0xb0
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	7850      	ldrb	r0, [r2, #1]
 8005316:	2200      	movs	r2, #0
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	4798      	blx	r3
      break;
 800531c:	e067      	b.n	80053ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b0b      	cmp	r3, #11
 8005324:	d851      	bhi.n	80053ca <USBD_CDC_Setup+0x18a>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <USBD_CDC_Setup+0xec>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	0800535d 	.word	0x0800535d
 8005330:	080053d9 	.word	0x080053d9
 8005334:	080053cb 	.word	0x080053cb
 8005338:	080053cb 	.word	0x080053cb
 800533c:	080053cb 	.word	0x080053cb
 8005340:	080053cb 	.word	0x080053cb
 8005344:	080053cb 	.word	0x080053cb
 8005348:	080053cb 	.word	0x080053cb
 800534c:	080053cb 	.word	0x080053cb
 8005350:	080053cb 	.word	0x080053cb
 8005354:	08005387 	.word	0x08005387
 8005358:	080053b1 	.word	0x080053b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b03      	cmp	r3, #3
 8005366:	d107      	bne.n	8005378 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005368:	f107 030a 	add.w	r3, r7, #10
 800536c:	2202      	movs	r2, #2
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 fd5d 	bl	8006e30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005376:	e032      	b.n	80053de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fce7 	bl	8006d4e <USBD_CtlError>
            ret = USBD_FAIL;
 8005380:	2303      	movs	r3, #3
 8005382:	75fb      	strb	r3, [r7, #23]
          break;
 8005384:	e02b      	b.n	80053de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d107      	bne.n	80053a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005392:	f107 030d 	add.w	r3, r7, #13
 8005396:	2201      	movs	r2, #1
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 fd48 	bl	8006e30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053a0:	e01d      	b.n	80053de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 fcd2 	bl	8006d4e <USBD_CtlError>
            ret = USBD_FAIL;
 80053aa:	2303      	movs	r3, #3
 80053ac:	75fb      	strb	r3, [r7, #23]
          break;
 80053ae:	e016      	b.n	80053de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d00f      	beq.n	80053dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 fcc5 	bl	8006d4e <USBD_CtlError>
            ret = USBD_FAIL;
 80053c4:	2303      	movs	r3, #3
 80053c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053c8:	e008      	b.n	80053dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fcbe 	bl	8006d4e <USBD_CtlError>
          ret = USBD_FAIL;
 80053d2:	2303      	movs	r3, #3
 80053d4:	75fb      	strb	r3, [r7, #23]
          break;
 80053d6:	e002      	b.n	80053de <USBD_CDC_Setup+0x19e>
          break;
 80053d8:	bf00      	nop
 80053da:	e008      	b.n	80053ee <USBD_CDC_Setup+0x1ae>
          break;
 80053dc:	bf00      	nop
      }
      break;
 80053de:	e006      	b.n	80053ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 fcb3 	bl	8006d4e <USBD_CtlError>
      ret = USBD_FAIL;
 80053e8:	2303      	movs	r3, #3
 80053ea:	75fb      	strb	r3, [r7, #23]
      break;
 80053ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800540a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	32b0      	adds	r2, #176	; 0xb0
 8005416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800541e:	2303      	movs	r3, #3
 8005420:	e065      	b.n	80054ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	32b0      	adds	r2, #176	; 0xb0
 800542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005430:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	3318      	adds	r3, #24
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02f      	beq.n	80054ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	3318      	adds	r3, #24
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	f003 010f 	and.w	r1, r3, #15
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	460b      	mov	r3, r1
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4403      	add	r3, r0
 8005474:	3344      	adds	r3, #68	; 0x44
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	fbb2 f1f3 	udiv	r1, r2, r3
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005482:	2b00      	cmp	r3, #0
 8005484:	d112      	bne.n	80054ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3318      	adds	r3, #24
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800549e:	78f9      	ldrb	r1, [r7, #3]
 80054a0:	2300      	movs	r3, #0
 80054a2:	2200      	movs	r2, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f002 faaf 	bl	8007a08 <USBD_LL_Transmit>
 80054aa:	e01f      	b.n	80054ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	33b0      	adds	r3, #176	; 0xb0
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d010      	beq.n	80054ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	33b0      	adds	r3, #176	; 0xb0
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	32b0      	adds	r2, #176	; 0xb0
 800550c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	32b0      	adds	r2, #176	; 0xb0
 800551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005524:	2303      	movs	r3, #3
 8005526:	e01a      	b.n	800555e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f002 fadb 	bl	8007ae8 <USBD_LL_GetRxDataSize>
 8005532:	4602      	mov	r2, r0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	33b0      	adds	r3, #176	; 0xb0
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005558:	4611      	mov	r1, r2
 800555a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	32b0      	adds	r2, #176	; 0xb0
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	e025      	b.n	80055d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	33b0      	adds	r3, #176	; 0xb0
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01a      	beq.n	80055d2 <USBD_CDC_EP0_RxReady+0x6c>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055a2:	2bff      	cmp	r3, #255	; 0xff
 80055a4:	d015      	beq.n	80055d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	33b0      	adds	r3, #176	; 0xb0
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055c6:	b292      	uxth	r2, r2
 80055c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055e4:	2182      	movs	r1, #130	; 0x82
 80055e6:	4818      	ldr	r0, [pc, #96]	; (8005648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055e8:	f000 fd4f 	bl	800608a <USBD_GetEpDesc>
 80055ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055ee:	2101      	movs	r1, #1
 80055f0:	4815      	ldr	r0, [pc, #84]	; (8005648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055f2:	f000 fd4a 	bl	800608a <USBD_GetEpDesc>
 80055f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055f8:	2181      	movs	r1, #129	; 0x81
 80055fa:	4813      	ldr	r0, [pc, #76]	; (8005648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055fc:	f000 fd45 	bl	800608a <USBD_GetEpDesc>
 8005600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2210      	movs	r2, #16
 800560c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2200      	movs	r2, #0
 8005618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561c:	711a      	strb	r2, [r3, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005630:	711a      	strb	r2, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2243      	movs	r2, #67	; 0x43
 800563a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000054 	.word	0x20000054

0800564c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005654:	2182      	movs	r1, #130	; 0x82
 8005656:	4818      	ldr	r0, [pc, #96]	; (80056b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005658:	f000 fd17 	bl	800608a <USBD_GetEpDesc>
 800565c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800565e:	2101      	movs	r1, #1
 8005660:	4815      	ldr	r0, [pc, #84]	; (80056b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005662:	f000 fd12 	bl	800608a <USBD_GetEpDesc>
 8005666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005668:	2181      	movs	r1, #129	; 0x81
 800566a:	4813      	ldr	r0, [pc, #76]	; (80056b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800566c:	f000 fd0d 	bl	800608a <USBD_GetEpDesc>
 8005670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2210      	movs	r2, #16
 800567c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d006      	beq.n	8005692 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2200      	movs	r2, #0
 8005688:	711a      	strb	r2, [r3, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f042 0202 	orr.w	r2, r2, #2
 8005690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d006      	beq.n	80056a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	711a      	strb	r2, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f042 0202 	orr.w	r2, r2, #2
 80056a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2243      	movs	r2, #67	; 0x43
 80056aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056ac:	4b02      	ldr	r3, [pc, #8]	; (80056b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000054 	.word	0x20000054

080056bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056c4:	2182      	movs	r1, #130	; 0x82
 80056c6:	4818      	ldr	r0, [pc, #96]	; (8005728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056c8:	f000 fcdf 	bl	800608a <USBD_GetEpDesc>
 80056cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056ce:	2101      	movs	r1, #1
 80056d0:	4815      	ldr	r0, [pc, #84]	; (8005728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056d2:	f000 fcda 	bl	800608a <USBD_GetEpDesc>
 80056d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056d8:	2181      	movs	r1, #129	; 0x81
 80056da:	4813      	ldr	r0, [pc, #76]	; (8005728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056dc:	f000 fcd5 	bl	800608a <USBD_GetEpDesc>
 80056e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2210      	movs	r2, #16
 80056ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d006      	beq.n	8005702 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fc:	711a      	strb	r2, [r3, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d006      	beq.n	8005716 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005710:	711a      	strb	r2, [r3, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2243      	movs	r2, #67	; 0x43
 800571a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800571c:	4b02      	ldr	r3, [pc, #8]	; (8005728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000054 	.word	0x20000054

0800572c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	220a      	movs	r2, #10
 8005738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800573a:	4b03      	ldr	r3, [pc, #12]	; (8005748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20000010 	.word	0x20000010

0800574c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	e009      	b.n	8005774 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	33b0      	adds	r3, #176	; 0xb0
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	32b0      	adds	r2, #176	; 0xb0
 8005796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e008      	b.n	80057b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	32b0      	adds	r2, #176	; 0xb0
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e004      	b.n	80057f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	32b0      	adds	r2, #176	; 0xb0
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005822:	2303      	movs	r3, #3
 8005824:	e025      	b.n	8005872 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800582c:	2b00      	cmp	r3, #0
 800582e:	d11f      	bne.n	8005870 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2201      	movs	r2, #1
 8005834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005838:	4b10      	ldr	r3, [pc, #64]	; (800587c <USBD_CDC_TransmitPacket+0x7c>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4403      	add	r3, r0
 8005852:	3318      	adds	r3, #24
 8005854:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <USBD_CDC_TransmitPacket+0x7c>)
 8005858:	7819      	ldrb	r1, [r3, #0]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f002 f8ce 	bl	8007a08 <USBD_LL_Transmit>

    ret = USBD_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000097 	.word	0x20000097

08005880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	32b0      	adds	r2, #176	; 0xb0
 8005892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005896:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32b0      	adds	r2, #176	; 0xb0
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e018      	b.n	80058e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7c1b      	ldrb	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <USBD_CDC_ReceivePacket+0x68>)
 80058b8:	7819      	ldrb	r1, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f002 f8d7 	bl	8007a78 <USBD_LL_PrepareReceive>
 80058ca:	e008      	b.n	80058de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <USBD_CDC_ReceivePacket+0x68>)
 80058ce:	7819      	ldrb	r1, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058d6:	2340      	movs	r3, #64	; 0x40
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 f8cd 	bl	8007a78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000098 	.word	0x20000098

080058ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005900:	2303      	movs	r3, #3
 8005902:	e01f      	b.n	8005944 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	79fa      	ldrb	r2, [r7, #7]
 8005936:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f001 fea5 	bl	8007688 <USBD_LL_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005942:	7dfb      	ldrb	r3, [r7, #23]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005960:	2303      	movs	r3, #3
 8005962:	e025      	b.n	80059b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	32ae      	adds	r2, #174	; 0xae
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00f      	beq.n	80059a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32ae      	adds	r2, #174	; 0xae
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	f107 020e 	add.w	r2, r7, #14
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
 8005998:	4602      	mov	r2, r0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fead 	bl	8007720 <USBD_LL_Start>
 80059c6:	4603      	mov	r3, r0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d009      	beq.n	8005a14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a44:	2303      	movs	r3, #3
 8005a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 f938 	bl	8006cda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d01a      	beq.n	8005ac4 <USBD_LL_SetupStage+0x72>
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d822      	bhi.n	8005ad8 <USBD_LL_SetupStage+0x86>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <USBD_LL_SetupStage+0x4a>
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d00a      	beq.n	8005ab0 <USBD_LL_SetupStage+0x5e>
 8005a9a:	e01d      	b.n	8005ad8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fb65 	bl	8006174 <USBD_StdDevReq>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	73fb      	strb	r3, [r7, #15]
      break;
 8005aae:	e020      	b.n	8005af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fbcd 	bl	8006258 <USBD_StdItfReq>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac2:	e016      	b.n	8005af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fc2f 	bl	8006330 <USBD_StdEPReq>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad6:	e00c      	b.n	8005af2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fec0 	bl	800786c <USBD_LL_StallEP>
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
      break;
 8005af0:	bf00      	nop
  }

  return ret;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	460b      	mov	r3, r1
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d16e      	bne.n	8005bf2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	f040 8098 	bne.w	8005c58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d913      	bls.n	8005b5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	1ad2      	subs	r2, r2, r3
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	bf28      	it	cs
 8005b4e:	4613      	movcs	r3, r2
 8005b50:	461a      	mov	r2, r3
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f001 f9b4 	bl	8006ec2 <USBD_CtlContinueRx>
 8005b5a:	e07d      	b.n	8005c58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d014      	beq.n	8005b94 <USBD_LL_DataOutStage+0x98>
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d81d      	bhi.n	8005baa <USBD_LL_DataOutStage+0xae>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <USBD_LL_DataOutStage+0x7c>
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d003      	beq.n	8005b7e <USBD_LL_DataOutStage+0x82>
 8005b76:	e018      	b.n	8005baa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8005b7c:	e018      	b.n	8005bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4619      	mov	r1, r3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fa64 	bl	8006056 <USBD_CoreFindIF>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75bb      	strb	r3, [r7, #22]
            break;
 8005b92:	e00d      	b.n	8005bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fa66 	bl	8006070 <USBD_CoreFindEP>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ba8:	e002      	b.n	8005bb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75bb      	strb	r3, [r7, #22]
            break;
 8005bae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bb0:	7dbb      	ldrb	r3, [r7, #22]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d119      	bne.n	8005bea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d113      	bne.n	8005bea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005bc2:	7dba      	ldrb	r2, [r7, #22]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	32ae      	adds	r2, #174	; 0xae
 8005bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005bd2:	7dba      	ldrb	r2, [r7, #22]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005bda:	7dba      	ldrb	r2, [r7, #22]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	32ae      	adds	r2, #174	; 0xae
 8005be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f001 f97a 	bl	8006ee4 <USBD_CtlSendStatus>
 8005bf0:	e032      	b.n	8005c58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa37 	bl	8006070 <USBD_CoreFindEP>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c06:	7dbb      	ldrb	r3, [r7, #22]
 8005c08:	2bff      	cmp	r3, #255	; 0xff
 8005c0a:	d025      	beq.n	8005c58 <USBD_LL_DataOutStage+0x15c>
 8005c0c:	7dbb      	ldrb	r3, [r7, #22]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d122      	bne.n	8005c58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d117      	bne.n	8005c4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c1e:	7dba      	ldrb	r2, [r7, #22]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	32ae      	adds	r2, #174	; 0xae
 8005c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c2e:	7dba      	ldrb	r2, [r7, #22]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c36:	7dba      	ldrb	r2, [r7, #22]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	32ae      	adds	r2, #174	; 0xae
 8005c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	7afa      	ldrb	r2, [r7, #11]
 8005c44:	4611      	mov	r1, r2
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	4798      	blx	r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	e000      	b.n	8005c5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d16f      	bne.n	8005d56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3314      	adds	r3, #20
 8005c7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d15a      	bne.n	8005d3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d914      	bls.n	8005cbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f001 f8dc 	bl	8006e66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f001 fedf 	bl	8007a78 <USBD_LL_PrepareReceive>
 8005cba:	e03f      	b.n	8005d3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d11c      	bne.n	8005d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d316      	bcc.n	8005d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d20f      	bcs.n	8005d02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f001 f8bd 	bl	8006e66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f001 febc 	bl	8007a78 <USBD_LL_PrepareReceive>
 8005d00:	e01c      	b.n	8005d3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d10f      	bne.n	8005d2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f001 fd9b 	bl	800786c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f001 f8e7 	bl	8006f0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d03a      	beq.n	8005dbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff fe42 	bl	80059d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d54:	e032      	b.n	8005dbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	4619      	mov	r1, r3
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f985 	bl	8006070 <USBD_CoreFindEP>
 8005d66:	4603      	mov	r3, r0
 8005d68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2bff      	cmp	r3, #255	; 0xff
 8005d6e:	d025      	beq.n	8005dbc <USBD_LL_DataInStage+0x15a>
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d122      	bne.n	8005dbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d11c      	bne.n	8005dbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d82:	7dfa      	ldrb	r2, [r7, #23]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	32ae      	adds	r2, #174	; 0xae
 8005d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d92:	7dfa      	ldrb	r2, [r7, #23]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d9a:	7dfa      	ldrb	r2, [r7, #23]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	32ae      	adds	r2, #174	; 0xae
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	7afa      	ldrb	r2, [r7, #11]
 8005da8:	4611      	mov	r1, r2
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	4798      	blx	r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005db2:	7dbb      	ldrb	r3, [r7, #22]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005db8:	7dbb      	ldrb	r3, [r7, #22]
 8005dba:	e000      	b.n	8005dbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d014      	beq.n	8005e2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00e      	beq.n	8005e2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6852      	ldr	r2, [r2, #4]
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fca6 	bl	8007784 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2180      	movs	r1, #128	; 0x80
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fc98 	bl	8007784 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2240      	movs	r2, #64	; 0x40
 8005e5e:	621a      	str	r2, [r3, #32]

  return ret;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d006      	beq.n	8005eac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d106      	bne.n	8005ee4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d110      	bne.n	8005f28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	32ae      	adds	r2, #174	; 0xae
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e01c      	b.n	8005f8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d115      	bne.n	8005f8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	32ae      	adds	r2, #174	; 0xae
 8005f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	32ae      	adds	r2, #174	; 0xae
 8005f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	4611      	mov	r1, r2
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	32ae      	adds	r2, #174	; 0xae
 8005fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e01c      	b.n	8005ff2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d115      	bne.n	8005ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32ae      	adds	r2, #174	; 0xae
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32ae      	adds	r2, #174	; 0xae
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	4611      	mov	r1, r2
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6852      	ldr	r2, [r2, #4]
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	4611      	mov	r1, r2
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006062:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800607c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d920      	bls.n	80060f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060ba:	e013      	b.n	80060e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060bc:	f107 030a 	add.w	r3, r7, #10
 80060c0:	4619      	mov	r1, r3
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	f000 f81b 	bl	80060fe <USBD_GetNextDesc>
 80060c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d108      	bne.n	80060e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	789b      	ldrb	r3, [r3, #2]
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d008      	beq.n	80060f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	885b      	ldrh	r3, [r3, #2]
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	897b      	ldrh	r3, [r7, #10]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d8e5      	bhi.n	80060bc <USBD_GetEpDesc+0x32>
 80060f0:	e000      	b.n	80060f4 <USBD_GetEpDesc+0x6a>
          break;
 80060f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80060f4:	693b      	ldr	r3, [r7, #16]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	4413      	add	r3, r2
 8006118:	b29a      	uxth	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	3301      	adds	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006156:	8a3b      	ldrh	r3, [r7, #16]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	b21a      	sxth	r2, r3
 800615c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006160:	4313      	orrs	r3, r2
 8006162:	b21b      	sxth	r3, r3
 8006164:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006166:	89fb      	ldrh	r3, [r7, #14]
}
 8006168:	4618      	mov	r0, r3
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d005      	beq.n	800619a <USBD_StdDevReq+0x26>
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d857      	bhi.n	8006242 <USBD_StdDevReq+0xce>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <USBD_StdDevReq+0x42>
 8006196:	2b20      	cmp	r3, #32
 8006198:	d153      	bne.n	8006242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	32ae      	adds	r2, #174	; 0xae
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
      break;
 80061b4:	e04a      	b.n	800624c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	d83b      	bhi.n	8006236 <USBD_StdDevReq+0xc2>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USBD_StdDevReq+0x50>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006219 	.word	0x08006219
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	08006237 	.word	0x08006237
 80061d0:	08006223 	.word	0x08006223
 80061d4:	08006237 	.word	0x08006237
 80061d8:	080061f7 	.word	0x080061f7
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	08006237 	.word	0x08006237
 80061e4:	0800620f 	.word	0x0800620f
 80061e8:	08006201 	.word	0x08006201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa3c 	bl	800666c <USBD_GetDescriptor>
          break;
 80061f4:	e024      	b.n	8006240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fbcb 	bl	8006994 <USBD_SetAddress>
          break;
 80061fe:	e01f      	b.n	8006240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc0a 	bl	8006a1c <USBD_SetConfig>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
          break;
 800620c:	e018      	b.n	8006240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fcad 	bl	8006b70 <USBD_GetConfig>
          break;
 8006216:	e013      	b.n	8006240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fcde 	bl	8006bdc <USBD_GetStatus>
          break;
 8006220:	e00e      	b.n	8006240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fd0d 	bl	8006c44 <USBD_SetFeature>
          break;
 800622a:	e009      	b.n	8006240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fd31 	bl	8006c96 <USBD_ClrFeature>
          break;
 8006234:	e004      	b.n	8006240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fd88 	bl	8006d4e <USBD_CtlError>
          break;
 800623e:	bf00      	nop
      }
      break;
 8006240:	e004      	b.n	800624c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fd82 	bl	8006d4e <USBD_CtlError>
      break;
 800624a:	bf00      	nop
  }

  return ret;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop

08006258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d005      	beq.n	800627e <USBD_StdItfReq+0x26>
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d852      	bhi.n	800631c <USBD_StdItfReq+0xc4>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <USBD_StdItfReq+0x26>
 800627a:	2b20      	cmp	r3, #32
 800627c:	d14e      	bne.n	800631c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	2b02      	cmp	r3, #2
 800628a:	d840      	bhi.n	800630e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	889b      	ldrh	r3, [r3, #4]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d836      	bhi.n	8006304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	889b      	ldrh	r3, [r3, #4]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fed9 	bl	8006056 <USBD_CoreFindIF>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2bff      	cmp	r3, #255	; 0xff
 80062ac:	d01d      	beq.n	80062ea <USBD_StdItfReq+0x92>
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d11a      	bne.n	80062ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062b4:	7bba      	ldrb	r2, [r7, #14]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	32ae      	adds	r2, #174	; 0xae
 80062ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80062c4:	7bba      	ldrb	r2, [r7, #14]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062cc:	7bba      	ldrb	r2, [r7, #14]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32ae      	adds	r2, #174	; 0xae
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
 80062de:	4603      	mov	r3, r0
 80062e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062e2:	e004      	b.n	80062ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062e8:	e001      	b.n	80062ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80062ea:	2303      	movs	r3, #3
 80062ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	88db      	ldrh	r3, [r3, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d110      	bne.n	8006318 <USBD_StdItfReq+0xc0>
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fdf1 	bl	8006ee4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006302:	e009      	b.n	8006318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fd21 	bl	8006d4e <USBD_CtlError>
          break;
 800630c:	e004      	b.n	8006318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fd1c 	bl	8006d4e <USBD_CtlError>
          break;
 8006316:	e000      	b.n	800631a <USBD_StdItfReq+0xc2>
          break;
 8006318:	bf00      	nop
      }
      break;
 800631a:	e004      	b.n	8006326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fd15 	bl	8006d4e <USBD_CtlError>
      break;
 8006324:	bf00      	nop
  }

  return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d007      	beq.n	8006360 <USBD_StdEPReq+0x30>
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	f200 817f 	bhi.w	8006654 <USBD_StdEPReq+0x324>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d02a      	beq.n	80063b0 <USBD_StdEPReq+0x80>
 800635a:	2b20      	cmp	r3, #32
 800635c:	f040 817a 	bne.w	8006654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fe83 	bl	8006070 <USBD_CoreFindEP>
 800636a:	4603      	mov	r3, r0
 800636c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800636e:	7b7b      	ldrb	r3, [r7, #13]
 8006370:	2bff      	cmp	r3, #255	; 0xff
 8006372:	f000 8174 	beq.w	800665e <USBD_StdEPReq+0x32e>
 8006376:	7b7b      	ldrb	r3, [r7, #13]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 8170 	bne.w	800665e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800637e:	7b7a      	ldrb	r2, [r7, #13]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006386:	7b7a      	ldrb	r2, [r7, #13]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	32ae      	adds	r2, #174	; 0xae
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8163 	beq.w	800665e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006398:	7b7a      	ldrb	r2, [r7, #13]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	; 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ae:	e156      	b.n	800665e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d008      	beq.n	80063ca <USBD_StdEPReq+0x9a>
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	f300 8145 	bgt.w	8006648 <USBD_StdEPReq+0x318>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 809b 	beq.w	80064fa <USBD_StdEPReq+0x1ca>
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d03c      	beq.n	8006442 <USBD_StdEPReq+0x112>
 80063c8:	e13e      	b.n	8006648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d002      	beq.n	80063dc <USBD_StdEPReq+0xac>
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d016      	beq.n	8006408 <USBD_StdEPReq+0xd8>
 80063da:	e02c      	b.n	8006436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <USBD_StdEPReq+0xce>
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d00a      	beq.n	80063fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fa3d 	bl	800786c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fa39 	bl	800786c <USBD_LL_StallEP>
 80063fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063fc:	e020      	b.n	8006440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fca4 	bl	8006d4e <USBD_CtlError>
              break;
 8006406:	e01b      	b.n	8006440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	885b      	ldrh	r3, [r3, #2]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10e      	bne.n	800642e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <USBD_StdEPReq+0xfe>
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d008      	beq.n	800642e <USBD_StdEPReq+0xfe>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	88db      	ldrh	r3, [r3, #6]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fa1f 	bl	800786c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fd58 	bl	8006ee4 <USBD_CtlSendStatus>

              break;
 8006434:	e004      	b.n	8006440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc88 	bl	8006d4e <USBD_CtlError>
              break;
 800643e:	bf00      	nop
          }
          break;
 8006440:	e107      	b.n	8006652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d002      	beq.n	8006454 <USBD_StdEPReq+0x124>
 800644e:	2b03      	cmp	r3, #3
 8006450:	d016      	beq.n	8006480 <USBD_StdEPReq+0x150>
 8006452:	e04b      	b.n	80064ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <USBD_StdEPReq+0x146>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d00a      	beq.n	8006476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fa01 	bl	800786c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f9fd 	bl	800786c <USBD_LL_StallEP>
 8006472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006474:	e040      	b.n	80064f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc68 	bl	8006d4e <USBD_CtlError>
              break;
 800647e:	e03b      	b.n	80064f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	885b      	ldrh	r3, [r3, #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d136      	bne.n	80064f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fa1e 	bl	80078d8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fd21 	bl	8006ee4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fde2 	bl	8006070 <USBD_CoreFindEP>
 80064ac:	4603      	mov	r3, r0
 80064ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064b0:	7b7b      	ldrb	r3, [r7, #13]
 80064b2:	2bff      	cmp	r3, #255	; 0xff
 80064b4:	d01f      	beq.n	80064f6 <USBD_StdEPReq+0x1c6>
 80064b6:	7b7b      	ldrb	r3, [r7, #13]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11c      	bne.n	80064f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064bc:	7b7a      	ldrb	r2, [r7, #13]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80064c4:	7b7a      	ldrb	r2, [r7, #13]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	32ae      	adds	r2, #174	; 0xae
 80064ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d010      	beq.n	80064f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064d4:	7b7a      	ldrb	r2, [r7, #13]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32ae      	adds	r2, #174	; 0xae
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80064ea:	e004      	b.n	80064f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fc2d 	bl	8006d4e <USBD_CtlError>
              break;
 80064f4:	e000      	b.n	80064f8 <USBD_StdEPReq+0x1c8>
              break;
 80064f6:	bf00      	nop
          }
          break;
 80064f8:	e0ab      	b.n	8006652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d002      	beq.n	800650c <USBD_StdEPReq+0x1dc>
 8006506:	2b03      	cmp	r3, #3
 8006508:	d032      	beq.n	8006570 <USBD_StdEPReq+0x240>
 800650a:	e097      	b.n	800663c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <USBD_StdEPReq+0x1f2>
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b80      	cmp	r3, #128	; 0x80
 8006516:	d004      	beq.n	8006522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fc17 	bl	8006d4e <USBD_CtlError>
                break;
 8006520:	e091      	b.n	8006646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006526:	2b00      	cmp	r3, #0
 8006528:	da0b      	bge.n	8006542 <USBD_StdEPReq+0x212>
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	3310      	adds	r3, #16
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	3304      	adds	r3, #4
 8006540:	e00b      	b.n	800655a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	3304      	adds	r3, #4
 800655a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2202      	movs	r2, #2
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fc61 	bl	8006e30 <USBD_CtlSendData>
              break;
 800656e:	e06a      	b.n	8006646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	da11      	bge.n	800659c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3324      	adds	r3, #36	; 0x24
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d117      	bne.n	80065c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fbda 	bl	8006d4e <USBD_CtlError>
                  break;
 800659a:	e054      	b.n	8006646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	f003 020f 	and.w	r2, r3, #15
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fbc7 	bl	8006d4e <USBD_CtlError>
                  break;
 80065c0:	e041      	b.n	8006646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da0b      	bge.n	80065e2 <USBD_StdEPReq+0x2b2>
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	3310      	adds	r3, #16
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	3304      	adds	r3, #4
 80065e0:	e00b      	b.n	80065fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	3304      	adds	r3, #4
 80065fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <USBD_StdEPReq+0x2d8>
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d103      	bne.n	8006610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e00e      	b.n	800662e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 f995 	bl	8007944 <USBD_LL_IsStallEP>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e002      	b.n	800662e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2202      	movs	r2, #2
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fbfb 	bl	8006e30 <USBD_CtlSendData>
              break;
 800663a:	e004      	b.n	8006646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fb85 	bl	8006d4e <USBD_CtlError>
              break;
 8006644:	bf00      	nop
          }
          break;
 8006646:	e004      	b.n	8006652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fb7f 	bl	8006d4e <USBD_CtlError>
          break;
 8006650:	bf00      	nop
      }
      break;
 8006652:	e005      	b.n	8006660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fb79 	bl	8006d4e <USBD_CtlError>
      break;
 800665c:	e000      	b.n	8006660 <USBD_StdEPReq+0x330>
      break;
 800665e:	bf00      	nop
  }

  return ret;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	885b      	ldrh	r3, [r3, #2]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	2b0e      	cmp	r3, #14
 800668e:	f200 8152 	bhi.w	8006936 <USBD_GetDescriptor+0x2ca>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <USBD_GetDescriptor+0x2c>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	08006709 	.word	0x08006709
 800669c:	08006721 	.word	0x08006721
 80066a0:	08006761 	.word	0x08006761
 80066a4:	08006937 	.word	0x08006937
 80066a8:	08006937 	.word	0x08006937
 80066ac:	080068d7 	.word	0x080068d7
 80066b0:	08006903 	.word	0x08006903
 80066b4:	08006937 	.word	0x08006937
 80066b8:	08006937 	.word	0x08006937
 80066bc:	08006937 	.word	0x08006937
 80066c0:	08006937 	.word	0x08006937
 80066c4:	08006937 	.word	0x08006937
 80066c8:	08006937 	.word	0x08006937
 80066cc:	08006937 	.word	0x08006937
 80066d0:	080066d5 	.word	0x080066d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	7c12      	ldrb	r2, [r2, #16]
 80066ec:	f107 0108 	add.w	r1, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066f6:	e126      	b.n	8006946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fb27 	bl	8006d4e <USBD_CtlError>
        err++;
 8006700:	7afb      	ldrb	r3, [r7, #11]
 8006702:	3301      	adds	r3, #1
 8006704:	72fb      	strb	r3, [r7, #11]
      break;
 8006706:	e11e      	b.n	8006946 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
      break;
 800671e:	e112      	b.n	8006946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7c1b      	ldrb	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10d      	bne.n	8006744 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f107 0208 	add.w	r2, r7, #8
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	2202      	movs	r2, #2
 8006740:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006742:	e100      	b.n	8006946 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	f107 0208 	add.w	r2, r7, #8
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	2202      	movs	r2, #2
 800675c:	701a      	strb	r2, [r3, #0]
      break;
 800675e:	e0f2      	b.n	8006946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b05      	cmp	r3, #5
 8006768:	f200 80ac 	bhi.w	80068c4 <USBD_GetDescriptor+0x258>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <USBD_GetDescriptor+0x108>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	0800678d 	.word	0x0800678d
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067f5 	.word	0x080067f5
 8006780:	08006829 	.word	0x08006829
 8006784:	0800685d 	.word	0x0800685d
 8006788:	08006891 	.word	0x08006891
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	7c12      	ldrb	r2, [r2, #16]
 80067a4:	f107 0108 	add.w	r1, r7, #8
 80067a8:	4610      	mov	r0, r2
 80067aa:	4798      	blx	r3
 80067ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ae:	e091      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 facb 	bl	8006d4e <USBD_CtlError>
            err++;
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	3301      	adds	r3, #1
 80067bc:	72fb      	strb	r3, [r7, #11]
          break;
 80067be:	e089      	b.n	80068d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	7c12      	ldrb	r2, [r2, #16]
 80067d8:	f107 0108 	add.w	r1, r7, #8
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067e2:	e077      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fab1 	bl	8006d4e <USBD_CtlError>
            err++;
 80067ec:	7afb      	ldrb	r3, [r7, #11]
 80067ee:	3301      	adds	r3, #1
 80067f0:	72fb      	strb	r3, [r7, #11]
          break;
 80067f2:	e06f      	b.n	80068d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	7c12      	ldrb	r2, [r2, #16]
 800680c:	f107 0108 	add.w	r1, r7, #8
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
 8006814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006816:	e05d      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa97 	bl	8006d4e <USBD_CtlError>
            err++;
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	3301      	adds	r3, #1
 8006824:	72fb      	strb	r3, [r7, #11]
          break;
 8006826:	e055      	b.n	80068d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	7c12      	ldrb	r2, [r2, #16]
 8006840:	f107 0108 	add.w	r1, r7, #8
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
 8006848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800684a:	e043      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa7d 	bl	8006d4e <USBD_CtlError>
            err++;
 8006854:	7afb      	ldrb	r3, [r7, #11]
 8006856:	3301      	adds	r3, #1
 8006858:	72fb      	strb	r3, [r7, #11]
          break;
 800685a:	e03b      	b.n	80068d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	7c12      	ldrb	r2, [r2, #16]
 8006874:	f107 0108 	add.w	r1, r7, #8
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
 800687c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687e:	e029      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa63 	bl	8006d4e <USBD_CtlError>
            err++;
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	3301      	adds	r3, #1
 800688c:	72fb      	strb	r3, [r7, #11]
          break;
 800688e:	e021      	b.n	80068d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	7c12      	ldrb	r2, [r2, #16]
 80068a8:	f107 0108 	add.w	r1, r7, #8
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068b2:	e00f      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa49 	bl	8006d4e <USBD_CtlError>
            err++;
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	3301      	adds	r3, #1
 80068c0:	72fb      	strb	r3, [r7, #11]
          break;
 80068c2:	e007      	b.n	80068d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa41 	bl	8006d4e <USBD_CtlError>
          err++;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	3301      	adds	r3, #1
 80068d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068d2:	bf00      	nop
      }
      break;
 80068d4:	e037      	b.n	8006946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7c1b      	ldrb	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	f107 0208 	add.w	r2, r7, #8
 80068ea:	4610      	mov	r0, r2
 80068ec:	4798      	blx	r3
 80068ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068f0:	e029      	b.n	8006946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa2a 	bl	8006d4e <USBD_CtlError>
        err++;
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	3301      	adds	r3, #1
 80068fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006900:	e021      	b.n	8006946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	7c1b      	ldrb	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10d      	bne.n	8006926 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	f107 0208 	add.w	r2, r7, #8
 8006916:	4610      	mov	r0, r2
 8006918:	4798      	blx	r3
 800691a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	2207      	movs	r2, #7
 8006922:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006924:	e00f      	b.n	8006946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa10 	bl	8006d4e <USBD_CtlError>
        err++;
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	3301      	adds	r3, #1
 8006932:	72fb      	strb	r3, [r7, #11]
      break;
 8006934:	e007      	b.n	8006946 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa08 	bl	8006d4e <USBD_CtlError>
      err++;
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	3301      	adds	r3, #1
 8006942:	72fb      	strb	r3, [r7, #11]
      break;
 8006944:	bf00      	nop
  }

  if (err != 0U)
 8006946:	7afb      	ldrb	r3, [r7, #11]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11e      	bne.n	800698a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	88db      	ldrh	r3, [r3, #6]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006954:	893b      	ldrh	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88da      	ldrh	r2, [r3, #6]
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	4293      	cmp	r3, r2
 8006962:	bf28      	it	cs
 8006964:	4613      	movcs	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800696a:	893b      	ldrh	r3, [r7, #8]
 800696c:	461a      	mov	r2, r3
 800696e:	68f9      	ldr	r1, [r7, #12]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa5d 	bl	8006e30 <USBD_CtlSendData>
 8006976:	e009      	b.n	800698c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9e7 	bl	8006d4e <USBD_CtlError>
 8006980:	e004      	b.n	800698c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 faae 	bl	8006ee4 <USBD_CtlSendStatus>
 8006988:	e000      	b.n	800698c <USBD_GetDescriptor+0x320>
    return;
 800698a:	bf00      	nop
  }
}
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop

08006994 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	889b      	ldrh	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d131      	bne.n	8006a0a <USBD_SetAddress+0x76>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88db      	ldrh	r3, [r3, #6]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d12d      	bne.n	8006a0a <USBD_SetAddress+0x76>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	885b      	ldrh	r3, [r3, #2]
 80069b2:	2b7f      	cmp	r3, #127	; 0x7f
 80069b4:	d829      	bhi.n	8006a0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	885b      	ldrh	r3, [r3, #2]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d104      	bne.n	80069d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f9bc 	bl	8006d4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	e01d      	b.n	8006a14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7bfa      	ldrb	r2, [r7, #15]
 80069dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 ffd9 	bl	800799c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa7a 	bl	8006ee4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d004      	beq.n	8006a00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fe:	e009      	b.n	8006a14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a08:	e004      	b.n	8006a14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f99e 	bl	8006d4e <USBD_CtlError>
  }
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	885b      	ldrh	r3, [r3, #2]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	4b4e      	ldr	r3, [pc, #312]	; (8006b6c <USBD_SetConfig+0x150>)
 8006a32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a34:	4b4d      	ldr	r3, [pc, #308]	; (8006b6c <USBD_SetConfig+0x150>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d905      	bls.n	8006a48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f985 	bl	8006d4e <USBD_CtlError>
    return USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e08c      	b.n	8006b62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d002      	beq.n	8006a5a <USBD_SetConfig+0x3e>
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d029      	beq.n	8006aac <USBD_SetConfig+0x90>
 8006a58:	e075      	b.n	8006b46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a5a:	4b44      	ldr	r3, [pc, #272]	; (8006b6c <USBD_SetConfig+0x150>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d020      	beq.n	8006aa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a62:	4b42      	ldr	r3, [pc, #264]	; (8006b6c <USBD_SetConfig+0x150>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a6c:	4b3f      	ldr	r3, [pc, #252]	; (8006b6c <USBD_SetConfig+0x150>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fe ffb7 	bl	80059e6 <USBD_SetClassConfig>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f962 	bl	8006d4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a92:	e065      	b.n	8006b60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa25 	bl	8006ee4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006aa2:	e05d      	b.n	8006b60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa1d 	bl	8006ee4 <USBD_CtlSendStatus>
      break;
 8006aaa:	e059      	b.n	8006b60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006aac:	4b2f      	ldr	r3, [pc, #188]	; (8006b6c <USBD_SetConfig+0x150>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d112      	bne.n	8006ada <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006abc:	4b2b      	ldr	r3, [pc, #172]	; (8006b6c <USBD_SetConfig+0x150>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ac6:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <USBD_SetConfig+0x150>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fe ffa6 	bl	8005a1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa06 	bl	8006ee4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ad8:	e042      	b.n	8006b60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ada:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <USBD_SetConfig+0x150>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d02a      	beq.n	8006b3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fe ff94 	bl	8005a1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006af6:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <USBD_SetConfig+0x150>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b00:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <USBD_SetConfig+0x150>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fe ff6d 	bl	80059e6 <USBD_SetClassConfig>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00f      	beq.n	8006b36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f918 	bl	8006d4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fe ff79 	bl	8005a1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b34:	e014      	b.n	8006b60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f9d4 	bl	8006ee4 <USBD_CtlSendStatus>
      break;
 8006b3c:	e010      	b.n	8006b60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f9d0 	bl	8006ee4 <USBD_CtlSendStatus>
      break;
 8006b44:	e00c      	b.n	8006b60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f900 	bl	8006d4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <USBD_SetConfig+0x150>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fe ff62 	bl	8005a1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5e:	bf00      	nop
  }

  return ret;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000254 	.word	0x20000254

08006b70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	88db      	ldrh	r3, [r3, #6]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d004      	beq.n	8006b8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f8e2 	bl	8006d4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b8a:	e023      	b.n	8006bd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	dc02      	bgt.n	8006b9e <USBD_GetConfig+0x2e>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dc03      	bgt.n	8006ba4 <USBD_GetConfig+0x34>
 8006b9c:	e015      	b.n	8006bca <USBD_GetConfig+0x5a>
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d00b      	beq.n	8006bba <USBD_GetConfig+0x4a>
 8006ba2:	e012      	b.n	8006bca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3308      	adds	r3, #8
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f93c 	bl	8006e30 <USBD_CtlSendData>
        break;
 8006bb8:	e00c      	b.n	8006bd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f934 	bl	8006e30 <USBD_CtlSendData>
        break;
 8006bc8:	e004      	b.n	8006bd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8be 	bl	8006d4e <USBD_CtlError>
        break;
 8006bd2:	bf00      	nop
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d81e      	bhi.n	8006c32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	88db      	ldrh	r3, [r3, #6]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d004      	beq.n	8006c06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8a5 	bl	8006d4e <USBD_CtlError>
        break;
 8006c04:	e01a      	b.n	8006c3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f043 0202 	orr.w	r2, r3, #2
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	330c      	adds	r3, #12
 8006c26:	2202      	movs	r2, #2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f900 	bl	8006e30 <USBD_CtlSendData>
      break;
 8006c30:	e004      	b.n	8006c3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f88a 	bl	8006d4e <USBD_CtlError>
      break;
 8006c3a:	bf00      	nop
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	885b      	ldrh	r3, [r3, #2]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f940 	bl	8006ee4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c64:	e013      	b.n	8006c8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	885b      	ldrh	r3, [r3, #2]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d10b      	bne.n	8006c86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	889b      	ldrh	r3, [r3, #4]
 8006c72:	0a1b      	lsrs	r3, r3, #8
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f930 	bl	8006ee4 <USBD_CtlSendStatus>
}
 8006c84:	e003      	b.n	8006c8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f860 	bl	8006d4e <USBD_CtlError>
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d80b      	bhi.n	8006cc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10c      	bne.n	8006cd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f910 	bl	8006ee4 <USBD_CtlSendStatus>
      }
      break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f840 	bl	8006d4e <USBD_CtlError>
      break;
 8006cce:	e000      	b.n	8006cd2 <USBD_ClrFeature+0x3c>
      break;
 8006cd0:	bf00      	nop
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	781a      	ldrb	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fa17 	bl	8006138 <SWAPBYTE>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7ff fa0a 	bl	8006138 <SWAPBYTE>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff f9fd 	bl	8006138 <SWAPBYTE>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	80da      	strh	r2, [r3, #6]
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d58:	2180      	movs	r1, #128	; 0x80
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fd86 	bl	800786c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fd82 	bl	800786c <USBD_LL_StallEP>
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d036      	beq.n	8006df4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f000 f836 	bl	8006dfc <USBD_GetLen>
 8006d90:	4603      	mov	r3, r0
 8006d92:	3301      	adds	r3, #1
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	4413      	add	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	7812      	ldrb	r2, [r2, #0]
 8006da8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	3301      	adds	r3, #1
 8006dae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	4413      	add	r3, r2
 8006db6:	2203      	movs	r2, #3
 8006db8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dc0:	e013      	b.n	8006dea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	7812      	ldrb	r2, [r2, #0]
 8006dcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	613b      	str	r3, [r7, #16]
    idx++;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	4413      	add	r3, r2
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	3301      	adds	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e7      	bne.n	8006dc2 <USBD_GetString+0x52>
 8006df2:	e000      	b.n	8006df6 <USBD_GetString+0x86>
    return;
 8006df4:	bf00      	nop
  }
}
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e0c:	e005      	b.n	8006e1a <USBD_GetLen+0x1e>
  {
    len++;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	3301      	adds	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f5      	bne.n	8006e0e <USBD_GetLen+0x12>
  }

  return len;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	2100      	movs	r1, #0
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fdd6 	bl	8007a08 <USBD_LL_Transmit>

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	2100      	movs	r1, #0
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fdc5 	bl	8007a08 <USBD_LL_Transmit>

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2203      	movs	r2, #3
 8006e98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fde0 	bl	8007a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fdcf 	bl	8007a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2100      	movs	r1, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fd84 	bl	8007a08 <USBD_LL_Transmit>

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2205      	movs	r2, #5
 8006f16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fda9 	bl	8007a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f34:	2200      	movs	r2, #0
 8006f36:	4912      	ldr	r1, [pc, #72]	; (8006f80 <MX_USB_DEVICE_Init+0x50>)
 8006f38:	4812      	ldr	r0, [pc, #72]	; (8006f84 <MX_USB_DEVICE_Init+0x54>)
 8006f3a:	f7fe fcd7 	bl	80058ec <USBD_Init>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f44:	f7f9 fb80 	bl	8000648 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f48:	490f      	ldr	r1, [pc, #60]	; (8006f88 <MX_USB_DEVICE_Init+0x58>)
 8006f4a:	480e      	ldr	r0, [pc, #56]	; (8006f84 <MX_USB_DEVICE_Init+0x54>)
 8006f4c:	f7fe fcfe 	bl	800594c <USBD_RegisterClass>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f56:	f7f9 fb77 	bl	8000648 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f5a:	490c      	ldr	r1, [pc, #48]	; (8006f8c <MX_USB_DEVICE_Init+0x5c>)
 8006f5c:	4809      	ldr	r0, [pc, #36]	; (8006f84 <MX_USB_DEVICE_Init+0x54>)
 8006f5e:	f7fe fbf5 	bl	800574c <USBD_CDC_RegisterInterface>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f68:	f7f9 fb6e 	bl	8000648 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f6c:	4805      	ldr	r0, [pc, #20]	; (8006f84 <MX_USB_DEVICE_Init+0x54>)
 8006f6e:	f7fe fd23 	bl	80059b8 <USBD_Start>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f78:	f7f9 fb66 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f7c:	bf00      	nop
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200000b0 	.word	0x200000b0
 8006f84:	20000258 	.word	0x20000258
 8006f88:	2000001c 	.word	0x2000001c
 8006f8c:	2000009c 	.word	0x2000009c

08006f90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f94:	2200      	movs	r2, #0
 8006f96:	4905      	ldr	r1, [pc, #20]	; (8006fac <CDC_Init_FS+0x1c>)
 8006f98:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <CDC_Init_FS+0x20>)
 8006f9a:	f7fe fbf1 	bl	8005780 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f9e:	4905      	ldr	r1, [pc, #20]	; (8006fb4 <CDC_Init_FS+0x24>)
 8006fa0:	4803      	ldr	r0, [pc, #12]	; (8006fb0 <CDC_Init_FS+0x20>)
 8006fa2:	f7fe fc0f 	bl	80057c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000d34 	.word	0x20000d34
 8006fb0:	20000258 	.word	0x20000258
 8006fb4:	20000534 	.word	0x20000534

08006fb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b23      	cmp	r3, #35	; 0x23
 8006fdc:	d84a      	bhi.n	8007074 <CDC_Control_FS+0xac>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <CDC_Control_FS+0x1c>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007075 	.word	0x08007075
 8006fe8:	08007075 	.word	0x08007075
 8006fec:	08007075 	.word	0x08007075
 8006ff0:	08007075 	.word	0x08007075
 8006ff4:	08007075 	.word	0x08007075
 8006ff8:	08007075 	.word	0x08007075
 8006ffc:	08007075 	.word	0x08007075
 8007000:	08007075 	.word	0x08007075
 8007004:	08007075 	.word	0x08007075
 8007008:	08007075 	.word	0x08007075
 800700c:	08007075 	.word	0x08007075
 8007010:	08007075 	.word	0x08007075
 8007014:	08007075 	.word	0x08007075
 8007018:	08007075 	.word	0x08007075
 800701c:	08007075 	.word	0x08007075
 8007020:	08007075 	.word	0x08007075
 8007024:	08007075 	.word	0x08007075
 8007028:	08007075 	.word	0x08007075
 800702c:	08007075 	.word	0x08007075
 8007030:	08007075 	.word	0x08007075
 8007034:	08007075 	.word	0x08007075
 8007038:	08007075 	.word	0x08007075
 800703c:	08007075 	.word	0x08007075
 8007040:	08007075 	.word	0x08007075
 8007044:	08007075 	.word	0x08007075
 8007048:	08007075 	.word	0x08007075
 800704c:	08007075 	.word	0x08007075
 8007050:	08007075 	.word	0x08007075
 8007054:	08007075 	.word	0x08007075
 8007058:	08007075 	.word	0x08007075
 800705c:	08007075 	.word	0x08007075
 8007060:	08007075 	.word	0x08007075
 8007064:	08007075 	.word	0x08007075
 8007068:	08007075 	.word	0x08007075
 800706c:	08007075 	.word	0x08007075
 8007070:	08007075 	.word	0x08007075
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007074:	bf00      	nop
  }

  return (USBD_OK);
 8007076:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <CDC_Receive_FS+0x24>)
 8007092:	f7fe fb97 	bl	80057c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007096:	4804      	ldr	r0, [pc, #16]	; (80070a8 <CDC_Receive_FS+0x24>)
 8007098:	f7fe fbf2 	bl	8005880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800709c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000258 	.word	0x20000258

080070ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <CDC_Transmit_FS+0x48>)
 80070be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e00b      	b.n	80070ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80070d2:	887b      	ldrh	r3, [r7, #2]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4806      	ldr	r0, [pc, #24]	; (80070f4 <CDC_Transmit_FS+0x48>)
 80070da:	f7fe fb51 	bl	8005780 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <CDC_Transmit_FS+0x48>)
 80070e0:	f7fe fb8e 	bl	8005800 <USBD_CDC_TransmitPacket>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000258 	.word	0x20000258

080070f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800710a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2212      	movs	r2, #18
 800712c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800712e:	4b03      	ldr	r3, [pc, #12]	; (800713c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	200000d0 	.word	0x200000d0

08007140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2204      	movs	r2, #4
 8007150:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	200000f0 	.word	0x200000f0

08007164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4907      	ldr	r1, [pc, #28]	; (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
 800717a:	4808      	ldr	r0, [pc, #32]	; (800719c <USBD_FS_ProductStrDescriptor+0x38>)
 800717c:	f7ff fdf8 	bl	8006d70 <USBD_GetString>
 8007180:	e004      	b.n	800718c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	4904      	ldr	r1, [pc, #16]	; (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
 8007186:	4805      	ldr	r0, [pc, #20]	; (800719c <USBD_FS_ProductStrDescriptor+0x38>)
 8007188:	f7ff fdf2 	bl	8006d70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20001534 	.word	0x20001534
 800719c:	08008550 	.word	0x08008550

080071a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	4904      	ldr	r1, [pc, #16]	; (80071c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071b0:	4804      	ldr	r0, [pc, #16]	; (80071c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071b2:	f7ff fddd 	bl	8006d70 <USBD_GetString>
  return USBD_StrDesc;
 80071b6:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20001534 	.word	0x20001534
 80071c4:	08008568 	.word	0x08008568

080071c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	221a      	movs	r2, #26
 80071d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071da:	f000 f855 	bl	8007288 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071de:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	200000f4 	.word	0x200000f4

080071ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4907      	ldr	r1, [pc, #28]	; (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007202:	4808      	ldr	r0, [pc, #32]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007204:	f7ff fdb4 	bl	8006d70 <USBD_GetString>
 8007208:	e004      	b.n	8007214 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4904      	ldr	r1, [pc, #16]	; (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
 800720e:	4805      	ldr	r0, [pc, #20]	; (8007224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007210:	f7ff fdae 	bl	8006d70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20001534 	.word	0x20001534
 8007224:	0800857c 	.word	0x0800857c

08007228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4907      	ldr	r1, [pc, #28]	; (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800723e:	4808      	ldr	r0, [pc, #32]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007240:	f7ff fd96 	bl	8006d70 <USBD_GetString>
 8007244:	e004      	b.n	8007250 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	4904      	ldr	r1, [pc, #16]	; (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800724a:	4805      	ldr	r0, [pc, #20]	; (8007260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800724c:	f7ff fd90 	bl	8006d70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20001534 	.word	0x20001534
 8007260:	08008588 	.word	0x08008588

08007264 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	6039      	str	r1, [r7, #0]
 800726e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	220c      	movs	r2, #12
 8007274:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	200000e4 	.word	0x200000e4

08007288 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <Get_SerialNum+0x44>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007294:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <Get_SerialNum+0x48>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <Get_SerialNum+0x4c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4413      	add	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072ae:	2208      	movs	r2, #8
 80072b0:	4909      	ldr	r1, [pc, #36]	; (80072d8 <Get_SerialNum+0x50>)
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f814 	bl	80072e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072b8:	2204      	movs	r2, #4
 80072ba:	4908      	ldr	r1, [pc, #32]	; (80072dc <Get_SerialNum+0x54>)
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f000 f80f 	bl	80072e0 <IntToUnicode>
  }
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	1fff7590 	.word	0x1fff7590
 80072d0:	1fff7594 	.word	0x1fff7594
 80072d4:	1fff7598 	.word	0x1fff7598
 80072d8:	200000f6 	.word	0x200000f6
 80072dc:	20000106 	.word	0x20000106

080072e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	e027      	b.n	8007348 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	0f1b      	lsrs	r3, r3, #28
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d80b      	bhi.n	8007318 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	0f1b      	lsrs	r3, r3, #28
 8007304:	b2da      	uxtb	r2, r3
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	4619      	mov	r1, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	440b      	add	r3, r1
 8007310:	3230      	adds	r2, #48	; 0x30
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e00a      	b.n	800732e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	0f1b      	lsrs	r3, r3, #28
 800731c:	b2da      	uxtb	r2, r3
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4619      	mov	r1, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	440b      	add	r3, r1
 8007328:	3237      	adds	r2, #55	; 0x37
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	3301      	adds	r3, #1
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	3301      	adds	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
 8007348:	7dfa      	ldrb	r2, [r7, #23]
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	429a      	cmp	r2, r3
 800734e:	d3d3      	bcc.n	80072f8 <IntToUnicode+0x18>
  }
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b0ac      	sub	sp, #176	; 0xb0
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	609a      	str	r2, [r3, #8]
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	2288      	movs	r2, #136	; 0x88
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fc51 	bl	8007c28 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800738e:	d173      	bne.n	8007478 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007394:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007396:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800739a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800739e:	2303      	movs	r3, #3
 80073a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80073a6:	230c      	movs	r3, #12
 80073a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80073aa:	2307      	movs	r3, #7
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80073ae:	2304      	movs	r3, #4
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80073b2:	2302      	movs	r3, #2
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80073b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80073ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fb fe01 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80073cc:	f7f9 f93c 	bl	8000648 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073d0:	4b2b      	ldr	r3, [pc, #172]	; (8007480 <HAL_PCD_MspInit+0x120>)
 80073d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d4:	4a2a      	ldr	r2, [pc, #168]	; (8007480 <HAL_PCD_MspInit+0x120>)
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073dc:	4b28      	ldr	r3, [pc, #160]	; (8007480 <HAL_PCD_MspInit+0x120>)
 80073de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	613b      	str	r3, [r7, #16]
 80073e6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f0:	2302      	movs	r3, #2
 80073f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073fc:	2303      	movs	r3, #3
 80073fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007402:	230a      	movs	r3, #10
 8007404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800740c:	4619      	mov	r1, r3
 800740e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007412:	f7f9 fc0f 	bl	8000c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <HAL_PCD_MspInit+0x120>)
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <HAL_PCD_MspInit+0x120>)
 800741c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007422:	4b17      	ldr	r3, [pc, #92]	; (8007480 <HAL_PCD_MspInit+0x120>)
 8007424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <HAL_PCD_MspInit+0x120>)
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d114      	bne.n	8007464 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800743a:	4b11      	ldr	r3, [pc, #68]	; (8007480 <HAL_PCD_MspInit+0x120>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	4a10      	ldr	r2, [pc, #64]	; (8007480 <HAL_PCD_MspInit+0x120>)
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6593      	str	r3, [r2, #88]	; 0x58
 8007446:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <HAL_PCD_MspInit+0x120>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007452:	f7fa ffd7 	bl	8002404 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <HAL_PCD_MspInit+0x120>)
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745a:	4a09      	ldr	r2, [pc, #36]	; (8007480 <HAL_PCD_MspInit+0x120>)
 800745c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007460:	6593      	str	r3, [r2, #88]	; 0x58
 8007462:	e001      	b.n	8007468 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007464:	f7fa ffce 	bl	8002404 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	2043      	movs	r0, #67	; 0x43
 800746e:	f7f9 fbaa 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007472:	2043      	movs	r0, #67	; 0x43
 8007474:	f7f9 fbc3 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007478:	bf00      	nop
 800747a:	37b0      	adds	r7, #176	; 0xb0
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40021000 	.word	0x40021000

08007484 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe fad9 	bl	8005a52 <USBD_LL_SetupStage>
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	4619      	mov	r1, r3
 80074d2:	f7fe fb13 	bl	8005afc <USBD_LL_DataOutStage>
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	3348      	adds	r3, #72	; 0x48
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	4619      	mov	r1, r3
 8007506:	f7fe fbac 	bl	8005c62 <USBD_LL_DataInStage>
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe fce6 	bl	8005ef2 <USBD_LL_SOF>
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d001      	beq.n	8007546 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007542:	f7f9 f881 	bl	8000648 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800754c:	7bfa      	ldrb	r2, [r7, #15]
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fc8a 	bl	8005e6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fc32 	bl	8005dc6 <USBD_LL_Reset>
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fc79 	bl	8005e8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <HAL_PCD_SuspendCallback+0x48>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	4a03      	ldr	r2, [pc, #12]	; (80075b4 <HAL_PCD_SuspendCallback+0x48>)
 80075a6:	f043 0306 	orr.w	r3, r3, #6
 80075aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <HAL_PCD_ResumeCallback+0x4c>)
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	4a07      	ldr	r2, [pc, #28]	; (8007604 <HAL_PCD_ResumeCallback+0x4c>)
 80075e6:	f023 0306 	bic.w	r3, r3, #6
 80075ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80075ec:	f000 faf6 	bl	8007bdc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fc63 	bl	8005ec2 <USBD_LL_Resume>
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	e000ed00 	.word	0xe000ed00

08007608 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fcb9 	bl	8005f96 <USBD_LL_IsoOUTIncomplete>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fc75 	bl	8005f32 <USBD_LL_IsoINIncomplete>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fccb 	bl	8005ffa <USBD_LL_DevConnected>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fcc8 	bl	8006010 <USBD_LL_DevDisconnected>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d13c      	bne.n	8007712 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <USBD_LL_Init+0x94>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	; (800771c <USBD_LL_Init+0x94>)
 80076a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <USBD_LL_Init+0x94>)
 80076aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80076b0:	4b1a      	ldr	r3, [pc, #104]	; (800771c <USBD_LL_Init+0x94>)
 80076b2:	2206      	movs	r2, #6
 80076b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076b6:	4b19      	ldr	r3, [pc, #100]	; (800771c <USBD_LL_Init+0x94>)
 80076b8:	2202      	movs	r2, #2
 80076ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076bc:	4b17      	ldr	r3, [pc, #92]	; (800771c <USBD_LL_Init+0x94>)
 80076be:	2202      	movs	r2, #2
 80076c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <USBD_LL_Init+0x94>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076c8:	4b14      	ldr	r3, [pc, #80]	; (800771c <USBD_LL_Init+0x94>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <USBD_LL_Init+0x94>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <USBD_LL_Init+0x94>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <USBD_LL_Init+0x94>)
 80076dc:	2200      	movs	r2, #0
 80076de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076e0:	4b0e      	ldr	r3, [pc, #56]	; (800771c <USBD_LL_Init+0x94>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076e6:	480d      	ldr	r0, [pc, #52]	; (800771c <USBD_LL_Init+0x94>)
 80076e8:	f7f9 fc80 	bl	8000fec <HAL_PCD_Init>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076f2:	f7f8 ffa9 	bl	8000648 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	4808      	ldr	r0, [pc, #32]	; (800771c <USBD_LL_Init+0x94>)
 80076fa:	f7fa fdea 	bl	80022d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076fe:	2240      	movs	r2, #64	; 0x40
 8007700:	2100      	movs	r1, #0
 8007702:	4806      	ldr	r0, [pc, #24]	; (800771c <USBD_LL_Init+0x94>)
 8007704:	f7fa fd9e 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007708:	2280      	movs	r2, #128	; 0x80
 800770a:	2101      	movs	r1, #1
 800770c:	4803      	ldr	r0, [pc, #12]	; (800771c <USBD_LL_Init+0x94>)
 800770e:	f7fa fd99 	bl	8002244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20001734 	.word	0x20001734

08007720 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007736:	4618      	mov	r0, r3
 8007738:	f7f9 fd7c 	bl	8001234 <HAL_PCD_Start>
 800773c:	4603      	mov	r3, r0
 800773e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d816      	bhi.n	8007774 <USBD_LL_Start+0x54>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_LL_Start+0x2c>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	0800775d 	.word	0x0800775d
 8007750:	08007763 	.word	0x08007763
 8007754:	08007769 	.word	0x08007769
 8007758:	0800776f 	.word	0x0800776f
    case HAL_OK :
      usb_status = USBD_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
    break;
 8007760:	e00b      	b.n	800777a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	73fb      	strb	r3, [r7, #15]
    break;
 8007766:	e008      	b.n	800777a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e005      	b.n	800777a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e002      	b.n	800777a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	bf00      	nop
  }
  return usb_status;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	4608      	mov	r0, r1
 800778e:	4611      	mov	r1, r2
 8007790:	461a      	mov	r2, r3
 8007792:	4603      	mov	r3, r0
 8007794:	70fb      	strb	r3, [r7, #3]
 8007796:	460b      	mov	r3, r1
 8007798:	70bb      	strb	r3, [r7, #2]
 800779a:	4613      	mov	r3, r2
 800779c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077ac:	78bb      	ldrb	r3, [r7, #2]
 80077ae:	883a      	ldrh	r2, [r7, #0]
 80077b0:	78f9      	ldrb	r1, [r7, #3]
 80077b2:	f7fa fa26 	bl	8001c02 <HAL_PCD_EP_Open>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d817      	bhi.n	80077f0 <USBD_LL_OpenEP+0x6c>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <USBD_LL_OpenEP+0x44>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077df 	.word	0x080077df
 80077d0:	080077e5 	.word	0x080077e5
 80077d4:	080077eb 	.word	0x080077eb
    case HAL_OK :
      usb_status = USBD_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
    break;
 80077dc:	e00b      	b.n	80077f6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	73fb      	strb	r3, [r7, #15]
    break;
 80077e2:	e008      	b.n	80077f6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
    break;
 80077e8:	e005      	b.n	80077f6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	73fb      	strb	r3, [r7, #15]
    break;
 80077ee:	e002      	b.n	80077f6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	73fb      	strb	r3, [r7, #15]
    break;
 80077f4:	bf00      	nop
  }
  return usb_status;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fa fa57 	bl	8001cd2 <HAL_PCD_EP_Close>
 8007824:	4603      	mov	r3, r0
 8007826:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b03      	cmp	r3, #3
 800782c:	d816      	bhi.n	800785c <USBD_LL_CloseEP+0x5c>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBD_LL_CloseEP+0x34>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007845 	.word	0x08007845
 8007838:	0800784b 	.word	0x0800784b
 800783c:	08007851 	.word	0x08007851
 8007840:	08007857 	.word	0x08007857
    case HAL_OK :
      usb_status = USBD_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
    break;
 8007848:	e00b      	b.n	8007862 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800784a:	2303      	movs	r3, #3
 800784c:	73fb      	strb	r3, [r7, #15]
    break;
 800784e:	e008      	b.n	8007862 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
    break;
 8007854:	e005      	b.n	8007862 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	73fb      	strb	r3, [r7, #15]
    break;
 800785a:	e002      	b.n	8007862 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	73fb      	strb	r3, [r7, #15]
    break;
 8007860:	bf00      	nop
  }
  return usb_status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f7fa fae6 	bl	8001e5c <HAL_PCD_EP_SetStall>
 8007890:	4603      	mov	r3, r0
 8007892:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d816      	bhi.n	80078c8 <USBD_LL_StallEP+0x5c>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <USBD_LL_StallEP+0x34>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078b7 	.word	0x080078b7
 80078a8:	080078bd 	.word	0x080078bd
 80078ac:	080078c3 	.word	0x080078c3
    case HAL_OK :
      usb_status = USBD_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
    break;
 80078b4:	e00b      	b.n	80078ce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078b6:	2303      	movs	r3, #3
 80078b8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ba:	e008      	b.n	80078ce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
    break;
 80078c0:	e005      	b.n	80078ce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078c2:	2303      	movs	r3, #3
 80078c4:	73fb      	strb	r3, [r7, #15]
    break;
 80078c6:	e002      	b.n	80078ce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80078c8:	2303      	movs	r3, #3
 80078ca:	73fb      	strb	r3, [r7, #15]
    break;
 80078cc:	bf00      	nop
  }
  return usb_status;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fa fb12 	bl	8001f20 <HAL_PCD_EP_ClrStall>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b03      	cmp	r3, #3
 8007904:	d816      	bhi.n	8007934 <USBD_LL_ClearStallEP+0x5c>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <USBD_LL_ClearStallEP+0x34>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800791d 	.word	0x0800791d
 8007910:	08007923 	.word	0x08007923
 8007914:	08007929 	.word	0x08007929
 8007918:	0800792f 	.word	0x0800792f
    case HAL_OK :
      usb_status = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
    break;
 8007920:	e00b      	b.n	800793a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
    break;
 8007926:	e008      	b.n	800793a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
    break;
 800792c:	e005      	b.n	800793a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	73fb      	strb	r3, [r7, #15]
    break;
 8007932:	e002      	b.n	800793a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	73fb      	strb	r3, [r7, #15]
    break;
 8007938:	bf00      	nop
  }
  return usb_status;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800795c:	2b00      	cmp	r3, #0
 800795e:	da0b      	bge.n	8007978 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	333e      	adds	r3, #62	; 0x3e
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	e00b      	b.n	8007990 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	4613      	mov	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800798e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fa f8fc 	bl	8001bb8 <HAL_PCD_SetAddress>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d816      	bhi.n	80079f8 <USBD_LL_SetUSBAddress+0x5c>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <USBD_LL_SetUSBAddress+0x34>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079e1 	.word	0x080079e1
 80079d4:	080079e7 	.word	0x080079e7
 80079d8:	080079ed 	.word	0x080079ed
 80079dc:	080079f3 	.word	0x080079f3
    case HAL_OK :
      usb_status = USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
    break;
 80079e4:	e00b      	b.n	80079fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079e6:	2303      	movs	r3, #3
 80079e8:	73fb      	strb	r3, [r7, #15]
    break;
 80079ea:	e008      	b.n	80079fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
    break;
 80079f0:	e005      	b.n	80079fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079f2:	2303      	movs	r3, #3
 80079f4:	73fb      	strb	r3, [r7, #15]
    break;
 80079f6:	e002      	b.n	80079fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]
    break;
 80079fc:	bf00      	nop
  }
  return usb_status;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	460b      	mov	r3, r1
 8007a16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a26:	7af9      	ldrb	r1, [r7, #11]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	f7fa f9e5 	bl	8001dfa <HAL_PCD_EP_Transmit>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d816      	bhi.n	8007a68 <USBD_LL_Transmit+0x60>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <USBD_LL_Transmit+0x38>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a51 	.word	0x08007a51
 8007a44:	08007a57 	.word	0x08007a57
 8007a48:	08007a5d 	.word	0x08007a5d
 8007a4c:	08007a63 	.word	0x08007a63
    case HAL_OK :
      usb_status = USBD_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]
    break;
 8007a54:	e00b      	b.n	8007a6e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a56:	2303      	movs	r3, #3
 8007a58:	75fb      	strb	r3, [r7, #23]
    break;
 8007a5a:	e008      	b.n	8007a6e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007a60:	e005      	b.n	8007a6e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	75fb      	strb	r3, [r7, #23]
    break;
 8007a66:	e002      	b.n	8007a6e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007a6c:	bf00      	nop
  }
  return usb_status;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	460b      	mov	r3, r1
 8007a86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a96:	7af9      	ldrb	r1, [r7, #11]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	f7fa f963 	bl	8001d66 <HAL_PCD_EP_Receive>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007aa4:	7dbb      	ldrb	r3, [r7, #22]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d816      	bhi.n	8007ad8 <USBD_LL_PrepareReceive+0x60>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBD_LL_PrepareReceive+0x38>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ac7 	.word	0x08007ac7
 8007ab8:	08007acd 	.word	0x08007acd
 8007abc:	08007ad3 	.word	0x08007ad3
    case HAL_OK :
      usb_status = USBD_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	75fb      	strb	r3, [r7, #23]
    break;
 8007ac4:	e00b      	b.n	8007ade <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	75fb      	strb	r3, [r7, #23]
    break;
 8007aca:	e008      	b.n	8007ade <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
    break;
 8007ad0:	e005      	b.n	8007ade <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ad6:	e002      	b.n	8007ade <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	75fb      	strb	r3, [r7, #23]
    break;
 8007adc:	bf00      	nop
  }
  return usb_status;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fa f963 	bl	8001dca <HAL_PCD_EP_GetRxCount>
 8007b04:	4603      	mov	r3, r0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_PCDEx_LPM_Callback+0x18>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d01f      	beq.n	8007b66 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007b26:	e03b      	b.n	8007ba0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007b30:	f000 f854 	bl	8007bdc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b34:	4b1c      	ldr	r3, [pc, #112]	; (8007ba8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b3a:	f023 0306 	bic.w	r3, r3, #6
 8007b3e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe f9af 	bl	8005ec2 <USBD_LL_Resume>
    break;
 8007b64:	e01c      	b.n	8007ba0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6812      	ldr	r2, [r2, #0]
 8007b74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b78:	f043 0301 	orr.w	r3, r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe f980 	bl	8005e8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	4a04      	ldr	r2, [pc, #16]	; (8007ba8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b98:	f043 0306 	orr.w	r3, r3, #6
 8007b9c:	6113      	str	r3, [r2, #16]
    break;
 8007b9e:	bf00      	nop
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <USBD_static_malloc+0x18>)
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20001c40 	.word	0x20001c40

08007bc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007be0:	f7f8 fb8c 	bl	80002fc <SystemClock_Config>
}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <siprintf>:
 8007be8:	b40e      	push	{r1, r2, r3}
 8007bea:	b500      	push	{lr}
 8007bec:	b09c      	sub	sp, #112	; 0x70
 8007bee:	ab1d      	add	r3, sp, #116	; 0x74
 8007bf0:	9002      	str	r0, [sp, #8]
 8007bf2:	9006      	str	r0, [sp, #24]
 8007bf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bf8:	4809      	ldr	r0, [pc, #36]	; (8007c20 <siprintf+0x38>)
 8007bfa:	9107      	str	r1, [sp, #28]
 8007bfc:	9104      	str	r1, [sp, #16]
 8007bfe:	4909      	ldr	r1, [pc, #36]	; (8007c24 <siprintf+0x3c>)
 8007c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c04:	9105      	str	r1, [sp, #20]
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	a902      	add	r1, sp, #8
 8007c0c:	f000 f89a 	bl	8007d44 <_svfiprintf_r>
 8007c10:	9b02      	ldr	r3, [sp, #8]
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	b01c      	add	sp, #112	; 0x70
 8007c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c1c:	b003      	add	sp, #12
 8007c1e:	4770      	bx	lr
 8007c20:	2000015c 	.word	0x2000015c
 8007c24:	ffff0208 	.word	0xffff0208

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <__errno>:
 8007c38:	4b01      	ldr	r3, [pc, #4]	; (8007c40 <__errno+0x8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	2000015c 	.word	0x2000015c

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4d0d      	ldr	r5, [pc, #52]	; (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2600      	movs	r6, #0
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4d0b      	ldr	r5, [pc, #44]	; (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	; (8007c88 <__libc_init_array+0x44>)
 8007c58:	f000 fc6a 	bl	8008530 <_init>
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2600      	movs	r6, #0
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	0800860c 	.word	0x0800860c
 8007c80:	0800860c 	.word	0x0800860c
 8007c84:	0800860c 	.word	0x0800860c
 8007c88:	08008610 	.word	0x08008610

08007c8c <__retarget_lock_acquire_recursive>:
 8007c8c:	4770      	bx	lr

08007c8e <__retarget_lock_release_recursive>:
 8007c8e:	4770      	bx	lr

08007c90 <__ssputs_r>:
 8007c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	688e      	ldr	r6, [r1, #8]
 8007c96:	461f      	mov	r7, r3
 8007c98:	42be      	cmp	r6, r7
 8007c9a:	680b      	ldr	r3, [r1, #0]
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4690      	mov	r8, r2
 8007ca2:	d82c      	bhi.n	8007cfe <__ssputs_r+0x6e>
 8007ca4:	898a      	ldrh	r2, [r1, #12]
 8007ca6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007caa:	d026      	beq.n	8007cfa <__ssputs_r+0x6a>
 8007cac:	6965      	ldr	r5, [r4, #20]
 8007cae:	6909      	ldr	r1, [r1, #16]
 8007cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb4:	eba3 0901 	sub.w	r9, r3, r1
 8007cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cbc:	1c7b      	adds	r3, r7, #1
 8007cbe:	444b      	add	r3, r9
 8007cc0:	106d      	asrs	r5, r5, #1
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	bf38      	it	cc
 8007cc6:	461d      	movcc	r5, r3
 8007cc8:	0553      	lsls	r3, r2, #21
 8007cca:	d527      	bpl.n	8007d1c <__ssputs_r+0x8c>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f000 f957 	bl	8007f80 <_malloc_r>
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	b360      	cbz	r0, 8007d30 <__ssputs_r+0xa0>
 8007cd6:	6921      	ldr	r1, [r4, #16]
 8007cd8:	464a      	mov	r2, r9
 8007cda:	f000 fbc7 	bl	800846c <memcpy>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	6126      	str	r6, [r4, #16]
 8007cec:	6165      	str	r5, [r4, #20]
 8007cee:	444e      	add	r6, r9
 8007cf0:	eba5 0509 	sub.w	r5, r5, r9
 8007cf4:	6026      	str	r6, [r4, #0]
 8007cf6:	60a5      	str	r5, [r4, #8]
 8007cf8:	463e      	mov	r6, r7
 8007cfa:	42be      	cmp	r6, r7
 8007cfc:	d900      	bls.n	8007d00 <__ssputs_r+0x70>
 8007cfe:	463e      	mov	r6, r7
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	4632      	mov	r2, r6
 8007d04:	4641      	mov	r1, r8
 8007d06:	f000 fb86 	bl	8008416 <memmove>
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	1b9b      	subs	r3, r3, r6
 8007d0e:	60a3      	str	r3, [r4, #8]
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	4433      	add	r3, r6
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	2000      	movs	r0, #0
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	f000 fb4b 	bl	80083b8 <_realloc_r>
 8007d22:	4606      	mov	r6, r0
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1e0      	bne.n	8007cea <__ssputs_r+0x5a>
 8007d28:	6921      	ldr	r1, [r4, #16]
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	f000 fbac 	bl	8008488 <_free_r>
 8007d30:	230c      	movs	r3, #12
 8007d32:	f8ca 3000 	str.w	r3, [sl]
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d42:	e7e9      	b.n	8007d18 <__ssputs_r+0x88>

08007d44 <_svfiprintf_r>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	4698      	mov	r8, r3
 8007d4a:	898b      	ldrh	r3, [r1, #12]
 8007d4c:	061b      	lsls	r3, r3, #24
 8007d4e:	b09d      	sub	sp, #116	; 0x74
 8007d50:	4607      	mov	r7, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	d50e      	bpl.n	8007d76 <_svfiprintf_r+0x32>
 8007d58:	690b      	ldr	r3, [r1, #16]
 8007d5a:	b963      	cbnz	r3, 8007d76 <_svfiprintf_r+0x32>
 8007d5c:	2140      	movs	r1, #64	; 0x40
 8007d5e:	f000 f90f 	bl	8007f80 <_malloc_r>
 8007d62:	6028      	str	r0, [r5, #0]
 8007d64:	6128      	str	r0, [r5, #16]
 8007d66:	b920      	cbnz	r0, 8007d72 <_svfiprintf_r+0x2e>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d70:	e0d0      	b.n	8007f14 <_svfiprintf_r+0x1d0>
 8007d72:	2340      	movs	r3, #64	; 0x40
 8007d74:	616b      	str	r3, [r5, #20]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7a:	2320      	movs	r3, #32
 8007d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d84:	2330      	movs	r3, #48	; 0x30
 8007d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f2c <_svfiprintf_r+0x1e8>
 8007d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8e:	f04f 0901 	mov.w	r9, #1
 8007d92:	4623      	mov	r3, r4
 8007d94:	469a      	mov	sl, r3
 8007d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9a:	b10a      	cbz	r2, 8007da0 <_svfiprintf_r+0x5c>
 8007d9c:	2a25      	cmp	r2, #37	; 0x25
 8007d9e:	d1f9      	bne.n	8007d94 <_svfiprintf_r+0x50>
 8007da0:	ebba 0b04 	subs.w	fp, sl, r4
 8007da4:	d00b      	beq.n	8007dbe <_svfiprintf_r+0x7a>
 8007da6:	465b      	mov	r3, fp
 8007da8:	4622      	mov	r2, r4
 8007daa:	4629      	mov	r1, r5
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff ff6f 	bl	8007c90 <__ssputs_r>
 8007db2:	3001      	adds	r0, #1
 8007db4:	f000 80a9 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dba:	445a      	add	r2, fp
 8007dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 80a1 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd2:	f10a 0a01 	add.w	sl, sl, #1
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	9307      	str	r3, [sp, #28]
 8007dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dde:	931a      	str	r3, [sp, #104]	; 0x68
 8007de0:	4654      	mov	r4, sl
 8007de2:	2205      	movs	r2, #5
 8007de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de8:	4850      	ldr	r0, [pc, #320]	; (8007f2c <_svfiprintf_r+0x1e8>)
 8007dea:	f7f8 f9f9 	bl	80001e0 <memchr>
 8007dee:	9a04      	ldr	r2, [sp, #16]
 8007df0:	b9d8      	cbnz	r0, 8007e2a <_svfiprintf_r+0xe6>
 8007df2:	06d0      	lsls	r0, r2, #27
 8007df4:	bf44      	itt	mi
 8007df6:	2320      	movmi	r3, #32
 8007df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfc:	0711      	lsls	r1, r2, #28
 8007dfe:	bf44      	itt	mi
 8007e00:	232b      	movmi	r3, #43	; 0x2b
 8007e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e06:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0c:	d015      	beq.n	8007e3a <_svfiprintf_r+0xf6>
 8007e0e:	9a07      	ldr	r2, [sp, #28]
 8007e10:	4654      	mov	r4, sl
 8007e12:	2000      	movs	r0, #0
 8007e14:	f04f 0c0a 	mov.w	ip, #10
 8007e18:	4621      	mov	r1, r4
 8007e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e1e:	3b30      	subs	r3, #48	; 0x30
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d94d      	bls.n	8007ec0 <_svfiprintf_r+0x17c>
 8007e24:	b1b0      	cbz	r0, 8007e54 <_svfiprintf_r+0x110>
 8007e26:	9207      	str	r2, [sp, #28]
 8007e28:	e014      	b.n	8007e54 <_svfiprintf_r+0x110>
 8007e2a:	eba0 0308 	sub.w	r3, r0, r8
 8007e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	46a2      	mov	sl, r4
 8007e38:	e7d2      	b.n	8007de0 <_svfiprintf_r+0x9c>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	1d19      	adds	r1, r3, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	9103      	str	r1, [sp, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bfbb      	ittet	lt
 8007e46:	425b      	neglt	r3, r3
 8007e48:	f042 0202 	orrlt.w	r2, r2, #2
 8007e4c:	9307      	strge	r3, [sp, #28]
 8007e4e:	9307      	strlt	r3, [sp, #28]
 8007e50:	bfb8      	it	lt
 8007e52:	9204      	strlt	r2, [sp, #16]
 8007e54:	7823      	ldrb	r3, [r4, #0]
 8007e56:	2b2e      	cmp	r3, #46	; 0x2e
 8007e58:	d10c      	bne.n	8007e74 <_svfiprintf_r+0x130>
 8007e5a:	7863      	ldrb	r3, [r4, #1]
 8007e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5e:	d134      	bne.n	8007eca <_svfiprintf_r+0x186>
 8007e60:	9b03      	ldr	r3, [sp, #12]
 8007e62:	1d1a      	adds	r2, r3, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	9203      	str	r2, [sp, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	bfb8      	it	lt
 8007e6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e70:	3402      	adds	r4, #2
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f3c <_svfiprintf_r+0x1f8>
 8007e78:	7821      	ldrb	r1, [r4, #0]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	f7f8 f9af 	bl	80001e0 <memchr>
 8007e82:	b138      	cbz	r0, 8007e94 <_svfiprintf_r+0x150>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	eba0 000a 	sub.w	r0, r0, sl
 8007e8a:	2240      	movs	r2, #64	; 0x40
 8007e8c:	4082      	lsls	r2, r0
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	3401      	adds	r4, #1
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	4825      	ldr	r0, [pc, #148]	; (8007f30 <_svfiprintf_r+0x1ec>)
 8007e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f7f8 f99e 	bl	80001e0 <memchr>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d038      	beq.n	8007f1a <_svfiprintf_r+0x1d6>
 8007ea8:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <_svfiprintf_r+0x1f0>)
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <_svfiprintf_r+0x1b0>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	4433      	add	r3, r6
 8007ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebe:	e768      	b.n	8007d92 <_svfiprintf_r+0x4e>
 8007ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e7a6      	b.n	8007e18 <_svfiprintf_r+0xd4>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007edc:	3a30      	subs	r2, #48	; 0x30
 8007ede:	2a09      	cmp	r2, #9
 8007ee0:	d903      	bls.n	8007eea <_svfiprintf_r+0x1a6>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c6      	beq.n	8007e74 <_svfiprintf_r+0x130>
 8007ee6:	9105      	str	r1, [sp, #20]
 8007ee8:	e7c4      	b.n	8007e74 <_svfiprintf_r+0x130>
 8007eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eee:	4604      	mov	r4, r0
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7f0      	b.n	8007ed6 <_svfiprintf_r+0x192>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <_svfiprintf_r+0x1f4>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4638      	mov	r0, r7
 8007f00:	f3af 8000 	nop.w
 8007f04:	1c42      	adds	r2, r0, #1
 8007f06:	4606      	mov	r6, r0
 8007f08:	d1d6      	bne.n	8007eb8 <_svfiprintf_r+0x174>
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	065b      	lsls	r3, r3, #25
 8007f0e:	f53f af2d 	bmi.w	8007d6c <_svfiprintf_r+0x28>
 8007f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f14:	b01d      	add	sp, #116	; 0x74
 8007f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1a:	ab03      	add	r3, sp, #12
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <_svfiprintf_r+0x1f4>)
 8007f22:	a904      	add	r1, sp, #16
 8007f24:	4638      	mov	r0, r7
 8007f26:	f000 f919 	bl	800815c <_printf_i>
 8007f2a:	e7eb      	b.n	8007f04 <_svfiprintf_r+0x1c0>
 8007f2c:	080085d8 	.word	0x080085d8
 8007f30:	080085e2 	.word	0x080085e2
 8007f34:	00000000 	.word	0x00000000
 8007f38:	08007c91 	.word	0x08007c91
 8007f3c:	080085de 	.word	0x080085de

08007f40 <sbrk_aligned>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0e      	ldr	r6, [pc, #56]	; (8007f7c <sbrk_aligned+0x3c>)
 8007f44:	460c      	mov	r4, r1
 8007f46:	6831      	ldr	r1, [r6, #0]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	b911      	cbnz	r1, 8007f52 <sbrk_aligned+0x12>
 8007f4c:	f000 fa7e 	bl	800844c <_sbrk_r>
 8007f50:	6030      	str	r0, [r6, #0]
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fa79 	bl	800844c <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d00a      	beq.n	8007f74 <sbrk_aligned+0x34>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d007      	beq.n	8007f78 <sbrk_aligned+0x38>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 fa6e 	bl	800844c <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d101      	bne.n	8007f78 <sbrk_aligned+0x38>
 8007f74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	20001fa0 	.word	0x20001fa0

08007f80 <_malloc_r>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4607      	mov	r7, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d905      	bls.n	8007fa8 <_malloc_r+0x28>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	2600      	movs	r6, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800807c <_malloc_r+0xfc>
 8007fac:	f000 f9f8 	bl	80083a0 <__malloc_lock>
 8007fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	bb5c      	cbnz	r4, 8008010 <_malloc_r+0x90>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ffc0 	bl	8007f40 <sbrk_aligned>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d155      	bne.n	8008072 <_malloc_r+0xf2>
 8007fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8007fca:	4626      	mov	r6, r4
 8007fcc:	2e00      	cmp	r6, #0
 8007fce:	d145      	bne.n	800805c <_malloc_r+0xdc>
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	d048      	beq.n	8008066 <_malloc_r+0xe6>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4638      	mov	r0, r7
 8007fda:	eb04 0903 	add.w	r9, r4, r3
 8007fde:	f000 fa35 	bl	800844c <_sbrk_r>
 8007fe2:	4581      	cmp	r9, r0
 8007fe4:	d13f      	bne.n	8008066 <_malloc_r+0xe6>
 8007fe6:	6821      	ldr	r1, [r4, #0]
 8007fe8:	1a6d      	subs	r5, r5, r1
 8007fea:	4629      	mov	r1, r5
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff ffa7 	bl	8007f40 <sbrk_aligned>
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d037      	beq.n	8008066 <_malloc_r+0xe6>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	442b      	add	r3, r5
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d038      	beq.n	8008076 <_malloc_r+0xf6>
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	42a2      	cmp	r2, r4
 8008008:	d12b      	bne.n	8008062 <_malloc_r+0xe2>
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	e00f      	b.n	8008030 <_malloc_r+0xb0>
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	1b52      	subs	r2, r2, r5
 8008014:	d41f      	bmi.n	8008056 <_malloc_r+0xd6>
 8008016:	2a0b      	cmp	r2, #11
 8008018:	d917      	bls.n	800804a <_malloc_r+0xca>
 800801a:	1961      	adds	r1, r4, r5
 800801c:	42a3      	cmp	r3, r4
 800801e:	6025      	str	r5, [r4, #0]
 8008020:	bf18      	it	ne
 8008022:	6059      	strne	r1, [r3, #4]
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	bf08      	it	eq
 8008028:	f8c8 1000 	streq.w	r1, [r8]
 800802c:	5162      	str	r2, [r4, r5]
 800802e:	604b      	str	r3, [r1, #4]
 8008030:	4638      	mov	r0, r7
 8008032:	f104 060b 	add.w	r6, r4, #11
 8008036:	f000 f9b9 	bl	80083ac <__malloc_unlock>
 800803a:	f026 0607 	bic.w	r6, r6, #7
 800803e:	1d23      	adds	r3, r4, #4
 8008040:	1af2      	subs	r2, r6, r3
 8008042:	d0ae      	beq.n	8007fa2 <_malloc_r+0x22>
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	50a3      	str	r3, [r4, r2]
 8008048:	e7ab      	b.n	8007fa2 <_malloc_r+0x22>
 800804a:	42a3      	cmp	r3, r4
 800804c:	6862      	ldr	r2, [r4, #4]
 800804e:	d1dd      	bne.n	800800c <_malloc_r+0x8c>
 8008050:	f8c8 2000 	str.w	r2, [r8]
 8008054:	e7ec      	b.n	8008030 <_malloc_r+0xb0>
 8008056:	4623      	mov	r3, r4
 8008058:	6864      	ldr	r4, [r4, #4]
 800805a:	e7ac      	b.n	8007fb6 <_malloc_r+0x36>
 800805c:	4634      	mov	r4, r6
 800805e:	6876      	ldr	r6, [r6, #4]
 8008060:	e7b4      	b.n	8007fcc <_malloc_r+0x4c>
 8008062:	4613      	mov	r3, r2
 8008064:	e7cc      	b.n	8008000 <_malloc_r+0x80>
 8008066:	230c      	movs	r3, #12
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4638      	mov	r0, r7
 800806c:	f000 f99e 	bl	80083ac <__malloc_unlock>
 8008070:	e797      	b.n	8007fa2 <_malloc_r+0x22>
 8008072:	6025      	str	r5, [r4, #0]
 8008074:	e7dc      	b.n	8008030 <_malloc_r+0xb0>
 8008076:	605b      	str	r3, [r3, #4]
 8008078:	deff      	udf	#255	; 0xff
 800807a:	bf00      	nop
 800807c:	20001f9c 	.word	0x20001f9c

08008080 <_printf_common>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	4616      	mov	r6, r2
 8008086:	4699      	mov	r9, r3
 8008088:	688a      	ldr	r2, [r1, #8]
 800808a:	690b      	ldr	r3, [r1, #16]
 800808c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008090:	4293      	cmp	r3, r2
 8008092:	bfb8      	it	lt
 8008094:	4613      	movlt	r3, r2
 8008096:	6033      	str	r3, [r6, #0]
 8008098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800809c:	4607      	mov	r7, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b10a      	cbz	r2, 80080a6 <_printf_common+0x26>
 80080a2:	3301      	adds	r3, #1
 80080a4:	6033      	str	r3, [r6, #0]
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	0699      	lsls	r1, r3, #26
 80080aa:	bf42      	ittt	mi
 80080ac:	6833      	ldrmi	r3, [r6, #0]
 80080ae:	3302      	addmi	r3, #2
 80080b0:	6033      	strmi	r3, [r6, #0]
 80080b2:	6825      	ldr	r5, [r4, #0]
 80080b4:	f015 0506 	ands.w	r5, r5, #6
 80080b8:	d106      	bne.n	80080c8 <_printf_common+0x48>
 80080ba:	f104 0a19 	add.w	sl, r4, #25
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	6832      	ldr	r2, [r6, #0]
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	42ab      	cmp	r3, r5
 80080c6:	dc26      	bgt.n	8008116 <_printf_common+0x96>
 80080c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080cc:	1e13      	subs	r3, r2, #0
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	bf18      	it	ne
 80080d2:	2301      	movne	r3, #1
 80080d4:	0692      	lsls	r2, r2, #26
 80080d6:	d42b      	bmi.n	8008130 <_printf_common+0xb0>
 80080d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080dc:	4649      	mov	r1, r9
 80080de:	4638      	mov	r0, r7
 80080e0:	47c0      	blx	r8
 80080e2:	3001      	adds	r0, #1
 80080e4:	d01e      	beq.n	8008124 <_printf_common+0xa4>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	6922      	ldr	r2, [r4, #16]
 80080ea:	f003 0306 	and.w	r3, r3, #6
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	bf02      	ittt	eq
 80080f2:	68e5      	ldreq	r5, [r4, #12]
 80080f4:	6833      	ldreq	r3, [r6, #0]
 80080f6:	1aed      	subeq	r5, r5, r3
 80080f8:	68a3      	ldr	r3, [r4, #8]
 80080fa:	bf0c      	ite	eq
 80080fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008100:	2500      	movne	r5, #0
 8008102:	4293      	cmp	r3, r2
 8008104:	bfc4      	itt	gt
 8008106:	1a9b      	subgt	r3, r3, r2
 8008108:	18ed      	addgt	r5, r5, r3
 800810a:	2600      	movs	r6, #0
 800810c:	341a      	adds	r4, #26
 800810e:	42b5      	cmp	r5, r6
 8008110:	d11a      	bne.n	8008148 <_printf_common+0xc8>
 8008112:	2000      	movs	r0, #0
 8008114:	e008      	b.n	8008128 <_printf_common+0xa8>
 8008116:	2301      	movs	r3, #1
 8008118:	4652      	mov	r2, sl
 800811a:	4649      	mov	r1, r9
 800811c:	4638      	mov	r0, r7
 800811e:	47c0      	blx	r8
 8008120:	3001      	adds	r0, #1
 8008122:	d103      	bne.n	800812c <_printf_common+0xac>
 8008124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	3501      	adds	r5, #1
 800812e:	e7c6      	b.n	80080be <_printf_common+0x3e>
 8008130:	18e1      	adds	r1, r4, r3
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	2030      	movs	r0, #48	; 0x30
 8008136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800813a:	4422      	add	r2, r4
 800813c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008144:	3302      	adds	r3, #2
 8008146:	e7c7      	b.n	80080d8 <_printf_common+0x58>
 8008148:	2301      	movs	r3, #1
 800814a:	4622      	mov	r2, r4
 800814c:	4649      	mov	r1, r9
 800814e:	4638      	mov	r0, r7
 8008150:	47c0      	blx	r8
 8008152:	3001      	adds	r0, #1
 8008154:	d0e6      	beq.n	8008124 <_printf_common+0xa4>
 8008156:	3601      	adds	r6, #1
 8008158:	e7d9      	b.n	800810e <_printf_common+0x8e>
	...

0800815c <_printf_i>:
 800815c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	7e0f      	ldrb	r7, [r1, #24]
 8008162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008164:	2f78      	cmp	r7, #120	; 0x78
 8008166:	4691      	mov	r9, r2
 8008168:	4680      	mov	r8, r0
 800816a:	460c      	mov	r4, r1
 800816c:	469a      	mov	sl, r3
 800816e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008172:	d807      	bhi.n	8008184 <_printf_i+0x28>
 8008174:	2f62      	cmp	r7, #98	; 0x62
 8008176:	d80a      	bhi.n	800818e <_printf_i+0x32>
 8008178:	2f00      	cmp	r7, #0
 800817a:	f000 80d4 	beq.w	8008326 <_printf_i+0x1ca>
 800817e:	2f58      	cmp	r7, #88	; 0x58
 8008180:	f000 80c0 	beq.w	8008304 <_printf_i+0x1a8>
 8008184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800818c:	e03a      	b.n	8008204 <_printf_i+0xa8>
 800818e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008192:	2b15      	cmp	r3, #21
 8008194:	d8f6      	bhi.n	8008184 <_printf_i+0x28>
 8008196:	a101      	add	r1, pc, #4	; (adr r1, 800819c <_printf_i+0x40>)
 8008198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800819c:	080081f5 	.word	0x080081f5
 80081a0:	08008209 	.word	0x08008209
 80081a4:	08008185 	.word	0x08008185
 80081a8:	08008185 	.word	0x08008185
 80081ac:	08008185 	.word	0x08008185
 80081b0:	08008185 	.word	0x08008185
 80081b4:	08008209 	.word	0x08008209
 80081b8:	08008185 	.word	0x08008185
 80081bc:	08008185 	.word	0x08008185
 80081c0:	08008185 	.word	0x08008185
 80081c4:	08008185 	.word	0x08008185
 80081c8:	0800830d 	.word	0x0800830d
 80081cc:	08008235 	.word	0x08008235
 80081d0:	080082c7 	.word	0x080082c7
 80081d4:	08008185 	.word	0x08008185
 80081d8:	08008185 	.word	0x08008185
 80081dc:	0800832f 	.word	0x0800832f
 80081e0:	08008185 	.word	0x08008185
 80081e4:	08008235 	.word	0x08008235
 80081e8:	08008185 	.word	0x08008185
 80081ec:	08008185 	.word	0x08008185
 80081f0:	080082cf 	.word	0x080082cf
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	1d1a      	adds	r2, r3, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008204:	2301      	movs	r3, #1
 8008206:	e09f      	b.n	8008348 <_printf_i+0x1ec>
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	0607      	lsls	r7, r0, #24
 800820e:	f103 0104 	add.w	r1, r3, #4
 8008212:	6029      	str	r1, [r5, #0]
 8008214:	d501      	bpl.n	800821a <_printf_i+0xbe>
 8008216:	681e      	ldr	r6, [r3, #0]
 8008218:	e003      	b.n	8008222 <_printf_i+0xc6>
 800821a:	0646      	lsls	r6, r0, #25
 800821c:	d5fb      	bpl.n	8008216 <_printf_i+0xba>
 800821e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008222:	2e00      	cmp	r6, #0
 8008224:	da03      	bge.n	800822e <_printf_i+0xd2>
 8008226:	232d      	movs	r3, #45	; 0x2d
 8008228:	4276      	negs	r6, r6
 800822a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800822e:	485a      	ldr	r0, [pc, #360]	; (8008398 <_printf_i+0x23c>)
 8008230:	230a      	movs	r3, #10
 8008232:	e012      	b.n	800825a <_printf_i+0xfe>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	6820      	ldr	r0, [r4, #0]
 8008238:	1d19      	adds	r1, r3, #4
 800823a:	6029      	str	r1, [r5, #0]
 800823c:	0605      	lsls	r5, r0, #24
 800823e:	d501      	bpl.n	8008244 <_printf_i+0xe8>
 8008240:	681e      	ldr	r6, [r3, #0]
 8008242:	e002      	b.n	800824a <_printf_i+0xee>
 8008244:	0641      	lsls	r1, r0, #25
 8008246:	d5fb      	bpl.n	8008240 <_printf_i+0xe4>
 8008248:	881e      	ldrh	r6, [r3, #0]
 800824a:	4853      	ldr	r0, [pc, #332]	; (8008398 <_printf_i+0x23c>)
 800824c:	2f6f      	cmp	r7, #111	; 0x6f
 800824e:	bf0c      	ite	eq
 8008250:	2308      	moveq	r3, #8
 8008252:	230a      	movne	r3, #10
 8008254:	2100      	movs	r1, #0
 8008256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800825a:	6865      	ldr	r5, [r4, #4]
 800825c:	60a5      	str	r5, [r4, #8]
 800825e:	2d00      	cmp	r5, #0
 8008260:	bfa2      	ittt	ge
 8008262:	6821      	ldrge	r1, [r4, #0]
 8008264:	f021 0104 	bicge.w	r1, r1, #4
 8008268:	6021      	strge	r1, [r4, #0]
 800826a:	b90e      	cbnz	r6, 8008270 <_printf_i+0x114>
 800826c:	2d00      	cmp	r5, #0
 800826e:	d04b      	beq.n	8008308 <_printf_i+0x1ac>
 8008270:	4615      	mov	r5, r2
 8008272:	fbb6 f1f3 	udiv	r1, r6, r3
 8008276:	fb03 6711 	mls	r7, r3, r1, r6
 800827a:	5dc7      	ldrb	r7, [r0, r7]
 800827c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008280:	4637      	mov	r7, r6
 8008282:	42bb      	cmp	r3, r7
 8008284:	460e      	mov	r6, r1
 8008286:	d9f4      	bls.n	8008272 <_printf_i+0x116>
 8008288:	2b08      	cmp	r3, #8
 800828a:	d10b      	bne.n	80082a4 <_printf_i+0x148>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	07de      	lsls	r6, r3, #31
 8008290:	d508      	bpl.n	80082a4 <_printf_i+0x148>
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	6861      	ldr	r1, [r4, #4]
 8008296:	4299      	cmp	r1, r3
 8008298:	bfde      	ittt	le
 800829a:	2330      	movle	r3, #48	; 0x30
 800829c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082a4:	1b52      	subs	r2, r2, r5
 80082a6:	6122      	str	r2, [r4, #16]
 80082a8:	f8cd a000 	str.w	sl, [sp]
 80082ac:	464b      	mov	r3, r9
 80082ae:	aa03      	add	r2, sp, #12
 80082b0:	4621      	mov	r1, r4
 80082b2:	4640      	mov	r0, r8
 80082b4:	f7ff fee4 	bl	8008080 <_printf_common>
 80082b8:	3001      	adds	r0, #1
 80082ba:	d14a      	bne.n	8008352 <_printf_i+0x1f6>
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082c0:	b004      	add	sp, #16
 80082c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	f043 0320 	orr.w	r3, r3, #32
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	4833      	ldr	r0, [pc, #204]	; (800839c <_printf_i+0x240>)
 80082d0:	2778      	movs	r7, #120	; 0x78
 80082d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	6829      	ldr	r1, [r5, #0]
 80082da:	061f      	lsls	r7, r3, #24
 80082dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e0:	d402      	bmi.n	80082e8 <_printf_i+0x18c>
 80082e2:	065f      	lsls	r7, r3, #25
 80082e4:	bf48      	it	mi
 80082e6:	b2b6      	uxthmi	r6, r6
 80082e8:	07df      	lsls	r7, r3, #31
 80082ea:	bf48      	it	mi
 80082ec:	f043 0320 	orrmi.w	r3, r3, #32
 80082f0:	6029      	str	r1, [r5, #0]
 80082f2:	bf48      	it	mi
 80082f4:	6023      	strmi	r3, [r4, #0]
 80082f6:	b91e      	cbnz	r6, 8008300 <_printf_i+0x1a4>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	f023 0320 	bic.w	r3, r3, #32
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	2310      	movs	r3, #16
 8008302:	e7a7      	b.n	8008254 <_printf_i+0xf8>
 8008304:	4824      	ldr	r0, [pc, #144]	; (8008398 <_printf_i+0x23c>)
 8008306:	e7e4      	b.n	80082d2 <_printf_i+0x176>
 8008308:	4615      	mov	r5, r2
 800830a:	e7bd      	b.n	8008288 <_printf_i+0x12c>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	6826      	ldr	r6, [r4, #0]
 8008310:	6961      	ldr	r1, [r4, #20]
 8008312:	1d18      	adds	r0, r3, #4
 8008314:	6028      	str	r0, [r5, #0]
 8008316:	0635      	lsls	r5, r6, #24
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	d501      	bpl.n	8008320 <_printf_i+0x1c4>
 800831c:	6019      	str	r1, [r3, #0]
 800831e:	e002      	b.n	8008326 <_printf_i+0x1ca>
 8008320:	0670      	lsls	r0, r6, #25
 8008322:	d5fb      	bpl.n	800831c <_printf_i+0x1c0>
 8008324:	8019      	strh	r1, [r3, #0]
 8008326:	2300      	movs	r3, #0
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	4615      	mov	r5, r2
 800832c:	e7bc      	b.n	80082a8 <_printf_i+0x14c>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	602a      	str	r2, [r5, #0]
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	6862      	ldr	r2, [r4, #4]
 8008338:	2100      	movs	r1, #0
 800833a:	4628      	mov	r0, r5
 800833c:	f7f7 ff50 	bl	80001e0 <memchr>
 8008340:	b108      	cbz	r0, 8008346 <_printf_i+0x1ea>
 8008342:	1b40      	subs	r0, r0, r5
 8008344:	6060      	str	r0, [r4, #4]
 8008346:	6863      	ldr	r3, [r4, #4]
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	2300      	movs	r3, #0
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008350:	e7aa      	b.n	80082a8 <_printf_i+0x14c>
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	462a      	mov	r2, r5
 8008356:	4649      	mov	r1, r9
 8008358:	4640      	mov	r0, r8
 800835a:	47d0      	blx	sl
 800835c:	3001      	adds	r0, #1
 800835e:	d0ad      	beq.n	80082bc <_printf_i+0x160>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	079b      	lsls	r3, r3, #30
 8008364:	d413      	bmi.n	800838e <_printf_i+0x232>
 8008366:	68e0      	ldr	r0, [r4, #12]
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	4298      	cmp	r0, r3
 800836c:	bfb8      	it	lt
 800836e:	4618      	movlt	r0, r3
 8008370:	e7a6      	b.n	80082c0 <_printf_i+0x164>
 8008372:	2301      	movs	r3, #1
 8008374:	4632      	mov	r2, r6
 8008376:	4649      	mov	r1, r9
 8008378:	4640      	mov	r0, r8
 800837a:	47d0      	blx	sl
 800837c:	3001      	adds	r0, #1
 800837e:	d09d      	beq.n	80082bc <_printf_i+0x160>
 8008380:	3501      	adds	r5, #1
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	9903      	ldr	r1, [sp, #12]
 8008386:	1a5b      	subs	r3, r3, r1
 8008388:	42ab      	cmp	r3, r5
 800838a:	dcf2      	bgt.n	8008372 <_printf_i+0x216>
 800838c:	e7eb      	b.n	8008366 <_printf_i+0x20a>
 800838e:	2500      	movs	r5, #0
 8008390:	f104 0619 	add.w	r6, r4, #25
 8008394:	e7f5      	b.n	8008382 <_printf_i+0x226>
 8008396:	bf00      	nop
 8008398:	080085e9 	.word	0x080085e9
 800839c:	080085fa 	.word	0x080085fa

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__malloc_lock+0x8>)
 80083a2:	f7ff bc73 	b.w	8007c8c <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20001f98 	.word	0x20001f98

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f7ff bc6e 	b.w	8007c8e <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20001f98 	.word	0x20001f98

080083b8 <_realloc_r>:
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	4680      	mov	r8, r0
 80083be:	4614      	mov	r4, r2
 80083c0:	460e      	mov	r6, r1
 80083c2:	b921      	cbnz	r1, 80083ce <_realloc_r+0x16>
 80083c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c8:	4611      	mov	r1, r2
 80083ca:	f7ff bdd9 	b.w	8007f80 <_malloc_r>
 80083ce:	b92a      	cbnz	r2, 80083dc <_realloc_r+0x24>
 80083d0:	f000 f85a 	bl	8008488 <_free_r>
 80083d4:	4625      	mov	r5, r4
 80083d6:	4628      	mov	r0, r5
 80083d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083dc:	f000 f8a0 	bl	8008520 <_malloc_usable_size_r>
 80083e0:	4284      	cmp	r4, r0
 80083e2:	4607      	mov	r7, r0
 80083e4:	d802      	bhi.n	80083ec <_realloc_r+0x34>
 80083e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083ea:	d812      	bhi.n	8008412 <_realloc_r+0x5a>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4640      	mov	r0, r8
 80083f0:	f7ff fdc6 	bl	8007f80 <_malloc_r>
 80083f4:	4605      	mov	r5, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0ed      	beq.n	80083d6 <_realloc_r+0x1e>
 80083fa:	42bc      	cmp	r4, r7
 80083fc:	4622      	mov	r2, r4
 80083fe:	4631      	mov	r1, r6
 8008400:	bf28      	it	cs
 8008402:	463a      	movcs	r2, r7
 8008404:	f000 f832 	bl	800846c <memcpy>
 8008408:	4631      	mov	r1, r6
 800840a:	4640      	mov	r0, r8
 800840c:	f000 f83c 	bl	8008488 <_free_r>
 8008410:	e7e1      	b.n	80083d6 <_realloc_r+0x1e>
 8008412:	4635      	mov	r5, r6
 8008414:	e7df      	b.n	80083d6 <_realloc_r+0x1e>

08008416 <memmove>:
 8008416:	4288      	cmp	r0, r1
 8008418:	b510      	push	{r4, lr}
 800841a:	eb01 0402 	add.w	r4, r1, r2
 800841e:	d902      	bls.n	8008426 <memmove+0x10>
 8008420:	4284      	cmp	r4, r0
 8008422:	4623      	mov	r3, r4
 8008424:	d807      	bhi.n	8008436 <memmove+0x20>
 8008426:	1e43      	subs	r3, r0, #1
 8008428:	42a1      	cmp	r1, r4
 800842a:	d008      	beq.n	800843e <memmove+0x28>
 800842c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008430:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008434:	e7f8      	b.n	8008428 <memmove+0x12>
 8008436:	4402      	add	r2, r0
 8008438:	4601      	mov	r1, r0
 800843a:	428a      	cmp	r2, r1
 800843c:	d100      	bne.n	8008440 <memmove+0x2a>
 800843e:	bd10      	pop	{r4, pc}
 8008440:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008444:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008448:	e7f7      	b.n	800843a <memmove+0x24>
	...

0800844c <_sbrk_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d06      	ldr	r5, [pc, #24]	; (8008468 <_sbrk_r+0x1c>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	f7f8 f9d0 	bl	80007fc <_sbrk>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_sbrk_r+0x1a>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_sbrk_r+0x1a>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	20001fa4 	.word	0x20001fa4

0800846c <memcpy>:
 800846c:	440a      	add	r2, r1
 800846e:	4291      	cmp	r1, r2
 8008470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008474:	d100      	bne.n	8008478 <memcpy+0xc>
 8008476:	4770      	bx	lr
 8008478:	b510      	push	{r4, lr}
 800847a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800847e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008482:	4291      	cmp	r1, r2
 8008484:	d1f9      	bne.n	800847a <memcpy+0xe>
 8008486:	bd10      	pop	{r4, pc}

08008488 <_free_r>:
 8008488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848a:	2900      	cmp	r1, #0
 800848c:	d044      	beq.n	8008518 <_free_r+0x90>
 800848e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008492:	9001      	str	r0, [sp, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f1a1 0404 	sub.w	r4, r1, #4
 800849a:	bfb8      	it	lt
 800849c:	18e4      	addlt	r4, r4, r3
 800849e:	f7ff ff7f 	bl	80083a0 <__malloc_lock>
 80084a2:	4a1e      	ldr	r2, [pc, #120]	; (800851c <_free_r+0x94>)
 80084a4:	9801      	ldr	r0, [sp, #4]
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	b933      	cbnz	r3, 80084b8 <_free_r+0x30>
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	6014      	str	r4, [r2, #0]
 80084ae:	b003      	add	sp, #12
 80084b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b4:	f7ff bf7a 	b.w	80083ac <__malloc_unlock>
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d908      	bls.n	80084ce <_free_r+0x46>
 80084bc:	6825      	ldr	r5, [r4, #0]
 80084be:	1961      	adds	r1, r4, r5
 80084c0:	428b      	cmp	r3, r1
 80084c2:	bf01      	itttt	eq
 80084c4:	6819      	ldreq	r1, [r3, #0]
 80084c6:	685b      	ldreq	r3, [r3, #4]
 80084c8:	1949      	addeq	r1, r1, r5
 80084ca:	6021      	streq	r1, [r4, #0]
 80084cc:	e7ed      	b.n	80084aa <_free_r+0x22>
 80084ce:	461a      	mov	r2, r3
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b10b      	cbz	r3, 80084d8 <_free_r+0x50>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d9fa      	bls.n	80084ce <_free_r+0x46>
 80084d8:	6811      	ldr	r1, [r2, #0]
 80084da:	1855      	adds	r5, r2, r1
 80084dc:	42a5      	cmp	r5, r4
 80084de:	d10b      	bne.n	80084f8 <_free_r+0x70>
 80084e0:	6824      	ldr	r4, [r4, #0]
 80084e2:	4421      	add	r1, r4
 80084e4:	1854      	adds	r4, r2, r1
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	d1e0      	bne.n	80084ae <_free_r+0x26>
 80084ec:	681c      	ldr	r4, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	6053      	str	r3, [r2, #4]
 80084f2:	440c      	add	r4, r1
 80084f4:	6014      	str	r4, [r2, #0]
 80084f6:	e7da      	b.n	80084ae <_free_r+0x26>
 80084f8:	d902      	bls.n	8008500 <_free_r+0x78>
 80084fa:	230c      	movs	r3, #12
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	e7d6      	b.n	80084ae <_free_r+0x26>
 8008500:	6825      	ldr	r5, [r4, #0]
 8008502:	1961      	adds	r1, r4, r5
 8008504:	428b      	cmp	r3, r1
 8008506:	bf04      	itt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	bf04      	itt	eq
 8008510:	1949      	addeq	r1, r1, r5
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	6054      	str	r4, [r2, #4]
 8008516:	e7ca      	b.n	80084ae <_free_r+0x26>
 8008518:	b003      	add	sp, #12
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	20001f9c 	.word	0x20001f9c

08008520 <_malloc_usable_size_r>:
 8008520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008524:	1f18      	subs	r0, r3, #4
 8008526:	2b00      	cmp	r3, #0
 8008528:	bfbc      	itt	lt
 800852a:	580b      	ldrlt	r3, [r1, r0]
 800852c:	18c0      	addlt	r0, r0, r3
 800852e:	4770      	bx	lr

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr

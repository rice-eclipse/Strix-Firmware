
Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009014  08009014  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08009014  08009014  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009014  08009014  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800901c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  2000010c  08009128  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00001a00  20001e28  08009128  00021e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013724  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ad  00000000  00000000  000338a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00036f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5d  00000000  00000000  00037fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005072  00000000  00000000  00038c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001467e  00000000  00000000  0003dca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8dd9  00000000  00000000  00052325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004254  00000000  00000000  0013b100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013f354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000010c 	.word	0x2000010c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f5c 	.word	0x08008f5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000110 	.word	0x20000110
 80001c4:	08008f5c 	.word	0x08008f5c

080001c8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	887a      	ldrh	r2, [r7, #2]
 80001e6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	6a3a      	ldr	r2, [r7, #32]
 80001ec:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001f2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	6858      	ldr	r0, [r3, #4]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	899b      	ldrh	r3, [r3, #12]
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	f001 fbc0 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f001 f8dd 	bl	80013d4 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	6858      	ldr	r0, [r3, #4]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	899b      	ldrh	r3, [r3, #12]
 8000222:	2201      	movs	r2, #1
 8000224:	4619      	mov	r1, r3
 8000226:	f001 fbb5 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800022a:	2032      	movs	r0, #50	; 0x32
 800022c:	f001 f8d2 	bl	80013d4 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000230:	22b6      	movs	r2, #182	; 0xb6
 8000232:	217e      	movs	r1, #126	; 0x7e
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f000 f965 	bl	8000504 <BMI088_WriteAccRegister>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	7dfb      	ldrb	r3, [r7, #23]
 8000240:	4413      	add	r3, r2
 8000242:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000244:	2032      	movs	r0, #50	; 0x32
 8000246:	f001 f8c5 	bl	80013d4 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800024a:	f107 0316 	add.w	r3, r7, #22
 800024e:	461a      	mov	r2, r3
 8000250:	2100      	movs	r1, #0
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	f000 f8dc 	bl	8000410 <BMI088_ReadAccRegister>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	7dfb      	ldrb	r3, [r7, #23]
 800025e:	4413      	add	r3, r2
 8000260:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x1E) {
 8000262:	7dbb      	ldrb	r3, [r7, #22]
 8000264:	2b1e      	cmp	r3, #30
 8000266:	d002      	beq.n	800026e <BMI088_Init+0xa6>

		status+=50;
 8000268:	7dfb      	ldrb	r3, [r7, #23]
 800026a:	3332      	adds	r3, #50	; 0x32
 800026c:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 800026e:	200a      	movs	r0, #10
 8000270:	f001 f8b0 	bl	80013d4 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000274:	22a8      	movs	r2, #168	; 0xa8
 8000276:	2140      	movs	r1, #64	; 0x40
 8000278:	68f8      	ldr	r0, [r7, #12]
 800027a:	f000 f943 	bl	8000504 <BMI088_WriteAccRegister>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	7dfb      	ldrb	r3, [r7, #23]
 8000284:	4413      	add	r3, r2
 8000286:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000288:	200a      	movs	r0, #10
 800028a:	f001 f8a3 	bl	80013d4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800028e:	2200      	movs	r2, #0
 8000290:	2141      	movs	r1, #65	; 0x41
 8000292:	68f8      	ldr	r0, [r7, #12]
 8000294:	f000 f936 	bl	8000504 <BMI088_WriteAccRegister>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	7dfb      	ldrb	r3, [r7, #23]
 800029e:	4413      	add	r3, r2
 80002a0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80002a2:	200a      	movs	r0, #10
 80002a4:	f001 f896 	bl	80013d4 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80002a8:	220a      	movs	r2, #10
 80002aa:	2153      	movs	r1, #83	; 0x53
 80002ac:	68f8      	ldr	r0, [r7, #12]
 80002ae:	f000 f929 	bl	8000504 <BMI088_WriteAccRegister>
 80002b2:	4603      	mov	r3, r0
 80002b4:	461a      	mov	r2, r3
 80002b6:	7dfb      	ldrb	r3, [r7, #23]
 80002b8:	4413      	add	r3, r2
 80002ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80002bc:	200a      	movs	r0, #10
 80002be:	f001 f889 	bl	80013d4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 80002c2:	2204      	movs	r2, #4
 80002c4:	2158      	movs	r1, #88	; 0x58
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	f000 f91c 	bl	8000504 <BMI088_WriteAccRegister>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	7dfb      	ldrb	r3, [r7, #23]
 80002d2:	4413      	add	r3, r2
 80002d4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 f87c 	bl	80013d4 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80002dc:	2200      	movs	r2, #0
 80002de:	217c      	movs	r1, #124	; 0x7c
 80002e0:	68f8      	ldr	r0, [r7, #12]
 80002e2:	f000 f90f 	bl	8000504 <BMI088_WriteAccRegister>
 80002e6:	4603      	mov	r3, r0
 80002e8:	461a      	mov	r2, r3
 80002ea:	7dfb      	ldrb	r3, [r7, #23]
 80002ec:	4413      	add	r3, r2
 80002ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80002f0:	200a      	movs	r0, #10
 80002f2:	f001 f86f 	bl	80013d4 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80002f6:	2204      	movs	r2, #4
 80002f8:	217d      	movs	r1, #125	; 0x7d
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f000 f902 	bl	8000504 <BMI088_WriteAccRegister>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	7dfb      	ldrb	r3, [r7, #23]
 8000306:	4413      	add	r3, r2
 8000308:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f001 f862 	bl	80013d4 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	4a3d      	ldr	r2, [pc, #244]	; (8000408 <BMI088_Init+0x240>)
 8000314:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2292      	movs	r2, #146	; 0x92
 800031a:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	6898      	ldr	r0, [r3, #8]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	89db      	ldrh	r3, [r3, #14]
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	f001 fb34 	bl	8001994 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 800032c:	22b6      	movs	r2, #182	; 0xb6
 800032e:	2114      	movs	r1, #20
 8000330:	68f8      	ldr	r0, [r7, #12]
 8000332:	f000 f921 	bl	8000578 <BMI088_WriteGyrRegister>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	7dfb      	ldrb	r3, [r7, #23]
 800033c:	4413      	add	r3, r2
 800033e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8000340:	20fa      	movs	r0, #250	; 0xfa
 8000342:	f001 f847 	bl	80013d4 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8000346:	f107 0316 	add.w	r3, r7, #22
 800034a:	461a      	mov	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	68f8      	ldr	r0, [r7, #12]
 8000350:	f000 f89c 	bl	800048c <BMI088_ReadGyrRegister>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	7dfb      	ldrb	r3, [r7, #23]
 800035a:	4413      	add	r3, r2
 800035c:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x0F) {
 800035e:	7dbb      	ldrb	r3, [r7, #22]
 8000360:	2b0f      	cmp	r3, #15
 8000362:	d002      	beq.n	800036a <BMI088_Init+0x1a2>

		status+=60;
 8000364:	7dfb      	ldrb	r3, [r7, #23]
 8000366:	333c      	adds	r3, #60	; 0x3c
 8000368:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f001 f832 	bl	80013d4 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8000370:	2201      	movs	r2, #1
 8000372:	210f      	movs	r1, #15
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f000 f8ff 	bl	8000578 <BMI088_WriteGyrRegister>
 800037a:	4603      	mov	r3, r0
 800037c:	461a      	mov	r2, r3
 800037e:	7dfb      	ldrb	r3, [r7, #23]
 8000380:	4413      	add	r3, r2
 8000382:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000384:	200a      	movs	r0, #10
 8000386:	f001 f825 	bl	80013d4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800038a:	2207      	movs	r2, #7
 800038c:	2110      	movs	r1, #16
 800038e:	68f8      	ldr	r0, [r7, #12]
 8000390:	f000 f8f2 	bl	8000578 <BMI088_WriteGyrRegister>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	7dfb      	ldrb	r3, [r7, #23]
 800039a:	4413      	add	r3, r2
 800039c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800039e:	200a      	movs	r0, #10
 80003a0:	f001 f818 	bl	80013d4 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	2115      	movs	r1, #21
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f000 f8e5 	bl	8000578 <BMI088_WriteGyrRegister>
 80003ae:	4603      	mov	r3, r0
 80003b0:	461a      	mov	r2, r3
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
 80003b4:	4413      	add	r3, r2
 80003b6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f001 f80b 	bl	80013d4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80003be:	2201      	movs	r2, #1
 80003c0:	2116      	movs	r1, #22
 80003c2:	68f8      	ldr	r0, [r7, #12]
 80003c4:	f000 f8d8 	bl	8000578 <BMI088_WriteGyrRegister>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
 80003ce:	4413      	add	r3, r2
 80003d0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f000 fffe 	bl	80013d4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80003d8:	2201      	movs	r2, #1
 80003da:	2118      	movs	r1, #24
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f000 f8cb 	bl	8000578 <BMI088_WriteGyrRegister>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	7dfb      	ldrb	r3, [r7, #23]
 80003e8:	4413      	add	r3, r2
 80003ea:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f000 fff1 	bl	80013d4 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	4a05      	ldr	r2, [pc, #20]	; (800040c <BMI088_Init+0x244>)
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2282      	movs	r2, #130	; 0x82
 80003fc:	769a      	strb	r2, [r3, #26]

	return status;
 80003fe:	7dfb      	ldrb	r3, [r7, #23]

}
 8000400:	4618      	mov	r0, r3
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	3a6b70a4 	.word	0x3a6b70a4
 800040c:	3a0ba058 	.word	0x3a0ba058

08000410 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af02      	add	r7, sp, #8
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	460b      	mov	r3, r1
 800041a:	607a      	str	r2, [r7, #4]
 800041c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000424:	b2db      	uxtb	r3, r3
 8000426:	753b      	strb	r3, [r7, #20]
 8000428:	2300      	movs	r3, #0
 800042a:	757b      	strb	r3, [r7, #21]
 800042c:	2300      	movs	r3, #0
 800042e:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	6858      	ldr	r0, [r3, #4]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	899b      	ldrh	r3, [r3, #12]
 8000438:	2200      	movs	r2, #0
 800043a:	4619      	mov	r1, r3
 800043c:	f001 faaa 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	6818      	ldr	r0, [r3, #0]
 8000444:	f107 0210 	add.w	r2, r7, #16
 8000448:	f107 0114 	add.w	r1, r7, #20
 800044c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2303      	movs	r3, #3
 8000454:	f004 f978 	bl	8004748 <HAL_SPI_TransmitReceive>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6858      	ldr	r0, [r3, #4]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	899b      	ldrh	r3, [r3, #12]
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	f001 fa8f 	bl	8001994 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000476:	7dfb      	ldrb	r3, [r7, #23]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d102      	bne.n	8000482 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 800047c:	7cba      	ldrb	r2, [r7, #18]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000482:	7dfb      	ldrb	r3, [r7, #23]

}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af02      	add	r7, sp, #8
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	460b      	mov	r3, r1
 8000496:	607a      	str	r2, [r7, #4]
 8000498:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 800049a:	7afb      	ldrb	r3, [r7, #11]
 800049c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	753b      	strb	r3, [r7, #20]
 80004a4:	2300      	movs	r3, #0
 80004a6:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	6898      	ldr	r0, [r3, #8]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	89db      	ldrh	r3, [r3, #14]
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	f001 fa6e 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	f107 0210 	add.w	r2, r7, #16
 80004c0:	f107 0114 	add.w	r1, r7, #20
 80004c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2302      	movs	r3, #2
 80004cc:	f004 f93c 	bl	8004748 <HAL_SPI_TransmitReceive>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6898      	ldr	r0, [r3, #8]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	89db      	ldrh	r3, [r3, #14]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	f001 fa53 	bl	8001994 <HAL_GPIO_WritePin>

	if (status == 1) {
 80004ee:	7dfb      	ldrb	r3, [r7, #23]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d102      	bne.n	80004fa <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80004f4:	7c7a      	ldrb	r2, [r7, #17]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80004fa:	7dfb      	ldrb	r3, [r7, #23]

}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	733b      	strb	r3, [r7, #12]
 8000518:	78bb      	ldrb	r3, [r7, #2]
 800051a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6858      	ldr	r0, [r3, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	899b      	ldrh	r3, [r3, #12]
 8000524:	2200      	movs	r2, #0
 8000526:	4619      	mov	r1, r3
 8000528:	f001 fa34 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	f107 010c 	add.w	r1, r7, #12
 8000534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000538:	2202      	movs	r2, #2
 800053a:	f003 ff90 	bl	800445e <HAL_SPI_Transmit>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	bf0c      	ite	eq
 8000544:	2301      	moveq	r3, #1
 8000546:	2300      	movne	r3, #0
 8000548:	b2db      	uxtb	r3, r3
 800054a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800054c:	bf00      	nop
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fb1a 	bl	8004b8c <HAL_SPI_GetState>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d1f7      	bne.n	800054e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6858      	ldr	r0, [r3, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	899b      	ldrh	r3, [r3, #12]
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	f001 fa13 	bl	8001994 <HAL_GPIO_WritePin>

	return status;
 800056e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000570:	4618      	mov	r0, r3
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
 8000584:	4613      	mov	r3, r2
 8000586:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	733b      	strb	r3, [r7, #12]
 800058c:	78bb      	ldrb	r3, [r7, #2]
 800058e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6898      	ldr	r0, [r3, #8]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	89db      	ldrh	r3, [r3, #14]
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	f001 f9fa 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ac:	2202      	movs	r2, #2
 80005ae:	f003 ff56 	bl	800445e <HAL_SPI_Transmit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf0c      	ite	eq
 80005b8:	2301      	moveq	r3, #1
 80005ba:	2300      	movne	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80005c0:	bf00      	nop
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fae0 	bl	8004b8c <HAL_SPI_GetState>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1f7      	bne.n	80005c2 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6898      	ldr	r0, [r3, #8]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	89db      	ldrh	r3, [r3, #14]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f9d9 	bl	8001994 <HAL_GPIO_WritePin>

	return status;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]

}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80005f4:	4a36      	ldr	r2, [pc, #216]	; (80006d0 <BMI088_ReadAccelerometer+0xe4>)
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fe:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6858      	ldr	r0, [r3, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	899b      	ldrh	r3, [r3, #12]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f001 f9c1 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f107 0208 	add.w	r2, r7, #8
 800061a:	f107 0110 	add.w	r1, r7, #16
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2308      	movs	r3, #8
 8000626:	f004 f88f 	bl	8004748 <HAL_SPI_TransmitReceive>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf0c      	ite	eq
 8000630:	2301      	moveq	r3, #1
 8000632:	2300      	movne	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	f001 f9a6 	bl	8001994 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	b21a      	sxth	r2, r3
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	b21b      	sxth	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8000656:	7b7b      	ldrb	r3, [r7, #13]
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	b21a      	sxth	r2, r3
 800065c:	7b3b      	ldrb	r3, [r7, #12]
 800065e:	b21b      	sxth	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21a      	sxth	r2, r3
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	b21b      	sxth	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000678:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800067c:	ee07 3a90 	vmov	s15, r3
 8000680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000694:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80006b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 80006c6:	7ffb      	ldrb	r3, [r7, #31]

}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08008f74 	.word	0x08008f74

080006d4 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BMI088_ReadGyroscope+0xec>)
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e6:	6018      	str	r0, [r3, #0]
 80006e8:	3304      	adds	r3, #4
 80006ea:	8019      	strh	r1, [r3, #0]
 80006ec:	3302      	adds	r3, #2
 80006ee:	0c0a      	lsrs	r2, r1, #16
 80006f0:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6898      	ldr	r0, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	89db      	ldrh	r3, [r3, #14]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	f001 f949 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f107 0208 	add.w	r2, r7, #8
 800070a:	f107 0110 	add.w	r1, r7, #16
 800070e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2307      	movs	r3, #7
 8000716:	f004 f817 	bl	8004748 <HAL_SPI_TransmitReceive>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf0c      	ite	eq
 8000720:	2301      	moveq	r3, #1
 8000722:	2300      	movne	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	89db      	ldrh	r3, [r3, #14]
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	f001 f92e 	bl	8001994 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8000738:	7abb      	ldrb	r3, [r7, #10]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21a      	sxth	r2, r3
 800073e:	7a7b      	ldrb	r3, [r7, #9]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8000746:	7b3b      	ldrb	r3, [r7, #12]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	b21a      	sxth	r2, r3
 800075a:	7b7b      	ldrb	r3, [r7, #13]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000768:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000784:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000788:	ee07 3a90 	vmov	s15, r3
 800078c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80007a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	return status;
 80007b6:	7ffb      	ldrb	r3, [r7, #31]

}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08008f7c 	.word	0x08008f7c

080007c4 <BMP388_Init>:
 * INITIALIZATION
 *
 */
uint8_t BMP388_Init(BMP388 *alt,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	807b      	strh	r3, [r7, #2]

	/* define a check variable */
	uint8_t status = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	75fb      	strb	r3, [r7, #23]

	/* requires a falling edge on chip select pin to enable SPI mode */
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_SET);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6858      	ldr	r0, [r3, #4]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	891b      	ldrh	r3, [r3, #8]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f001 f8d7 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80007e6:	2005      	movs	r0, #5
 80007e8:	f000 fdf4 	bl	80013d4 <HAL_Delay>
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_RESET);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	891b      	ldrh	r3, [r3, #8]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 f8cc 	bl	8001994 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fde9 	bl	80013d4 <HAL_Delay>

	/* soft reset */
	status += BMP388_WriteRegister(alt, BMP388_CMD, 0xB6); //four-wire SPI mode is default
 8000802:	22b6      	movs	r2, #182	; 0xb6
 8000804:	217e      	movs	r1, #126	; 0x7e
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f000 f88a 	bl	8000920 <BMP388_WriteRegister>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	4413      	add	r3, r2
 8000814:	75fb      	strb	r3, [r7, #23]

	/* check chip ID */
	uint8_t chipID;
	status += BMP388_ReadRegister(alt, BMP388_CHIP_ID, &chipID);
 8000816:	f107 0316 	add.w	r3, r7, #22
 800081a:	461a      	mov	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f000 f842 	bl	80008a8 <BMP388_ReadRegister>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	4413      	add	r3, r2
 800082c:	75fb      	strb	r3, [r7, #23]

	if (chipID != 0x50) {
 800082e:	7dbb      	ldrb	r3, [r7, #22]
 8000830:	2b50      	cmp	r3, #80	; 0x50
 8000832:	d001      	beq.n	8000838 <BMP388_Init+0x74>
		return 0;
 8000834:	2300      	movs	r3, #0
 8000836:	e033      	b.n	80008a0 <BMP388_Init+0xdc>
	}

	/* configure OSR (over-sampling) suggested for drones: osr_p = x8; osr_t = x2 */
	status += BMP388_WriteRegister(alt, BMP388_OSR, 0x09); //x2 for both pressure and temperature to allow for 100Hz ODR
 8000838:	2209      	movs	r2, #9
 800083a:	211c      	movs	r1, #28
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f000 f86f 	bl	8000920 <BMP388_WriteRegister>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	4413      	add	r3, r2
 800084a:	75fb      	strb	r3, [r7, #23]

	/* configure ODR (output data rate) */
	status += BMP388_WriteRegister(alt, BMP388_ODR, 0x01); //pre-scaler 2, ODR 100Hz
 800084c:	2201      	movs	r2, #1
 800084e:	211d      	movs	r1, #29
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f865 	bl	8000920 <BMP388_WriteRegister>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	7dfb      	ldrb	r3, [r7, #23]
 800085c:	4413      	add	r3, r2
 800085e:	75fb      	strb	r3, [r7, #23]

	/* configure interrupts */
	status += BMP388_WriteRegister(alt, BMP388_INT_CTL, 0x20); //enable the data-ready interrupt
 8000860:	2220      	movs	r2, #32
 8000862:	2119      	movs	r1, #25
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 f85b 	bl	8000920 <BMP388_WriteRegister>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	4413      	add	r3, r2
 8000872:	75fb      	strb	r3, [r7, #23]

	/* get calibration data from the device */
	status += BMP388_ReadCalibrationData(alt);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f000 f88d 	bl	8000994 <BMP388_ReadCalibrationData>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	4413      	add	r3, r2
 8000882:	75fb      	strb	r3, [r7, #23]

	/* turn on measurement */
	status += BMP388_WriteRegister(alt, BMP388_PWR_CTL, 0x03); //turn on both the pressure sensor and temperature sensor
 8000884:	2203      	movs	r2, #3
 8000886:	211b      	movs	r1, #27
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 f849 	bl	8000920 <BMP388_WriteRegister>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	7dfb      	ldrb	r3, [r7, #23]
 8000894:	4413      	add	r3, r2
 8000896:	75fb      	strb	r3, [r7, #23]

	/* set up txBuf for DMA */
	alt->txBuf[0] = BMP388_DATA | 0x80; //set read bit
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2284      	movs	r2, #132	; 0x84
 800089c:	72da      	strb	r2, [r3, #11]

	return status;
 800089e:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <BMP388_ReadRegister>:
/*
 *
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t BMP388_ReadRegister(BMP388 *alt, uint8_t regAddr, uint8_t *data) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	460b      	mov	r3, r1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80 , 0x00};
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	753b      	strb	r3, [r7, #20]
 80008c0:	2300      	movs	r3, #0
 80008c2:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_RESET);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6858      	ldr	r0, [r3, #4]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	891b      	ldrh	r3, [r3, #8]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	f001 f860 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(alt->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0114 	add.w	r1, r7, #20
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2302      	movs	r3, #2
 80008e8:	f003 ff2e 	bl	8004748 <HAL_SPI_TransmitReceive>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_SET);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6858      	ldr	r0, [r3, #4]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	891b      	ldrh	r3, [r3, #8]
 8000902:	2201      	movs	r2, #1
 8000904:	4619      	mov	r1, r3
 8000906:	f001 f845 	bl	8001994 <HAL_GPIO_WritePin>

	if (status == 1) {
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d102      	bne.n	8000916 <BMP388_ReadRegister+0x6e>
		*data = rxBuf[2];
 8000910:	7cba      	ldrb	r2, [r7, #18]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <BMP388_WriteRegister>:


uint8_t BMP388_WriteRegister(BMP388 *alt, uint8_t regAddr, uint8_t data) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
 800092c:	4613      	mov	r3, r2
 800092e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	733b      	strb	r3, [r7, #12]
 8000934:	78bb      	ldrb	r3, [r7, #2]
 8000936:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_RESET);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6858      	ldr	r0, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	891b      	ldrh	r3, [r3, #8]
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	f001 f826 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(alt->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f107 010c 	add.w	r1, r7, #12
 8000950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000954:	2202      	movs	r2, #2
 8000956:	f003 fd82 	bl	800445e <HAL_SPI_Transmit>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf0c      	ite	eq
 8000960:	2301      	moveq	r3, #1
 8000962:	2300      	movne	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(alt->spiHandle) != HAL_SPI_STATE_READY);
 8000968:	bf00      	nop
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f004 f90c 	bl	8004b8c <HAL_SPI_GetState>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d1f7      	bne.n	800096a <BMP388_WriteRegister+0x4a>
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_SET);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6858      	ldr	r0, [r3, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	891b      	ldrh	r3, [r3, #8]
 8000982:	2201      	movs	r2, #1
 8000984:	4619      	mov	r1, r3
 8000986:	f001 f805 	bl	8001994 <HAL_GPIO_WritePin>

	return status;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <BMP388_ReadCalibrationData>:
/*
 *
 * CALIBRATION DATA READING
 *
 */
uint8_t BMP388_ReadCalibrationData(BMP388 *alt) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b090      	sub	sp, #64	; 0x40
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[22];
	txBuf[0] = (BMP388_CALIBRATION | 0x80);
 800099c:	23b1      	movs	r3, #177	; 0xb1
 800099e:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t rxBuf[22];

	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_RESET);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6858      	ldr	r0, [r3, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	891b      	ldrh	r3, [r3, #8]
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	f000 fff1 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(alt->spiHandle, txBuf, rxBuf, 22, HAL_MAX_DELAY) == HAL_OK);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f107 0208 	add.w	r2, r7, #8
 80009ba:	f107 0120 	add.w	r1, r7, #32
 80009be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2316      	movs	r3, #22
 80009c6:	f003 febf 	bl	8004748 <HAL_SPI_TransmitReceive>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_SET);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6858      	ldr	r0, [r3, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	891b      	ldrh	r3, [r3, #8]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	f000 ffd5 	bl	8001994 <HAL_GPIO_WritePin>

	if (status != 1) {
 80009ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d001      	beq.n	80009f6 <BMP388_ReadCalibrationData+0x62>
		return 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e066      	b.n	8000ac4 <BMP388_ReadCalibrationData+0x130>
	}

	/* temperature calibration data */
	alt->par_t1 = (uint16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 80009f6:	7abb      	ldrb	r3, [r7, #10]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	7a7b      	ldrb	r3, [r7, #9]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	849a      	strh	r2, [r3, #36]	; 0x24
	alt->par_t2 = (uint16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8000a0a:	7b3b      	ldrb	r3, [r7, #12]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	84da      	strh	r2, [r3, #38]	; 0x26
	alt->par_t3 = (int8_t) rxBuf[5];
 8000a1e:	7b7b      	ldrb	r3, [r7, #13]
 8000a20:	b25a      	sxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	/* pressure calibration data */
	alt->par_p1 = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	021b      	lsls	r3, r3, #8
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	855a      	strh	r2, [r3, #42]	; 0x2a
	alt->par_p2 = (int16_t) ((rxBuf[9] << 8) | rxBuf[8]);
 8000a3a:	7c7b      	ldrb	r3, [r7, #17]
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	b21a      	sxth	r2, r3
 8000a40:	7c3b      	ldrb	r3, [r7, #16]
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	859a      	strh	r2, [r3, #44]	; 0x2c
	alt->par_p3 = (int8_t) rxBuf[10];
 8000a4c:	7cbb      	ldrb	r3, [r7, #18]
 8000a4e:	b25a      	sxtb	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	alt->par_p4 = (int8_t) rxBuf[11];
 8000a56:	7cfb      	ldrb	r3, [r7, #19]
 8000a58:	b25a      	sxtb	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	alt->par_p5 = (uint16_t) ((rxBuf[13] << 8) | rxBuf[12]);
 8000a60:	7d7b      	ldrb	r3, [r7, #21]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	7d3b      	ldrb	r3, [r7, #20]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
	alt->par_p6 = (uint16_t) ((rxBuf[15] << 8) | rxBuf[14]);
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	865a      	strh	r2, [r3, #50]	; 0x32
	alt->par_p7 = (int8_t) rxBuf[16];
 8000a88:	7e3b      	ldrb	r3, [r7, #24]
 8000a8a:	b25a      	sxtb	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	alt->par_p8 = (int8_t) rxBuf[17];
 8000a92:	7e7b      	ldrb	r3, [r7, #25]
 8000a94:	b25a      	sxtb	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	alt->par_p1 = (int16_t) ((rxBuf[18] << 8) | rxBuf[19]);
 8000a9c:	7ebb      	ldrb	r3, [r7, #26]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	7efb      	ldrb	r3, [r7, #27]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	855a      	strh	r2, [r3, #42]	; 0x2a
	alt->par_p10 = (int8_t) rxBuf[20];
 8000aae:	7f3b      	ldrb	r3, [r7, #28]
 8000ab0:	b25a      	sxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	alt->par_p11 = (int8_t) rxBuf[21];
 8000ab8:	7f7b      	ldrb	r3, [r7, #29]
 8000aba:	b25a      	sxtb	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return 1;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3738      	adds	r7, #56	; 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <BMP388_CompensateTemperature>:

/* function provided in data sheet to convert temperature */
float BMP388_CompensateTemperature(uint32_t uncomp_temp, BMP388 *calib_data) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	float partial_data1;
	float partial_data2;

	partial_data1 = (float)(uncomp_temp - calib_data->par_t1);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae8:	edc7 7a03 	vstr	s15, [r7, #12]
	partial_data2 = (float)(partial_data1 * calib_data->par_t2);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b00:	edc7 7a02 	vstr	s15, [r7, #8]
	/* update the compensated temperature in calibration structure since this is needed for pressure calculation */
	calib_data->temperature = partial_data2 + (partial_data1*partial_data1) * calib_data->par_t3;
 8000b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b08:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	edc3 7a08 	vstr	s15, [r3, #32]

	/* return the compensated temperature */
	return calib_data->temperature;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	ee07 3a90 	vmov	s15, r3
}
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <BMP388_CompensatePressure>:

/*
 * function provided in data sheet to convert pressure
 * must be run after compensate temperature, because it uses the temperature in the calculation
 */
float BMP388_CompensatePressure(uint32_t uncomp_pressure, BMP388 *calib_data) {
 8000b42:	b480      	push	{r7}
 8000b44:	b08b      	sub	sp, #44	; 0x2c
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	float partial_data4;
	float partial_out1;
	float partial_out2;

	/* calibration data */
	partial_data1 = calib_data->par_p6 * calib_data->temperature;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	partial_data2 = calib_data->par_p7 * (calib_data->temperature * calib_data->temperature);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	edd3 6a08 	vldr	s13, [r3, #32]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b88:	edc7 7a08 	vstr	s15, [r7, #32]
	partial_data3 = calib_data->par_p8 * (calib_data->temperature * calib_data->temperature * calib_data->temperature);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	edd3 6a08 	vldr	s13, [r3, #32]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ba6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb8:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_out1 = calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be0:	edc7 7a06 	vstr	s15, [r7, #24]

	partial_data1 = calib_data->par_p2 * calib_data->temperature;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bfc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	partial_data2 = calib_data->par_p3 * (calib_data->temperature * calib_data->temperature);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	edd3 6a08 	vldr	s13, [r3, #32]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c22:	edc7 7a08 	vstr	s15, [r7, #32]
	partial_data3 = calib_data->par_p4 * (calib_data->temperature * calib_data->temperature * calib_data->temperature);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	edd3 6a08 	vldr	s13, [r3, #32]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c52:	edc7 7a07 	vstr	s15, [r7, #28]

	partial_out2 = (float)uncomp_pressure * (calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8000c66:	ee07 3a90 	vmov	s15, r3
 8000c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c76:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c7a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000c7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8a:	edc7 7a05 	vstr	s15, [r7, #20]

	partial_data1 = (float)uncomp_pressure * (float)uncomp_pressure;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	partial_data2 = calib_data->par_p9 + calib_data->par_p10 + calib_data->temperature;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8000cb8:	4413      	add	r3, r2
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	edc7 7a08 	vstr	s15, [r7, #32]
	partial_data3 = partial_data1 * partial_data2;
 8000cd0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000cd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cdc:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_data4 = partial_data3 + ((float)uncomp_pressure * (float)uncomp_pressure * (float)uncomp_pressure) * calib_data->par_p11;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8000d0c:	ee07 3a90 	vmov	s15, r3
 8000d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d18:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d20:	edc7 7a04 	vstr	s15, [r7, #16]
	comp_pressure = partial_out1 + partial_out2 + partial_data4;
 8000d24:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d30:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d38:	edc7 7a03 	vstr	s15, [r7, #12]

	calib_data->pressure = comp_pressure;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	61da      	str	r2, [r3, #28]
	return comp_pressure;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	ee07 3a90 	vmov	s15, r3
}
 8000d48:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4c:	372c      	adds	r7, #44	; 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <BMP388_Read>:
/*
 *
 * POLLING
 *
 */
uint8_t BMP388_Read(BMP388 *alt) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	6078      	str	r0, [r7, #4]

	/* buffers for burst reading the six data registers */
	uint8_t txBuf[7] = {(BMP388_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8000d60:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <BMP388_Read+0xb8>)
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	8019      	strh	r1, [r3, #0]
 8000d70:	3302      	adds	r3, #2
 8000d72:	0c0a      	lsrs	r2, r1, #16
 8000d74:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	/* use the buffers to SPI read */
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_RESET);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6858      	ldr	r0, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	891b      	ldrh	r3, [r3, #8]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	f000 fe07 	bl	8001994 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(alt->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	f107 020c 	add.w	r2, r7, #12
 8000d8e:	f107 0114 	add.w	r1, r7, #20
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2307      	movs	r3, #7
 8000d9a:	f003 fcd5 	bl	8004748 <HAL_SPI_TransmitReceive>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_GPIO_WritePin(alt->csPinBank, alt->csPin, GPIO_PIN_SET);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6858      	ldr	r0, [r3, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	891b      	ldrh	r3, [r3, #8]
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	f000 fdeb 	bl	8001994 <HAL_GPIO_WritePin>

	/* get the raw data */
	uint32_t uncomp_pressure = (uint32_t) ((rxBuf[3] << 16) | (rxBuf[2] << 8) | rxBuf[1]);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	7bbb      	ldrb	r3, [r7, #14]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	7b7a      	ldrb	r2, [r7, #13]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	623b      	str	r3, [r7, #32]
	uint32_t uncomp_temperature = (uint32_t) ((rxBuf[6] << 16) | (rxBuf[5] << 8) | rxBuf[4]);
 8000dce:	7cbb      	ldrb	r3, [r7, #18]
 8000dd0:	041a      	lsls	r2, r3, #16
 8000dd2:	7c7b      	ldrb	r3, [r7, #17]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	7c3a      	ldrb	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61fb      	str	r3, [r7, #28]

	/* use the provided conversion functions to get the actual values */
	alt->temperature = BMP388_CompensateTemperature(uncomp_temperature, alt);
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	69f8      	ldr	r0, [r7, #28]
 8000de2:	f7ff fe73 	bl	8000acc <BMP388_CompensateTemperature>
 8000de6:	eef0 7a40 	vmov.f32	s15, s0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edc3 7a08 	vstr	s15, [r3, #32]
	alt->pressure = BMP388_CompensatePressure(uncomp_pressure, alt);
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	6a38      	ldr	r0, [r7, #32]
 8000df4:	f7ff fea5 	bl	8000b42 <BMP388_CompensatePressure>
 8000df8:	eef0 7a40 	vmov.f32	s15, s0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edc3 7a07 	vstr	s15, [r3, #28]

	return status;
 8000e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08008f84 	.word	0x08008f84

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f000 fa66 	bl	80012ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f847 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 f8d3 	bl	8000fcc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e26:	f000 f893 	bl	8000f50 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000e2a:	f007 fa35 	bl	8008298 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



  	// Initialize BMI088
  	uint8_t bmi_status = BMI088_Init(&bmi088, &hspi1, BMI088_Accel_NCS_GPIO_Port, BMI088_Accel_NCS_Pin, BMI088_Gyro_NCS_GPIO_Port, BMI088_Gyro_NCS_Pin);
 8000e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <main+0x88>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <main+0x8c>)
 8000e3c:	4919      	ldr	r1, [pc, #100]	; (8000ea4 <main+0x90>)
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <main+0x94>)
 8000e40:	f7ff f9c2 	bl	80001c8 <BMI088_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  	if(bmi_status != 15) {
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d004      	beq.n	8000e58 <main+0x44>
  		HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2104      	movs	r1, #4
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <main+0x88>)
 8000e54:	f000 fd9e 	bl	8001994 <HAL_GPIO_WritePin>
  	}
  	*/

  	/* Initialize BMP388 */

  	uint8_t bmp_status = BMP388_Init(&bmp388, &hspi1, BMP388_NCS_GPIO_Port, BMP388_NCS_Pin);
 8000e58:	2308      	movs	r3, #8
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <main+0x8c>)
 8000e5c:	4911      	ldr	r1, [pc, #68]	; (8000ea4 <main+0x90>)
 8000e5e:	4813      	ldr	r0, [pc, #76]	; (8000eac <main+0x98>)
 8000e60:	f7ff fcb0 	bl	80007c4 <BMP388_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	71bb      	strb	r3, [r7, #6]
  	if (bmp_status != 7) {
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d005      	beq.n	8000e7a <main+0x66>
  		HAL_GPIO_WritePin(Pyro_C_Trigger_GPIO_Port, Pyro_C_Trigger_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <main+0x8c>)
 8000e76:	f000 fd8d 	bl	8001994 <HAL_GPIO_WritePin>



	uint8_t status;

	status = BMI088_ReadAccelerometer(&bmi088);
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <main+0x94>)
 8000e7c:	f7ff fbb6 	bl	80005ec <BMI088_ReadAccelerometer>
 8000e80:	4603      	mov	r3, r0
 8000e82:	717b      	strb	r3, [r7, #5]
	status = BMI088_ReadGyroscope(&bmi088);
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <main+0x94>)
 8000e86:	f7ff fc25 	bl	80006d4 <BMI088_ReadGyroscope>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	717b      	strb	r3, [r7, #5]
	//status = ADXL375_Read(&adxl375);
	status = BMP388_Read(&bmp388);
 8000e8e:	4807      	ldr	r0, [pc, #28]	; (8000eac <main+0x98>)
 8000e90:	f7ff ff62 	bl	8000d58 <BMP388_Read>
 8000e94:	4603      	mov	r3, r0
 8000e96:	717b      	strb	r3, [r7, #5]
  {
 8000e98:	e7ef      	b.n	8000e7a <main+0x66>
 8000e9a:	bf00      	nop
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48001000 	.word	0x48001000
 8000ea4:	20000128 	.word	0x20000128
 8000ea8:	2000018c 	.word	0x2000018c
 8000eac:	200001dc 	.word	0x200001dc

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b096      	sub	sp, #88	; 0x58
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2244      	movs	r2, #68	; 0x44
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f008 f820 	bl	8008f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ed2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ed6:	f001 ff2b 	bl	8002d30 <HAL_PWREx_ControlVoltageScaling>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ee0:	f000 f920 	bl	8001124 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000efa:	230a      	movs	r3, #10
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000efe:	2307      	movs	r3, #7
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 ff74 	bl	8002dfc <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 f903 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2303      	movs	r3, #3
 8000f24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2104      	movs	r1, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fb3c 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f42:	f000 f8ef 	bl	8001124 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3758      	adds	r7, #88	; 0x58
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <MX_SPI1_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_SPI1_Init+0x74>)
 8000fb0:	f003 f9b2 	bl	8004318 <HAL_SPI_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 f8b3 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000128 	.word	0x20000128
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <MX_GPIO_Init+0x148>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <MX_GPIO_Init+0x148>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <MX_GPIO_Init+0x148>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <MX_GPIO_Init+0x148>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a45      	ldr	r2, [pc, #276]	; (8001114 <MX_GPIO_Init+0x148>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b43      	ldr	r3, [pc, #268]	; (8001114 <MX_GPIO_Init+0x148>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b40      	ldr	r3, [pc, #256]	; (8001114 <MX_GPIO_Init+0x148>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a3f      	ldr	r2, [pc, #252]	; (8001114 <MX_GPIO_Init+0x148>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <MX_GPIO_Init+0x148>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <MX_GPIO_Init+0x148>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a39      	ldr	r2, [pc, #228]	; (8001114 <MX_GPIO_Init+0x148>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <MX_GPIO_Init+0x148>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_GPIO_Init+0x148>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a33      	ldr	r2, [pc, #204]	; (8001114 <MX_GPIO_Init+0x148>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_GPIO_Init+0x148>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 800105a:	2200      	movs	r2, #0
 800105c:	f243 3189 	movw	r1, #13193	; 0x3389
 8001060:	482d      	ldr	r0, [pc, #180]	; (8001118 <MX_GPIO_Init+0x14c>)
 8001062:	f000 fc97 	bl	8001994 <HAL_GPIO_WritePin>
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 8001066:	2200      	movs	r2, #0
 8001068:	f24c 1144 	movw	r1, #49476	; 0xc144
 800106c:	482b      	ldr	r0, [pc, #172]	; (800111c <MX_GPIO_Init+0x150>)
 800106e:	f000 fc91 	bl	8001994 <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8001078:	4829      	ldr	r0, [pc, #164]	; (8001120 <MX_GPIO_Init+0x154>)
 800107a:	f000 fc8b 	bl	8001994 <HAL_GPIO_WritePin>
                          |Status_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BMP388_Int_Pin BMI088_Accel_Int_Pin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin|BMI088_Accel_Int_Pin;
 800107e:	2306      	movs	r3, #6
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4821      	ldr	r0, [pc, #132]	; (8001118 <MX_GPIO_Init+0x14c>)
 8001092:	f000 fad5 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMP388_NCS_Pin Pyro_B_Trigger_Pin Pyro_C_Trigger_Pin Pyro_D_Trigger_Pin
                           Pyro_E_Trigger_Pin Pyro_F_Trigger_Pin BMI088_Accel_NCS_Pin */
  GPIO_InitStruct.Pin = BMP388_NCS_Pin|Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin
 8001096:	f243 3389 	movw	r3, #13193	; 0x3389
 800109a:	617b      	str	r3, [r7, #20]
                          |Pyro_E_Trigger_Pin|Pyro_F_Trigger_Pin|BMI088_Accel_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	481a      	ldr	r0, [pc, #104]	; (8001118 <MX_GPIO_Init+0x14c>)
 80010b0:	f000 fac6 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pyro_A_Trigger_Pin Continuity_LED_D_Pin Continuity_LED_C_Pin ADXL375_NCS_Pin
                           BMI088_Gyro_NCS_Pin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|ADXL375_NCS_Pin
 80010b4:	f24c 1344 	movw	r3, #49476	; 0xc144
 80010b8:	617b      	str	r3, [r7, #20]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <MX_GPIO_Init+0x150>)
 80010ce:	f000 fab7 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : Continuity_LED_B_Pin Continuity_LED_A_Pin Continuity_LED_E_Pin Continuity_LED_F_Pin
                           Status_LED_Pin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 80010d2:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80010d6:	617b      	str	r3, [r7, #20]
                          |Status_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_GPIO_Init+0x154>)
 80010ec:	f000 faa8 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_Int_Pin BMI088_Gyro_Int_Pin */
  GPIO_InitStruct.Pin = ADXL375_Int_Pin|BMI088_Gyro_Int_Pin;
 80010f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_GPIO_Init+0x150>)
 8001106:	f000 fa9b 	bl	8001640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	48001000 	.word	0x48001000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000c00 	.word	0x48000c00

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2104      	movs	r1, #4
 8001130:	4801      	ldr	r0, [pc, #4]	; (8001138 <Error_Handler+0x14>)
 8001132:	f000 fc2f 	bl	8001994 <HAL_GPIO_WritePin>
  while (1)
 8001136:	e7fe      	b.n	8001136 <Error_Handler+0x12>
 8001138:	48000400 	.word	0x48000400

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x44>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6613      	str	r3, [r2, #96]	; 0x60
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x44>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x44>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x44>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_SPI_MspInit+0x7c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d127      	bne.n	80011f6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_SPI_MspInit+0x80>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	4a16      	ldr	r2, [pc, #88]	; (8001204 <HAL_SPI_MspInit+0x80>)
 80011ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b0:	6613      	str	r3, [r2, #96]	; 0x60
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_SPI_MspInit+0x80>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_SPI_MspInit+0x80>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_SPI_MspInit+0x80>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_SPI_MspInit+0x80>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011d6:	2338      	movs	r3, #56	; 0x38
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011e6:	2305      	movs	r3, #5
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_SPI_MspInit+0x84>)
 80011f2:	f000 fa25 	bl	8001640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40013000 	.word	0x40013000
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f89c 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <OTG_FS_IRQHandler+0x10>)
 8001266:	f000 fd00 	bl	8001c6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200016fc 	.word	0x200016fc

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff ffea 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f007 fe25 	bl	8008f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ca:	f7ff fda3 	bl	8000e14 <main>

080012ce <LoopForever>:

LoopForever:
    b LoopForever
 80012ce:	e7fe      	b.n	80012ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80012dc:	0800901c 	.word	0x0800901c
  ldr r2, =_sbss
 80012e0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80012e4:	20001e28 	.word	0x20001e28

080012e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>

080012ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f961 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f80e 	bl	800131c <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	e001      	b.n	8001310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800130c:	f7ff ff16 	bl	800113c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001310:	79fb      	ldrb	r3, [r7, #7]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_InitTick+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d023      	beq.n	8001378 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_InitTick+0x70>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_InitTick+0x6c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f96d 	bl	8001626 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d809      	bhi.n	800136c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001360:	f000 f937 	bl	80015d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_InitTick+0x74>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e007      	b.n	800137c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e004      	b.n	800137c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e001      	b.n	800137c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000218 	.word	0x20000218

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000218 	.word	0x20000218

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e17f      	b.n	8001950 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8171 	beq.w	800194a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d005      	beq.n	8001680 <HAL_GPIO_Init+0x40>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 0201 	and.w	r2, r3, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d118      	bne.n	8001720 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	6939      	ldr	r1, [r7, #16]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80ac 	beq.w	800194a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_GPIO_Init+0x330>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a5e      	ldr	r2, [pc, #376]	; (8001970 <HAL_GPIO_Init+0x330>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_GPIO_Init+0x330>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800180a:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_GPIO_Init+0x334>)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001834:	d025      	beq.n	8001882 <HAL_GPIO_Init+0x242>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <HAL_GPIO_Init+0x338>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01f      	beq.n	800187e <HAL_GPIO_Init+0x23e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4e      	ldr	r2, [pc, #312]	; (800197c <HAL_GPIO_Init+0x33c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0x23a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4d      	ldr	r2, [pc, #308]	; (8001980 <HAL_GPIO_Init+0x340>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x236>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x344>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x232>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4b      	ldr	r2, [pc, #300]	; (8001988 <HAL_GPIO_Init+0x348>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x22e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4a      	ldr	r2, [pc, #296]	; (800198c <HAL_GPIO_Init+0x34c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x22a>
 8001866:	2306      	movs	r3, #6
 8001868:	e00c      	b.n	8001884 <HAL_GPIO_Init+0x244>
 800186a:	2307      	movs	r3, #7
 800186c:	e00a      	b.n	8001884 <HAL_GPIO_Init+0x244>
 800186e:	2305      	movs	r3, #5
 8001870:	e008      	b.n	8001884 <HAL_GPIO_Init+0x244>
 8001872:	2304      	movs	r3, #4
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x244>
 8001876:	2303      	movs	r3, #3
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x244>
 800187a:	2302      	movs	r3, #2
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x244>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x244>
 8001882:	2300      	movs	r3, #0
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	f002 0203 	and.w	r2, r2, #3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x334>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_GPIO_Init+0x350>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_GPIO_Init+0x350>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_GPIO_Init+0x350>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f0:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_GPIO_Init+0x350>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_GPIO_Init+0x350>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_GPIO_Init+0x350>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x350>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001944:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_GPIO_Init+0x350>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f ae78 	bne.w	8001650 <HAL_GPIO_Init+0x10>
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48001000 	.word	0x48001000
 8001988:	48001400 	.word	0x48001400
 800198c:	48001800 	.word	0x48001800
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c6:	b08f      	sub	sp, #60	; 0x3c
 80019c8:	af0a      	add	r7, sp, #40	; 0x28
 80019ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e116      	b.n	8001c04 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d106      	bne.n	80019f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f006 fe43 	bl	800867c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fb04 	bl	8005022 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	687e      	ldr	r6, [r7, #4]
 8001a22:	466d      	mov	r5, sp
 8001a24:	f106 0410 	add.w	r4, r6, #16
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a38:	1d33      	adds	r3, r6, #4
 8001a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f003 fa17 	bl	8004e70 <USB_CoreInit>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d7      	b.n	8001c04 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 faf2 	bl	8005044 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e04a      	b.n	8001afc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	333d      	adds	r3, #61	; 0x3d
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	333c      	adds	r3, #60	; 0x3c
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	b298      	uxth	r0, r3
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3356      	adds	r3, #86	; 0x56
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3340      	adds	r3, #64	; 0x40
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3344      	adds	r3, #68	; 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3348      	adds	r3, #72	; 0x48
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	334c      	adds	r3, #76	; 0x4c
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	3301      	adds	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3af      	bcc.n	8001a66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e044      	b.n	8001b96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3301      	adds	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3b5      	bcc.n	8001b0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	687e      	ldr	r6, [r7, #4]
 8001ba8:	466d      	mov	r5, sp
 8001baa:	f106 0410 	add.w	r4, r6, #16
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bbe:	1d33      	adds	r3, r6, #4
 8001bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f003 fa8a 	bl	80050dc <USB_DevInit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e014      	b.n	8001c04 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f001 f86a 	bl	8002ccc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 fa38 	bl	8006072 <USB_DevDisconnect>

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_PCD_Start+0x1c>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e01c      	b.n	8001c62 <HAL_PCD_Start+0x56>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 f9d9 	bl	8005000 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 f9ec 	bl	8006030 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b08d      	sub	sp, #52	; 0x34
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 faaa 	bl	80061da <USB_GetMode>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 847e 	bne.w	800258a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 fa0e 	bl	80060b4 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8474 	beq.w	8002588 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f9fb 	bl	80060b4 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d107      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f002 0202 	and.w	r2, r2, #2
 8001cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 f9e9 	bl	80060b4 <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d161      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0210 	bic.w	r2, r2, #16
 8001cfa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 020f 	and.w	r2, r3, #15
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	3304      	adds	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	0c5b      	lsrs	r3, r3, #17
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d124      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d035      	beq.n	8001da0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	6a38      	ldr	r0, [r7, #32]
 8001d48:	f004 f820 	bl	8005d8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d58:	441a      	add	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d6a:	441a      	add	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	e016      	b.n	8001da0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	0c5b      	lsrs	r3, r3, #17
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d110      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d84:	2208      	movs	r2, #8
 8001d86:	4619      	mov	r1, r3
 8001d88:	6a38      	ldr	r0, [r7, #32]
 8001d8a:	f003 ffff 	bl	8005d8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d9a:	441a      	add	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0210 	orr.w	r2, r2, #16
 8001dae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 f97d 	bl	80060b4 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001dc4:	f040 80a7 	bne.w	8001f16 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 f982 	bl	80060da <USB_ReadDevAllOutEpInterrupt>
 8001dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001dd8:	e099      	b.n	8001f0e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 808e 	beq.w	8001f02 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f9a6 	bl	8006142 <USB_ReadDevOutEPInterrupt>
 8001df6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2301      	movs	r3, #1
 8001e12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fe7e 	bl	8002b18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e32:	461a      	mov	r2, r3
 8001e34:	2308      	movs	r3, #8
 8001e36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 feba 	bl	8002bb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e56:	461a      	mov	r2, r3
 8001e58:	2310      	movs	r3, #16
 8001e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d030      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d109      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e84:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d108      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f006 fd37 	bl	8008924 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efa:	461a      	mov	r2, r3
 8001efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f00:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	3301      	adds	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f47f af62 	bne.w	8001dda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f8ca 	bl	80060b4 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f2a:	f040 80a4 	bne.w	8002076 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 f8eb 	bl	800610e <USB_ReadDevAllInEpInterrupt>
 8001f38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f3e:	e096      	b.n	800206e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 808b 	beq.w	8002062 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 f911 	bl	800617e <USB_ReadDevInEPInterrupt>
 8001f5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	2201      	movs	r2, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69f9      	ldr	r1, [r7, #28]
 8001f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f88:	4013      	ands	r3, r2
 8001f8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f006 fc28 	bl	80087fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2310      	movs	r3, #16
 8001fe0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2340      	movs	r3, #64	; 0x40
 8001ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200a:	6a38      	ldr	r0, [r7, #32]
 800200c:	f003 f9a8 	bl	8005360 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	3338      	adds	r3, #56	; 0x38
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	78db      	ldrb	r3, [r3, #3]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d108      	bne.n	800203e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2200      	movs	r2, #0
 8002030:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f006 fc85 	bl	8008948 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204a:	461a      	mov	r2, r3
 800204c:	2302      	movs	r3, #2
 800204e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800205a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fcd2 	bl	8002a06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	3301      	adds	r3, #1
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f af65 	bne.w	8001f40 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f004 f81a 	bl	80060b4 <USB_ReadInterrupts>
 8002080:	4603      	mov	r3, r0
 8002082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800208a:	d122      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d108      	bne.n	80020bc <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020b2:	2100      	movs	r1, #0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f006 feb9 	bl	8008e2c <HAL_PCDEx_LPM_Callback>
 80020ba:	e002      	b.n	80020c2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f006 fc09 	bl	80088d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 ffec 	bl	80060b4 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e6:	d112      	bne.n	800210e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f006 fbc5 	bl	8008888 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800210c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 ffce 	bl	80060b4 <USB_ReadInterrupts>
 8002118:	4603      	mov	r3, r0
 800211a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800211e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002122:	d121      	bne.n	8002168 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002132:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d111      	bne.n	8002162 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	f003 020f 	and.w	r2, r3, #15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002158:	2101      	movs	r1, #1
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f006 fe66 	bl	8008e2c <HAL_PCDEx_LPM_Callback>
 8002160:	e002      	b.n	8002168 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f006 fb90 	bl	8008888 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 ffa1 	bl	80060b4 <USB_ReadInterrupts>
 8002172:	4603      	mov	r3, r0
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217c:	f040 80b5 	bne.w	80022ea <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2110      	movs	r1, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f8e0 	bl	8005360 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a4:	e046      	b.n	8002234 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b2:	461a      	mov	r2, r3
 80021b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ca:	0151      	lsls	r1, r2, #5
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	440a      	add	r2, r1
 80021d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fe:	0151      	lsls	r1, r2, #5
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	440a      	add	r2, r1
 8002204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800220c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	0151      	lsls	r1, r2, #5
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	440a      	add	r2, r1
 8002224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002228:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800222c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	3301      	adds	r3, #1
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223a:	429a      	cmp	r2, r3
 800223c:	d3b3      	bcc.n	80021a6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002250:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f043 030b 	orr.w	r3, r3, #11
 800226e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002280:	f043 030b 	orr.w	r3, r3, #11
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	e015      	b.n	80022b4 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800229a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800229e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ae:	f043 030b 	orr.w	r3, r3, #11
 80022b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f003 ffb1 	bl	800623c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fee0 	bl	80060b4 <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fe:	d124      	bne.n	800234a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f003 ff76 	bl	80061f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 f8a3 	bl	800545a <USB_GetDevSpeed>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681c      	ldr	r4, [r3, #0]
 8002320:	f001 fad2 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8002324:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4620      	mov	r0, r4
 8002330:	f002 fdca 	bl	8004ec8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f006 fa88 	bl	800884a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002348:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 feb0 	bl	80060b4 <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d10a      	bne.n	8002374 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f006 fa65 	bl	800882e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f002 0208 	and.w	r2, r2, #8
 8002372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 fe9b 	bl	80060b4 <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d122      	bne.n	80023ce <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002394:	2301      	movs	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
 8002398:	e014      	b.n	80023c4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 faf3 	bl	80029a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3e5      	bcc.n	800239a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fe6e 	bl	80060b4 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e2:	d13b      	bne.n	800245c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023e4:	2301      	movs	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
 80023e8:	e02b      	b.n	8002442 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3340      	adds	r3, #64	; 0x40
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d115      	bne.n	800243c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002410:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	da12      	bge.n	800243c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	333f      	adds	r3, #63	; 0x3f
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fab4 	bl	80029a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3301      	adds	r3, #1
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002448:	429a      	cmp	r2, r3
 800244a:	d3ce      	bcc.n	80023ea <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800245a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fe27 	bl	80060b4 <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002470:	d155      	bne.n	800251e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002472:	2301      	movs	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e045      	b.n	8002504 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d12e      	bne.n	80024fe <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da2b      	bge.n	80024fe <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80024b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d121      	bne.n	80024fe <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fa:	6053      	str	r3, [r2, #4]
            break;
 80024fc:	e007      	b.n	800250e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	3301      	adds	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	429a      	cmp	r2, r3
 800250c:	d3b4      	bcc.n	8002478 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800251c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fdc6 	bl	80060b4 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002532:	d10a      	bne.n	800254a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f006 fa19 	bl	800896c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fdb0 	bl	80060b4 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d115      	bne.n	800258a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f006 fa09 	bl	8008988 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	e000      	b.n	800258a <HAL_PCD_IRQHandler+0x920>
      return;
 8002588:	bf00      	nop
    }
  }
}
 800258a:	3734      	adds	r7, #52	; 0x34
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}

08002590 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_SetAddress+0x1a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e013      	b.n	80025d2 <HAL_PCD_SetAddress+0x42>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fd0e 	bl	8005fe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	4608      	mov	r0, r1
 80025e4:	4611      	mov	r1, r2
 80025e6:	461a      	mov	r2, r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	70fb      	strb	r3, [r7, #3]
 80025ec:	460b      	mov	r3, r1
 80025ee:	803b      	strh	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da0f      	bge.n	8002620 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	3338      	adds	r3, #56	; 0x38
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	705a      	strb	r2, [r3, #1]
 800261e:	e00f      	b.n	8002640 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	3304      	adds	r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800264c:	883a      	ldrh	r2, [r7, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	78ba      	ldrb	r2, [r7, #2]
 8002656:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800266a:	78bb      	ldrb	r3, [r7, #2]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d102      	bne.n	8002676 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_PCD_EP_Open+0xaa>
 8002680:	2302      	movs	r3, #2
 8002682:	e00e      	b.n	80026a2 <HAL_PCD_EP_Open+0xc8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	4618      	mov	r0, r3
 8002694:	f002 ff00 	bl	8005498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026a0:	7afb      	ldrb	r3, [r7, #11]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da0f      	bge.n	80026de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	3338      	adds	r3, #56	; 0x38
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	3304      	adds	r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	705a      	strb	r2, [r3, #1]
 80026dc:	e00f      	b.n	80026fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 020f 	and.w	r2, r3, #15
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_PCD_EP_Close+0x6e>
 8002714:	2302      	movs	r3, #2
 8002716:	e00e      	b.n	8002736 <HAL_PCD_EP_Close+0x8c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	4618      	mov	r0, r3
 8002728:	f002 ff3e 	bl	80055a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	460b      	mov	r3, r1
 800274c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	f003 020f 	and.w	r2, r3, #15
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	b2da      	uxtb	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 ffe4 	bl	8005760 <USB_EPStartXfer>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80027c4:	681b      	ldr	r3, [r3, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	460b      	mov	r3, r1
 80027e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e2:	7afb      	ldrb	r3, [r7, #11]
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3338      	adds	r3, #56	; 0x38
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2201      	movs	r2, #1
 8002810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	4618      	mov	r0, r3
 8002826:	f002 ff9b 	bl	8005760 <USB_EPStartXfer>

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d901      	bls.n	8002852 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e04e      	b.n	80028f0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da0f      	bge.n	800287a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3338      	adds	r3, #56	; 0x38
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
 8002878:	e00d      	b.n	8002896 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_PCD_EP_SetStall+0x82>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e01c      	b.n	80028f0 <HAL_PCD_EP_SetStall+0xbc>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fab9 	bl	8005e3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d108      	bne.n	80028e6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f003 fcab 	bl	800623c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	d901      	bls.n	8002916 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e042      	b.n	800299c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da0f      	bge.n	800293e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	3338      	adds	r3, #56	; 0x38
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
 800293c:	e00f      	b.n	800295e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_PCD_EP_ClrStall+0x86>
 800297a:	2302      	movs	r3, #2
 800297c:	e00e      	b.n	800299c <HAL_PCD_EP_ClrStall+0xa4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fac3 	bl	8005f18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da0c      	bge.n	80029d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	3338      	adds	r3, #56	; 0x38
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	3304      	adds	r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e00c      	b.n	80029ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	f003 020f 	and.w	r2, r3, #15
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 f8e6 	bl	8005bc4 <USB_EPStopXfer>
 80029f8:	4603      	mov	r3, r0
 80029fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029fc:	7afb      	ldrb	r3, [r7, #11]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b088      	sub	sp, #32
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	3338      	adds	r3, #56	; 0x38
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d901      	bls.n	8002a3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e067      	b.n	8002b0e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d902      	bls.n	8002a5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3303      	adds	r3, #3
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a62:	e026      	b.n	8002ab2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d902      	bls.n	8002a80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	3303      	adds	r3, #3
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68d9      	ldr	r1, [r3, #12]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	6978      	ldr	r0, [r7, #20]
 8002a96:	f003 f93f 	bl	8005d18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d809      	bhi.n	8002adc <PCD_WriteEmptyTxFifo+0xd6>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d203      	bcs.n	8002adc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1c3      	bne.n	8002a64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d811      	bhi.n	8002b0c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	2201      	movs	r2, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	6939      	ldr	r1, [r7, #16]
 8002b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b08:	4013      	ands	r3, r2
 8002b0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	333c      	adds	r3, #60	; 0x3c
 8002b30:	3304      	adds	r3, #4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <PCD_EP_OutXfrComplete_int+0x98>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d124      	bne.n	8002b98 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b64:	461a      	mov	r2, r3
 8002b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6a:	6093      	str	r3, [r2, #8]
 8002b6c:	e01a      	b.n	8002ba4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b84:	461a      	mov	r2, r3
 8002b86:	2320      	movs	r3, #32
 8002b88:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f005 fe17 	bl	80087c4 <HAL_PCD_DataOutStageCallback>
 8002b96:	e005      	b.n	8002ba4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f005 fe10 	bl	80087c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	4f54310a 	.word	0x4f54310a

08002bb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	333c      	adds	r3, #60	; 0x3c
 8002bcc:	3304      	adds	r3, #4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <PCD_EP_OutSetupPacket_int+0x64>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d90e      	bls.n	8002c08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c00:	461a      	mov	r2, r3
 8002c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f005 fdc9 	bl	80087a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	4f54300a 	.word	0x4f54300a

08002c1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d107      	bne.n	8002c4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c3a:	883b      	ldrh	r3, [r7, #0]
 8002c3c:	0419      	lsls	r1, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
 8002c48:	e028      	b.n	8002c9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	4413      	add	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e00d      	b.n	8002c7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	3340      	adds	r3, #64	; 0x40
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4413      	add	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	3301      	adds	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d3ec      	bcc.n	8002c5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c84:	883b      	ldrh	r3, [r7, #0]
 8002c86:	0418      	lsls	r0, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	4302      	orrs	r2, r0
 8002c94:	3340      	adds	r3, #64	; 0x40
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	f043 0303 	orr.w	r3, r3, #3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40007000 	.word	0x40007000

08002d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3e:	d130      	bne.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4c:	d038      	beq.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2232      	movs	r2, #50	; 0x32
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	3301      	adds	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d74:	e002      	b.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d102      	bne.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f2      	bne.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d110      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e00f      	b.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d007      	beq.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db8:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	431bde83 	.word	0x431bde83

08002ddc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dea:	6053      	str	r3, [r2, #4]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000

08002dfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e3ca      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0e:	4b97      	ldr	r3, [pc, #604]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e18:	4b94      	ldr	r3, [pc, #592]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80e4 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_RCC_OscConfig+0x4a>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	f040 808b 	bne.w	8002f54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	f040 8087 	bne.w	8002f54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x62>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e3a2      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RCC_OscConfig+0x7c>
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_OscConfig+0x88>
 8002e78:	4b7c      	ldr	r3, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d223      	bcs.n	8002ed0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd27 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e383      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9c:	4b73      	ldr	r3, [pc, #460]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a72      	ldr	r2, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	f043 0308 	orr.w	r3, r3, #8
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	496d      	ldr	r1, [pc, #436]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eba:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	4968      	ldr	r1, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
 8002ece:	e025      	b.n	8002f1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed0:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a65      	ldr	r2, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4960      	ldr	r1, [pc, #384]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	495b      	ldr	r1, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fce7 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e343      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f1c:	f000 fc4a 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b52      	ldr	r3, [pc, #328]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	4950      	ldr	r1, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x274>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <HAL_RCC_OscConfig+0x278>)
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f3c:	4b4e      	ldr	r3, [pc, #312]	; (8003078 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f9eb 	bl	800131c <HAL_InitTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d052      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	e327      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d032      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a42      	ldr	r2, [pc, #264]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fa28 	bl	80013bc <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f70:	f7fe fa24 	bl	80013bc <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e310      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f82:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4931      	ldr	r1, [pc, #196]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fac:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	492c      	ldr	r1, [pc, #176]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e01a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a29      	ldr	r2, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fce:	f7fe f9f5 	bl	80013bc <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd6:	f7fe f9f1 	bl	80013bc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e2dd      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x1da>
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ff6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d074      	beq.n	80030ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b08      	cmp	r3, #8
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x21a>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d10e      	bne.n	800302e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d10b      	bne.n	800302e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d064      	beq.n	80030ec <HAL_RCC_OscConfig+0x2f0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d160      	bne.n	80030ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e2ba      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x24a>
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x270>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x270>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e026      	b.n	8003094 <HAL_RCC_OscConfig+0x298>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304e:	d115      	bne.n	800307c <HAL_RCC_OscConfig+0x280>
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a05      	ldr	r2, [pc, #20]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCC_OscConfig+0x270>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x298>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	08008fd4 	.word	0x08008fd4
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004
 800307c:	4ba0      	ldr	r3, [pc, #640]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a9f      	ldr	r2, [pc, #636]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b9d      	ldr	r3, [pc, #628]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a9c      	ldr	r2, [pc, #624]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f98e 	bl	80013bc <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe f98a 	bl	80013bc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e276      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b6:	4b92      	ldr	r3, [pc, #584]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2a8>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe f97a 	bl	80013bc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe f976 	bl	80013bc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e262      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030de:	4b88      	ldr	r3, [pc, #544]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d0>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d060      	beq.n	80031bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x310>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d119      	bne.n	800313a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d116      	bne.n	800313a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_OscConfig+0x328>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e23f      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	4973      	ldr	r1, [pc, #460]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003138:	e040      	b.n	80031bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d023      	beq.n	800318a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003142:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe f935 	bl	80013bc <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe f931 	bl	80013bc <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e21d      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003168:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	495f      	ldr	r1, [pc, #380]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
 8003188:	e018      	b.n	80031bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe f911 	bl	80013bc <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe f90d 	bl	80013bc <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1f9      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d03c      	beq.n	8003242 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe f8ec 	bl	80013bc <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fe f8e8 	bl	80013bc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1d4      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80031fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ef      	beq.n	80031e8 <HAL_RCC_OscConfig+0x3ec>
 8003208:	e01b      	b.n	8003242 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	4a3b      	ldr	r2, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe f8cf 	bl	80013bc <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe f8cb 	bl	80013bc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1b7      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003234:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80a6 	beq.w	800339c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d118      	bne.n	80032ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003294:	f7fe f892 	bl	80013bc <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe f88e 	bl	80013bc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e17a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x508>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4d8>
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d2:	e029      	b.n	8003328 <HAL_RCC_OscConfig+0x52c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d115      	bne.n	8003308 <HAL_RCC_OscConfig+0x50c>
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x52c>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	40007000 	.word	0x40007000
 8003308:	4b9c      	ldr	r3, [pc, #624]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a9b      	ldr	r2, [pc, #620]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003318:	4b98      	ldr	r3, [pc, #608]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a97      	ldr	r2, [pc, #604]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe f844 	bl	80013bc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003336:	e00a      	b.n	800334e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fe f840 	bl	80013bc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e12a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334e:	4b8b      	ldr	r3, [pc, #556]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ed      	beq.n	8003338 <HAL_RCC_OscConfig+0x53c>
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe f82d 	bl	80013bc <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe f829 	bl	80013bc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e113      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800337c:	4b7f      	ldr	r3, [pc, #508]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ed      	bne.n	8003366 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	4a79      	ldr	r2, [pc, #484]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80fe 	beq.w	80035a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	f040 80d0 	bne.w	8003550 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033b0:	4b72      	ldr	r3, [pc, #456]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d130      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	3b01      	subs	r3, #1
 80033d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d127      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d11f      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f0:	2a07      	cmp	r2, #7
 80033f2:	bf14      	ite	ne
 80033f4:	2201      	movne	r2, #1
 80033f6:	2200      	moveq	r2, #0
 80033f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d109      	bne.n	8003426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d06e      	beq.n	8003504 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b0c      	cmp	r3, #12
 800342a:	d069      	beq.n	8003500 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ad      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800344e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003454:	f7fd ffb2 	bl	80013bc <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd ffae 	bl	80013bc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e09a      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347a:	4b40      	ldr	r3, [pc, #256]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <HAL_RCC_OscConfig+0x784>)
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800348a:	3a01      	subs	r2, #1
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003494:	0212      	lsls	r2, r2, #8
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800349c:	0852      	lsrs	r2, r2, #1
 800349e:	3a01      	subs	r2, #1
 80034a0:	0552      	lsls	r2, r2, #21
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034a8:	0852      	lsrs	r2, r2, #1
 80034aa:	3a01      	subs	r2, #1
 80034ac:	0652      	lsls	r2, r2, #25
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b4:	0912      	lsrs	r2, r2, #4
 80034b6:	0452      	lsls	r2, r2, #17
 80034b8:	430a      	orrs	r2, r1
 80034ba:	4930      	ldr	r1, [pc, #192]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d8:	f7fd ff70 	bl	80013bc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd ff6c 	bl	80013bc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e058      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <HAL_RCC_OscConfig+0x780>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fe:	e050      	b.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04f      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d148      	bne.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a16      	ldr	r2, [pc, #88]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003528:	f7fd ff48 	bl	80013bc <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fd ff44 	bl	80013bc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e030      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x734>
 800354e:	e028      	b.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d023      	beq.n	800359e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_OscConfig+0x780>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_RCC_OscConfig+0x780>)
 800355c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fd ff2b 	bl	80013bc <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	e00c      	b.n	8003584 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fd ff27 	bl	80013bc <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d905      	bls.n	8003584 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e013      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
 800357c:	40021000 	.word	0x40021000
 8003580:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x7b0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ec      	bne.n	800356a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x7b0>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4905      	ldr	r1, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x7b0>)
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_OscConfig+0x7b4>)
 8003598:	4013      	ands	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
 800359c:	e001      	b.n	80035a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	feeefffc 	.word	0xfeeefffc

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0e7      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d910      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4970      	ldr	r1, [pc, #448]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0cf      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003610:	429a      	cmp	r2, r3
 8003612:	d908      	bls.n	8003626 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4960      	ldr	r1, [pc, #384]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d04c      	beq.n	80036cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d121      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0a6      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e09a      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800366a:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e08e      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e086      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4943      	ldr	r1, [pc, #268]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fd fe8e 	bl	80013bc <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fd fe8a 	bl	80013bc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e06e      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d208      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	492b      	ldr	r1, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d210      	bcs.n	800372a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 0207 	bic.w	r2, r3, #7
 8003710:	4923      	ldr	r1, [pc, #140]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_ClockConfig+0x1ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e036      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4918      	ldr	r1, [pc, #96]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4910      	ldr	r1, [pc, #64]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003768:	f000 f824 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1f4>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1f8>)
 8003786:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1fc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fdc5 	bl	800131c <HAL_InitTick>
 8003792:	4603      	mov	r3, r0
 8003794:	72fb      	strb	r3, [r7, #11]

  return status;
 8003796:	7afb      	ldrb	r3, [r7, #11]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008fd4 	.word	0x08008fd4
 80037ac:	20000000 	.word	0x20000000
 80037b0:	20000004 	.word	0x20000004

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x34>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d11e      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e005      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003824:	e00a      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e004      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d101      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800383a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d134      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0xa6>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xac>
 8003858:	e005      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003862:	617b      	str	r3, [r7, #20]
      break;
 8003864:	e002      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	fb03 f202 	mul.w	r2, r3, r2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	3301      	adds	r3, #1
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ac:	69bb      	ldr	r3, [r7, #24]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08008fe4 	.word	0x08008fe4
 80038c4:	00f42400 	.word	0x00f42400

080038c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000

080038e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038f8:	f7ff fa0c 	bl	8002d14 <HAL_PWREx_GetVoltageRange>
 80038fc:	6178      	str	r0, [r7, #20]
 80038fe:	e014      	b.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003918:	f7ff f9fc 	bl	8002d14 <HAL_PWREx_GetVoltageRange>
 800391c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d10b      	bne.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d919      	bls.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2ba0      	cmp	r3, #160	; 0xa0
 800393c:	d902      	bls.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800393e:	2302      	movs	r3, #2
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e013      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003944:	2301      	movs	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e010      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d902      	bls.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003950:	2303      	movs	r3, #3
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e00a      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d102      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395c:	2302      	movs	r3, #2
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	e004      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d101      	bne.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	4909      	ldr	r1, [pc, #36]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	40022000 	.word	0x40022000

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a8:	2300      	movs	r3, #0
 80039aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d041      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039c4:	d02a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ca:	d824      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d0:	d008      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d6:	d81e      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e0:	d010      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039e2:	e018      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039e4:	4b86      	ldr	r3, [pc, #536]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a85      	ldr	r2, [pc, #532]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f0:	e015      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fabb 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3320      	adds	r3, #32
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fba6 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	74fb      	strb	r3, [r7, #19]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a24:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a32:	4973      	ldr	r1, [pc, #460]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d041      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a54:	d02a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a5a:	d824      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a66:	d81e      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d010      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a72:	e018      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a74:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a80:	e015      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fa73 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a92:	e00c      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3320      	adds	r3, #32
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb5e 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	494f      	ldr	r1, [pc, #316]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a0 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	4a40      	ldr	r2, [pc, #256]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b20:	f7fd fc4c 	bl	80013bc <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fd fc48 	bl	80013bc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d15c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01f      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fc07 	bl	80013bc <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb0:	e00b      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fc03 	bl	80013bc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ec      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bf6:	e009      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0c:	7c7b      	ldrb	r3, [r7, #17]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b9e      	ldr	r3, [pc, #632]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	4a9d      	ldr	r2, [pc, #628]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2a:	4b98      	ldr	r3, [pc, #608]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 0203 	bic.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	4994      	ldr	r1, [pc, #592]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 020c 	bic.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	498c      	ldr	r1, [pc, #560]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c6e:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	4983      	ldr	r1, [pc, #524]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c90:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	497b      	ldr	r1, [pc, #492]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cb2:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	4972      	ldr	r1, [pc, #456]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cd4:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	496a      	ldr	r1, [pc, #424]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	4961      	ldr	r1, [pc, #388]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d18:	4b5c      	ldr	r3, [pc, #368]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	4959      	ldr	r1, [pc, #356]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	4950      	ldr	r1, [pc, #320]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	4948      	ldr	r1, [pc, #288]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	493f      	ldr	r1, [pc, #252]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d028      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	4937      	ldr	r1, [pc, #220]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e011      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd6:	d10c      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f8c8 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	491f      	ldr	r1, [pc, #124]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	60d3      	str	r3, [r2, #12]
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f899 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d02b      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	4908      	ldr	r1, [pc, #32]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	60d3      	str	r3, [r2, #12]
 8003e88:	e014      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f867 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ece:	4928      	ldr	r1, [pc, #160]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f844 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d014      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	74bb      	strb	r3, [r7, #18]
 8003efa:	e011      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3320      	adds	r3, #32
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f925 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	490d      	ldr	r1, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000

08003f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0203 	and.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10d      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d047      	beq.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e044      	b.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d018      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x86>
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d825      	bhi.n	8004018 <RCCEx_PLLSAI1_Config+0xa4>
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <RCCEx_PLLSAI1_Config+0x62>
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d009      	beq.n	8003fe8 <RCCEx_PLLSAI1_Config+0x74>
 8003fd4:	e020      	b.n	8004018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fd6:	4b60      	ldr	r3, [pc, #384]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11d      	bne.n	800401e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe6:	e01a      	b.n	800401e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe8:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e013      	b.n	8004022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ffa:	4b57      	ldr	r3, [pc, #348]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004016:	e006      	b.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e004      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004026:	bf00      	nop
    }

    if(status == HAL_OK)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	430b      	orrs	r3, r1
 8004044:	4944      	ldr	r1, [pc, #272]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d17d      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a40      	ldr	r2, [pc, #256]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fd f9ae 	bl	80013bc <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004062:	e009      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004064:	f7fd f9aa 	bl	80013bc <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	73fb      	strb	r3, [r7, #15]
        break;
 8004076:	e005      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004078:	4b37      	ldr	r3, [pc, #220]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ef      	bne.n	8004064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d160      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68d2      	ldr	r2, [r2, #12]
 80040a6:	0912      	lsrs	r2, r2, #4
 80040a8:	0452      	lsls	r2, r2, #17
 80040aa:	430a      	orrs	r2, r1
 80040ac:	492a      	ldr	r1, [pc, #168]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	610b      	str	r3, [r1, #16]
 80040b2:	e027      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d112      	bne.n	80040e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	0211      	lsls	r1, r2, #8
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6912      	ldr	r2, [r2, #16]
 80040d0:	0852      	lsrs	r2, r2, #1
 80040d2:	3a01      	subs	r2, #1
 80040d4:	0552      	lsls	r2, r2, #21
 80040d6:	430a      	orrs	r2, r1
 80040d8:	491f      	ldr	r1, [pc, #124]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]
 80040de:	e011      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	0211      	lsls	r1, r2, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6952      	ldr	r2, [r2, #20]
 80040f6:	0852      	lsrs	r2, r2, #1
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0652      	lsls	r2, r2, #25
 80040fc:	430a      	orrs	r2, r1
 80040fe:	4916      	ldr	r1, [pc, #88]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800410e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd f954 	bl	80013bc <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004116:	e009      	b.n	800412c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004118:	f7fd f950 	bl	80013bc <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	73fb      	strb	r3, [r7, #15]
          break;
 800412a:	e005      	b.n	8004138 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	4904      	ldr	r1, [pc, #16]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000

0800415c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800416a:	4b6a      	ldr	r3, [pc, #424]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004176:	4b67      	ldr	r3, [pc, #412]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0203 	and.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d10d      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
       ||
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800418e:	4b61      	ldr	r3, [pc, #388]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
       ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d047      	beq.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e044      	b.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d018      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0x86>
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d825      	bhi.n	8004200 <RCCEx_PLLSAI2_Config+0xa4>
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d002      	beq.n	80041be <RCCEx_PLLSAI2_Config+0x62>
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d009      	beq.n	80041d0 <RCCEx_PLLSAI2_Config+0x74>
 80041bc:	e020      	b.n	8004200 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041be:	4b55      	ldr	r3, [pc, #340]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11d      	bne.n	8004206 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ce:	e01a      	b.n	8004206 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041d0:	4b50      	ldr	r3, [pc, #320]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e0:	e013      	b.n	800420a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041e2:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ee:	4b49      	ldr	r3, [pc, #292]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041fe:	e006      	b.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	e004      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800420e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	430b      	orrs	r3, r1
 800422c:	4939      	ldr	r1, [pc, #228]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d167      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a35      	ldr	r2, [pc, #212]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004244:	f7fd f8ba 	bl	80013bc <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800424a:	e009      	b.n	8004260 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800424c:	f7fd f8b6 	bl	80013bc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d902      	bls.n	8004260 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	73fb      	strb	r3, [r7, #15]
        break;
 800425e:	e005      	b.n	800426c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004260:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ef      	bne.n	800424c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d14a      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	0211      	lsls	r1, r2, #8
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68d2      	ldr	r2, [r2, #12]
 800428e:	0912      	lsrs	r2, r2, #4
 8004290:	0452      	lsls	r2, r2, #17
 8004292:	430a      	orrs	r2, r1
 8004294:	491f      	ldr	r1, [pc, #124]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	614b      	str	r3, [r1, #20]
 800429a:	e011      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6912      	ldr	r2, [r2, #16]
 80042b2:	0852      	lsrs	r2, r2, #1
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0652      	lsls	r2, r2, #25
 80042b8:	430a      	orrs	r2, r1
 80042ba:	4916      	ldr	r1, [pc, #88]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd f876 	bl	80013bc <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d2:	e009      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d4:	f7fd f872 	bl	80013bc <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d902      	bls.n	80042e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	73fb      	strb	r3, [r7, #15]
          break;
 80042e6:	e005      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000

08004318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e095      	b.n	8004456 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d009      	beq.n	8004350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
 8004342:	e005      	b.n	8004350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc ff0a 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004390:	d902      	bls.n	8004398 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e002      	b.n	800439e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043a6:	d007      	beq.n	80043b8 <HAL_SPI_Init+0xa0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	ea42 0103 	orr.w	r1, r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 0204 	and.w	r2, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004434:	ea42 0103 	orr.w	r1, r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_SPI_Transmit+0x22>
 800447c:	2302      	movs	r3, #2
 800447e:	e15f      	b.n	8004740 <HAL_SPI_Transmit+0x2e2>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004488:	f7fc ff98 	bl	80013bc <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044a2:	e148      	b.n	8004736 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Transmit+0x52>
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044b4:	e13f      	b.n	8004736 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004500:	d10f      	bne.n	8004522 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004510:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004520:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d007      	beq.n	8004540 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004548:	d94f      	bls.n	80045ea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_Transmit+0xfa>
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d142      	bne.n	80045de <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800457c:	e02f      	b.n	80045de <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d112      	bne.n	80045b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045b0:	e015      	b.n	80045de <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b2:	f7fc ff03 	bl	80013bc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d803      	bhi.n	80045ca <HAL_SPI_Transmit+0x16c>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c8:	d102      	bne.n	80045d0 <HAL_SPI_Transmit+0x172>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80045dc:	e0ab      	b.n	8004736 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ca      	bne.n	800457e <HAL_SPI_Transmit+0x120>
 80045e8:	e080      	b.n	80046ec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_Transmit+0x19a>
 80045f2:	8afb      	ldrh	r3, [r7, #22]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d174      	bne.n	80046e2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d912      	bls.n	8004628 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b02      	subs	r3, #2
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004626:	e05c      	b.n	80046e2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	7812      	ldrb	r2, [r2, #0]
 8004634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800464e:	e048      	b.n	80046e2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d12b      	bne.n	80046b6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d912      	bls.n	800468e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b02      	subs	r3, #2
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800468c:	e029      	b.n	80046e2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046b4:	e015      	b.n	80046e2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b6:	f7fc fe81 	bl	80013bc <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d803      	bhi.n	80046ce <HAL_SPI_Transmit+0x270>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046cc:	d102      	bne.n	80046d4 <HAL_SPI_Transmit+0x276>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80046e0:	e029      	b.n	8004736 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1b1      	bne.n	8004650 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fb77 	bl	8004de4 <SPI_EndRxTxTransaction>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e003      	b.n	8004736 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800473e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004756:	2301      	movs	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_SPI_TransmitReceive+0x26>
 800476a:	2302      	movs	r3, #2
 800476c:	e20a      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x43c>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004776:	f7fc fe21 	bl	80013bc <HAL_GetTick>
 800477a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004782:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004792:	7efb      	ldrb	r3, [r7, #27]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d00e      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x6e>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d106      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x66>
 80047a8:	7efb      	ldrb	r3, [r7, #27]
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d003      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047b4:	e1e0      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x80>
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047ce:	e1d3      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d003      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	887a      	ldrh	r2, [r7, #2]
 800480a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004826:	d802      	bhi.n	800482e <HAL_SPI_TransmitReceive+0xe6>
 8004828:	8a3b      	ldrh	r3, [r7, #16]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d908      	bls.n	8004840 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	e007      	b.n	8004850 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d007      	beq.n	800486e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800486c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004876:	f240 8081 	bls.w	800497c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_SPI_TransmitReceive+0x140>
 8004882:	8a7b      	ldrh	r3, [r7, #18]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d16d      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	881a      	ldrh	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ac:	e05a      	b.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d11b      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x1ac>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x1ac>
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d113      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d11c      	bne.n	800493c <HAL_SPI_TransmitReceive+0x1f4>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	b292      	uxth	r2, r2
 800491a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	1c9a      	adds	r2, r3, #2
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004938:	2301      	movs	r3, #1
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800493c:	f7fc fd3e 	bl	80013bc <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004948:	429a      	cmp	r2, r3
 800494a:	d80b      	bhi.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004952:	d007      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004962:	e109      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d19f      	bne.n	80048ae <HAL_SPI_TransmitReceive+0x166>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d199      	bne.n	80048ae <HAL_SPI_TransmitReceive+0x166>
 800497a:	e0e3      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_SPI_TransmitReceive+0x244>
 8004984:	8a7b      	ldrh	r3, [r7, #18]
 8004986:	2b01      	cmp	r3, #1
 8004988:	f040 80cf 	bne.w	8004b2a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d912      	bls.n	80049bc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b02      	subs	r3, #2
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ba:	e0b6      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e2:	e0a2      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d134      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x314>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02f      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x314>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d12c      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d912      	bls.n	8004a32 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	881a      	ldrh	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b02      	subs	r3, #2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a30:	e012      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d148      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x3b4>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d042      	beq.n	8004afc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d923      	bls.n	8004aca <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b02      	subs	r3, #2
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d81f      	bhi.n	8004af8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	e016      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f103 020c 	add.w	r2, r3, #12
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af8:	2301      	movs	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004afc:	f7fc fc5e 	bl	80013bc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d803      	bhi.n	8004b14 <HAL_SPI_TransmitReceive+0x3cc>
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b12:	d102      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x3d2>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b28:	e026      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f af57 	bne.w	80049e4 <HAL_SPI_TransmitReceive+0x29c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f47f af50 	bne.w	80049e4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f94b 	bl	8004de4 <SPI_EndRxTxTransaction>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e003      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3728      	adds	r7, #40	; 0x28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b9a:	b2db      	uxtb	r3, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb8:	f7fc fc00 	bl	80013bc <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc8:	f7fc fbf8 	bl	80013bc <HAL_GetTick>
 8004bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	0d1b      	lsrs	r3, r3, #20
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bde:	e054      	b.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be6:	d050      	beq.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be8:	f7fc fbe8 	bl	80013bc <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d902      	bls.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d13d      	bne.n	8004c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c16:	d111      	bne.n	8004c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c20:	d004      	beq.n	8004c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d107      	bne.n	8004c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c44:	d10f      	bne.n	8004c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e017      	b.n	8004caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4013      	ands	r3, r2
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d19b      	bne.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000000 	.word	0x20000000

08004cb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cca:	f7fc fb77 	bl	80013bc <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004cda:	f7fc fb6f 	bl	80013bc <HAL_GetTick>
 8004cde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ce8:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00da      	lsls	r2, r3, #3
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	0d1b      	lsrs	r3, r3, #20
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d00:	e060      	b.n	8004dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d08:	d107      	bne.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d20:	d050      	beq.n	8004dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d22:	f7fc fb4b 	bl	80013bc <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d902      	bls.n	8004d38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d13d      	bne.n	8004db4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d50:	d111      	bne.n	8004d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	d004      	beq.n	8004d66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d64:	d107      	bne.n	8004d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d10f      	bne.n	8004da0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e010      	b.n	8004dd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d196      	bne.n	8004d02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3728      	adds	r7, #40	; 0x28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000000 	.word	0x20000000

08004de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff ff5b 	bl	8004cb8 <SPI_WaitFifoStateUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e027      	b.n	8004e68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2180      	movs	r1, #128	; 0x80
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff fec0 	bl	8004ba8 <SPI_WaitFlagStateUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e014      	b.n	8004e68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff ff34 	bl	8004cb8 <SPI_WaitFifoStateUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e000      	b.n	8004e68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e70:	b084      	sub	sp, #16
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	f107 001c 	add.w	r0, r7, #28
 8004e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 fa1c 	bl	80062cc <USB_CoreReset>
 8004e94:	4603      	mov	r3, r0
 8004e96:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eaa:	e005      	b.n	8004eb8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ec4:	b004      	add	sp, #16
 8004ec6:	4770      	bx	lr

08004ec8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d165      	bne.n	8004fa8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <USB_SetTurnaroundTime+0x110>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d906      	bls.n	8004ef2 <USB_SetTurnaroundTime+0x2a>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a3d      	ldr	r2, [pc, #244]	; (8004fdc <USB_SetTurnaroundTime+0x114>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d202      	bcs.n	8004ef2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004eec:	230f      	movs	r3, #15
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e05c      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a39      	ldr	r2, [pc, #228]	; (8004fdc <USB_SetTurnaroundTime+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d306      	bcc.n	8004f08 <USB_SetTurnaroundTime+0x40>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a38      	ldr	r2, [pc, #224]	; (8004fe0 <USB_SetTurnaroundTime+0x118>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d202      	bcs.n	8004f08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f02:	230e      	movs	r3, #14
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e051      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a35      	ldr	r2, [pc, #212]	; (8004fe0 <USB_SetTurnaroundTime+0x118>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d306      	bcc.n	8004f1e <USB_SetTurnaroundTime+0x56>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a34      	ldr	r2, [pc, #208]	; (8004fe4 <USB_SetTurnaroundTime+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d202      	bcs.n	8004f1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f18:	230d      	movs	r3, #13
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e046      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <USB_SetTurnaroundTime+0x11c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d306      	bcc.n	8004f34 <USB_SetTurnaroundTime+0x6c>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <USB_SetTurnaroundTime+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d802      	bhi.n	8004f34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f2e:	230c      	movs	r3, #12
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e03b      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <USB_SetTurnaroundTime+0x120>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d906      	bls.n	8004f4a <USB_SetTurnaroundTime+0x82>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	; (8004fec <USB_SetTurnaroundTime+0x124>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d802      	bhi.n	8004f4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f44:	230b      	movs	r3, #11
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e030      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a27      	ldr	r2, [pc, #156]	; (8004fec <USB_SetTurnaroundTime+0x124>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d906      	bls.n	8004f60 <USB_SetTurnaroundTime+0x98>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4a26      	ldr	r2, [pc, #152]	; (8004ff0 <USB_SetTurnaroundTime+0x128>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d802      	bhi.n	8004f60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e025      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <USB_SetTurnaroundTime+0x128>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d906      	bls.n	8004f76 <USB_SetTurnaroundTime+0xae>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <USB_SetTurnaroundTime+0x12c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d202      	bcs.n	8004f76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f70:	2309      	movs	r3, #9
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e01a      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <USB_SetTurnaroundTime+0x12c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d306      	bcc.n	8004f8c <USB_SetTurnaroundTime+0xc4>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	; (8004ff8 <USB_SetTurnaroundTime+0x130>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d802      	bhi.n	8004f8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f86:	2308      	movs	r3, #8
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e00f      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <USB_SetTurnaroundTime+0x130>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d906      	bls.n	8004fa2 <USB_SetTurnaroundTime+0xda>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <USB_SetTurnaroundTime+0x134>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d202      	bcs.n	8004fa2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f9c:	2307      	movs	r3, #7
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e004      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fa2:	2306      	movs	r3, #6
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e001      	b.n	8004fac <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fa8:	2309      	movs	r3, #9
 8004faa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	029b      	lsls	r3, r3, #10
 8004fc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	00d8acbf 	.word	0x00d8acbf
 8004fdc:	00e4e1c0 	.word	0x00e4e1c0
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	01067380 	.word	0x01067380
 8004fe8:	011a499f 	.word	0x011a499f
 8004fec:	01312cff 	.word	0x01312cff
 8004ff0:	014ca43f 	.word	0x014ca43f
 8004ff4:	016e3600 	.word	0x016e3600
 8004ff8:	01a6ab1f 	.word	0x01a6ab1f
 8004ffc:	01e84800 	.word	0x01e84800

08005000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d115      	bne.n	8005092 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005072:	2001      	movs	r0, #1
 8005074:	f7fc f9ae 	bl	80013d4 <HAL_Delay>
      ms++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 f8ab 	bl	80061da <USB_GetMode>
 8005084:	4603      	mov	r3, r0
 8005086:	2b01      	cmp	r3, #1
 8005088:	d01e      	beq.n	80050c8 <USB_SetCurrentMode+0x84>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b31      	cmp	r3, #49	; 0x31
 800508e:	d9f0      	bls.n	8005072 <USB_SetCurrentMode+0x2e>
 8005090:	e01a      	b.n	80050c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d115      	bne.n	80050c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050a4:	2001      	movs	r0, #1
 80050a6:	f7fc f995 	bl	80013d4 <HAL_Delay>
      ms++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 f892 	bl	80061da <USB_GetMode>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <USB_SetCurrentMode+0x84>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b31      	cmp	r3, #49	; 0x31
 80050c0:	d9f0      	bls.n	80050a4 <USB_SetCurrentMode+0x60>
 80050c2:	e001      	b.n	80050c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e005      	b.n	80050d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b32      	cmp	r3, #50	; 0x32
 80050cc:	d101      	bne.n	80050d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e009      	b.n	8005110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3340      	adds	r3, #64	; 0x40
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0e      	cmp	r3, #14
 8005114:	d9f2      	bls.n	80050fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11c      	bne.n	8005156 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e005      	b.n	8005162 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005168:	461a      	mov	r2, r3
 800516a:	2300      	movs	r3, #0
 800516c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800516e:	2103      	movs	r1, #3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f959 	bl	8005428 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005176:	2110      	movs	r1, #16
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f8f1 	bl	8005360 <USB_FlushTxFifo>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f91d 	bl	80053c8 <USB_FlushRxFifo>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	e043      	b.n	800524a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d8:	d118      	bne.n	800520c <USB_DevInit+0x130>
    {
      if (i == 0U)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	461a      	mov	r2, r3
 80051ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e013      	b.n	800521e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	461a      	mov	r2, r3
 8005204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e008      	b.n	800521e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	461a      	mov	r2, r3
 800521a:	2300      	movs	r3, #0
 800521c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	461a      	mov	r2, r3
 800523e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3301      	adds	r3, #1
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	429a      	cmp	r2, r3
 8005250:	d3b7      	bcc.n	80051c2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e043      	b.n	80052e0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526e:	d118      	bne.n	80052a2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	461a      	mov	r2, r3
 8005284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e013      	b.n	80052b4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	461a      	mov	r2, r3
 800529a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e008      	b.n	80052b4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	461a      	mov	r2, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	3301      	adds	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d3b7      	bcc.n	8005258 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005308:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f043 0210 	orr.w	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <USB_DevInit+0x280>)
 800531c:	4313      	orrs	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f043 0208 	orr.w	r2, r3, #8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005342:	f043 0304 	orr.w	r3, r3, #4
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005356:	b004      	add	sp, #16
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	803c3800 	.word	0x803c3800

08005360 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <USB_FlushTxFifo+0x64>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e01b      	b.n	80053b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	daf2      	bge.n	800536e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	019b      	lsls	r3, r3, #6
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <USB_FlushTxFifo+0x64>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e006      	b.n	80053b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d0f0      	beq.n	8005398 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	00030d40 	.word	0x00030d40

080053c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4a11      	ldr	r2, [pc, #68]	; (8005424 <USB_FlushRxFifo+0x5c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e018      	b.n	8005418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	daf2      	bge.n	80053d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2210      	movs	r2, #16
 80053f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a08      	ldr	r2, [pc, #32]	; (8005424 <USB_FlushRxFifo+0x5c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e006      	b.n	8005418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d0f0      	beq.n	80053f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	00030d40 	.word	0x00030d40

08005428 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0306 	and.w	r3, r3, #6
 8005472:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d002      	beq.n	8005480 <USB_GetDevSpeed+0x26>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b06      	cmp	r3, #6
 800547e:	d102      	bne.n	8005486 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005480:	2302      	movs	r3, #2
 8005482:	75fb      	strb	r3, [r7, #23]
 8005484:	e001      	b.n	800548a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005486:	230f      	movs	r3, #15
 8005488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d13a      	bne.n	800552a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d155      	bne.n	8005598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005510:	4313      	orrs	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e036      	b.n	8005598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005548:	4313      	orrs	r3, r2
 800554a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11a      	bne.n	8005598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	791b      	ldrb	r3, [r3, #4]
 800557c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800557e:	430b      	orrs	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d161      	bne.n	8005688 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055da:	d11f      	bne.n	800561c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800561a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563c:	4013      	ands	r3, r2
 800563e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	b29b      	uxth	r3, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005660:	4013      	ands	r3, r2
 8005662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	0159      	lsls	r1, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	440b      	add	r3, r1
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	4619      	mov	r1, r3
 8005680:	4b35      	ldr	r3, [pc, #212]	; (8005758 <USB_DeactivateEndpoint+0x1b0>)
 8005682:	4013      	ands	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
 8005686:	e060      	b.n	800574a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569e:	d11f      	bne.n	80056e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	43db      	mvns	r3, r3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005700:	4013      	ands	r3, r2
 8005702:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	43db      	mvns	r3, r3
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005724:	4013      	ands	r3, r2
 8005726:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	0159      	lsls	r1, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	440b      	add	r3, r1
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	4619      	mov	r1, r3
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <USB_DeactivateEndpoint+0x1b4>)
 8005746:	4013      	ands	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	ec337800 	.word	0xec337800
 800575c:	eff37800 	.word	0xeff37800

08005760 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 8128 	bne.w	80059ce <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d132      	bne.n	80057ec <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	0cdb      	lsrs	r3, r3, #19
 80057e6:	04db      	lsls	r3, r3, #19
 80057e8:	6113      	str	r3, [r2, #16]
 80057ea:	e092      	b.n	8005912 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	0cdb      	lsrs	r3, r3, #19
 8005808:	04db      	lsls	r3, r3, #19
 800580a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800582a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d11a      	bne.n	800586c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	d903      	bls.n	800584a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005868:	6113      	str	r3, [r2, #16]
 800586a:	e01b      	b.n	80058a4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6919      	ldr	r1, [r3, #16]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	440b      	add	r3, r1
 8005884:	1e59      	subs	r1, r3, #1
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	fbb1 f3f3 	udiv	r3, r1, r3
 800588e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005890:	4b8d      	ldr	r3, [pc, #564]	; (8005ac8 <USB_EPStartXfer+0x368>)
 8005892:	400b      	ands	r3, r1
 8005894:	6939      	ldr	r1, [r7, #16]
 8005896:	0148      	lsls	r0, r1, #5
 8005898:	6979      	ldr	r1, [r7, #20]
 800589a:	4401      	add	r1, r0
 800589c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ba:	6939      	ldr	r1, [r7, #16]
 80058bc:	0148      	lsls	r0, r1, #5
 80058be:	6979      	ldr	r1, [r7, #20]
 80058c0:	4401      	add	r1, r0
 80058c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058c6:	4313      	orrs	r3, r2
 80058c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d11f      	bne.n	8005912 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005910:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005930:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	791b      	ldrb	r3, [r3, #4]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d015      	beq.n	8005966 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8139 	beq.w	8005bb6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005960:	4313      	orrs	r3, r2
 8005962:	634b      	str	r3, [r1, #52]	; 0x34
 8005964:	e127      	b.n	8005bb6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d110      	bne.n	8005998 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e00f      	b.n	80059b8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f9a6 	bl	8005d18 <USB_WritePacket>
 80059cc:	e0f3      	b.n	8005bb6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e8:	0cdb      	lsrs	r3, r3, #19
 80059ea:	04db      	lsls	r3, r3, #19
 80059ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a10:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d12f      	bne.n	8005a78 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	0148      	lsls	r0, r1, #5
 8005a4a:	6979      	ldr	r1, [r7, #20]
 8005a4c:	4401      	add	r1, r0
 8005a4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a74:	6113      	str	r3, [r2, #16]
 8005a76:	e061      	b.n	8005b3c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d125      	bne.n	8005acc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a96:	6939      	ldr	r1, [r7, #16]
 8005a98:	0148      	lsls	r0, r1, #5
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	4401      	add	r1, r0
 8005a9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac4:	6113      	str	r3, [r2, #16]
 8005ac6:	e039      	b.n	8005b3c <USB_EPStartXfer+0x3dc>
 8005ac8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	89fa      	ldrh	r2, [r7, #14]
 8005ae8:	fb03 f202 	mul.w	r2, r3, r2
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	89fb      	ldrh	r3, [r7, #14]
 8005b00:	04d9      	lsls	r1, r3, #19
 8005b02:	4b2f      	ldr	r3, [pc, #188]	; (8005bc0 <USB_EPStartXfer+0x460>)
 8005b04:	400b      	ands	r3, r1
 8005b06:	6939      	ldr	r1, [r7, #16]
 8005b08:	0148      	lsls	r0, r1, #5
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	4401      	add	r1, r0
 8005b0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b12:	4313      	orrs	r3, r2
 8005b14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2c:	6939      	ldr	r1, [r7, #16]
 8005b2e:	0148      	lsls	r0, r1, #5
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	4401      	add	r1, r0
 8005b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	791b      	ldrb	r3, [r3, #4]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d128      	bne.n	8005b96 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d110      	bne.n	8005b76 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e00f      	b.n	8005b96 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	1ff80000 	.word	0x1ff80000

08005bc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d14a      	bne.n	8005c78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfa:	f040 8086 	bne.w	8005d0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d902      	bls.n	8005c5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
          break;
 8005c5a:	e056      	b.n	8005d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c74:	d0e7      	beq.n	8005c46 <USB_EPStopXfer+0x82>
 8005c76:	e048      	b.n	8005d0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c90:	d13b      	bne.n	8005d0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d902      	bls.n	8005cf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
          break;
 8005cee:	e00c      	b.n	8005d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d08:	d0e7      	beq.n	8005cda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b089      	sub	sp, #36	; 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	460b      	mov	r3, r1
 8005d28:	71fb      	strb	r3, [r7, #7]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005d36:	88bb      	ldrh	r3, [r7, #4]
 8005d38:	3303      	adds	r3, #3
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e018      	b.n	8005d76 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	031a      	lsls	r2, r3, #12
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d50:	461a      	mov	r2, r3
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3301      	adds	r3, #1
 8005d62:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d3e2      	bcc.n	8005d44 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3724      	adds	r7, #36	; 0x24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b08b      	sub	sp, #44	; 0x2c
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	089b      	lsrs	r3, r3, #2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005db2:	2300      	movs	r3, #0
 8005db4:	623b      	str	r3, [r7, #32]
 8005db6:	e014      	b.n	8005de2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	3301      	adds	r3, #1
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	3301      	adds	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	3301      	adds	r3, #1
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	6a3a      	ldr	r2, [r7, #32]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3e6      	bcc.n	8005db8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dea:	8bfb      	ldrh	r3, [r7, #30]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01e      	beq.n	8005e2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f107 0310 	add.w	r3, r7, #16
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	701a      	strb	r2, [r3, #0]
      i++;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	3301      	adds	r3, #1
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e22:	8bfb      	ldrh	r3, [r7, #30]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e28:	8bfb      	ldrh	r3, [r7, #30]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1ea      	bne.n	8005e04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	372c      	adds	r7, #44	; 0x2c
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d12c      	bne.n	8005eb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	db12      	blt.n	8005e90 <USB_EPSetStall+0x54>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00f      	beq.n	8005e90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e02b      	b.n	8005f0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	db12      	blt.n	8005eea <USB_EPSetStall+0xae>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00f      	beq.n	8005eea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ee8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d128      	bne.n	8005f86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	791b      	ldrb	r3, [r3, #4]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d003      	beq.n	8005f64 <USB_EPClearStall+0x4c>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	791b      	ldrb	r3, [r3, #4]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d138      	bne.n	8005fd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	e027      	b.n	8005fd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fa4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d003      	beq.n	8005fb6 <USB_EPClearStall+0x9e>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d10f      	bne.n	8005fd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006002:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006006:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800601e:	4313      	orrs	r3, r2
 8006020:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605e:	f023 0302 	bic.w	r3, r3, #2
 8006062:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800608c:	f023 0303 	bic.w	r3, r3, #3
 8006090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a0:	f043 0302 	orr.w	r3, r3, #2
 80060a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0c1b      	lsrs	r3, r3, #16
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	4013      	ands	r3, r2
 8006130:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	b29b      	uxth	r3, r3
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006170:	68bb      	ldr	r3, [r7, #8]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800617e:	b480      	push	{r7}
 8006180:	b087      	sub	sp, #28
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	fa22 f303 	lsr.w	r3, r2, r3
 80061ae:	01db      	lsls	r3, r3, #7
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4013      	ands	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061cc:	68bb      	ldr	r3, [r7, #8]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0301 	and.w	r3, r3, #1
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006210:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006214:	f023 0307 	bic.w	r3, r3, #7
 8006218:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	333c      	adds	r3, #60	; 0x3c
 800624e:	3304      	adds	r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <USB_EP0_OutStart+0x8c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d90a      	bls.n	8006272 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800626c:	d101      	bne.n	8006272 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e024      	b.n	80062bc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	f043 0318 	orr.w	r3, r3, #24
 80062a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062b8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	4f54300a 	.word	0x4f54300a

080062cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a13      	ldr	r2, [pc, #76]	; (8006330 <USB_CoreReset+0x64>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e01b      	b.n	8006322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	daf2      	bge.n	80062d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4a09      	ldr	r2, [pc, #36]	; (8006330 <USB_CoreReset+0x64>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d901      	bls.n	8006314 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e006      	b.n	8006322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d0f0      	beq.n	8006302 <USB_CoreReset+0x36>

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	00030d40 	.word	0x00030d40

08006334 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006340:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006344:	f002 fdc0 	bl	8008ec8 <USBD_static_malloc>
 8006348:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32b0      	adds	r2, #176	; 0xb0
 800635a:	2100      	movs	r1, #0
 800635c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006360:	2302      	movs	r3, #2
 8006362:	e0d4      	b.n	800650e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006364:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006368:	2100      	movs	r1, #0
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f002 fdca 	bl	8008f04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32b0      	adds	r2, #176	; 0xb0
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	32b0      	adds	r2, #176	; 0xb0
 800638a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7c1b      	ldrb	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d138      	bne.n	800640e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800639c:	4b5e      	ldr	r3, [pc, #376]	; (8006518 <USBD_CDC_Init+0x1e4>)
 800639e:	7819      	ldrb	r1, [r3, #0]
 80063a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a4:	2202      	movs	r2, #2
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f002 fb7a 	bl	8008aa0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063ac:	4b5a      	ldr	r3, [pc, #360]	; (8006518 <USBD_CDC_Init+0x1e4>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2201      	movs	r2, #1
 80063c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063c6:	4b55      	ldr	r3, [pc, #340]	; (800651c <USBD_CDC_Init+0x1e8>)
 80063c8:	7819      	ldrb	r1, [r3, #0]
 80063ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ce:	2202      	movs	r2, #2
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f002 fb65 	bl	8008aa0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063d6:	4b51      	ldr	r3, [pc, #324]	; (800651c <USBD_CDC_Init+0x1e8>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 020f 	and.w	r2, r3, #15
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063ee:	2201      	movs	r2, #1
 80063f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063f2:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <USBD_CDC_Init+0x1ec>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	3326      	adds	r3, #38	; 0x26
 8006408:	2210      	movs	r2, #16
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e035      	b.n	800647a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800640e:	4b42      	ldr	r3, [pc, #264]	; (8006518 <USBD_CDC_Init+0x1e4>)
 8006410:	7819      	ldrb	r1, [r3, #0]
 8006412:	2340      	movs	r3, #64	; 0x40
 8006414:	2202      	movs	r2, #2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f002 fb42 	bl	8008aa0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800641c:	4b3e      	ldr	r3, [pc, #248]	; (8006518 <USBD_CDC_Init+0x1e4>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	3324      	adds	r3, #36	; 0x24
 8006432:	2201      	movs	r2, #1
 8006434:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <USBD_CDC_Init+0x1e8>)
 8006438:	7819      	ldrb	r1, [r3, #0]
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	2202      	movs	r2, #2
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f002 fb2e 	bl	8008aa0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006444:	4b35      	ldr	r3, [pc, #212]	; (800651c <USBD_CDC_Init+0x1e8>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800645c:	2201      	movs	r2, #1
 800645e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006460:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <USBD_CDC_Init+0x1ec>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	3326      	adds	r3, #38	; 0x26
 8006476:	2210      	movs	r2, #16
 8006478:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800647a:	4b29      	ldr	r3, [pc, #164]	; (8006520 <USBD_CDC_Init+0x1ec>)
 800647c:	7819      	ldrb	r1, [r3, #0]
 800647e:	2308      	movs	r3, #8
 8006480:	2203      	movs	r2, #3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f002 fb0c 	bl	8008aa0 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006488:	4b25      	ldr	r3, [pc, #148]	; (8006520 <USBD_CDC_Init+0x1ec>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	2201      	movs	r2, #1
 80064a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	33b0      	adds	r3, #176	; 0xb0
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064d8:	2302      	movs	r3, #2
 80064da:	e018      	b.n	800650e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7c1b      	ldrb	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064e4:	4b0d      	ldr	r3, [pc, #52]	; (800651c <USBD_CDC_Init+0x1e8>)
 80064e6:	7819      	ldrb	r1, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fc4e 	bl	8008d94 <USBD_LL_PrepareReceive>
 80064f8:	e008      	b.n	800650c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <USBD_CDC_Init+0x1e8>)
 80064fc:	7819      	ldrb	r1, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f002 fc44 	bl	8008d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000093 	.word	0x20000093
 800651c:	20000094 	.word	0x20000094
 8006520:	20000095 	.word	0x20000095

08006524 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006530:	4b3a      	ldr	r3, [pc, #232]	; (800661c <USBD_CDC_DeInit+0xf8>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f002 faf0 	bl	8008b1c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800653c:	4b37      	ldr	r3, [pc, #220]	; (800661c <USBD_CDC_DeInit+0xf8>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3324      	adds	r3, #36	; 0x24
 8006552:	2200      	movs	r2, #0
 8006554:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006556:	4b32      	ldr	r3, [pc, #200]	; (8006620 <USBD_CDC_DeInit+0xfc>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f002 fadd 	bl	8008b1c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006562:	4b2f      	ldr	r3, [pc, #188]	; (8006620 <USBD_CDC_DeInit+0xfc>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800657a:	2200      	movs	r2, #0
 800657c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800657e:	4b29      	ldr	r3, [pc, #164]	; (8006624 <USBD_CDC_DeInit+0x100>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f002 fac9 	bl	8008b1c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <USBD_CDC_DeInit+0x100>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3324      	adds	r3, #36	; 0x24
 80065a0:	2200      	movs	r2, #0
 80065a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80065a4:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <USBD_CDC_DeInit+0x100>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3326      	adds	r3, #38	; 0x26
 80065ba:	2200      	movs	r2, #0
 80065bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	32b0      	adds	r2, #176	; 0xb0
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01f      	beq.n	8006610 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	33b0      	adds	r3, #176	; 0xb0
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 fc76 	bl	8008ee4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	32b0      	adds	r2, #176	; 0xb0
 8006602:	2100      	movs	r1, #0
 8006604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000093 	.word	0x20000093
 8006620:	20000094 	.word	0x20000094
 8006624:	20000095 	.word	0x20000095

08006628 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	32b0      	adds	r2, #176	; 0xb0
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006654:	2303      	movs	r3, #3
 8006656:	e0bf      	b.n	80067d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006660:	2b00      	cmp	r3, #0
 8006662:	d050      	beq.n	8006706 <USBD_CDC_Setup+0xde>
 8006664:	2b20      	cmp	r3, #32
 8006666:	f040 80af 	bne.w	80067c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d03a      	beq.n	80066e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b25b      	sxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	da1b      	bge.n	80066b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	33b0      	adds	r3, #176	; 0xb0
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006692:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	88d2      	ldrh	r2, [r2, #6]
 8006698:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	88db      	ldrh	r3, [r3, #6]
 800669e:	2b07      	cmp	r3, #7
 80066a0:	bf28      	it	cs
 80066a2:	2307      	movcs	r3, #7
 80066a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	89fa      	ldrh	r2, [r7, #14]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 fd73 	bl	8008198 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066b2:	e090      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	785a      	ldrb	r2, [r3, #1]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	88db      	ldrh	r3, [r3, #6]
 80066c2:	2b3f      	cmp	r3, #63	; 0x3f
 80066c4:	d803      	bhi.n	80066ce <USBD_CDC_Setup+0xa6>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	88db      	ldrh	r3, [r3, #6]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	e000      	b.n	80066d0 <USBD_CDC_Setup+0xa8>
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066d6:	6939      	ldr	r1, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80066de:	461a      	mov	r2, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fd85 	bl	80081f0 <USBD_CtlPrepareRx>
      break;
 80066e6:	e076      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	33b0      	adds	r3, #176	; 0xb0
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	7850      	ldrb	r0, [r2, #1]
 80066fe:	2200      	movs	r2, #0
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	4798      	blx	r3
      break;
 8006704:	e067      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	2b0b      	cmp	r3, #11
 800670c:	d851      	bhi.n	80067b2 <USBD_CDC_Setup+0x18a>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <USBD_CDC_Setup+0xec>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006745 	.word	0x08006745
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067b3 	.word	0x080067b3
 8006720:	080067b3 	.word	0x080067b3
 8006724:	080067b3 	.word	0x080067b3
 8006728:	080067b3 	.word	0x080067b3
 800672c:	080067b3 	.word	0x080067b3
 8006730:	080067b3 	.word	0x080067b3
 8006734:	080067b3 	.word	0x080067b3
 8006738:	080067b3 	.word	0x080067b3
 800673c:	0800676f 	.word	0x0800676f
 8006740:	08006799 	.word	0x08006799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d107      	bne.n	8006760 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006750:	f107 030a 	add.w	r3, r7, #10
 8006754:	2202      	movs	r2, #2
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fd1d 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675e:	e032      	b.n	80067c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fca7 	bl	80080b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006768:	2303      	movs	r3, #3
 800676a:	75fb      	strb	r3, [r7, #23]
          break;
 800676c:	e02b      	b.n	80067c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d107      	bne.n	800678a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800677a:	f107 030d 	add.w	r3, r7, #13
 800677e:	2201      	movs	r2, #1
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fd08 	bl	8008198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006788:	e01d      	b.n	80067c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fc92 	bl	80080b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006792:	2303      	movs	r3, #3
 8006794:	75fb      	strb	r3, [r7, #23]
          break;
 8006796:	e016      	b.n	80067c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d00f      	beq.n	80067c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fc85 	bl	80080b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ac:	2303      	movs	r3, #3
 80067ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067b0:	e008      	b.n	80067c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fc7e 	bl	80080b6 <USBD_CtlError>
          ret = USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	75fb      	strb	r3, [r7, #23]
          break;
 80067be:	e002      	b.n	80067c6 <USBD_CDC_Setup+0x19e>
          break;
 80067c0:	bf00      	nop
 80067c2:	e008      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>
          break;
 80067c4:	bf00      	nop
      }
      break;
 80067c6:	e006      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fc73 	bl	80080b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80067d0:	2303      	movs	r3, #3
 80067d2:	75fb      	strb	r3, [r7, #23]
      break;
 80067d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80067f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32b0      	adds	r2, #176	; 0xb0
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006806:	2303      	movs	r3, #3
 8006808:	e065      	b.n	80068d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	32b0      	adds	r2, #176	; 0xb0
 8006814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006818:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 020f 	and.w	r2, r3, #15
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	3318      	adds	r3, #24
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d02f      	beq.n	8006894 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	f003 020f 	and.w	r2, r3, #15
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	3318      	adds	r3, #24
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 010f 	and.w	r1, r3, #15
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	460b      	mov	r3, r1
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	440b      	add	r3, r1
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4403      	add	r3, r0
 800685c:	3344      	adds	r3, #68	; 0x44
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	fbb2 f1f3 	udiv	r1, r2, r3
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800686a:	2b00      	cmp	r3, #0
 800686c:	d112      	bne.n	8006894 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3318      	adds	r3, #24
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006886:	78f9      	ldrb	r1, [r7, #3]
 8006888:	2300      	movs	r3, #0
 800688a:	2200      	movs	r2, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f002 fa49 	bl	8008d24 <USBD_LL_Transmit>
 8006892:	e01f      	b.n	80068d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	33b0      	adds	r3, #176	; 0xb0
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	33b0      	adds	r3, #176	; 0xb0
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	32b0      	adds	r2, #176	; 0xb0
 80068f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	32b0      	adds	r2, #176	; 0xb0
 8006904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800690c:	2303      	movs	r3, #3
 800690e:	e01a      	b.n	8006946 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f002 fa75 	bl	8008e04 <USBD_LL_GetRxDataSize>
 800691a:	4602      	mov	r2, r0
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	33b0      	adds	r3, #176	; 0xb0
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006940:	4611      	mov	r1, r2
 8006942:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	32b0      	adds	r2, #176	; 0xb0
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e025      	b.n	80069bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	33b0      	adds	r3, #176	; 0xb0
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01a      	beq.n	80069ba <USBD_CDC_EP0_RxReady+0x6c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800698a:	2bff      	cmp	r3, #255	; 0xff
 800698c:	d015      	beq.n	80069ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	33b0      	adds	r3, #176	; 0xb0
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80069a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069ae:	b292      	uxth	r2, r2
 80069b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069cc:	2182      	movs	r1, #130	; 0x82
 80069ce:	4818      	ldr	r0, [pc, #96]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d0:	f000 fd0f 	bl	80073f2 <USBD_GetEpDesc>
 80069d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069d6:	2101      	movs	r1, #1
 80069d8:	4815      	ldr	r0, [pc, #84]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069da:	f000 fd0a 	bl	80073f2 <USBD_GetEpDesc>
 80069de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e0:	2181      	movs	r1, #129	; 0x81
 80069e2:	4813      	ldr	r0, [pc, #76]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069e4:	f000 fd05 	bl	80073f2 <USBD_GetEpDesc>
 80069e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2210      	movs	r2, #16
 80069f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a04:	711a      	strb	r2, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d006      	beq.n	8006a1e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a18:	711a      	strb	r2, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2243      	movs	r2, #67	; 0x43
 8006a22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000050 	.word	0x20000050

08006a34 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a3c:	2182      	movs	r1, #130	; 0x82
 8006a3e:	4818      	ldr	r0, [pc, #96]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a40:	f000 fcd7 	bl	80073f2 <USBD_GetEpDesc>
 8006a44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a46:	2101      	movs	r1, #1
 8006a48:	4815      	ldr	r0, [pc, #84]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a4a:	f000 fcd2 	bl	80073f2 <USBD_GetEpDesc>
 8006a4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a50:	2181      	movs	r1, #129	; 0x81
 8006a52:	4813      	ldr	r0, [pc, #76]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a54:	f000 fccd 	bl	80073f2 <USBD_GetEpDesc>
 8006a58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2210      	movs	r2, #16
 8006a64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	711a      	strb	r2, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f042 0202 	orr.w	r2, r2, #2
 8006a78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	711a      	strb	r2, [r3, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f042 0202 	orr.w	r2, r2, #2
 8006a8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2243      	movs	r2, #67	; 0x43
 8006a92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000050 	.word	0x20000050

08006aa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006aac:	2182      	movs	r1, #130	; 0x82
 8006aae:	4818      	ldr	r0, [pc, #96]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab0:	f000 fc9f 	bl	80073f2 <USBD_GetEpDesc>
 8006ab4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4815      	ldr	r0, [pc, #84]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006aba:	f000 fc9a 	bl	80073f2 <USBD_GetEpDesc>
 8006abe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ac0:	2181      	movs	r1, #129	; 0x81
 8006ac2:	4813      	ldr	r0, [pc, #76]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ac4:	f000 fc95 	bl	80073f2 <USBD_GetEpDesc>
 8006ac8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d006      	beq.n	8006afe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af8:	711a      	strb	r2, [r3, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2243      	movs	r2, #67	; 0x43
 8006b02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000050 	.word	0x20000050

08006b14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	220a      	movs	r2, #10
 8006b20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b22:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	2000000c 	.word	0x2000000c

08006b34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e009      	b.n	8006b5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	33b0      	adds	r3, #176	; 0xb0
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	32b0      	adds	r2, #176	; 0xb0
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e008      	b.n	8006ba0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	32b0      	adds	r2, #176	; 0xb0
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e004      	b.n	8006bda <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32b0      	adds	r2, #176	; 0xb0
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32b0      	adds	r2, #176	; 0xb0
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e018      	b.n	8006c48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <USBD_CDC_ReceivePacket+0x68>)
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f002 f8b1 	bl	8008d94 <USBD_LL_PrepareReceive>
 8006c32:	e008      	b.n	8006c46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <USBD_CDC_ReceivePacket+0x68>)
 8006c36:	7819      	ldrb	r1, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 f8a7 	bl	8008d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000094 	.word	0x20000094

08006c54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e01f      	b.n	8006cac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	79fa      	ldrb	r2, [r7, #7]
 8006c9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f001 fe7f 	bl	80089a4 <USBD_LL_Init>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e025      	b.n	8006d18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	; 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00f      	beq.n	8006d08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32ae      	adds	r2, #174	; 0xae
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f107 020e 	add.w	r2, r7, #14
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fe87 	bl	8008a3c <USBD_LL_Start>
 8006d2e:	4603      	mov	r3, r0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	4611      	mov	r1, r2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006dac:	2303      	movs	r3, #3
 8006dae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f938 	bl	8008042 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d01a      	beq.n	8006e2c <USBD_LL_SetupStage+0x72>
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d822      	bhi.n	8006e40 <USBD_LL_SetupStage+0x86>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USBD_LL_SetupStage+0x4a>
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d00a      	beq.n	8006e18 <USBD_LL_SetupStage+0x5e>
 8006e02:	e01d      	b.n	8006e40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb65 	bl	80074dc <USBD_StdDevReq>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]
      break;
 8006e16:	e020      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fbcd 	bl	80075c0 <USBD_StdItfReq>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	e016      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc2f 	bl	8007698 <USBD_StdEPReq>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3e:	e00c      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fe9a 	bl	8008b88 <USBD_LL_StallEP>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	bf00      	nop
  }

  return ret;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d16e      	bne.n	8006f5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	f040 8098 	bne.w	8006fc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d913      	bls.n	8006ec4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bf28      	it	cs
 8006eb6:	4613      	movcs	r3, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 f9b4 	bl	800822a <USBD_CtlContinueRx>
 8006ec2:	e07d      	b.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d014      	beq.n	8006efc <USBD_LL_DataOutStage+0x98>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d81d      	bhi.n	8006f12 <USBD_LL_DataOutStage+0xae>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <USBD_LL_DataOutStage+0x7c>
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d003      	beq.n	8006ee6 <USBD_LL_DataOutStage+0x82>
 8006ede:	e018      	b.n	8006f12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ee4:	e018      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fa64 	bl	80073be <USBD_CoreFindIF>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75bb      	strb	r3, [r7, #22]
            break;
 8006efa:	e00d      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fa66 	bl	80073d8 <USBD_CoreFindEP>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006f10:	e002      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75bb      	strb	r3, [r7, #22]
            break;
 8006f16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f18:	7dbb      	ldrb	r3, [r7, #22]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d119      	bne.n	8006f52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d113      	bne.n	8006f52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f2a:	7dba      	ldrb	r2, [r7, #22]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	32ae      	adds	r2, #174	; 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f3a:	7dba      	ldrb	r2, [r7, #22]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f42:	7dba      	ldrb	r2, [r7, #22]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 f97a 	bl	800824c <USBD_CtlSendStatus>
 8006f58:	e032      	b.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa37 	bl	80073d8 <USBD_CoreFindEP>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	2bff      	cmp	r3, #255	; 0xff
 8006f72:	d025      	beq.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
 8006f74:	7dbb      	ldrb	r3, [r7, #22]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d122      	bne.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d117      	bne.n	8006fb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f86:	7dba      	ldrb	r2, [r7, #22]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	32ae      	adds	r2, #174	; 0xae
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f96:	7dba      	ldrb	r2, [r7, #22]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f9e:	7dba      	ldrb	r2, [r7, #22]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	32ae      	adds	r2, #174	; 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	7afa      	ldrb	r2, [r7, #11]
 8006fac:	4611      	mov	r1, r2
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	4798      	blx	r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	e000      	b.n	8006fc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d16f      	bne.n	80070be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d15a      	bne.n	80070a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d914      	bls.n	8007024 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	461a      	mov	r2, r3
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 f8dc 	bl	80081ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007016:	2300      	movs	r3, #0
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 feb9 	bl	8008d94 <USBD_LL_PrepareReceive>
 8007022:	e03f      	b.n	80070a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	d11c      	bne.n	800706a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007038:	429a      	cmp	r2, r3
 800703a:	d316      	bcc.n	800706a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d20f      	bcs.n	800706a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 f8bd 	bl	80081ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f001 fe96 	bl	8008d94 <USBD_LL_PrepareReceive>
 8007068:	e01c      	b.n	80070a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d10f      	bne.n	8007096 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 fd75 	bl	8008b88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 f8e7 	bl	8008272 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d03a      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fe42 	bl	8006d38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070bc:	e032      	b.n	8007124 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f985 	bl	80073d8 <USBD_CoreFindEP>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	2bff      	cmp	r3, #255	; 0xff
 80070d6:	d025      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d122      	bne.n	8007124 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d11c      	bne.n	8007124 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070ea:	7dfa      	ldrb	r2, [r7, #23]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	32ae      	adds	r2, #174	; 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070fa:	7dfa      	ldrb	r2, [r7, #23]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007102:	7dfa      	ldrb	r2, [r7, #23]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	32ae      	adds	r2, #174	; 0xae
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	7afa      	ldrb	r2, [r7, #11]
 8007110:	4611      	mov	r1, r2
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800711a:	7dbb      	ldrb	r3, [r7, #22]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007120:	7dbb      	ldrb	r3, [r7, #22]
 8007122:	e000      	b.n	8007126 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6852      	ldr	r2, [r2, #4]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	4611      	mov	r1, r2
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	2200      	movs	r2, #0
 8007198:	2100      	movs	r1, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fc80 	bl	8008aa0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2240      	movs	r2, #64	; 0x40
 80071ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fc72 	bl	8008aa0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	621a      	str	r2, [r3, #32]

  return ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b04      	cmp	r3, #4
 8007204:	d006      	beq.n	8007214 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2da      	uxtb	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2204      	movs	r2, #4
 8007218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b04      	cmp	r3, #4
 800723c:	d106      	bne.n	800724c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d110      	bne.n	8007290 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	32ae      	adds	r2, #174	; 0xae
 80072b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e01c      	b.n	80072f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d115      	bne.n	80072f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	; 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32ae      	adds	r2, #174	; 0xae
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	4611      	mov	r1, r2
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	32ae      	adds	r2, #174	; 0xae
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e01c      	b.n	800735a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b03      	cmp	r3, #3
 800732a:	d115      	bne.n	8007358 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32ae      	adds	r2, #174	; 0xae
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32ae      	adds	r2, #174	; 0xae
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	4611      	mov	r1, r2
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6852      	ldr	r2, [r2, #4]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	4611      	mov	r1, r2
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b086      	sub	sp, #24
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	429a      	cmp	r2, r3
 8007418:	d920      	bls.n	800745c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007422:	e013      	b.n	800744c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007424:	f107 030a 	add.w	r3, r7, #10
 8007428:	4619      	mov	r1, r3
 800742a:	6978      	ldr	r0, [r7, #20]
 800742c:	f000 f81b 	bl	8007466 <USBD_GetNextDesc>
 8007430:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b05      	cmp	r3, #5
 8007438:	d108      	bne.n	800744c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	789b      	ldrb	r3, [r3, #2]
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	429a      	cmp	r2, r3
 8007446:	d008      	beq.n	800745a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	885b      	ldrh	r3, [r3, #2]
 8007450:	b29a      	uxth	r2, r3
 8007452:	897b      	ldrh	r3, [r7, #10]
 8007454:	429a      	cmp	r2, r3
 8007456:	d8e5      	bhi.n	8007424 <USBD_GetEpDesc+0x32>
 8007458:	e000      	b.n	800745c <USBD_GetEpDesc+0x6a>
          break;
 800745a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800745c:	693b      	ldr	r3, [r7, #16]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	881a      	ldrh	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	4413      	add	r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4413      	add	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	3301      	adds	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074be:	8a3b      	ldrh	r3, [r7, #16]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	b21a      	sxth	r2, r3
 80074c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b21b      	sxth	r3, r3
 80074cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074ce:	89fb      	ldrh	r3, [r7, #14]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d005      	beq.n	8007502 <USBD_StdDevReq+0x26>
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d857      	bhi.n	80075aa <USBD_StdDevReq+0xce>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00f      	beq.n	800751e <USBD_StdDevReq+0x42>
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d153      	bne.n	80075aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	32ae      	adds	r2, #174	; 0xae
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
      break;
 800751c:	e04a      	b.n	80075b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2b09      	cmp	r3, #9
 8007524:	d83b      	bhi.n	800759e <USBD_StdDevReq+0xc2>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <USBD_StdDevReq+0x50>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007581 	.word	0x08007581
 8007530:	08007595 	.word	0x08007595
 8007534:	0800759f 	.word	0x0800759f
 8007538:	0800758b 	.word	0x0800758b
 800753c:	0800759f 	.word	0x0800759f
 8007540:	0800755f 	.word	0x0800755f
 8007544:	08007555 	.word	0x08007555
 8007548:	0800759f 	.word	0x0800759f
 800754c:	08007577 	.word	0x08007577
 8007550:	08007569 	.word	0x08007569
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa3c 	bl	80079d4 <USBD_GetDescriptor>
          break;
 800755c:	e024      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fbcb 	bl	8007cfc <USBD_SetAddress>
          break;
 8007566:	e01f      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc0a 	bl	8007d84 <USBD_SetConfig>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
          break;
 8007574:	e018      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fcad 	bl	8007ed8 <USBD_GetConfig>
          break;
 800757e:	e013      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fcde 	bl	8007f44 <USBD_GetStatus>
          break;
 8007588:	e00e      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fd0d 	bl	8007fac <USBD_SetFeature>
          break;
 8007592:	e009      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fd31 	bl	8007ffe <USBD_ClrFeature>
          break;
 800759c:	e004      	b.n	80075a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fd88 	bl	80080b6 <USBD_CtlError>
          break;
 80075a6:	bf00      	nop
      }
      break;
 80075a8:	e004      	b.n	80075b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fd82 	bl	80080b6 <USBD_CtlError>
      break;
 80075b2:	bf00      	nop
  }

  return ret;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop

080075c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d005      	beq.n	80075e6 <USBD_StdItfReq+0x26>
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d852      	bhi.n	8007684 <USBD_StdItfReq+0xc4>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <USBD_StdItfReq+0x26>
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d14e      	bne.n	8007684 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d840      	bhi.n	8007676 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	889b      	ldrh	r3, [r3, #4]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d836      	bhi.n	800766c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	889b      	ldrh	r3, [r3, #4]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fed9 	bl	80073be <USBD_CoreFindIF>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2bff      	cmp	r3, #255	; 0xff
 8007614:	d01d      	beq.n	8007652 <USBD_StdItfReq+0x92>
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11a      	bne.n	8007652 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800761c:	7bba      	ldrb	r2, [r7, #14]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32ae      	adds	r2, #174	; 0xae
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00f      	beq.n	800764c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800762c:	7bba      	ldrb	r2, [r7, #14]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007634:	7bba      	ldrb	r2, [r7, #14]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32ae      	adds	r2, #174	; 0xae
 800763a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
 8007646:	4603      	mov	r3, r0
 8007648:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800764a:	e004      	b.n	8007656 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800764c:	2303      	movs	r3, #3
 800764e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007650:	e001      	b.n	8007656 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007652:	2303      	movs	r3, #3
 8007654:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	88db      	ldrh	r3, [r3, #6]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d110      	bne.n	8007680 <USBD_StdItfReq+0xc0>
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fdf1 	bl	800824c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800766a:	e009      	b.n	8007680 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fd21 	bl	80080b6 <USBD_CtlError>
          break;
 8007674:	e004      	b.n	8007680 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fd1c 	bl	80080b6 <USBD_CtlError>
          break;
 800767e:	e000      	b.n	8007682 <USBD_StdItfReq+0xc2>
          break;
 8007680:	bf00      	nop
      }
      break;
 8007682:	e004      	b.n	800768e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fd15 	bl	80080b6 <USBD_CtlError>
      break;
 800768c:	bf00      	nop
  }

  return ret;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	889b      	ldrh	r3, [r3, #4]
 80076aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d007      	beq.n	80076c8 <USBD_StdEPReq+0x30>
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	f200 817f 	bhi.w	80079bc <USBD_StdEPReq+0x324>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02a      	beq.n	8007718 <USBD_StdEPReq+0x80>
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	f040 817a 	bne.w	80079bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff fe83 	bl	80073d8 <USBD_CoreFindEP>
 80076d2:	4603      	mov	r3, r0
 80076d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076d6:	7b7b      	ldrb	r3, [r7, #13]
 80076d8:	2bff      	cmp	r3, #255	; 0xff
 80076da:	f000 8174 	beq.w	80079c6 <USBD_StdEPReq+0x32e>
 80076de:	7b7b      	ldrb	r3, [r7, #13]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f040 8170 	bne.w	80079c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076e6:	7b7a      	ldrb	r2, [r7, #13]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076ee:	7b7a      	ldrb	r2, [r7, #13]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8163 	beq.w	80079c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007700:	7b7a      	ldrb	r2, [r7, #13]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	32ae      	adds	r2, #174	; 0xae
 8007706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007716:	e156      	b.n	80079c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d008      	beq.n	8007732 <USBD_StdEPReq+0x9a>
 8007720:	2b03      	cmp	r3, #3
 8007722:	f300 8145 	bgt.w	80079b0 <USBD_StdEPReq+0x318>
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 809b 	beq.w	8007862 <USBD_StdEPReq+0x1ca>
 800772c:	2b01      	cmp	r3, #1
 800772e:	d03c      	beq.n	80077aa <USBD_StdEPReq+0x112>
 8007730:	e13e      	b.n	80079b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d002      	beq.n	8007744 <USBD_StdEPReq+0xac>
 800773e:	2b03      	cmp	r3, #3
 8007740:	d016      	beq.n	8007770 <USBD_StdEPReq+0xd8>
 8007742:	e02c      	b.n	800779e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <USBD_StdEPReq+0xce>
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b80      	cmp	r3, #128	; 0x80
 800774e:	d00a      	beq.n	8007766 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fa17 	bl	8008b88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800775a:	2180      	movs	r1, #128	; 0x80
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fa13 	bl	8008b88 <USBD_LL_StallEP>
 8007762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007764:	e020      	b.n	80077a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fca4 	bl	80080b6 <USBD_CtlError>
              break;
 800776e:	e01b      	b.n	80077a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10e      	bne.n	8007796 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <USBD_StdEPReq+0xfe>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b80      	cmp	r3, #128	; 0x80
 8007782:	d008      	beq.n	8007796 <USBD_StdEPReq+0xfe>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	88db      	ldrh	r3, [r3, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f9f9 	bl	8008b88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fd58 	bl	800824c <USBD_CtlSendStatus>

              break;
 800779c:	e004      	b.n	80077a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fc88 	bl	80080b6 <USBD_CtlError>
              break;
 80077a6:	bf00      	nop
          }
          break;
 80077a8:	e107      	b.n	80079ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d002      	beq.n	80077bc <USBD_StdEPReq+0x124>
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d016      	beq.n	80077e8 <USBD_StdEPReq+0x150>
 80077ba:	e04b      	b.n	8007854 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00d      	beq.n	80077de <USBD_StdEPReq+0x146>
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b80      	cmp	r3, #128	; 0x80
 80077c6:	d00a      	beq.n	80077de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 f9db 	bl	8008b88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077d2:	2180      	movs	r1, #128	; 0x80
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f9d7 	bl	8008b88 <USBD_LL_StallEP>
 80077da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077dc:	e040      	b.n	8007860 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc68 	bl	80080b6 <USBD_CtlError>
              break;
 80077e6:	e03b      	b.n	8007860 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	885b      	ldrh	r3, [r3, #2]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d136      	bne.n	800785e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 f9f8 	bl	8008bf4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fd21 	bl	800824c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fde2 	bl	80073d8 <USBD_CoreFindEP>
 8007814:	4603      	mov	r3, r0
 8007816:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007818:	7b7b      	ldrb	r3, [r7, #13]
 800781a:	2bff      	cmp	r3, #255	; 0xff
 800781c:	d01f      	beq.n	800785e <USBD_StdEPReq+0x1c6>
 800781e:	7b7b      	ldrb	r3, [r7, #13]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d11c      	bne.n	800785e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007824:	7b7a      	ldrb	r2, [r7, #13]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800782c:	7b7a      	ldrb	r2, [r7, #13]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32ae      	adds	r2, #174	; 0xae
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d010      	beq.n	800785e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800783c:	7b7a      	ldrb	r2, [r7, #13]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	32ae      	adds	r2, #174	; 0xae
 8007842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
 800784e:	4603      	mov	r3, r0
 8007850:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007852:	e004      	b.n	800785e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fc2d 	bl	80080b6 <USBD_CtlError>
              break;
 800785c:	e000      	b.n	8007860 <USBD_StdEPReq+0x1c8>
              break;
 800785e:	bf00      	nop
          }
          break;
 8007860:	e0ab      	b.n	80079ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d002      	beq.n	8007874 <USBD_StdEPReq+0x1dc>
 800786e:	2b03      	cmp	r3, #3
 8007870:	d032      	beq.n	80078d8 <USBD_StdEPReq+0x240>
 8007872:	e097      	b.n	80079a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <USBD_StdEPReq+0x1f2>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d004      	beq.n	800788a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc17 	bl	80080b6 <USBD_CtlError>
                break;
 8007888:	e091      	b.n	80079ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	da0b      	bge.n	80078aa <USBD_StdEPReq+0x212>
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	3310      	adds	r3, #16
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	4413      	add	r3, r2
 80078a6:	3304      	adds	r3, #4
 80078a8:	e00b      	b.n	80078c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	3304      	adds	r3, #4
 80078c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2202      	movs	r2, #2
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc61 	bl	8008198 <USBD_CtlSendData>
              break;
 80078d6:	e06a      	b.n	80079ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da11      	bge.n	8007904 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	f003 020f 	and.w	r2, r3, #15
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d117      	bne.n	800792a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbda 	bl	80080b6 <USBD_CtlError>
                  break;
 8007902:	e054      	b.n	80079ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	f003 020f 	and.w	r2, r3, #15
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fbc7 	bl	80080b6 <USBD_CtlError>
                  break;
 8007928:	e041      	b.n	80079ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800792e:	2b00      	cmp	r3, #0
 8007930:	da0b      	bge.n	800794a <USBD_StdEPReq+0x2b2>
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	3310      	adds	r3, #16
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	4413      	add	r3, r2
 8007946:	3304      	adds	r3, #4
 8007948:	e00b      	b.n	8007962 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4413      	add	r3, r2
 8007960:	3304      	adds	r3, #4
 8007962:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <USBD_StdEPReq+0x2d8>
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b80      	cmp	r3, #128	; 0x80
 800796e:	d103      	bne.n	8007978 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e00e      	b.n	8007996 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f96f 	bl	8008c60 <USBD_LL_IsStallEP>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e002      	b.n	8007996 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2202      	movs	r2, #2
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fbfb 	bl	8008198 <USBD_CtlSendData>
              break;
 80079a2:	e004      	b.n	80079ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb85 	bl	80080b6 <USBD_CtlError>
              break;
 80079ac:	bf00      	nop
          }
          break;
 80079ae:	e004      	b.n	80079ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fb7f 	bl	80080b6 <USBD_CtlError>
          break;
 80079b8:	bf00      	nop
      }
      break;
 80079ba:	e005      	b.n	80079c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fb79 	bl	80080b6 <USBD_CtlError>
      break;
 80079c4:	e000      	b.n	80079c8 <USBD_StdEPReq+0x330>
      break;
 80079c6:	bf00      	nop
  }

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	2b0e      	cmp	r3, #14
 80079f6:	f200 8152 	bhi.w	8007c9e <USBD_GetDescriptor+0x2ca>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <USBD_GetDescriptor+0x2c>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a71 	.word	0x08007a71
 8007a04:	08007a89 	.word	0x08007a89
 8007a08:	08007ac9 	.word	0x08007ac9
 8007a0c:	08007c9f 	.word	0x08007c9f
 8007a10:	08007c9f 	.word	0x08007c9f
 8007a14:	08007c3f 	.word	0x08007c3f
 8007a18:	08007c6b 	.word	0x08007c6b
 8007a1c:	08007c9f 	.word	0x08007c9f
 8007a20:	08007c9f 	.word	0x08007c9f
 8007a24:	08007c9f 	.word	0x08007c9f
 8007a28:	08007c9f 	.word	0x08007c9f
 8007a2c:	08007c9f 	.word	0x08007c9f
 8007a30:	08007c9f 	.word	0x08007c9f
 8007a34:	08007c9f 	.word	0x08007c9f
 8007a38:	08007a3d 	.word	0x08007a3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a5e:	e126      	b.n	8007cae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb27 	bl	80080b6 <USBD_CtlError>
        err++;
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	72fb      	strb	r3, [r7, #11]
      break;
 8007a6e:	e11e      	b.n	8007cae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	7c12      	ldrb	r2, [r2, #16]
 8007a7c:	f107 0108 	add.w	r1, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
      break;
 8007a86:	e112      	b.n	8007cae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7c1b      	ldrb	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10d      	bne.n	8007aac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	f107 0208 	add.w	r2, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007aaa:	e100      	b.n	8007cae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	f107 0208 	add.w	r2, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e0f2      	b.n	8007cae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	885b      	ldrh	r3, [r3, #2]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	f200 80ac 	bhi.w	8007c2c <USBD_GetDescriptor+0x258>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <USBD_GetDescriptor+0x108>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007af5 	.word	0x08007af5
 8007ae0:	08007b29 	.word	0x08007b29
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b91 	.word	0x08007b91
 8007aec:	08007bc5 	.word	0x08007bc5
 8007af0:	08007bf9 	.word	0x08007bf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e091      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 facb 	bl	80080b6 <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e089      	b.n	8007c3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e077      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fab1 	bl	80080b6 <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e06f      	b.n	8007c3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e05d      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa97 	bl	80080b6 <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e055      	b.n	8007c3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb2:	e043      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa7d 	bl	80080b6 <USBD_CtlError>
            err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc2:	e03b      	b.n	8007c3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7c12      	ldrb	r2, [r2, #16]
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007be6:	e029      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa63 	bl	80080b6 <USBD_CtlError>
            err++;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bf6:	e021      	b.n	8007c3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1a:	e00f      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa49 	bl	80080b6 <USBD_CtlError>
            err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2a:	e007      	b.n	8007c3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa41 	bl	80080b6 <USBD_CtlError>
          err++;
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	3301      	adds	r3, #1
 8007c38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c3a:	bf00      	nop
      }
      break;
 8007c3c:	e037      	b.n	8007cae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7c1b      	ldrb	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f107 0208 	add.w	r2, r7, #8
 8007c52:	4610      	mov	r0, r2
 8007c54:	4798      	blx	r3
 8007c56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c58:	e029      	b.n	8007cae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa2a 	bl	80080b6 <USBD_CtlError>
        err++;
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	3301      	adds	r3, #1
 8007c66:	72fb      	strb	r3, [r7, #11]
      break;
 8007c68:	e021      	b.n	8007cae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7c1b      	ldrb	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10d      	bne.n	8007c8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4798      	blx	r3
 8007c82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	2207      	movs	r2, #7
 8007c8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8c:	e00f      	b.n	8007cae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fa10 	bl	80080b6 <USBD_CtlError>
        err++;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9c:	e007      	b.n	8007cae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa08 	bl	80080b6 <USBD_CtlError>
      err++;
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	72fb      	strb	r3, [r7, #11]
      break;
 8007cac:	bf00      	nop
  }

  if (err != 0U)
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d11e      	bne.n	8007cf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	88db      	ldrh	r3, [r3, #6]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d016      	beq.n	8007cea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007cbc:	893b      	ldrh	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88da      	ldrh	r2, [r3, #6]
 8007cc6:	893b      	ldrh	r3, [r7, #8]
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	bf28      	it	cs
 8007ccc:	4613      	movcs	r3, r2
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cd2:	893b      	ldrh	r3, [r7, #8]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa5d 	bl	8008198 <USBD_CtlSendData>
 8007cde:	e009      	b.n	8007cf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f9e7 	bl	80080b6 <USBD_CtlError>
 8007ce8:	e004      	b.n	8007cf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 faae 	bl	800824c <USBD_CtlSendStatus>
 8007cf0:	e000      	b.n	8007cf4 <USBD_GetDescriptor+0x320>
    return;
 8007cf2:	bf00      	nop
  }
}
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	889b      	ldrh	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d131      	bne.n	8007d72 <USBD_SetAddress+0x76>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	88db      	ldrh	r3, [r3, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d12d      	bne.n	8007d72 <USBD_SetAddress+0x76>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d1c:	d829      	bhi.n	8007d72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d104      	bne.n	8007d40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f9bc 	bl	80080b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	e01d      	b.n	8007d7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 ffb3 	bl	8008cb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa7a 	bl	800824c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d66:	e009      	b.n	8007d7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d70:	e004      	b.n	8007d7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f99e 	bl	80080b6 <USBD_CtlError>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	4b4e      	ldr	r3, [pc, #312]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007d9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d9c:	4b4d      	ldr	r3, [pc, #308]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d905      	bls.n	8007db0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f985 	bl	80080b6 <USBD_CtlError>
    return USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e08c      	b.n	8007eca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d002      	beq.n	8007dc2 <USBD_SetConfig+0x3e>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d029      	beq.n	8007e14 <USBD_SetConfig+0x90>
 8007dc0:	e075      	b.n	8007eae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dc2:	4b44      	ldr	r3, [pc, #272]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d020      	beq.n	8007e0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007dca:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fe ffb7 	bl	8006d4e <USBD_SetClassConfig>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d008      	beq.n	8007dfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f962 	bl	80080b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dfa:	e065      	b.n	8007ec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa25 	bl	800824c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2203      	movs	r2, #3
 8007e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e0a:	e05d      	b.n	8007ec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa1d 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007e12:	e059      	b.n	8007ec8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e14:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d112      	bne.n	8007e42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e24:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e2e:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fe ffa6 	bl	8006d86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa06 	bl	800824c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e40:	e042      	b.n	8007ec8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d02a      	beq.n	8007ea6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fe ff94 	bl	8006d86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fe ff6d 	bl	8006d4e <USBD_SetClassConfig>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00f      	beq.n	8007e9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f918 	bl	80080b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe ff79 	bl	8006d86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e9c:	e014      	b.n	8007ec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f9d4 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007ea4:	e010      	b.n	8007ec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f9d0 	bl	800824c <USBD_CtlSendStatus>
      break;
 8007eac:	e00c      	b.n	8007ec8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f900 	bl	80080b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eb6:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <USBD_SetConfig+0x150>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fe ff62 	bl	8006d86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec6:	bf00      	nop
  }

  return ret;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	2000021c 	.word	0x2000021c

08007ed8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	88db      	ldrh	r3, [r3, #6]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d004      	beq.n	8007ef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f8e2 	bl	80080b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ef2:	e023      	b.n	8007f3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	dc02      	bgt.n	8007f06 <USBD_GetConfig+0x2e>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc03      	bgt.n	8007f0c <USBD_GetConfig+0x34>
 8007f04:	e015      	b.n	8007f32 <USBD_GetConfig+0x5a>
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d00b      	beq.n	8007f22 <USBD_GetConfig+0x4a>
 8007f0a:	e012      	b.n	8007f32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3308      	adds	r3, #8
 8007f16:	2201      	movs	r2, #1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f93c 	bl	8008198 <USBD_CtlSendData>
        break;
 8007f20:	e00c      	b.n	8007f3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	2201      	movs	r2, #1
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f934 	bl	8008198 <USBD_CtlSendData>
        break;
 8007f30:	e004      	b.n	8007f3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8be 	bl	80080b6 <USBD_CtlError>
        break;
 8007f3a:	bf00      	nop
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d81e      	bhi.n	8007f9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	88db      	ldrh	r3, [r3, #6]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d004      	beq.n	8007f6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8a5 	bl	80080b6 <USBD_CtlError>
        break;
 8007f6c:	e01a      	b.n	8007fa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f043 0202 	orr.w	r2, r3, #2
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	2202      	movs	r2, #2
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f900 	bl	8008198 <USBD_CtlSendData>
      break;
 8007f98:	e004      	b.n	8007fa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f88a 	bl	80080b6 <USBD_CtlError>
      break;
 8007fa2:	bf00      	nop
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d107      	bne.n	8007fce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f940 	bl	800824c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fcc:	e013      	b.n	8007ff6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d10b      	bne.n	8007fee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	889b      	ldrh	r3, [r3, #4]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f930 	bl	800824c <USBD_CtlSendStatus>
}
 8007fec:	e003      	b.n	8007ff6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f860 	bl	80080b6 <USBD_CtlError>
}
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800e:	b2db      	uxtb	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	2b02      	cmp	r3, #2
 8008014:	d80b      	bhi.n	800802e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10c      	bne.n	8008038 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f910 	bl	800824c <USBD_CtlSendStatus>
      }
      break;
 800802c:	e004      	b.n	8008038 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f840 	bl	80080b6 <USBD_CtlError>
      break;
 8008036:	e000      	b.n	800803a <USBD_ClrFeature+0x3c>
      break;
 8008038:	bf00      	nop
  }
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fa17 	bl	80074a0 <SWAPBYTE>
 8008072:	4603      	mov	r3, r0
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fa0a 	bl	80074a0 <SWAPBYTE>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff f9fd 	bl	80074a0 <SWAPBYTE>
 80080a6:	4603      	mov	r3, r0
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	80da      	strh	r2, [r3, #6]
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080c0:	2180      	movs	r1, #128	; 0x80
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fd60 	bl	8008b88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd5c 	bl	8008b88 <USBD_LL_StallEP>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d036      	beq.n	800815c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80080f2:	6938      	ldr	r0, [r7, #16]
 80080f4:	f000 f836 	bl	8008164 <USBD_GetLen>
 80080f8:	4603      	mov	r3, r0
 80080fa:	3301      	adds	r3, #1
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	4413      	add	r3, r2
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	701a      	strb	r2, [r3, #0]
  idx++;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	4413      	add	r3, r2
 800811e:	2203      	movs	r2, #3
 8008120:	701a      	strb	r2, [r3, #0]
  idx++;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	3301      	adds	r3, #1
 8008126:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008128:	e013      	b.n	8008152 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	4413      	add	r3, r2
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3301      	adds	r3, #1
 800813a:	613b      	str	r3, [r7, #16]
    idx++;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	3301      	adds	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4413      	add	r3, r2
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
    idx++;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	3301      	adds	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e7      	bne.n	800812a <USBD_GetString+0x52>
 800815a:	e000      	b.n	800815e <USBD_GetString+0x86>
    return;
 800815c:	bf00      	nop
  }
}
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008174:	e005      	b.n	8008182 <USBD_GetLen+0x1e>
  {
    len++;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	3301      	adds	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3301      	adds	r3, #1
 8008180:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f5      	bne.n	8008176 <USBD_GetLen+0x12>
  }

  return len;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fdb0 	bl	8008d24 <USBD_LL_Transmit>

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	2100      	movs	r1, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fd9f 	bl	8008d24 <USBD_LL_Transmit>

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2203      	movs	r2, #3
 8008200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	2100      	movs	r1, #0
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fdba 	bl	8008d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	2100      	movs	r1, #0
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 fda9 	bl	8008d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2204      	movs	r2, #4
 8008258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fd5e 	bl	8008d24 <USBD_LL_Transmit>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2205      	movs	r2, #5
 800827e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008282:	2300      	movs	r3, #0
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fd83 	bl	8008d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800829c:	2200      	movs	r2, #0
 800829e:	4912      	ldr	r1, [pc, #72]	; (80082e8 <MX_USB_DEVICE_Init+0x50>)
 80082a0:	4812      	ldr	r0, [pc, #72]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082a2:	f7fe fcd7 	bl	8006c54 <USBD_Init>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082ac:	f7f8 ff3a 	bl	8001124 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082b0:	490f      	ldr	r1, [pc, #60]	; (80082f0 <MX_USB_DEVICE_Init+0x58>)
 80082b2:	480e      	ldr	r0, [pc, #56]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082b4:	f7fe fcfe 	bl	8006cb4 <USBD_RegisterClass>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082be:	f7f8 ff31 	bl	8001124 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082c2:	490c      	ldr	r1, [pc, #48]	; (80082f4 <MX_USB_DEVICE_Init+0x5c>)
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082c6:	f7fe fc35 	bl	8006b34 <USBD_CDC_RegisterInterface>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082d0:	f7f8 ff28 	bl	8001124 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <MX_USB_DEVICE_Init+0x54>)
 80082d6:	f7fe fd23 	bl	8006d20 <USBD_Start>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082e0:	f7f8 ff20 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082e4:	bf00      	nop
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	200000ac 	.word	0x200000ac
 80082ec:	20000220 	.word	0x20000220
 80082f0:	20000018 	.word	0x20000018
 80082f4:	20000098 	.word	0x20000098

080082f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082fc:	2200      	movs	r2, #0
 80082fe:	4905      	ldr	r1, [pc, #20]	; (8008314 <CDC_Init_FS+0x1c>)
 8008300:	4805      	ldr	r0, [pc, #20]	; (8008318 <CDC_Init_FS+0x20>)
 8008302:	f7fe fc31 	bl	8006b68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008306:	4905      	ldr	r1, [pc, #20]	; (800831c <CDC_Init_FS+0x24>)
 8008308:	4803      	ldr	r0, [pc, #12]	; (8008318 <CDC_Init_FS+0x20>)
 800830a:	f7fe fc4f 	bl	8006bac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800830e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000cfc 	.word	0x20000cfc
 8008318:	20000220 	.word	0x20000220
 800831c:	200004fc 	.word	0x200004fc

08008320 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008324:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008326:	4618      	mov	r0, r3
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
 800833c:	4613      	mov	r3, r2
 800833e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b23      	cmp	r3, #35	; 0x23
 8008344:	d84a      	bhi.n	80083dc <CDC_Control_FS+0xac>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <CDC_Control_FS+0x1c>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080083dd 	.word	0x080083dd
 8008350:	080083dd 	.word	0x080083dd
 8008354:	080083dd 	.word	0x080083dd
 8008358:	080083dd 	.word	0x080083dd
 800835c:	080083dd 	.word	0x080083dd
 8008360:	080083dd 	.word	0x080083dd
 8008364:	080083dd 	.word	0x080083dd
 8008368:	080083dd 	.word	0x080083dd
 800836c:	080083dd 	.word	0x080083dd
 8008370:	080083dd 	.word	0x080083dd
 8008374:	080083dd 	.word	0x080083dd
 8008378:	080083dd 	.word	0x080083dd
 800837c:	080083dd 	.word	0x080083dd
 8008380:	080083dd 	.word	0x080083dd
 8008384:	080083dd 	.word	0x080083dd
 8008388:	080083dd 	.word	0x080083dd
 800838c:	080083dd 	.word	0x080083dd
 8008390:	080083dd 	.word	0x080083dd
 8008394:	080083dd 	.word	0x080083dd
 8008398:	080083dd 	.word	0x080083dd
 800839c:	080083dd 	.word	0x080083dd
 80083a0:	080083dd 	.word	0x080083dd
 80083a4:	080083dd 	.word	0x080083dd
 80083a8:	080083dd 	.word	0x080083dd
 80083ac:	080083dd 	.word	0x080083dd
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	080083dd 	.word	0x080083dd
 80083b8:	080083dd 	.word	0x080083dd
 80083bc:	080083dd 	.word	0x080083dd
 80083c0:	080083dd 	.word	0x080083dd
 80083c4:	080083dd 	.word	0x080083dd
 80083c8:	080083dd 	.word	0x080083dd
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083dd 	.word	0x080083dd
 80083d4:	080083dd 	.word	0x080083dd
 80083d8:	080083dd 	.word	0x080083dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083dc:	bf00      	nop
  }

  return (USBD_OK);
 80083de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <CDC_Receive_FS+0x24>)
 80083fa:	f7fe fbd7 	bl	8006bac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083fe:	4804      	ldr	r0, [pc, #16]	; (8008410 <CDC_Receive_FS+0x24>)
 8008400:	f7fe fbf2 	bl	8006be8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008404:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000220 	.word	0x20000220

08008414 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
	...

08008438 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2212      	movs	r2, #18
 8008448:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800844a:	4b03      	ldr	r3, [pc, #12]	; (8008458 <USBD_FS_DeviceDescriptor+0x20>)
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	200000cc 	.word	0x200000cc

0800845c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2204      	movs	r2, #4
 800846c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800846e:	4b03      	ldr	r3, [pc, #12]	; (800847c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	200000ec 	.word	0x200000ec

08008480 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4907      	ldr	r1, [pc, #28]	; (80084b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008496:	4808      	ldr	r0, [pc, #32]	; (80084b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008498:	f7ff fe1e 	bl	80080d8 <USBD_GetString>
 800849c:	e004      	b.n	80084a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	4904      	ldr	r1, [pc, #16]	; (80084b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084a2:	4805      	ldr	r0, [pc, #20]	; (80084b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084a4:	f7ff fe18 	bl	80080d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200014fc 	.word	0x200014fc
 80084b8:	08008f8c 	.word	0x08008f8c

080084bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	4904      	ldr	r1, [pc, #16]	; (80084dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084cc:	4804      	ldr	r0, [pc, #16]	; (80084e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084ce:	f7ff fe03 	bl	80080d8 <USBD_GetString>
  return USBD_StrDesc;
 80084d2:	4b02      	ldr	r3, [pc, #8]	; (80084dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	200014fc 	.word	0x200014fc
 80084e0:	08008fa4 	.word	0x08008fa4

080084e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	6039      	str	r1, [r7, #0]
 80084ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	221a      	movs	r2, #26
 80084f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084f6:	f000 f855 	bl	80085a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084fa:	4b02      	ldr	r3, [pc, #8]	; (8008504 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200000f0 	.word	0x200000f0

08008508 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	4907      	ldr	r1, [pc, #28]	; (800853c <USBD_FS_ConfigStrDescriptor+0x34>)
 800851e:	4808      	ldr	r0, [pc, #32]	; (8008540 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008520:	f7ff fdda 	bl	80080d8 <USBD_GetString>
 8008524:	e004      	b.n	8008530 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4904      	ldr	r1, [pc, #16]	; (800853c <USBD_FS_ConfigStrDescriptor+0x34>)
 800852a:	4805      	ldr	r0, [pc, #20]	; (8008540 <USBD_FS_ConfigStrDescriptor+0x38>)
 800852c:	f7ff fdd4 	bl	80080d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	200014fc 	.word	0x200014fc
 8008540:	08008fb8 	.word	0x08008fb8

08008544 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d105      	bne.n	8008562 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4907      	ldr	r1, [pc, #28]	; (8008578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800855a:	4808      	ldr	r0, [pc, #32]	; (800857c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800855c:	f7ff fdbc 	bl	80080d8 <USBD_GetString>
 8008560:	e004      	b.n	800856c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4904      	ldr	r1, [pc, #16]	; (8008578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008566:	4805      	ldr	r0, [pc, #20]	; (800857c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008568:	f7ff fdb6 	bl	80080d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	200014fc 	.word	0x200014fc
 800857c:	08008fc4 	.word	0x08008fc4

08008580 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	220c      	movs	r2, #12
 8008590:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008592:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	200000e0 	.word	0x200000e0

080085a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085aa:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <Get_SerialNum+0x44>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <Get_SerialNum+0x48>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <Get_SerialNum+0x4c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085ca:	2208      	movs	r2, #8
 80085cc:	4909      	ldr	r1, [pc, #36]	; (80085f4 <Get_SerialNum+0x50>)
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f814 	bl	80085fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085d4:	2204      	movs	r2, #4
 80085d6:	4908      	ldr	r1, [pc, #32]	; (80085f8 <Get_SerialNum+0x54>)
 80085d8:	68b8      	ldr	r0, [r7, #8]
 80085da:	f000 f80f 	bl	80085fc <IntToUnicode>
  }
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	1fff7590 	.word	0x1fff7590
 80085ec:	1fff7594 	.word	0x1fff7594
 80085f0:	1fff7598 	.word	0x1fff7598
 80085f4:	200000f2 	.word	0x200000f2
 80085f8:	20000102 	.word	0x20000102

080085fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
 8008612:	e027      	b.n	8008664 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	0f1b      	lsrs	r3, r3, #28
 8008618:	2b09      	cmp	r3, #9
 800861a:	d80b      	bhi.n	8008634 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	0f1b      	lsrs	r3, r3, #28
 8008620:	b2da      	uxtb	r2, r3
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	4619      	mov	r1, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	440b      	add	r3, r1
 800862c:	3230      	adds	r2, #48	; 0x30
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	e00a      	b.n	800864a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	0f1b      	lsrs	r3, r3, #28
 8008638:	b2da      	uxtb	r2, r3
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	4619      	mov	r1, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	440b      	add	r3, r1
 8008644:	3237      	adds	r2, #55	; 0x37
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	3301      	adds	r3, #1
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	4413      	add	r3, r2
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	3301      	adds	r3, #1
 8008662:	75fb      	strb	r3, [r7, #23]
 8008664:	7dfa      	ldrb	r2, [r7, #23]
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	429a      	cmp	r2, r3
 800866a:	d3d3      	bcc.n	8008614 <IntToUnicode+0x18>
  }
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b0ac      	sub	sp, #176	; 0xb0
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	609a      	str	r2, [r3, #8]
 8008690:	60da      	str	r2, [r3, #12]
 8008692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008694:	f107 0314 	add.w	r3, r7, #20
 8008698:	2288      	movs	r2, #136	; 0x88
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fc31 	bl	8008f04 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086aa:	d173      	bne.n	8008794 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80086ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80086b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80086b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80086ba:	2303      	movs	r3, #3
 80086bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80086c2:	230c      	movs	r3, #12
 80086c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80086c6:	2307      	movs	r3, #7
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80086ca:	2304      	movs	r3, #4
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80086ce:	2302      	movs	r3, #2
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80086d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fb f95f 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80086e8:	f7f8 fd1c 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ec:	4b2b      	ldr	r3, [pc, #172]	; (800879c <HAL_PCD_MspInit+0x120>)
 80086ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f0:	4a2a      	ldr	r2, [pc, #168]	; (800879c <HAL_PCD_MspInit+0x120>)
 80086f2:	f043 0301 	orr.w	r3, r3, #1
 80086f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086f8:	4b28      	ldr	r3, [pc, #160]	; (800879c <HAL_PCD_MspInit+0x120>)
 80086fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008704:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870c:	2302      	movs	r3, #2
 800870e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008712:	2300      	movs	r3, #0
 8008714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008718:	2303      	movs	r3, #3
 800871a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800871e:	230a      	movs	r3, #10
 8008720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008724:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008728:	4619      	mov	r1, r3
 800872a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800872e:	f7f8 ff87 	bl	8001640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008732:	4b1a      	ldr	r3, [pc, #104]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008736:	4a19      	ldr	r2, [pc, #100]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800873c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800873e:	4b17      	ldr	r3, [pc, #92]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800874a:	4b14      	ldr	r3, [pc, #80]	; (800879c <HAL_PCD_MspInit+0x120>)
 800874c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d114      	bne.n	8008780 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	4a10      	ldr	r2, [pc, #64]	; (800879c <HAL_PCD_MspInit+0x120>)
 800875c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008760:	6593      	str	r3, [r2, #88]	; 0x58
 8008762:	4b0e      	ldr	r3, [pc, #56]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800876a:	60bb      	str	r3, [r7, #8]
 800876c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800876e:	f7fa fb35 	bl	8002ddc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008772:	4b0a      	ldr	r3, [pc, #40]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008776:	4a09      	ldr	r2, [pc, #36]	; (800879c <HAL_PCD_MspInit+0x120>)
 8008778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800877c:	6593      	str	r3, [r2, #88]	; 0x58
 800877e:	e001      	b.n	8008784 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008780:	f7fa fb2c 	bl	8002ddc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	2043      	movs	r0, #67	; 0x43
 800878a:	f7f8 ff22 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800878e:	2043      	movs	r0, #67	; 0x43
 8008790:	f7f8 ff3b 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008794:	bf00      	nop
 8008796:	37b0      	adds	r7, #176	; 0xb0
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	40021000 	.word	0x40021000

080087a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fe faff 	bl	8006dba <USBD_LL_SetupStage>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	4619      	mov	r1, r3
 80087ee:	f7fe fb39 	bl	8006e64 <USBD_LL_DataOutStage>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	3348      	adds	r3, #72	; 0x48
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	4619      	mov	r1, r3
 8008822:	f7fe fbd2 	bl	8006fca <USBD_LL_DataInStage>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe fd0c 	bl	800725a <USBD_LL_SOF>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008852:	2301      	movs	r3, #1
 8008854:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d001      	beq.n	8008862 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800885e:	f7f8 fc61 	bl	8001124 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008868:	7bfa      	ldrb	r2, [r7, #15]
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fcb0 	bl	80071d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fc58 	bl	800712e <USBD_LL_Reset>
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6812      	ldr	r2, [r2, #0]
 800889e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc9f 	bl	80071f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <HAL_PCD_SuspendCallback+0x48>)
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	4a03      	ldr	r2, [pc, #12]	; (80088d0 <HAL_PCD_SuspendCallback+0x48>)
 80088c2:	f043 0306 	orr.w	r3, r3, #6
 80088c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <HAL_PCD_ResumeCallback+0x4c>)
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	4a07      	ldr	r2, [pc, #28]	; (8008920 <HAL_PCD_ResumeCallback+0x4c>)
 8008902:	f023 0306 	bic.w	r3, r3, #6
 8008906:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008908:	f000 faf6 	bl	8008ef8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fc89 	bl	800722a <USBD_LL_Resume>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed00 	.word	0xe000ed00

08008924 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fcdf 	bl	80072fe <USBD_LL_IsoOUTIncomplete>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fc9b 	bl	800729a <USBD_LL_IsoINIncomplete>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fcf1 	bl	8007362 <USBD_LL_DevConnected>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fcee 	bl	8007378 <USBD_LL_DevDisconnected>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d13c      	bne.n	8008a2e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089b4:	4a20      	ldr	r2, [pc, #128]	; (8008a38 <USBD_LL_Init+0x94>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <USBD_LL_Init+0x94>)
 80089c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089c4:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <USBD_LL_Init+0x94>)
 80089c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80089cc:	4b1a      	ldr	r3, [pc, #104]	; (8008a38 <USBD_LL_Init+0x94>)
 80089ce:	2206      	movs	r2, #6
 80089d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089d2:	4b19      	ldr	r3, [pc, #100]	; (8008a38 <USBD_LL_Init+0x94>)
 80089d4:	2202      	movs	r2, #2
 80089d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089d8:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <USBD_LL_Init+0x94>)
 80089da:	2202      	movs	r2, #2
 80089dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089de:	4b16      	ldr	r3, [pc, #88]	; (8008a38 <USBD_LL_Init+0x94>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089e4:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <USBD_LL_Init+0x94>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <USBD_LL_Init+0x94>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80089f0:	4b11      	ldr	r3, [pc, #68]	; (8008a38 <USBD_LL_Init+0x94>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <USBD_LL_Init+0x94>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089fc:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <USBD_LL_Init+0x94>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a02:	480d      	ldr	r0, [pc, #52]	; (8008a38 <USBD_LL_Init+0x94>)
 8008a04:	f7f8 ffde 	bl	80019c4 <HAL_PCD_Init>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a0e:	f7f8 fb89 	bl	8001124 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a12:	2180      	movs	r1, #128	; 0x80
 8008a14:	4808      	ldr	r0, [pc, #32]	; (8008a38 <USBD_LL_Init+0x94>)
 8008a16:	f7fa f948 	bl	8002caa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a1a:	2240      	movs	r2, #64	; 0x40
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	4806      	ldr	r0, [pc, #24]	; (8008a38 <USBD_LL_Init+0x94>)
 8008a20:	f7fa f8fc 	bl	8002c1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a24:	2280      	movs	r2, #128	; 0x80
 8008a26:	2101      	movs	r1, #1
 8008a28:	4803      	ldr	r0, [pc, #12]	; (8008a38 <USBD_LL_Init+0x94>)
 8008a2a:	f7fa f8f7 	bl	8002c1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	200016fc 	.word	0x200016fc

08008a3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7f9 f8da 	bl	8001c0c <HAL_PCD_Start>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d816      	bhi.n	8008a90 <USBD_LL_Start+0x54>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <USBD_LL_Start+0x2c>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008a7f 	.word	0x08008a7f
 8008a70:	08008a85 	.word	0x08008a85
 8008a74:	08008a8b 	.word	0x08008a8b
    case HAL_OK :
      usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	e00b      	b.n	8008a96 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	73fb      	strb	r3, [r7, #15]
    break;
 8008a82:	e008      	b.n	8008a96 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	e005      	b.n	8008a96 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8e:	e002      	b.n	8008a96 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a90:	2303      	movs	r3, #3
 8008a92:	73fb      	strb	r3, [r7, #15]
    break;
 8008a94:	bf00      	nop
  }
  return usb_status;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	70fb      	strb	r3, [r7, #3]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70bb      	strb	r3, [r7, #2]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ac8:	78bb      	ldrb	r3, [r7, #2]
 8008aca:	883a      	ldrh	r2, [r7, #0]
 8008acc:	78f9      	ldrb	r1, [r7, #3]
 8008ace:	f7f9 fd84 	bl	80025da <HAL_PCD_EP_Open>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d817      	bhi.n	8008b0c <USBD_LL_OpenEP+0x6c>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <USBD_LL_OpenEP+0x44>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008afb 	.word	0x08008afb
 8008aec:	08008b01 	.word	0x08008b01
 8008af0:	08008b07 	.word	0x08008b07
    case HAL_OK :
      usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
    break;
 8008af8:	e00b      	b.n	8008b12 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008afa:	2303      	movs	r3, #3
 8008afc:	73fb      	strb	r3, [r7, #15]
    break;
 8008afe:	e008      	b.n	8008b12 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
    break;
 8008b04:	e005      	b.n	8008b12 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b06:	2303      	movs	r3, #3
 8008b08:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0a:	e002      	b.n	8008b12 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b10:	bf00      	nop
  }
  return usb_status;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f9 fdb5 	bl	80026aa <HAL_PCD_EP_Close>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d816      	bhi.n	8008b78 <USBD_LL_CloseEP+0x5c>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <USBD_LL_CloseEP+0x34>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b67 	.word	0x08008b67
 8008b58:	08008b6d 	.word	0x08008b6d
 8008b5c:	08008b73 	.word	0x08008b73
    case HAL_OK :
      usb_status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	e00b      	b.n	8008b7e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b66:	2303      	movs	r3, #3
 8008b68:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6a:	e008      	b.n	8008b7e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b70:	e005      	b.n	8008b7e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b72:	2303      	movs	r3, #3
 8008b74:	73fb      	strb	r3, [r7, #15]
    break;
 8008b76:	e002      	b.n	8008b7e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7c:	bf00      	nop
  }
  return usb_status;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7f9 fe44 	bl	8002834 <HAL_PCD_EP_SetStall>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d816      	bhi.n	8008be4 <USBD_LL_StallEP+0x5c>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <USBD_LL_StallEP+0x34>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bd3 	.word	0x08008bd3
 8008bc4:	08008bd9 	.word	0x08008bd9
 8008bc8:	08008bdf 	.word	0x08008bdf
    case HAL_OK :
      usb_status = USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd0:	e00b      	b.n	8008bea <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd6:	e008      	b.n	8008bea <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
    break;
 8008bdc:	e005      	b.n	8008bea <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bde:	2303      	movs	r3, #3
 8008be0:	73fb      	strb	r3, [r7, #15]
    break;
 8008be2:	e002      	b.n	8008bea <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	73fb      	strb	r3, [r7, #15]
    break;
 8008be8:	bf00      	nop
  }
  return usb_status;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f9 fe70 	bl	80028f8 <HAL_PCD_EP_ClrStall>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d816      	bhi.n	8008c50 <USBD_LL_ClearStallEP+0x5c>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_LL_ClearStallEP+0x34>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c39 	.word	0x08008c39
 8008c2c:	08008c3f 	.word	0x08008c3f
 8008c30:	08008c45 	.word	0x08008c45
 8008c34:	08008c4b 	.word	0x08008c4b
    case HAL_OK :
      usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	e00b      	b.n	8008c56 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	73fb      	strb	r3, [r7, #15]
    break;
 8008c42:	e008      	b.n	8008c56 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c44:	2301      	movs	r3, #1
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e005      	b.n	8008c56 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e002      	b.n	8008c56 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c50:	2303      	movs	r3, #3
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	bf00      	nop
  }
  return usb_status;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	da0b      	bge.n	8008c94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	333e      	adds	r3, #62	; 0x3e
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	e00b      	b.n	8008cac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c9a:	68f9      	ldr	r1, [r7, #12]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008caa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f9 fc5a 	bl	8002590 <HAL_PCD_SetAddress>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d816      	bhi.n	8008d14 <USBD_LL_SetUSBAddress+0x5c>
 8008ce6:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <USBD_LL_SetUSBAddress+0x34>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d03 	.word	0x08008d03
 8008cf4:	08008d09 	.word	0x08008d09
 8008cf8:	08008d0f 	.word	0x08008d0f
    case HAL_OK :
      usb_status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008d00:	e00b      	b.n	8008d1a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d02:	2303      	movs	r3, #3
 8008d04:	73fb      	strb	r3, [r7, #15]
    break;
 8008d06:	e008      	b.n	8008d1a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0c:	e005      	b.n	8008d1a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	73fb      	strb	r3, [r7, #15]
    break;
 8008d12:	e002      	b.n	8008d1a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d14:	2303      	movs	r3, #3
 8008d16:	73fb      	strb	r3, [r7, #15]
    break;
 8008d18:	bf00      	nop
  }
  return usb_status;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	460b      	mov	r3, r1
 8008d32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d42:	7af9      	ldrb	r1, [r7, #11]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	f7f9 fd43 	bl	80027d2 <HAL_PCD_EP_Transmit>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d50:	7dbb      	ldrb	r3, [r7, #22]
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d816      	bhi.n	8008d84 <USBD_LL_Transmit+0x60>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBD_LL_Transmit+0x38>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d73 	.word	0x08008d73
 8008d64:	08008d79 	.word	0x08008d79
 8008d68:	08008d7f 	.word	0x08008d7f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d70:	e00b      	b.n	8008d8a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d72:	2303      	movs	r3, #3
 8008d74:	75fb      	strb	r3, [r7, #23]
    break;
 8008d76:	e008      	b.n	8008d8a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d7c:	e005      	b.n	8008d8a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	75fb      	strb	r3, [r7, #23]
    break;
 8008d82:	e002      	b.n	8008d8a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	75fb      	strb	r3, [r7, #23]
    break;
 8008d88:	bf00      	nop
  }
  return usb_status;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	460b      	mov	r3, r1
 8008da2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008db2:	7af9      	ldrb	r1, [r7, #11]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	f7f9 fcc1 	bl	800273e <HAL_PCD_EP_Receive>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008dc0:	7dbb      	ldrb	r3, [r7, #22]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d816      	bhi.n	8008df4 <USBD_LL_PrepareReceive+0x60>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <USBD_LL_PrepareReceive+0x38>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008ddd 	.word	0x08008ddd
 8008dd0:	08008de3 	.word	0x08008de3
 8008dd4:	08008de9 	.word	0x08008de9
 8008dd8:	08008def 	.word	0x08008def
    case HAL_OK :
      usb_status = USBD_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]
    break;
 8008de0:	e00b      	b.n	8008dfa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008de2:	2303      	movs	r3, #3
 8008de4:	75fb      	strb	r3, [r7, #23]
    break;
 8008de6:	e008      	b.n	8008dfa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
    break;
 8008dec:	e005      	b.n	8008dfa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	75fb      	strb	r3, [r7, #23]
    break;
 8008df2:	e002      	b.n	8008dfa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008df4:	2303      	movs	r3, #3
 8008df6:	75fb      	strb	r3, [r7, #23]
    break;
 8008df8:	bf00      	nop
  }
  return usb_status;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f9 fcc1 	bl	80027a2 <HAL_PCD_EP_GetRxCount>
 8008e20:	4603      	mov	r3, r0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <HAL_PCDEx_LPM_Callback+0x18>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d01f      	beq.n	8008e82 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008e42:	e03b      	b.n	8008ebc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008e4c:	f000 f854 	bl	8008ef8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	4a1b      	ldr	r2, [pc, #108]	; (8008ec4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e56:	f023 0306 	bic.w	r3, r3, #6
 8008e5a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe f9d5 	bl	800722a <USBD_LL_Resume>
    break;
 8008e80:	e01c      	b.n	8008ebc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e94:	f043 0301 	orr.w	r3, r3, #1
 8008e98:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe f9a6 	bl	80071f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d005      	beq.n	8008eba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	4a04      	ldr	r2, [pc, #16]	; (8008ec4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008eb4:	f043 0306 	orr.w	r3, r3, #6
 8008eb8:	6113      	str	r3, [r2, #16]
    break;
 8008eba:	bf00      	nop
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000ed00 	.word	0xe000ed00

08008ec8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ed0:	4b03      	ldr	r3, [pc, #12]	; (8008ee0 <USBD_static_malloc+0x18>)
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	20001c08 	.word	0x20001c08

08008ee4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008efc:	f7f7 ffd8 	bl	8000eb0 <SystemClock_Config>
}
 8008f00:	bf00      	nop
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <memset>:
 8008f04:	4402      	add	r2, r0
 8008f06:	4603      	mov	r3, r0
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d100      	bne.n	8008f0e <memset+0xa>
 8008f0c:	4770      	bx	lr
 8008f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f12:	e7f9      	b.n	8008f08 <memset+0x4>

08008f14 <__libc_init_array>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4d0d      	ldr	r5, [pc, #52]	; (8008f4c <__libc_init_array+0x38>)
 8008f18:	4c0d      	ldr	r4, [pc, #52]	; (8008f50 <__libc_init_array+0x3c>)
 8008f1a:	1b64      	subs	r4, r4, r5
 8008f1c:	10a4      	asrs	r4, r4, #2
 8008f1e:	2600      	movs	r6, #0
 8008f20:	42a6      	cmp	r6, r4
 8008f22:	d109      	bne.n	8008f38 <__libc_init_array+0x24>
 8008f24:	4d0b      	ldr	r5, [pc, #44]	; (8008f54 <__libc_init_array+0x40>)
 8008f26:	4c0c      	ldr	r4, [pc, #48]	; (8008f58 <__libc_init_array+0x44>)
 8008f28:	f000 f818 	bl	8008f5c <_init>
 8008f2c:	1b64      	subs	r4, r4, r5
 8008f2e:	10a4      	asrs	r4, r4, #2
 8008f30:	2600      	movs	r6, #0
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	d105      	bne.n	8008f42 <__libc_init_array+0x2e>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3c:	4798      	blx	r3
 8008f3e:	3601      	adds	r6, #1
 8008f40:	e7ee      	b.n	8008f20 <__libc_init_array+0xc>
 8008f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f46:	4798      	blx	r3
 8008f48:	3601      	adds	r6, #1
 8008f4a:	e7f2      	b.n	8008f32 <__libc_init_array+0x1e>
 8008f4c:	08009014 	.word	0x08009014
 8008f50:	08009014 	.word	0x08009014
 8008f54:	08009014 	.word	0x08009014
 8008f58:	08009018 	.word	0x08009018

08008f5c <_init>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr

08008f68 <_fini>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr

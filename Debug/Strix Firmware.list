
Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800c3b8  0800c3b8  0001c3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c814  0800c814  000202d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c814  0800c814  000202d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c814  0800c814  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c818  0800c818  0001c818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800c81c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  200002d4  0800caf0  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001a00  200021a8  0800caf0  000221a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001324e  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003748  00000000  00000000  00033595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca7  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e27  00000000  00000000  00038a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a2f  00000000  00000000  0003e8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ead58  00000000  00000000  000532d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000557c  00000000  00000000  0013e030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001435ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c39c 	.word	0x0800c39c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800c39c 	.word	0x0800c39c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bd2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6858      	ldr	r0, [r3, #4]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	899b      	ldrh	r3, [r3, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f001 fa32 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 ff4f 	bl	8001a98 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6858      	ldr	r0, [r3, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	899b      	ldrh	r3, [r3, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f001 fa27 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000c0a:	2032      	movs	r0, #50	; 0x32
 8000c0c:	f000 ff44 	bl	8001a98 <HAL_Delay>
	//status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
	//HAL_Delay(50);

	/* Check chip ID */
	uint8_t chipID_accel;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID_accel);
 8000c10:	f107 0316 	add.w	r3, r7, #22
 8000c14:	461a      	mov	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f8dd 	bl	8000dd8 <BMI088_ReadAccRegister>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	4413      	add	r3, r2
 8000c26:	75fb      	strb	r3, [r7, #23]

	if (chipID_accel != 0x1E) {
 8000c28:	7dbb      	ldrb	r3, [r7, #22]
 8000c2a:	2b1e      	cmp	r3, #30
 8000c2c:	d002      	beq.n	8000c34 <BMI088_Init+0x8c>
		status+=50;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	3332      	adds	r3, #50	; 0x32
 8000c32:	75fb      	strb	r3, [r7, #23]
	}
	HAL_Delay(10);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f000 ff2f 	bl	8001a98 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000c3a:	22a8      	movs	r2, #168	; 0xa8
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f944 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f000 ff22 	bl	8001a98 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000c54:	2200      	movs	r2, #0
 8000c56:	2141      	movs	r1, #65	; 0x41
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f937 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4413      	add	r3, r2
 8000c66:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f000 ff15 	bl	8001a98 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000c6e:	220a      	movs	r2, #10
 8000c70:	2153      	movs	r1, #83	; 0x53
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f92a 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	4413      	add	r3, r2
 8000c80:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c82:	200a      	movs	r0, #10
 8000c84:	f000 ff08 	bl	8001a98 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000c88:	2204      	movs	r2, #4
 8000c8a:	2158      	movs	r1, #88	; 0x58
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 f91d 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 8000c98:	4413      	add	r3, r2
 8000c9a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f000 fefb 	bl	8001a98 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	217c      	movs	r1, #124	; 0x7c
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 f910 	bl	8000ecc <BMI088_WriteAccRegister>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f000 feee 	bl	8001a98 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	217d      	movs	r1, #125	; 0x7d
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f903 	bl	8000ecc <BMI088_WriteAccRegister>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	4413      	add	r3, r2
 8000cce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f000 fee1 	bl	8001a98 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	; (8000dd0 <BMI088_Init+0x228>)
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2292      	movs	r2, #146	; 0x92
 8000ce0:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6898      	ldr	r0, [r3, #8]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	89db      	ldrh	r3, [r3, #14]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	f001 f9b3 	bl	8002058 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000cf2:	22b6      	movs	r2, #182	; 0xb6
 8000cf4:	2114      	movs	r1, #20
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 f922 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	4413      	add	r3, r2
 8000d04:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8000d06:	20fa      	movs	r0, #250	; 0xfa
 8000d08:	f000 fec6 	bl	8001a98 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID_gyr;
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID_gyr);
 8000d0c:	f107 0315 	add.w	r3, r7, #21
 8000d10:	461a      	mov	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f89d 	bl	8000e54 <BMI088_ReadGyrRegister>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	4413      	add	r3, r2
 8000d22:	75fb      	strb	r3, [r7, #23]

	if (chipID_gyr != 0x0F) {
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d002      	beq.n	8000d30 <BMI088_Init+0x188>

		status+=70;
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 8000d2c:	3346      	adds	r3, #70	; 0x46
 8000d2e:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f000 feb1 	bl	8001a98 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8000d36:	2201      	movs	r2, #1
 8000d38:	210f      	movs	r1, #15
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f000 f900 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	4413      	add	r3, r2
 8000d48:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f000 fea4 	bl	8001a98 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8000d50:	2207      	movs	r2, #7
 8000d52:	2110      	movs	r1, #16
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f8f3 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	4413      	add	r3, r2
 8000d62:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f000 fe97 	bl	8001a98 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	2115      	movs	r1, #21
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f000 f8e6 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f000 fe8a 	bl	8001a98 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8000d84:	2201      	movs	r2, #1
 8000d86:	2116      	movs	r1, #22
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f8d9 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	4413      	add	r3, r2
 8000d96:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d98:	200a      	movs	r0, #10
 8000d9a:	f000 fe7d 	bl	8001a98 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2118      	movs	r1, #24
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f8cc 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	4413      	add	r3, r2
 8000db0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f000 fe70 	bl	8001a98 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <BMI088_Init+0x22c>)
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2282      	movs	r2, #130	; 0x82
 8000dc2:	769a      	strb	r2, [r3, #26]

	//return status;
	return chipID_accel;
 8000dc4:	7dbb      	ldrb	r3, [r7, #22]

}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	3a6b70a4 	.word	0x3a6b70a4
 8000dd4:	3a0ba058 	.word	0x3a0ba058

08000dd8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	460b      	mov	r3, r1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	753b      	strb	r3, [r7, #20]
 8000df0:	2300      	movs	r3, #0
 8000df2:	757b      	strb	r3, [r7, #21]
 8000df4:	2300      	movs	r3, #0
 8000df6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	f001 f928 	bl	8002058 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	f107 0114 	add.w	r1, r7, #20
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f003 fff6 	bl	8004e0c <HAL_SPI_TransmitReceive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	899b      	ldrh	r3, [r3, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f001 f90d 	bl	8002058 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8000e44:	7cba      	ldrb	r2, [r7, #18]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	753b      	strb	r3, [r7, #20]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	89db      	ldrh	r3, [r3, #14]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f001 f8ec 	bl	8002058 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0114 	add.w	r1, r7, #20
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f003 ffba 	bl	8004e0c <HAL_SPI_TransmitReceive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6898      	ldr	r0, [r3, #8]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	89db      	ldrh	r3, [r3, #14]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f001 f8d1 	bl	8002058 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8000ebc:	7c7a      	ldrb	r2, [r7, #17]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	733b      	strb	r3, [r7, #12]
 8000ee0:	78bb      	ldrb	r3, [r7, #2]
 8000ee2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	899b      	ldrh	r3, [r3, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 f8b2 	bl	8002058 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f00:	2202      	movs	r2, #2
 8000f02:	f003 fe0e 	bl	8004b22 <HAL_SPI_Transmit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f14:	bf00      	nop
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f998 	bl	8005250 <HAL_SPI_GetState>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1f7      	bne.n	8000f16 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6858      	ldr	r0, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	899b      	ldrh	r3, [r3, #12]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f001 f891 	bl	8002058 <HAL_GPIO_WritePin>

	return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	78bb      	ldrb	r3, [r7, #2]
 8000f56:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6898      	ldr	r0, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	89db      	ldrh	r3, [r3, #14]
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	f001 f878 	bl	8002058 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f107 010c 	add.w	r1, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f74:	2202      	movs	r2, #2
 8000f76:	f003 fdd4 	bl	8004b22 <HAL_SPI_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f88:	bf00      	nop
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 f95e 	bl	8005250 <HAL_SPI_GetState>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d1f7      	bne.n	8000f8a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6898      	ldr	r0, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	89db      	ldrh	r3, [r3, #14]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 f857 	bl	8002058 <HAL_GPIO_WritePin>

	return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8000fbc:	4a36      	ldr	r2, [pc, #216]	; (8001098 <BMI088_ReadAccelerometer+0xe4>)
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6858      	ldr	r0, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	899b      	ldrh	r3, [r3, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f001 f83f 	bl	8002058 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f107 0208 	add.w	r2, r7, #8
 8000fe2:	f107 0110 	add.w	r1, r7, #16
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2308      	movs	r3, #8
 8000fee:	f003 ff0d 	bl	8004e0c <HAL_SPI_TransmitReceive>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6858      	ldr	r0, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	899b      	ldrh	r3, [r3, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	f001 f824 	bl	8002058 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001040:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001078:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 800108e:	7ffb      	ldrb	r3, [r7, #31]

}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	0800c3b8 	.word	0x0800c3b8

0800109c <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80010a4:	4a38      	ldr	r2, [pc, #224]	; (8001188 <BMI088_ReadGyroscope+0xec>)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	8019      	strh	r1, [r3, #0]
 80010b4:	3302      	adds	r3, #2
 80010b6:	0c0a      	lsrs	r2, r1, #16
 80010b8:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6898      	ldr	r0, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f000 ffc7 	bl	8002058 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f107 0208 	add.w	r2, r7, #8
 80010d2:	f107 0110 	add.w	r1, r7, #16
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2307      	movs	r3, #7
 80010de:	f003 fe95 	bl	8004e0c <HAL_SPI_TransmitReceive>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6898      	ldr	r0, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	89db      	ldrh	r3, [r3, #14]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	f000 ffac 	bl	8002058 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	7a7b      	ldrb	r3, [r7, #9]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001130:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800114c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001168:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	return status;
 800117e:	7ffb      	ldrb	r3, [r7, #31]

}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800c3c0 	.word	0x0800c3c0

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f000 fc0b 	bl	80019ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f888 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f000 f952 	bl	8001444 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011a0:	f000 f8d4 	bl	800134c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011a4:	f007 fc1a 	bl	80089dc <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 80011a8:	f000 f90e 	bl	80013c8 <MX_SPI3_Init>


  	/* devices that use hspi1 */

  	/* Initialize BMI088 */
  	uint8_t bmi_status = BMI088_Init(&bmi088, &hspi1, BMI088_Accel_NCS_GPIO_Port, BMI088_Accel_NCS_Pin, BMI088_Gyro_NCS_GPIO_Port, BMI088_Gyro_NCS_Pin);
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <main+0x104>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	4a35      	ldr	r2, [pc, #212]	; (8001290 <main+0x104>)
 80011ba:	4936      	ldr	r1, [pc, #216]	; (8001294 <main+0x108>)
 80011bc:	4836      	ldr	r0, [pc, #216]	; (8001298 <main+0x10c>)
 80011be:	f7ff fcf3 	bl	8000ba8 <BMI088_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "%i\n", bmi_status));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4934      	ldr	r1, [pc, #208]	; (800129c <main+0x110>)
 80011cc:	4834      	ldr	r0, [pc, #208]	; (80012a0 <main+0x114>)
 80011ce:	f008 fec7 	bl	8009f60 <siprintf>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	4831      	ldr	r0, [pc, #196]	; (80012a0 <main+0x114>)
 80011da:	f007 fcbd 	bl	8008b58 <CDC_Transmit_FS>
  while (1)
  {
	uint8_t status;

	//devices using hspi1
	status = BMI088_ReadAccelerometer(&bmi088);
 80011de:	482e      	ldr	r0, [pc, #184]	; (8001298 <main+0x10c>)
 80011e0:	f7ff fee8 	bl	8000fb4 <BMI088_ReadAccelerometer>
 80011e4:	4603      	mov	r3, r0
 80011e6:	71bb      	strb	r3, [r7, #6]

	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "m/s^2: x: %.3f   y: %.3f   z: %.3f\n",
			bmi088.acc_mps2[0],bmi088.acc_mps2[1],bmi088.acc_mps2[2]));
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <main+0x10c>)
 80011ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "m/s^2: x: %.3f   y: %.3f   z: %.3f\n",
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	4680      	mov	r8, r0
 80011f4:	4689      	mov	r9, r1
			bmi088.acc_mps2[0],bmi088.acc_mps2[1],bmi088.acc_mps2[2]));
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <main+0x10c>)
 80011f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "m/s^2: x: %.3f   y: %.3f   z: %.3f\n",
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
			bmi088.acc_mps2[0],bmi088.acc_mps2[1],bmi088.acc_mps2[2]));
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <main+0x10c>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "m/s^2: x: %.3f   y: %.3f   z: %.3f\n",
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001216:	e9cd 4500 	strd	r4, r5, [sp]
 800121a:	4642      	mov	r2, r8
 800121c:	464b      	mov	r3, r9
 800121e:	4921      	ldr	r1, [pc, #132]	; (80012a4 <main+0x118>)
 8001220:	481f      	ldr	r0, [pc, #124]	; (80012a0 <main+0x114>)
 8001222:	f008 fe9d 	bl	8009f60 <siprintf>
 8001226:	4603      	mov	r3, r0
 8001228:	b29b      	uxth	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	481c      	ldr	r0, [pc, #112]	; (80012a0 <main+0x114>)
 800122e:	f007 fc93 	bl	8008b58 <CDC_Transmit_FS>

	status = BMI088_ReadGyroscope(&bmi088);
 8001232:	4819      	ldr	r0, [pc, #100]	; (8001298 <main+0x10c>)
 8001234:	f7ff ff32 	bl	800109c <BMI088_ReadGyroscope>
 8001238:	4603      	mov	r3, r0
 800123a:	71bb      	strb	r3, [r7, #6]

	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "rad/sec: x: %.3f   y: %.3f   z: %.3f\n",
			bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <main+0x10c>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "rad/sec: x: %.3f   y: %.3f   z: %.3f\n",
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4680      	mov	r8, r0
 8001248:	4689      	mov	r9, r1
			bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <main+0x10c>)
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "rad/sec: x: %.3f   y: %.3f   z: %.3f\n",
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	4604      	mov	r4, r0
 8001256:	460d      	mov	r5, r1
			bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <main+0x10c>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	CDC_Transmit_FS(buffer, sprintf((char *)buffer, "rad/sec: x: %.3f   y: %.3f   z: %.3f\n",
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800126a:	e9cd 4500 	strd	r4, r5, [sp]
 800126e:	4642      	mov	r2, r8
 8001270:	464b      	mov	r3, r9
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <main+0x11c>)
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <main+0x114>)
 8001276:	f008 fe73 	bl	8009f60 <siprintf>
 800127a:	4603      	mov	r3, r0
 800127c:	b29b      	uxth	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <main+0x114>)
 8001282:	f007 fc69 	bl	8008b58 <CDC_Transmit_FS>


	//devices using hspi3
	//status = LIS3MDL_Read(&lis3mdl);

	HAL_Delay(1000);
 8001286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128a:	f000 fc05 	bl	8001a98 <HAL_Delay>
  {
 800128e:	e7a6      	b.n	80011de <main+0x52>
 8001290:	48000400 	.word	0x48000400
 8001294:	200002f0 	.word	0x200002f0
 8001298:	200003f8 	.word	0x200003f8
 800129c:	0800c3c8 	.word	0x0800c3c8
 80012a0:	200003b8 	.word	0x200003b8
 80012a4:	0800c3cc 	.word	0x0800c3cc
 80012a8:	0800c3f0 	.word	0x0800c3f0

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b096      	sub	sp, #88	; 0x58
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2244      	movs	r2, #68	; 0x44
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f008 ff32 	bl	800a124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d2:	f002 f88f 	bl	80033f4 <HAL_PWREx_ControlVoltageScaling>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012dc:	f000 f98c 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	2303      	movs	r3, #3
 80012f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012f6:	230a      	movs	r3, #10
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012fa:	2307      	movs	r3, #7
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012fe:	2302      	movs	r3, #2
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001302:	2302      	movs	r3, #2
 8001304:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4618      	mov	r0, r3
 800130c:	f002 f8d8 	bl	80034c0 <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001316:	f000 f96f 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	2303      	movs	r3, #3
 8001320:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	2104      	movs	r1, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fca0 	bl	8003c78 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800133e:	f000 f95b 	bl	80015f8 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3758      	adds	r7, #88	; 0x58
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_SPI1_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800135c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001366:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800136a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_SPI1_Init+0x74>)
 800136e:	2202      	movs	r2, #2
 8001370:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_SPI1_Init+0x74>)
 800137a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001382:	2220      	movs	r2, #32
 8001384:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_SPI1_Init+0x74>)
 800139a:	2207      	movs	r2, #7
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_SPI1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_SPI1_Init+0x74>)
 80013ac:	f003 fb16 	bl	80049dc <HAL_SPI_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 f91f 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002f0 	.word	0x200002f0
 80013c4:	40013000 	.word	0x40013000

080013c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_SPI3_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <MX_SPI3_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_SPI3_Init+0x74>)
 80013d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_SPI3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI3_Init+0x74>)
 80013e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI3_Init+0x74>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_SPI3_Init+0x74>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI3_Init+0x74>)
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI3_Init+0x74>)
 80013fe:	2220      	movs	r2, #32
 8001400:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI3_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI3_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_SPI3_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI3_Init+0x74>)
 8001416:	2207      	movs	r2, #7
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_SPI3_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_SPI3_Init+0x74>)
 8001428:	f003 fad8 	bl	80049dc <HAL_SPI_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 f8e1 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000354 	.word	0x20000354
 8001440:	40003c00 	.word	0x40003c00

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a62      	ldr	r2, [pc, #392]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a5c      	ldr	r2, [pc, #368]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b4e      	ldr	r3, [pc, #312]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <MX_GPIO_Init+0x1a4>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|BMI088_Gyro_Int_Pin
 80014ea:	2200      	movs	r2, #0
 80014ec:	f24c 1144 	movw	r1, #49476	; 0xc144
 80014f0:	483e      	ldr	r0, [pc, #248]	; (80015ec <MX_GPIO_Init+0x1a8>)
 80014f2:	f000 fdb1 	bl	8002058 <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin|Pyro_E_Trigger_Pin
 80014f6:	2200      	movs	r2, #0
 80014f8:	f243 3181 	movw	r1, #13185	; 0x3381
 80014fc:	483c      	ldr	r0, [pc, #240]	; (80015f0 <MX_GPIO_Init+0x1ac>)
 80014fe:	f000 fdab 	bl	8002058 <HAL_GPIO_WritePin>
                          |Pyro_F_Trigger_Pin|BMP388_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8001502:	2200      	movs	r2, #0
 8001504:	f647 4104 	movw	r1, #31748	; 0x7c04
 8001508:	483a      	ldr	r0, [pc, #232]	; (80015f4 <MX_GPIO_Init+0x1b0>)
 800150a:	f000 fda5 	bl	8002058 <HAL_GPIO_WritePin>
                          |Status_LED_Pin|KX134_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS3MDL_NCS_GPIO_Port, LIS3MDL_NCS_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f000 fd9e 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pyro_A_Trigger_Pin Continuity_LED_D_Pin Continuity_LED_C_Pin BMI088_Gyro_Int_Pin
                           BMI088_Gyro_NCS_Pin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|BMI088_Gyro_Int_Pin
 800151c:	f24c 1344 	movw	r3, #49476	; 0xc144
 8001520:	61fb      	str	r3, [r7, #28]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <MX_GPIO_Init+0x1a8>)
 8001536:	f000 fbe5 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pyro_B_Trigger_Pin Pyro_C_Trigger_Pin Pyro_D_Trigger_Pin Pyro_E_Trigger_Pin
                           Pyro_F_Trigger_Pin BMP388_NCS_Pin */
  GPIO_InitStruct.Pin = Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin|Pyro_E_Trigger_Pin
 800153a:	f243 3381 	movw	r3, #13185	; 0x3381
 800153e:	61fb      	str	r3, [r7, #28]
                          |Pyro_F_Trigger_Pin|BMP388_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4827      	ldr	r0, [pc, #156]	; (80015f0 <MX_GPIO_Init+0x1ac>)
 8001554:	f000 fbd6 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Continuity_LED_B_Pin Continuity_LED_A_Pin Continuity_LED_E_Pin Continuity_LED_F_Pin
                           Status_LED_Pin KX134_NCS_Pin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8001558:	f647 4304 	movw	r3, #31748	; 0x7c04
 800155c:	61fb      	str	r3, [r7, #28]
                          |Status_LED_Pin|KX134_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4820      	ldr	r0, [pc, #128]	; (80015f4 <MX_GPIO_Init+0x1b0>)
 8001572:	f000 fbc7 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS3MDL_NCS_Pin */
  GPIO_InitStruct.Pin = LIS3MDL_NCS_Pin;
 8001576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LIS3MDL_NCS_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f000 fbb7 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS3MDL_Int_Pin KX134_Int_Pin */
  GPIO_InitStruct.Pin = LIS3MDL_Int_Pin|KX134_Int_Pin;
 8001596:	2303      	movs	r3, #3
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_GPIO_Init+0x1b0>)
 80015aa:	f000 fbab 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI088_Accel_NCS_Pin BMI088_Accel_Int_Pin */
  GPIO_InitStruct.Pin = BMI088_Accel_NCS_Pin|BMI088_Accel_Int_Pin;
 80015ae:	f44f 7320 	mov.w	r3, #640	; 0x280
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <MX_GPIO_Init+0x1a8>)
 80015c4:	f000 fb9e 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP388_Int_Pin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BMP388_Int_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_GPIO_Init+0x1ac>)
 80015dc:	f000 fb92 	bl	8001d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48001000 	.word	0x48001000
 80015f4:	48000c00 	.word	0x48000c00

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2104      	movs	r1, #4
 8001604:	4801      	ldr	r0, [pc, #4]	; (800160c <Error_Handler+0x14>)
 8001606:	f000 fd27 	bl	8002058 <HAL_GPIO_WritePin>
  while (1)
 800160a:	e7fe      	b.n	800160a <Error_Handler+0x12>
 800160c:	48000400 	.word	0x48000400

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_MspInit+0x44>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6613      	str	r3, [r2, #96]	; 0x60
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_MspInit+0x44>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_MspInit+0x44>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6593      	str	r3, [r2, #88]	; 0x58
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_MspInit+0x44>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000

08001658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_SPI_MspInit+0xd8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d128      	bne.n	80016cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 8001680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001684:	6613      	str	r3, [r2, #96]	; 0x60
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016aa:	2338      	movs	r3, #56	; 0x38
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ba:	2305      	movs	r3, #5
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	481c      	ldr	r0, [pc, #112]	; (8001738 <HAL_SPI_MspInit+0xe0>)
 80016c6:	f000 fb1d 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016ca:	e02d      	b.n	8001728 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_SPI_MspInit+0xe4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d128      	bne.n	8001728 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_SPI_MspInit+0xdc>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001706:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001718:	2306      	movs	r3, #6
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <HAL_SPI_MspInit+0xe8>)
 8001724:	f000 faee 	bl	8001d04 <HAL_GPIO_Init>
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013000 	.word	0x40013000
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400
 800173c:	40003c00 	.word	0x40003c00
 8001740:	48000800 	.word	0x48000800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 f962 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <OTG_FS_IRQHandler+0x10>)
 800179e:	f000 fdc6 	bl	800232e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001930 	.word	0x20001930

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c6:	f008 fcb9 	bl	800a13c <__errno>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2216      	movs	r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
  return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_exit>:

void _exit (int status)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffe7 	bl	80017bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ee:	e7fe      	b.n	80017ee <_exit+0x12>

080017f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e00a      	b.n	8001818 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001802:	f3af 8000 	nop.w
 8001806:	4601      	mov	r1, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	b2ca      	uxtb	r2, r1
 8001810:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf0      	blt.n	8001802 <_read+0x12>
  }

  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e009      	b.n	8001850 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf1      	blt.n	800183c <_write+0x12>
  }
  return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_close>:

int _close(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	605a      	str	r2, [r3, #4]
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f008 fc1e 	bl	800a13c <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20018000 	.word	0x20018000
 800192c:	00000800 	.word	0x00000800
 8001930:	20000448 	.word	0x20000448
 8001934:	200021a8 	.word	0x200021a8

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001960:	f7ff ffea 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <LoopForever+0x6>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	; (800199c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <LoopForever+0xe>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <LoopForever+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f008 fbdd 	bl	800a148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198e:	f7ff fbfd 	bl	800118c <main>

08001992 <LoopForever>:

LoopForever:
    b LoopForever
 8001992:	e7fe      	b.n	8001992 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001994:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80019a0:	0800c81c 	.word	0x0800c81c
  ldr r2, =_sbss
 80019a4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80019a8:	200021a8 	.word	0x200021a8

080019ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>

080019ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f961 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f80e 	bl	80019e0 <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e001      	b.n	80019d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d0:	f7ff fe1e 	bl	8001610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_InitTick+0x70>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_InitTick+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f96d 	bl	8001cea <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d809      	bhi.n	8001a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a24:	f000 f937 	bl	8001c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_InitTick+0x74>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e004      	b.n	8001a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e001      	b.n	8001a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	2000044c 	.word	0x2000044c

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000044c 	.word	0x2000044c

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e17f      	b.n	8002014 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8171 	beq.w	800200e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <HAL_GPIO_Init+0x40>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d130      	bne.n	8001da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0201 	and.w	r2, r3, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d118      	bne.n	8001de4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	6939      	ldr	r1, [r7, #16]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80ac 	beq.w	800200e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	4a5e      	ldr	r2, [pc, #376]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ece:	4a5a      	ldr	r2, [pc, #360]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef8:	d025      	beq.n	8001f46 <HAL_GPIO_Init+0x242>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x338>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01f      	beq.n	8001f42 <HAL_GPIO_Init+0x23e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_GPIO_Init+0x33c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d019      	beq.n	8001f3e <HAL_GPIO_Init+0x23a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_GPIO_Init+0x340>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0x236>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_GPIO_Init+0x344>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00d      	beq.n	8001f36 <HAL_GPIO_Init+0x232>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_GPIO_Init+0x348>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x22e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4a      	ldr	r2, [pc, #296]	; (8002050 <HAL_GPIO_Init+0x34c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_GPIO_Init+0x22a>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e00c      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e00a      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x244>
 8001f46:	2300      	movs	r3, #0
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f58:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f66:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8a:	4a32      	ldr	r2, [pc, #200]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_GPIO_Init+0x350>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002008:	4a12      	ldr	r2, [pc, #72]	; (8002054 <HAL_GPIO_Init+0x350>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	f47f ae78 	bne.w	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	48000400 	.word	0x48000400
 8002040:	48000800 	.word	0x48000800
 8002044:	48000c00 	.word	0x48000c00
 8002048:	48001000 	.word	0x48001000
 800204c:	48001400 	.word	0x48001400
 8002050:	48001800 	.word	0x48001800
 8002054:	40010400 	.word	0x40010400

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002074:	e002      	b.n	800207c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	b08f      	sub	sp, #60	; 0x3c
 800208c:	af0a      	add	r7, sp, #40	; 0x28
 800208e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e116      	b.n	80022c8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f006 fea9 	bl	8008e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2203      	movs	r2, #3
 80020be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fb04 	bl	80056e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	687e      	ldr	r6, [r7, #4]
 80020e6:	466d      	mov	r5, sp
 80020e8:	f106 0410 	add.w	r4, r6, #16
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fc:	1d33      	adds	r3, r6, #4
 80020fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	f003 fa17 	bl	8005534 <USB_CoreInit>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0d7      	b.n	80022c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f003 faf2 	bl	8005708 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e04a      	b.n	80021c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	333d      	adds	r3, #61	; 0x3d
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	333c      	adds	r3, #60	; 0x3c
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	b298      	uxth	r0, r3
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3356      	adds	r3, #86	; 0x56
 8002166:	4602      	mov	r2, r0
 8002168:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3340      	adds	r3, #64	; 0x40
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3344      	adds	r3, #68	; 0x44
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3348      	adds	r3, #72	; 0x48
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334c      	adds	r3, #76	; 0x4c
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	3301      	adds	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3af      	bcc.n	800212a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e044      	b.n	800225a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	3301      	adds	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d3b5      	bcc.n	80021d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	687e      	ldr	r6, [r7, #4]
 800226c:	466d      	mov	r5, sp
 800226e:	f106 0410 	add.w	r4, r6, #16
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002282:	1d33      	adds	r3, r6, #4
 8002284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f003 fa8a 	bl	80057a0 <USB_DevInit>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e014      	b.n	80022c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d102      	bne.n	80022bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f001 f86a 	bl	8003390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 fa38 	bl	8006736 <USB_DevDisconnect>

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_PCD_Start+0x1c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e01c      	b.n	8002326 <HAL_PCD_Start+0x56>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 f9d9 	bl	80056c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f004 f9ec 	bl	80066f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800232e:	b590      	push	{r4, r7, lr}
 8002330:	b08d      	sub	sp, #52	; 0x34
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 faaa 	bl	800689e <USB_GetMode>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 847e 	bne.w	8002c4e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f004 fa0e 	bl	8006778 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8474 	beq.w	8002c4c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f9fb 	bl	8006778 <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b02      	cmp	r3, #2
 800238a:	d107      	bne.n	800239c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f002 0202 	and.w	r2, r2, #2
 800239a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f9e9 	bl	8006778 <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d161      	bne.n	8002474 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0210 	bic.w	r2, r2, #16
 80023be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	0c5b      	lsrs	r3, r3, #17
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d124      	bne.n	8002436 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d035      	beq.n	8002464 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6a38      	ldr	r0, [r7, #32]
 800240c:	f004 f820 	bl	8006450 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241c:	441a      	add	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800242e:	441a      	add	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	e016      	b.n	8002464 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	0c5b      	lsrs	r3, r3, #17
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	2b06      	cmp	r3, #6
 8002440:	d110      	bne.n	8002464 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002448:	2208      	movs	r2, #8
 800244a:	4619      	mov	r1, r3
 800244c:	6a38      	ldr	r0, [r7, #32]
 800244e:	f003 ffff 	bl	8006450 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245e:	441a      	add	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0210 	orr.w	r2, r2, #16
 8002472:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f97d 	bl	8006778 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002484:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002488:	f040 80a7 	bne.w	80025da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 f982 	bl	800679e <USB_ReadDevAllOutEpInterrupt>
 800249a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800249c:	e099      	b.n	80025d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 808e 	beq.w	80025c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f9a6 	bl	8006806 <USB_ReadDevOutEPInterrupt>
 80024ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d2:	461a      	mov	r2, r3
 80024d4:	2301      	movs	r3, #1
 80024d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fe7e 	bl	80031dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f6:	461a      	mov	r2, r3
 80024f8:	2308      	movs	r3, #8
 80024fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 feba 	bl	8003278 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	461a      	mov	r2, r3
 800251c:	2310      	movs	r3, #16
 800251e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d030      	beq.n	800258c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d109      	bne.n	800254a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002548:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	78db      	ldrb	r3, [r3, #3]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d108      	bne.n	800257a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2200      	movs	r2, #0
 800256c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f006 fd9d 	bl	80090b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	2302      	movs	r3, #2
 800258a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	461a      	mov	r2, r3
 80025a4:	2320      	movs	r3, #32
 80025a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f af62 	bne.w	800249e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 f8ca 	bl	8006778 <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ee:	f040 80a4 	bne.w	800273a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f8eb 	bl	80067d2 <USB_ReadDevAllInEpInterrupt>
 80025fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002602:	e096      	b.n	8002732 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 808b 	beq.w	8002726 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f004 f911 	bl	8006842 <USB_ReadDevInEPInterrupt>
 8002620:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	2201      	movs	r2, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	69f9      	ldr	r1, [r7, #28]
 8002648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800264c:	4013      	ands	r3, r2
 800264e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265c:	461a      	mov	r2, r3
 800265e:	2301      	movs	r3, #1
 8002660:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f006 fc8e 	bl	8008f8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002684:	461a      	mov	r2, r3
 8002686:	2308      	movs	r3, #8
 8002688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	2310      	movs	r3, #16
 80026a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	6a38      	ldr	r0, [r7, #32]
 80026d0:	f003 f9a8 	bl	8005a24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3338      	adds	r3, #56	; 0x38
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	78db      	ldrb	r3, [r3, #3]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d108      	bne.n	8002702 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f006 fceb 	bl	80090d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270e:	461a      	mov	r2, r3
 8002710:	2302      	movs	r3, #2
 8002712:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800271e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fcd2 	bl	80030ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f af65 	bne.w	8002604 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 f81a 	bl	8006778 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274e:	d122      	bne.n	8002796 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002776:	2100      	movs	r1, #0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f006 ff1f 	bl	80095bc <HAL_PCDEx_LPM_Callback>
 800277e:	e002      	b.n	8002786 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f006 fc6f 	bl	8009064 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 ffec 	bl	8006778 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027aa:	d112      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f006 fc2b 	bl	8009018 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 ffce 	bl	8006778 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e6:	d121      	bne.n	800282c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80027f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d111      	bne.n	8002826 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800281c:	2101      	movs	r1, #1
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f006 fecc 	bl	80095bc <HAL_PCDEx_LPM_Callback>
 8002824:	e002      	b.n	800282c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 fbf6 	bl	8009018 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 ffa1 	bl	8006778 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	f040 80b5 	bne.w	80029ae <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2110      	movs	r1, #16
 800285e:	4618      	mov	r0, r3
 8002860:	f003 f8e0 	bl	8005a24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002868:	e046      	b.n	80028f8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002876:	461a      	mov	r2, r3
 8002878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800287c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	440a      	add	r2, r1
 8002894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800289c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028aa:	461a      	mov	r2, r3
 80028ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c2:	0151      	lsls	r1, r2, #5
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	440a      	add	r2, r1
 80028c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e2:	0151      	lsls	r1, r2, #5
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	440a      	add	r2, r1
 80028e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	3301      	adds	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3b3      	bcc.n	800286a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002910:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002914:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292e:	f043 030b 	orr.w	r3, r3, #11
 8002932:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002944:	f043 030b 	orr.w	r3, r3, #11
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	e015      	b.n	8002978 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800295e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002962:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002972:	f043 030b 	orr.w	r3, r3, #11
 8002976:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002986:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800298a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f003 ffb1 	bl	8006900 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fee0 	bl	8006778 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	d124      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 ff76 	bl	80068ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 f8a3 	bl	8005b1e <USB_GetDevSpeed>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681c      	ldr	r4, [r3, #0]
 80029e4:	f001 fad2 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 80029e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	4620      	mov	r0, r4
 80029f4:	f002 fdca 	bl	800558c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f006 faee 	bl	8008fda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 feb0 	bl	8006778 <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d10a      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f006 facb 	bl	8008fbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 0208 	and.w	r2, r2, #8
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fe9b 	bl	8006778 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d122      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	e014      	b.n	8002a88 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d105      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 faf3 	bl	8003068 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	3301      	adds	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3e5      	bcc.n	8002a5e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fe6e 	bl	8006778 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa6:	d13b      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e02b      	b.n	8002b06 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3340      	adds	r3, #64	; 0x40
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d115      	bne.n	8002b00 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ad4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da12      	bge.n	8002b00 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	333f      	adds	r3, #63	; 0x3f
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fab4 	bl	8003068 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	3301      	adds	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3ce      	bcc.n	8002aae <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fe27 	bl	8006778 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b34:	d155      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b36:	2301      	movs	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e045      	b.n	8002bc8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d12e      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	da2b      	bge.n	8002bc2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d121      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bbe:	6053      	str	r3, [r2, #4]
            break;
 8002bc0:	e007      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d3b4      	bcc.n	8002b3c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fdc6 	bl	8006778 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf6:	d10a      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f006 fa7f 	bl	80090fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fdb0 	bl	8006778 <USB_ReadInterrupts>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d115      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f006 fa6f 	bl	8009118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e000      	b.n	8002c4e <HAL_PCD_IRQHandler+0x920>
      return;
 8002c4c:	bf00      	nop
    }
  }
}
 8002c4e:	3734      	adds	r7, #52	; 0x34
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_PCD_SetAddress+0x1a>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e013      	b.n	8002c96 <HAL_PCD_SetAddress+0x42>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fd0e 	bl	80066a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	4611      	mov	r1, r2
 8002caa:	461a      	mov	r2, r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	70fb      	strb	r3, [r7, #3]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	803b      	strh	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da0f      	bge.n	8002ce4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	3338      	adds	r3, #56	; 0x38
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	705a      	strb	r2, [r3, #1]
 8002ce2:	e00f      	b.n	8002d04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d10:	883a      	ldrh	r2, [r7, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	78ba      	ldrb	r2, [r7, #2]
 8002d1a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d2e:	78bb      	ldrb	r3, [r7, #2]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d102      	bne.n	8002d3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_EP_Open+0xaa>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e00e      	b.n	8002d66 <HAL_PCD_EP_Open+0xc8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 ff00 	bl	8005b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d64:	7afb      	ldrb	r3, [r7, #11]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0f      	bge.n	8002da2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	705a      	strb	r2, [r3, #1]
 8002da0:	e00f      	b.n	8002dc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	3304      	adds	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_PCD_EP_Close+0x6e>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e00e      	b.n	8002dfa <HAL_PCD_EP_Close+0x8c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 ff3e 	bl	8005c6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e44:	7afb      	ldrb	r3, [r7, #11]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 ffe4 	bl	8005e24 <USB_EPStartXfer>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002e88:	681b      	ldr	r3, [r3, #0]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	3338      	adds	r3, #56	; 0x38
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3304      	adds	r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 ff9b 	bl	8005e24 <USB_EPStartXfer>

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 020f 	and.w	r2, r3, #15
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d901      	bls.n	8002f16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e04e      	b.n	8002fb4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da0f      	bge.n	8002f3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	3338      	adds	r3, #56	; 0x38
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	3304      	adds	r3, #4
 8002f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	705a      	strb	r2, [r3, #1]
 8002f3c:	e00d      	b.n	8002f5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_PCD_EP_SetStall+0x82>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e01c      	b.n	8002fb4 <HAL_PCD_EP_SetStall+0xbc>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fab9 	bl	8006500 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f003 fcab 	bl	8006900 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d901      	bls.n	8002fda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e042      	b.n	8003060 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da0f      	bge.n	8003002 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	3338      	adds	r3, #56	; 0x38
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	705a      	strb	r2, [r3, #1]
 8003000:	e00f      	b.n	8003022 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_PCD_EP_ClrStall+0x86>
 800303e:	2302      	movs	r3, #2
 8003040:	e00e      	b.n	8003060 <HAL_PCD_EP_ClrStall+0xa4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fac3 	bl	80065dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da0c      	bge.n	8003096 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	3338      	adds	r3, #56	; 0x38
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	3304      	adds	r3, #4
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e00c      	b.n	80030b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68f9      	ldr	r1, [r7, #12]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 f8e6 	bl	8006288 <USB_EPStopXfer>
 80030bc:	4603      	mov	r3, r0
 80030be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030c0:	7afb      	ldrb	r3, [r7, #11]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b088      	sub	sp, #32
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3338      	adds	r3, #56	; 0x38
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d901      	bls.n	8003102 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e067      	b.n	80031d2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	d902      	bls.n	800311e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3303      	adds	r3, #3
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003126:	e026      	b.n	8003176 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	429a      	cmp	r2, r3
 800313c:	d902      	bls.n	8003144 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	3303      	adds	r3, #3
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68d9      	ldr	r1, [r3, #12]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	b29b      	uxth	r3, r3
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f003 f93f 	bl	80063dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	441a      	add	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d809      	bhi.n	80031a0 <PCD_WriteEmptyTxFifo+0xd6>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003194:	429a      	cmp	r2, r3
 8003196:	d203      	bcs.n	80031a0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1c3      	bne.n	8003128 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d811      	bhi.n	80031d0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	2201      	movs	r2, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	6939      	ldr	r1, [r7, #16]
 80031c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031cc:	4013      	ands	r3, r2
 80031ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	333c      	adds	r3, #60	; 0x3c
 80031f4:	3304      	adds	r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <PCD_EP_OutXfrComplete_int+0x98>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d124      	bne.n	800325c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e01a      	b.n	8003268 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2320      	movs	r3, #32
 800324c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f005 fe7d 	bl	8008f54 <HAL_PCD_DataOutStageCallback>
 800325a:	e005      	b.n	8003268 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f005 fe76 	bl	8008f54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	4f54310a 	.word	0x4f54310a

08003278 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	333c      	adds	r3, #60	; 0x3c
 8003290:	3304      	adds	r3, #4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <PCD_EP_OutSetupPacket_int+0x64>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d90e      	bls.n	80032cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f005 fe2f 	bl	8008f30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	4f54300a 	.word	0x4f54300a

080032e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
 80032ec:	4613      	mov	r3, r2
 80032ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	0419      	lsls	r1, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	430a      	orrs	r2, r1
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e028      	b.n	8003360 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e00d      	b.n	800333e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	3b01      	subs	r3, #1
 8003344:	429a      	cmp	r2, r3
 8003346:	d3ec      	bcc.n	8003322 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003348:	883b      	ldrh	r3, [r7, #0]
 800334a:	0418      	lsls	r0, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4302      	orrs	r2, r0
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	f043 0303 	orr.w	r3, r3, #3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40007000 	.word	0x40007000

080033f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003402:	d130      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800340c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003410:	d038      	beq.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2232      	movs	r2, #50	; 0x32
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	0c9b      	lsrs	r3, r3, #18
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003438:	e002      	b.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344c:	d102      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f2      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003460:	d110      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e00f      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d007      	beq.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003474:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347c:	4a05      	ldr	r2, [pc, #20]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40007000 	.word	0x40007000
 8003498:	20000000 	.word	0x20000000
 800349c:	431bde83 	.word	0x431bde83

080034a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80034aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ae:	6053      	str	r3, [r2, #4]
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40007000 	.word	0x40007000

080034c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e3ca      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d2:	4b97      	ldr	r3, [pc, #604]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034dc:	4b94      	ldr	r3, [pc, #592]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80e4 	beq.w	80036bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_RCC_OscConfig+0x4a>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	f040 808b 	bne.w	8003618 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	f040 8087 	bne.w	8003618 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800350a:	4b89      	ldr	r3, [pc, #548]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e3a2      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1a      	ldr	r2, [r3, #32]
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_RCC_OscConfig+0x7c>
 8003532:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353a:	e005      	b.n	8003548 <HAL_RCC_OscConfig+0x88>
 800353c:	4b7c      	ldr	r3, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003548:	4293      	cmp	r3, r2
 800354a:	d223      	bcs.n	8003594 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fd27 	bl	8003fa4 <RCC_SetFlashLatencyFromMSIRange>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e383      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003560:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a72      	ldr	r2, [pc, #456]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	496d      	ldr	r1, [pc, #436]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357e:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	4968      	ldr	r1, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
 8003592:	e025      	b.n	80035e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800359a:	f043 0308 	orr.w	r3, r3, #8
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4960      	ldr	r1, [pc, #384]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	495b      	ldr	r1, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fce7 	bl	8003fa4 <RCC_SetFlashLatencyFromMSIRange>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e343      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e0:	f000 fc4a 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b52      	ldr	r3, [pc, #328]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	4950      	ldr	r1, [pc, #320]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_RCC_OscConfig+0x278>)
 80035fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003600:	4b4e      	ldr	r3, [pc, #312]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f9eb 	bl	80019e0 <HAL_InitTick>
 800360a:	4603      	mov	r3, r0
 800360c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d052      	beq.n	80036ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	e327      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d032      	beq.n	8003686 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a42      	ldr	r2, [pc, #264]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800362c:	f7fe fa28 	bl	8001a80 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003634:	f7fe fa24 	bl	8001a80 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e310      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003652:	4b37      	ldr	r3, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a36      	ldr	r2, [pc, #216]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4931      	ldr	r1, [pc, #196]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003670:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	492c      	ldr	r1, [pc, #176]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
 8003684:	e01a      	b.n	80036bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a29      	ldr	r2, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003692:	f7fe f9f5 	bl	8001a80 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800369a:	f7fe f9f1 	bl	8001a80 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e2dd      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCC_OscConfig+0x1da>
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d074      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x21a>
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d10e      	bne.n	80036f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d064      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2f0>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d160      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e2ba      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x24a>
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e026      	b.n	8003758 <HAL_RCC_OscConfig+0x298>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003712:	d115      	bne.n	8003740 <HAL_RCC_OscConfig+0x280>
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a05      	ldr	r2, [pc, #20]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 800371a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a02      	ldr	r2, [pc, #8]	; (8003730 <HAL_RCC_OscConfig+0x270>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e014      	b.n	8003758 <HAL_RCC_OscConfig+0x298>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	0800c460 	.word	0x0800c460
 8003738:	20000000 	.word	0x20000000
 800373c:	20000004 	.word	0x20000004
 8003740:	4ba0      	ldr	r3, [pc, #640]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a9f      	ldr	r2, [pc, #636]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a9c      	ldr	r2, [pc, #624]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe f98e 	bl	8001a80 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7fe f98a 	bl	8001a80 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e276      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377a:	4b92      	ldr	r3, [pc, #584]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x2a8>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe f97a 	bl	8001a80 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe f976 	bl	8001a80 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e262      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037a2:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x2d0>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d060      	beq.n	8003880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x310>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d116      	bne.n	80037fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d0:	4b7c      	ldr	r3, [pc, #496]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_OscConfig+0x328>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e23f      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	4973      	ldr	r1, [pc, #460]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fc:	e040      	b.n	8003880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003806:	4b6f      	ldr	r3, [pc, #444]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6e      	ldr	r2, [pc, #440]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800380c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fe f935 	bl	8001a80 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fe f931 	bl	8001a80 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e21d      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382c:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	495f      	ldr	r1, [pc, #380]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	e018      	b.n	8003880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384e:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe f911 	bl	8001a80 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe f90d 	bl	8001a80 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1f9      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d03c      	beq.n	8003906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fe f8ec 	bl	8001a80 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fe f8e8 	bl	8001a80 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1d4      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <HAL_RCC_OscConfig+0x3ec>
 80038cc:	e01b      	b.n	8003906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d4:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fe f8cf 	bl	8001a80 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fe f8cb 	bl	8001a80 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1b7      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ef      	bne.n	80038e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80a6 	beq.w	8003a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	; 0x58
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x508>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d118      	bne.n	800397e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800394c:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <HAL_RCC_OscConfig+0x508>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x508>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003958:	f7fe f892 	bl	8001a80 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003960:	f7fe f88e 	bl	8001a80 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e17a      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_RCC_OscConfig+0x508>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d108      	bne.n	8003998 <HAL_RCC_OscConfig+0x4d8>
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003996:	e029      	b.n	80039ec <HAL_RCC_OscConfig+0x52c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d115      	bne.n	80039cc <HAL_RCC_OscConfig+0x50c>
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a03      	ldr	r2, [pc, #12]	; (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x52c>
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40007000 	.word	0x40007000
 80039cc:	4b9c      	ldr	r3, [pc, #624]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	4a9b      	ldr	r2, [pc, #620]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039dc:	4b98      	ldr	r3, [pc, #608]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	4a97      	ldr	r2, [pc, #604]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d016      	beq.n	8003a22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fe f844 	bl	8001a80 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe f840 	bl	8001a80 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e12a      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ed      	beq.n	80039fc <HAL_RCC_OscConfig+0x53c>
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a22:	f7fe f82d 	bl	8001a80 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fe f829 	bl	8001a80 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e113      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a40:	4b7f      	ldr	r3, [pc, #508]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ed      	bne.n	8003a2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b7a      	ldr	r3, [pc, #488]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4a79      	ldr	r2, [pc, #484]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80fe 	beq.w	8003c66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	f040 80d0 	bne.w	8003c14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a74:	4b72      	ldr	r3, [pc, #456]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d130      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	3b01      	subs	r3, #1
 8003a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d127      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d11f      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab4:	2a07      	cmp	r2, #7
 8003ab6:	bf14      	ite	ne
 8003ab8:	2201      	movne	r2, #1
 8003aba:	2200      	moveq	r2, #0
 8003abc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d113      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d06e      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d069      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003afc:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0ad      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b18:	f7fd ffb2 	bl	8001a80 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd ffae 	bl	8001a80 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e09a      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b32:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3e:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_RCC_OscConfig+0x784>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b58:	0212      	lsls	r2, r2, #8
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b60:	0852      	lsrs	r2, r2, #1
 8003b62:	3a01      	subs	r2, #1
 8003b64:	0552      	lsls	r2, r2, #21
 8003b66:	4311      	orrs	r1, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0652      	lsls	r2, r2, #25
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b78:	0912      	lsrs	r2, r2, #4
 8003b7a:	0452      	lsls	r2, r2, #17
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	4930      	ldr	r1, [pc, #192]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b84:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b9c:	f7fd ff70 	bl	8001a80 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd ff6c 	bl	8001a80 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e058      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc2:	e050      	b.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04f      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d148      	bne.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bec:	f7fd ff48 	bl	8001a80 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd ff44 	bl	8001a80 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e030      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x734>
 8003c12:	e028      	b.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d023      	beq.n	8003c62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fd ff2b 	bl	8001a80 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2c:	e00c      	b.n	8003c48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fd ff27 	bl	8001a80 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d905      	bls.n	8003c48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e013      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_OscConfig+0x7b0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ec      	bne.n	8003c2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_OscConfig+0x7b0>)
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4905      	ldr	r1, [pc, #20]	; (8003c70 <HAL_RCC_OscConfig+0x7b0>)
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCC_OscConfig+0x7b4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
 8003c60:	e001      	b.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	feeefffc 	.word	0xfeeefffc

08003c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0e7      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b75      	ldr	r3, [pc, #468]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d910      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b72      	ldr	r3, [pc, #456]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	4970      	ldr	r1, [pc, #448]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b6e      	ldr	r3, [pc, #440]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0cf      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d908      	bls.n	8003cea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d04c      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfe:	4b5a      	ldr	r3, [pc, #360]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d121      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0a6      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d16:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d115      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e09a      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2e:	4b4e      	ldr	r3, [pc, #312]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e08e      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e086      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4943      	ldr	r1, [pc, #268]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d60:	f7fd fe8e 	bl	8001a80 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fd fe8a 	bl	8001a80 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e06e      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d208      	bcs.n	8003dbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	492b      	ldr	r1, [pc, #172]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbe:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d210      	bcs.n	8003dee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dcc:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 0207 	bic.w	r2, r3, #7
 8003dd4:	4923      	ldr	r1, [pc, #140]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e036      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4918      	ldr	r1, [pc, #96]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4910      	ldr	r1, [pc, #64]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e2c:	f000 f824 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	490b      	ldr	r1, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1f4>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1f8>)
 8003e4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1fc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fd fdc5 	bl	80019e0 <HAL_InitTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	0800c460 	.word	0x0800c460
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000004 	.word	0x20000004

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e86:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e90:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x34>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d121      	bne.n	8003eea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d11e      	bne.n	8003eea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e005      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ed4:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d102      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e004      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003efe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d134      	bne.n	8003f70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0xac>
 8003f1c:	e005      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f20:	617b      	str	r3, [r7, #20]
      break;
 8003f22:	e005      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f26:	617b      	str	r3, [r7, #20]
      break;
 8003f28:	e002      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	617b      	str	r3, [r7, #20]
      break;
 8003f2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	fb03 f202 	mul.w	r2, r3, r2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	0e5b      	lsrs	r3, r3, #25
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	3301      	adds	r3, #1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f70:	69bb      	ldr	r3, [r7, #24]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	; 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	0800c470 	.word	0x0800c470
 8003f88:	00f42400 	.word	0x00f42400

08003f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fbc:	f7ff fa0c 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 8003fc0:	6178      	str	r0, [r7, #20]
 8003fc2:	e014      	b.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fdc:	f7ff f9fc 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 8003fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d10b      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d919      	bls.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8004000:	d902      	bls.n	8004008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004002:	2302      	movs	r3, #2
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e013      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e010      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d902      	bls.n	800401a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004014:	2303      	movs	r3, #3
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e00a      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d102      	bne.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004020:	2302      	movs	r3, #2
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e004      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d101      	bne.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800402c:	2301      	movs	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 0207 	bic.w	r2, r3, #7
 8004038:	4909      	ldr	r1, [pc, #36]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	40022000 	.word	0x40022000

08004064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800406c:	2300      	movs	r3, #0
 800406e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004070:	2300      	movs	r3, #0
 8004072:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d041      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004088:	d02a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800408a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800408e:	d824      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409a:	d81e      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d010      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040a6:	e018      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a8:	4b86      	ldr	r3, [pc, #536]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a85      	ldr	r2, [pc, #532]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b4:	e015      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fabb 	bl	8004638 <RCCEx_PLLSAI1_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c6:	e00c      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3320      	adds	r3, #32
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fba6 	bl	8004820 <RCCEx_PLLSAI2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	74fb      	strb	r3, [r7, #19]
      break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e8:	4b76      	ldr	r3, [pc, #472]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	4973      	ldr	r1, [pc, #460]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040fe:	e001      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d041      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004118:	d02a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800411a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800411e:	d824      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004124:	d008      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412a:	d81e      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004134:	d010      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004136:	e018      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004138:	4b62      	ldr	r3, [pc, #392]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a61      	ldr	r2, [pc, #388]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004142:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004144:	e015      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa73 	bl	8004638 <RCCEx_PLLSAI1_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004156:	e00c      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3320      	adds	r3, #32
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fb5e 	bl	8004820 <RCCEx_PLLSAI2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	74fb      	strb	r3, [r7, #19]
      break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004178:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004186:	494f      	ldr	r1, [pc, #316]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80a0 	beq.w	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fd fc4c 	bl	8001a80 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ea:	e009      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fd fc48 	bl	8001a80 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d902      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	74fb      	strb	r3, [r7, #19]
        break;
 80041fe:	e005      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d15c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01f      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	429a      	cmp	r2, r3
 800422e:	d019      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800425c:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd fc07 	bl	8001a80 <HAL_GetTick>
 8004272:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004274:	e00b      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fd fc03 	bl	8001a80 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d902      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	74fb      	strb	r3, [r7, #19]
            break;
 800428c:	e006      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ec      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ba:	e009      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
 80042c0:	e006      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d0:	7c7b      	ldrb	r3, [r7, #17]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d105      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d6:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	4a9d      	ldr	r2, [pc, #628]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ee:	4b98      	ldr	r3, [pc, #608]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 0203 	bic.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	4994      	ldr	r1, [pc, #592]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004310:	4b8f      	ldr	r3, [pc, #572]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 020c 	bic.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	498c      	ldr	r1, [pc, #560]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004332:	4b87      	ldr	r3, [pc, #540]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	4983      	ldr	r1, [pc, #524]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004354:	4b7e      	ldr	r3, [pc, #504]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	497b      	ldr	r1, [pc, #492]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004376:	4b76      	ldr	r3, [pc, #472]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	4972      	ldr	r1, [pc, #456]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004398:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	496a      	ldr	r1, [pc, #424]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ba:	4b65      	ldr	r3, [pc, #404]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	4961      	ldr	r1, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043dc:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	4959      	ldr	r1, [pc, #356]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	4950      	ldr	r1, [pc, #320]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	4948      	ldr	r1, [pc, #288]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004442:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	493f      	ldr	r1, [pc, #252]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d028      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004464:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004472:	4937      	ldr	r1, [pc, #220]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004482:	d106      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b32      	ldr	r3, [pc, #200]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a31      	ldr	r2, [pc, #196]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
 8004490:	e011      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800449a:	d10c      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f8c8 	bl	8004638 <RCCEx_PLLSAI1_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d028      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	491f      	ldr	r1, [pc, #124]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e0:	d106      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ec:	60d3      	str	r3, [r2, #12]
 80044ee:	e011      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f899 	bl	8004638 <RCCEx_PLLSAI1_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004510:	7cfb      	ldrb	r3, [r7, #19]
 8004512:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02b      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452e:	4908      	ldr	r1, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453e:	d109      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a02      	ldr	r2, [pc, #8]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454a:	60d3      	str	r3, [r2, #12]
 800454c:	e014      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800455c:	d10c      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	2101      	movs	r1, #1
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f867 	bl	8004638 <RCCEx_PLLSAI1_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02f      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004592:	4928      	ldr	r1, [pc, #160]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f844 	bl	8004638 <RCCEx_PLLSAI1_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	74bb      	strb	r3, [r7, #18]
 80045be:	e011      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3320      	adds	r3, #32
 80045ce:	2102      	movs	r1, #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f925 	bl	8004820 <RCCEx_PLLSAI2_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fe:	490d      	ldr	r1, [pc, #52]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800462a:	7cbb      	ldrb	r3, [r7, #18]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000

08004638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004646:	4b75      	ldr	r3, [pc, #468]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0203 	and.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d10d      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
       ||
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800466a:	4b6c      	ldr	r3, [pc, #432]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
       ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d047      	beq.n	800470e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e044      	b.n	800470e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d018      	beq.n	80046be <RCCEx_PLLSAI1_Config+0x86>
 800468c:	2b03      	cmp	r3, #3
 800468e:	d825      	bhi.n	80046dc <RCCEx_PLLSAI1_Config+0xa4>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d002      	beq.n	800469a <RCCEx_PLLSAI1_Config+0x62>
 8004694:	2b02      	cmp	r3, #2
 8004696:	d009      	beq.n	80046ac <RCCEx_PLLSAI1_Config+0x74>
 8004698:	e020      	b.n	80046dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800469a:	4b60      	ldr	r3, [pc, #384]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11d      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046aa:	e01a      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046ac:	4b5b      	ldr	r3, [pc, #364]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046bc:	e013      	b.n	80046e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046be:	4b57      	ldr	r3, [pc, #348]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ca:	4b54      	ldr	r3, [pc, #336]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046da:	e006      	b.n	80046ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e004      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e2:	bf00      	nop
 80046e4:	e002      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046f2:	4b4a      	ldr	r3, [pc, #296]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	430b      	orrs	r3, r1
 8004708:	4944      	ldr	r1, [pc, #272]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d17d      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004714:	4b41      	ldr	r3, [pc, #260]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a40      	ldr	r2, [pc, #256]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fd f9ae 	bl	8001a80 <HAL_GetTick>
 8004724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004726:	e009      	b.n	800473c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004728:	f7fd f9aa 	bl	8001a80 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	73fb      	strb	r3, [r7, #15]
        break;
 800473a:	e005      	b.n	8004748 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ef      	bne.n	8004728 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d160      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004754:	4b31      	ldr	r3, [pc, #196]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6892      	ldr	r2, [r2, #8]
 8004764:	0211      	lsls	r1, r2, #8
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	0912      	lsrs	r2, r2, #4
 800476c:	0452      	lsls	r2, r2, #17
 800476e:	430a      	orrs	r2, r1
 8004770:	492a      	ldr	r1, [pc, #168]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	610b      	str	r3, [r1, #16]
 8004776:	e027      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d112      	bne.n	80047a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	0211      	lsls	r1, r2, #8
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6912      	ldr	r2, [r2, #16]
 8004794:	0852      	lsrs	r2, r2, #1
 8004796:	3a01      	subs	r2, #1
 8004798:	0552      	lsls	r2, r2, #21
 800479a:	430a      	orrs	r2, r1
 800479c:	491f      	ldr	r1, [pc, #124]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
 80047a2:	e011      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6952      	ldr	r2, [r2, #20]
 80047ba:	0852      	lsrs	r2, r2, #1
 80047bc:	3a01      	subs	r2, #1
 80047be:	0652      	lsls	r2, r2, #25
 80047c0:	430a      	orrs	r2, r1
 80047c2:	4916      	ldr	r1, [pc, #88]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fd f954 	bl	8001a80 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047dc:	f7fd f950 	bl	8001a80 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
          break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	4904      	ldr	r1, [pc, #16]	; (800481c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000

08004820 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800483a:	4b67      	ldr	r3, [pc, #412]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0203 	and.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d10d      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
       ||
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
       ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d047      	beq.n	80048f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	e044      	b.n	80048f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d018      	beq.n	80048a6 <RCCEx_PLLSAI2_Config+0x86>
 8004874:	2b03      	cmp	r3, #3
 8004876:	d825      	bhi.n	80048c4 <RCCEx_PLLSAI2_Config+0xa4>
 8004878:	2b01      	cmp	r3, #1
 800487a:	d002      	beq.n	8004882 <RCCEx_PLLSAI2_Config+0x62>
 800487c:	2b02      	cmp	r3, #2
 800487e:	d009      	beq.n	8004894 <RCCEx_PLLSAI2_Config+0x74>
 8004880:	e020      	b.n	80048c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004882:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11d      	bne.n	80048ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004892:	e01a      	b.n	80048ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004894:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d116      	bne.n	80048ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e013      	b.n	80048ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a6:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048b2:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048c2:	e006      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
      break;
 80048c8:	e004      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	430b      	orrs	r3, r1
 80048f0:	4939      	ldr	r1, [pc, #228]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d167      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004908:	f7fd f8ba 	bl	8001a80 <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800490e:	e009      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004910:	f7fd f8b6 	bl	8001a80 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	73fb      	strb	r3, [r7, #15]
        break;
 8004922:	e005      	b.n	8004930 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004924:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ef      	bne.n	8004910 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d14a      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d111      	bne.n	8004960 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	0211      	lsls	r1, r2, #8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	0912      	lsrs	r2, r2, #4
 8004954:	0452      	lsls	r2, r2, #17
 8004956:	430a      	orrs	r2, r1
 8004958:	491f      	ldr	r1, [pc, #124]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	4313      	orrs	r3, r2
 800495c:	614b      	str	r3, [r1, #20]
 800495e:	e011      	b.n	8004984 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	0211      	lsls	r1, r2, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6912      	ldr	r2, [r2, #16]
 8004976:	0852      	lsrs	r2, r2, #1
 8004978:	3a01      	subs	r2, #1
 800497a:	0652      	lsls	r2, r2, #25
 800497c:	430a      	orrs	r2, r1
 800497e:	4916      	ldr	r1, [pc, #88]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fd f876 	bl	8001a80 <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004996:	e009      	b.n	80049ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004998:	f7fd f872 	bl	8001a80 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d902      	bls.n	80049ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	73fb      	strb	r3, [r7, #15]
          break;
 80049aa:	e005      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ef      	beq.n	8004998 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4904      	ldr	r1, [pc, #16]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e095      	b.n	8004b1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fe:	d009      	beq.n	8004a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	61da      	str	r2, [r3, #28]
 8004a06:	e005      	b.n	8004a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fe12 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a54:	d902      	bls.n	8004a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e002      	b.n	8004a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a6a:	d007      	beq.n	8004a7c <HAL_SPI_Init+0xa0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	ea42 0103 	orr.w	r1, r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	f003 0204 	and.w	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af8:	ea42 0103 	orr.w	r1, r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_SPI_Transmit+0x22>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e15f      	b.n	8004e04 <HAL_SPI_Transmit+0x2e2>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4c:	f7fc ff98 	bl	8001a80 <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b66:	e148      	b.n	8004dfa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x52>
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b78:	e13f      	b.n	8004dfa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	d94f      	bls.n	8004cae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Transmit+0xfa>
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d142      	bne.n	8004ca2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c40:	e02f      	b.n	8004ca2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d112      	bne.n	8004c76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e015      	b.n	8004ca2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fc ff03 	bl	8001a80 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Transmit+0x16c>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x172>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ca0:	e0ab      	b.n	8004dfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ca      	bne.n	8004c42 <HAL_SPI_Transmit+0x120>
 8004cac:	e080      	b.n	8004db0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_Transmit+0x19a>
 8004cb6:	8afb      	ldrh	r3, [r7, #22]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d174      	bne.n	8004da6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d912      	bls.n	8004cec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	881a      	ldrh	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	1c9a      	adds	r2, r3, #2
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b02      	subs	r3, #2
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cea:	e05c      	b.n	8004da6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d12:	e048      	b.n	8004da6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d12b      	bne.n	8004d7a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d912      	bls.n	8004d52 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b02      	subs	r3, #2
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d50:	e029      	b.n	8004da6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d78:	e015      	b.n	8004da6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7a:	f7fc fe81 	bl	8001a80 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d803      	bhi.n	8004d92 <HAL_SPI_Transmit+0x270>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d90:	d102      	bne.n	8004d98 <HAL_SPI_Transmit+0x276>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004da4:	e029      	b.n	8004dfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1b1      	bne.n	8004d14 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fb77 	bl	80054a8 <SPI_EndRxTxTransaction>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e003      	b.n	8004dfa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x26>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e20a      	b.n	8005248 <HAL_SPI_TransmitReceive+0x43c>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e3a:	f7fc fe21 	bl	8001a80 <HAL_GetTick>
 8004e3e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e46:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e4e:	887b      	ldrh	r3, [r7, #2]
 8004e50:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e52:	887b      	ldrh	r3, [r7, #2]
 8004e54:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e56:	7efb      	ldrb	r3, [r7, #27]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00e      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x6e>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e62:	d106      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x66>
 8004e6c:	7efb      	ldrb	r3, [r7, #27]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d003      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
 8004e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e78:	e1e0      	b.n	800523c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x80>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x80>
 8004e86:	887b      	ldrh	r3, [r7, #2]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e92:	e1d3      	b.n	800523c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d003      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	887a      	ldrh	r2, [r7, #2]
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eea:	d802      	bhi.n	8004ef2 <HAL_SPI_TransmitReceive+0xe6>
 8004eec:	8a3b      	ldrh	r3, [r7, #16]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d908      	bls.n	8004f04 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	e007      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d007      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f3a:	f240 8081 	bls.w	8005040 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0x140>
 8004f46:	8a7b      	ldrh	r3, [r7, #18]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d16d      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f70:	e05a      	b.n	8005028 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x1ac>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x1ac>
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d113      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d11c      	bne.n	8005000 <HAL_SPI_TransmitReceive+0x1f4>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	1c9a      	adds	r2, r3, #2
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005000:	f7fc fd3e 	bl	8001a80 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500c:	429a      	cmp	r2, r3
 800500e:	d80b      	bhi.n	8005028 <HAL_SPI_TransmitReceive+0x21c>
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005016:	d007      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005026:	e109      	b.n	800523c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d19f      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x166>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d199      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x166>
 800503e:	e0e3      	b.n	8005208 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x244>
 8005048:	8a7b      	ldrh	r3, [r7, #18]
 800504a:	2b01      	cmp	r3, #1
 800504c:	f040 80cf 	bne.w	80051ee <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d912      	bls.n	8005080 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	881a      	ldrh	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b02      	subs	r3, #2
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800507e:	e0b6      	b.n	80051ee <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a6:	e0a2      	b.n	80051ee <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d134      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x314>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02f      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x314>
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d12c      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d912      	bls.n	80050f6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b02      	subs	r3, #2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050f4:	e012      	b.n	800511c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d148      	bne.n	80051c0 <HAL_SPI_TransmitReceive+0x3b4>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d042      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d923      	bls.n	800518e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	b292      	uxth	r2, r2
 8005152:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	1c9a      	adds	r2, r3, #2
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b02      	subs	r3, #2
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d81f      	bhi.n	80051bc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800518a:	605a      	str	r2, [r3, #4]
 800518c:	e016      	b.n	80051bc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f103 020c 	add.w	r2, r3, #12
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051bc:	2301      	movs	r3, #1
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051c0:	f7fc fc5e 	bl	8001a80 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d803      	bhi.n	80051d8 <HAL_SPI_TransmitReceive+0x3cc>
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d6:	d102      	bne.n	80051de <HAL_SPI_TransmitReceive+0x3d2>
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80051ec:	e026      	b.n	800523c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f47f af57 	bne.w	80050a8 <HAL_SPI_TransmitReceive+0x29c>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	f47f af50 	bne.w	80050a8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f94b 	bl	80054a8 <SPI_EndRxTxTransaction>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e003      	b.n	800523c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005248:	4618      	mov	r0, r3
 800524a:	3728      	adds	r7, #40	; 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800525e:	b2db      	uxtb	r3, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800527c:	f7fc fc00 	bl	8001a80 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4413      	add	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800528c:	f7fc fbf8 	bl	8001a80 <HAL_GetTick>
 8005290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005292:	4b39      	ldr	r3, [pc, #228]	; (8005378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a2:	e054      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052aa:	d050      	beq.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ac:	f7fc fbe8 	bl	8001a80 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d13d      	bne.n	800533e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052da:	d111      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	d004      	beq.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ee:	d107      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d10f      	bne.n	800532a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e017      	b.n	800536e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d19b      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000

0800537c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800538e:	f7fc fb77 	bl	8001a80 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	4413      	add	r3, r2
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800539e:	f7fc fb6f 	bl	8001a80 <HAL_GetTick>
 80053a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053ac:	4b3d      	ldr	r3, [pc, #244]	; (80054a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00da      	lsls	r2, r3, #3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	0d1b      	lsrs	r3, r3, #20
 80053bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053c4:	e060      	b.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053cc:	d107      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e4:	d050      	beq.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e6:	f7fc fb4b 	bl	8001a80 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d902      	bls.n	80053fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d13d      	bne.n	8005478 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800540a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005414:	d111      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d004      	beq.n	800542a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d107      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005438:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d10f      	bne.n	8005464 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005462:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e010      	b.n	800549a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3b01      	subs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d196      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3728      	adds	r7, #40	; 0x28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000

080054a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff ff5b 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	f043 0220 	orr.w	r2, r3, #32
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e027      	b.n	800552c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2200      	movs	r2, #0
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff fec0 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e014      	b.n	800552c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff34 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e000      	b.n	800552c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005534:	b084      	sub	sp, #16
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	f107 001c 	add.w	r0, r7, #28
 8005542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fa1c 	bl	8006990 <USB_CoreReset>
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
 800556e:	e005      	b.n	800557c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005588:	b004      	add	sp, #16
 800558a:	4770      	bx	lr

0800558c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d165      	bne.n	800566c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a3e      	ldr	r2, [pc, #248]	; (800569c <USB_SetTurnaroundTime+0x110>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d906      	bls.n	80055b6 <USB_SetTurnaroundTime+0x2a>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a3d      	ldr	r2, [pc, #244]	; (80056a0 <USB_SetTurnaroundTime+0x114>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d202      	bcs.n	80055b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055b0:	230f      	movs	r3, #15
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e05c      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a39      	ldr	r2, [pc, #228]	; (80056a0 <USB_SetTurnaroundTime+0x114>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d306      	bcc.n	80055cc <USB_SetTurnaroundTime+0x40>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <USB_SetTurnaroundTime+0x118>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d202      	bcs.n	80055cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055c6:	230e      	movs	r3, #14
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e051      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a35      	ldr	r2, [pc, #212]	; (80056a4 <USB_SetTurnaroundTime+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d306      	bcc.n	80055e2 <USB_SetTurnaroundTime+0x56>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a34      	ldr	r2, [pc, #208]	; (80056a8 <USB_SetTurnaroundTime+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d202      	bcs.n	80055e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055dc:	230d      	movs	r3, #13
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e046      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a30      	ldr	r2, [pc, #192]	; (80056a8 <USB_SetTurnaroundTime+0x11c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d306      	bcc.n	80055f8 <USB_SetTurnaroundTime+0x6c>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <USB_SetTurnaroundTime+0x120>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d802      	bhi.n	80055f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055f2:	230c      	movs	r3, #12
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e03b      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a2c      	ldr	r2, [pc, #176]	; (80056ac <USB_SetTurnaroundTime+0x120>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d906      	bls.n	800560e <USB_SetTurnaroundTime+0x82>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a2b      	ldr	r2, [pc, #172]	; (80056b0 <USB_SetTurnaroundTime+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d802      	bhi.n	800560e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005608:	230b      	movs	r3, #11
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e030      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <USB_SetTurnaroundTime+0x124>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d906      	bls.n	8005624 <USB_SetTurnaroundTime+0x98>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <USB_SetTurnaroundTime+0x128>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d802      	bhi.n	8005624 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800561e:	230a      	movs	r3, #10
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e025      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <USB_SetTurnaroundTime+0x128>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d906      	bls.n	800563a <USB_SetTurnaroundTime+0xae>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <USB_SetTurnaroundTime+0x12c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d202      	bcs.n	800563a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005634:	2309      	movs	r3, #9
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e01a      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <USB_SetTurnaroundTime+0x12c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d306      	bcc.n	8005650 <USB_SetTurnaroundTime+0xc4>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <USB_SetTurnaroundTime+0x130>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d802      	bhi.n	8005650 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800564a:	2308      	movs	r3, #8
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e00f      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <USB_SetTurnaroundTime+0x130>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d906      	bls.n	8005666 <USB_SetTurnaroundTime+0xda>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <USB_SetTurnaroundTime+0x134>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d202      	bcs.n	8005666 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005660:	2307      	movs	r3, #7
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e004      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005666:	2306      	movs	r3, #6
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e001      	b.n	8005670 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800566c:	2309      	movs	r3, #9
 800566e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	00d8acbf 	.word	0x00d8acbf
 80056a0:	00e4e1c0 	.word	0x00e4e1c0
 80056a4:	00f42400 	.word	0x00f42400
 80056a8:	01067380 	.word	0x01067380
 80056ac:	011a499f 	.word	0x011a499f
 80056b0:	01312cff 	.word	0x01312cff
 80056b4:	014ca43f 	.word	0x014ca43f
 80056b8:	016e3600 	.word	0x016e3600
 80056bc:	01a6ab1f 	.word	0x01a6ab1f
 80056c0:	01e84800 	.word	0x01e84800

080056c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d115      	bne.n	8005756 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005736:	2001      	movs	r0, #1
 8005738:	f7fc f9ae 	bl	8001a98 <HAL_Delay>
      ms++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 f8ab 	bl	800689e <USB_GetMode>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d01e      	beq.n	800578c <USB_SetCurrentMode+0x84>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b31      	cmp	r3, #49	; 0x31
 8005752:	d9f0      	bls.n	8005736 <USB_SetCurrentMode+0x2e>
 8005754:	e01a      	b.n	800578c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d115      	bne.n	8005788 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005768:	2001      	movs	r0, #1
 800576a:	f7fc f995 	bl	8001a98 <HAL_Delay>
      ms++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 f892 	bl	800689e <USB_GetMode>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <USB_SetCurrentMode+0x84>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b31      	cmp	r3, #49	; 0x31
 8005784:	d9f0      	bls.n	8005768 <USB_SetCurrentMode+0x60>
 8005786:	e001      	b.n	800578c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e005      	b.n	8005798 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b32      	cmp	r3, #50	; 0x32
 8005790:	d101      	bne.n	8005796 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057a0:	b084      	sub	sp, #16
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e009      	b.n	80057d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3340      	adds	r3, #64	; 0x40
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	3301      	adds	r3, #1
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b0e      	cmp	r3, #14
 80057d8:	d9f2      	bls.n	80057c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11c      	bne.n	800581a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ee:	f043 0302 	orr.w	r3, r3, #2
 80057f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e005      	b.n	8005826 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005832:	2103      	movs	r1, #3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f959 	bl	8005aec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800583a:	2110      	movs	r1, #16
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f8f1 	bl	8005a24 <USB_FlushTxFifo>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f91d 	bl	8005a8c <USB_FlushRxFifo>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	461a      	mov	r2, r3
 800587c:	2300      	movs	r3, #0
 800587e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	e043      	b.n	800590e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589c:	d118      	bne.n	80058d0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	461a      	mov	r2, r3
 80058b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	e013      	b.n	80058e2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	461a      	mov	r2, r3
 80058c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e008      	b.n	80058e2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	461a      	mov	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	461a      	mov	r2, r3
 8005902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3301      	adds	r3, #1
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d3b7      	bcc.n	8005886 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e043      	b.n	80059a4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800592e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005932:	d118      	bne.n	8005966 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	461a      	mov	r2, r3
 8005948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e013      	b.n	8005978 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	461a      	mov	r2, r3
 800595e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e008      	b.n	8005978 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	461a      	mov	r2, r3
 8005986:	2300      	movs	r3, #0
 8005988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	461a      	mov	r2, r3
 8005998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800599c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3301      	adds	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d3b7      	bcc.n	800591c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f043 0210 	orr.w	r2, r3, #16
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <USB_DevInit+0x280>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f043 0208 	orr.w	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d107      	bne.n	8005a0e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a1a:	b004      	add	sp, #16
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	803c3800 	.word	0x803c3800

08005a24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <USB_FlushTxFifo+0x64>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e01b      	b.n	8005a7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	daf2      	bge.n	8005a32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	019b      	lsls	r3, r3, #6
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <USB_FlushTxFifo+0x64>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e006      	b.n	8005a7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d0f0      	beq.n	8005a5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	00030d40 	.word	0x00030d40

08005a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <USB_FlushRxFifo+0x5c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e018      	b.n	8005adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	daf2      	bge.n	8005a98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2210      	movs	r2, #16
 8005aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <USB_FlushRxFifo+0x5c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e006      	b.n	8005adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d0f0      	beq.n	8005abc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	00030d40 	.word	0x00030d40

08005aec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0306 	and.w	r3, r3, #6
 8005b36:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d002      	beq.n	8005b44 <USB_GetDevSpeed+0x26>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b06      	cmp	r3, #6
 8005b42:	d102      	bne.n	8005b4a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b44:	2302      	movs	r3, #2
 8005b46:	75fb      	strb	r3, [r7, #23]
 8005b48:	e001      	b.n	8005b4e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005b4a:	230f      	movs	r3, #15
 8005b4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d13a      	bne.n	8005bee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	68f9      	ldr	r1, [r7, #12]
 8005b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d155      	bne.n	8005c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	791b      	ldrb	r3, [r3, #4]
 8005bca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	059b      	lsls	r3, r3, #22
 8005bd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	e036      	b.n	8005c5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	041b      	lsls	r3, r3, #16
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11a      	bne.n	8005c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	791b      	ldrb	r3, [r3, #4]
 8005c40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c42:	430b      	orrs	r3, r1
 8005c44:	4313      	orrs	r3, r2
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d161      	bne.n	8005d4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c9e:	d11f      	bne.n	8005ce0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d00:	4013      	ands	r3, r2
 8005d02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	2101      	movs	r1, #1
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d24:	4013      	ands	r3, r2
 8005d26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	0159      	lsls	r1, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	4619      	mov	r1, r3
 8005d44:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <USB_DeactivateEndpoint+0x1b0>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
 8005d4a:	e060      	b.n	8005e0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d62:	d11f      	bne.n	8005da4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	041b      	lsls	r3, r3, #16
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	2101      	movs	r1, #1
 8005dda:	fa01 f303 	lsl.w	r3, r1, r3
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	43db      	mvns	r3, r3
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de8:	4013      	ands	r3, r2
 8005dea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0159      	lsls	r1, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	440b      	add	r3, r1
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	4619      	mov	r1, r3
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <USB_DeactivateEndpoint+0x1b4>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	ec337800 	.word	0xec337800
 8005e20:	eff37800 	.word	0xeff37800

08005e24 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f040 8128 	bne.w	8006092 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d132      	bne.n	8005eb0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	0cdb      	lsrs	r3, r3, #19
 8005eaa:	04db      	lsls	r3, r3, #19
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	e092      	b.n	8005fd6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	0cdb      	lsrs	r3, r3, #19
 8005ecc:	04db      	lsls	r3, r3, #19
 8005ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11a      	bne.n	8005f30 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d903      	bls.n	8005f0e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f2c:	6113      	str	r3, [r2, #16]
 8005f2e:	e01b      	b.n	8005f68 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6919      	ldr	r1, [r3, #16]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	440b      	add	r3, r1
 8005f48:	1e59      	subs	r1, r3, #1
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f52:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f54:	4b8d      	ldr	r3, [pc, #564]	; (800618c <USB_EPStartXfer+0x368>)
 8005f56:	400b      	ands	r3, r1
 8005f58:	6939      	ldr	r1, [r7, #16]
 8005f5a:	0148      	lsls	r0, r1, #5
 8005f5c:	6979      	ldr	r1, [r7, #20]
 8005f5e:	4401      	add	r1, r0
 8005f60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f64:	4313      	orrs	r3, r2
 8005f66:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7e:	6939      	ldr	r1, [r7, #16]
 8005f80:	0148      	lsls	r0, r1, #5
 8005f82:	6979      	ldr	r1, [r7, #20]
 8005f84:	4401      	add	r1, r0
 8005f86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	791b      	ldrb	r3, [r3, #4]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d11f      	bne.n	8005fd6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005fb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fd4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ff4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	791b      	ldrb	r3, [r3, #4]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d015      	beq.n	800602a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8139 	beq.w	800627a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	2101      	movs	r1, #1
 800601a:	fa01 f303 	lsl.w	r3, r1, r3
 800601e:	6979      	ldr	r1, [r7, #20]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	634b      	str	r3, [r1, #52]	; 0x34
 8006028:	e127      	b.n	800627a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d110      	bne.n	800605c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e00f      	b.n	800607c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68d9      	ldr	r1, [r3, #12]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	b29b      	uxth	r3, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9a6 	bl	80063dc <USB_WritePacket>
 8006090:	e0f3      	b.n	800627a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ac:	0cdb      	lsrs	r3, r3, #19
 80060ae:	04db      	lsls	r3, r3, #19
 80060b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060d4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d12f      	bne.n	800613c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610a:	6939      	ldr	r1, [r7, #16]
 800610c:	0148      	lsls	r0, r1, #5
 800610e:	6979      	ldr	r1, [r7, #20]
 8006110:	4401      	add	r1, r0
 8006112:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006116:	4313      	orrs	r3, r2
 8006118:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	440a      	add	r2, r1
 8006130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006138:	6113      	str	r3, [r2, #16]
 800613a:	e061      	b.n	8006200 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d125      	bne.n	8006190 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615a:	6939      	ldr	r1, [r7, #16]
 800615c:	0148      	lsls	r0, r1, #5
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	4401      	add	r1, r0
 8006162:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006166:	4313      	orrs	r3, r2
 8006168:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006188:	6113      	str	r3, [r2, #16]
 800618a:	e039      	b.n	8006200 <USB_EPStartXfer+0x3dc>
 800618c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4413      	add	r3, r2
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	89fa      	ldrh	r2, [r7, #14]
 80061ac:	fb03 f202 	mul.w	r2, r3, r2
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	89fb      	ldrh	r3, [r7, #14]
 80061c4:	04d9      	lsls	r1, r3, #19
 80061c6:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <USB_EPStartXfer+0x460>)
 80061c8:	400b      	ands	r3, r1
 80061ca:	6939      	ldr	r1, [r7, #16]
 80061cc:	0148      	lsls	r0, r1, #5
 80061ce:	6979      	ldr	r1, [r7, #20]
 80061d0:	4401      	add	r1, r0
 80061d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061d6:	4313      	orrs	r3, r2
 80061d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f0:	6939      	ldr	r1, [r7, #16]
 80061f2:	0148      	lsls	r0, r1, #5
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	4401      	add	r1, r0
 80061f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	791b      	ldrb	r3, [r3, #4]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d128      	bne.n	800625a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d110      	bne.n	800623a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	e00f      	b.n	800625a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	1ff80000 	.word	0x1ff80000

08006288 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d14a      	bne.n	800633c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062be:	f040 8086 	bne.w	80063ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	7812      	ldrb	r2, [r2, #0]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006308:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f242 7210 	movw	r2, #10000	; 0x2710
 8006316:	4293      	cmp	r3, r2
 8006318:	d902      	bls.n	8006320 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
          break;
 800631e:	e056      	b.n	80063ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006338:	d0e7      	beq.n	800630a <USB_EPStopXfer+0x82>
 800633a:	e048      	b.n	80063ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006354:	d13b      	bne.n	80063ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006374:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006378:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800639c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d902      	bls.n	80063b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
          break;
 80063b2:	e00c      	b.n	80063ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063cc:	d0e7      	beq.n	800639e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	; 0x24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	71fb      	strb	r3, [r7, #7]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80063fa:	88bb      	ldrh	r3, [r7, #4]
 80063fc:	3303      	adds	r3, #3
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e018      	b.n	800643a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	031a      	lsls	r2, r3, #12
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	4413      	add	r3, r2
 8006410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006414:	461a      	mov	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	3301      	adds	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	3301      	adds	r3, #1
 8006426:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	3301      	adds	r3, #1
 800642c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3301      	adds	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	3301      	adds	r3, #1
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	d3e2      	bcc.n	8006408 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3724      	adds	r7, #36	; 0x24
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006450:	b480      	push	{r7}
 8006452:	b08b      	sub	sp, #44	; 0x2c
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	b29b      	uxth	r3, r3
 800646c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	e014      	b.n	80064a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	601a      	str	r2, [r3, #0]
    pDest++;
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	3301      	adds	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	3301      	adds	r3, #1
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	3301      	adds	r3, #1
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	3301      	adds	r3, #1
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	3301      	adds	r3, #1
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3e6      	bcc.n	800647c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ae:	8bfb      	ldrh	r3, [r7, #30]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01e      	beq.n	80064f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064be:	461a      	mov	r2, r3
 80064c0:	f107 0310 	add.w	r3, r7, #16
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	701a      	strb	r2, [r3, #0]
      i++;
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	3301      	adds	r3, #1
 80064de:	623b      	str	r3, [r7, #32]
      pDest++;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	3301      	adds	r3, #1
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064e6:	8bfb      	ldrh	r3, [r7, #30]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064ec:	8bfb      	ldrh	r3, [r7, #30]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1ea      	bne.n	80064c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	372c      	adds	r7, #44	; 0x2c
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d12c      	bne.n	8006576 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	db12      	blt.n	8006554 <USB_EPSetStall+0x54>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00f      	beq.n	8006554 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006552:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e02b      	b.n	80065ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	db12      	blt.n	80065ae <USB_EPSetStall+0xae>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d128      	bne.n	800664a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	791b      	ldrb	r3, [r3, #4]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d003      	beq.n	8006628 <USB_EPClearStall+0x4c>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	791b      	ldrb	r3, [r3, #4]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d138      	bne.n	800669a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e027      	b.n	800669a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006668:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	791b      	ldrb	r3, [r3, #4]
 800666e:	2b03      	cmp	r3, #3
 8006670:	d003      	beq.n	800667a <USB_EPClearStall+0x9e>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d10f      	bne.n	800669a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006698:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066dc:	68f9      	ldr	r1, [r7, #12]
 80066de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006722:	f023 0302 	bic.w	r3, r3, #2
 8006726:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006764:	f043 0302 	orr.w	r3, r3, #2
 8006768:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4013      	ands	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006790:	68fb      	ldr	r3, [r7, #12]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	0c1b      	lsrs	r3, r3, #16
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	b29b      	uxth	r3, r3
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006834:	68bb      	ldr	r3, [r7, #8]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006842:	b480      	push	{r7}
 8006844:	b087      	sub	sp, #28
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006864:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	01db      	lsls	r3, r3, #7
 8006874:	b2db      	uxtb	r3, r3
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4013      	ands	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006890:	68bb      	ldr	r3, [r7, #8]
}
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0301 	and.w	r3, r3, #1
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068d8:	f023 0307 	bic.w	r3, r3, #7
 80068dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	333c      	adds	r3, #60	; 0x3c
 8006912:	3304      	adds	r3, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <USB_EP0_OutStart+0x8c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d90a      	bls.n	8006936 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006930:	d101      	bne.n	8006936 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e024      	b.n	8006980 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	461a      	mov	r2, r3
 800693e:	2300      	movs	r3, #0
 8006940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f043 0318 	orr.w	r3, r3, #24
 8006968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006978:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800697c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	4f54300a 	.word	0x4f54300a

08006990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <USB_CoreReset+0x64>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e01b      	b.n	80069e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	daf2      	bge.n	800699c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f043 0201 	orr.w	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <USB_CoreReset+0x64>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e006      	b.n	80069e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d0f0      	beq.n	80069c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	00030d40 	.word	0x00030d40

080069f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a08:	f002 fe26 	bl	8009658 <USBD_static_malloc>
 8006a0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	32b0      	adds	r2, #176	; 0xb0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a24:	2302      	movs	r3, #2
 8006a26:	e0d4      	b.n	8006bd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f003 fb78 	bl	800a124 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	32b0      	adds	r2, #176	; 0xb0
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32b0      	adds	r2, #176	; 0xb0
 8006a4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7c1b      	ldrb	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d138      	bne.n	8006ad2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a60:	4b5e      	ldr	r3, [pc, #376]	; (8006bdc <USBD_CDC_Init+0x1e4>)
 8006a62:	7819      	ldrb	r1, [r3, #0]
 8006a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a68:	2202      	movs	r2, #2
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f002 fbe0 	bl	8009230 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a70:	4b5a      	ldr	r3, [pc, #360]	; (8006bdc <USBD_CDC_Init+0x1e4>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f003 020f 	and.w	r2, r3, #15
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	3324      	adds	r3, #36	; 0x24
 8006a86:	2201      	movs	r2, #1
 8006a88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a8a:	4b55      	ldr	r3, [pc, #340]	; (8006be0 <USBD_CDC_Init+0x1e8>)
 8006a8c:	7819      	ldrb	r1, [r3, #0]
 8006a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a92:	2202      	movs	r2, #2
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f002 fbcb 	bl	8009230 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a9a:	4b51      	ldr	r3, [pc, #324]	; (8006be0 <USBD_CDC_Init+0x1e8>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ab6:	4b4b      	ldr	r3, [pc, #300]	; (8006be4 <USBD_CDC_Init+0x1ec>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	3326      	adds	r3, #38	; 0x26
 8006acc:	2210      	movs	r2, #16
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	e035      	b.n	8006b3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ad2:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <USBD_CDC_Init+0x1e4>)
 8006ad4:	7819      	ldrb	r1, [r3, #0]
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	2202      	movs	r2, #2
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f002 fba8 	bl	8009230 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ae0:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <USBD_CDC_Init+0x1e4>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 020f 	and.w	r2, r3, #15
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	3324      	adds	r3, #36	; 0x24
 8006af6:	2201      	movs	r2, #1
 8006af8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006afa:	4b39      	ldr	r3, [pc, #228]	; (8006be0 <USBD_CDC_Init+0x1e8>)
 8006afc:	7819      	ldrb	r1, [r3, #0]
 8006afe:	2340      	movs	r3, #64	; 0x40
 8006b00:	2202      	movs	r2, #2
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f002 fb94 	bl	8009230 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b08:	4b35      	ldr	r3, [pc, #212]	; (8006be0 <USBD_CDC_Init+0x1e8>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f003 020f 	and.w	r2, r3, #15
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b20:	2201      	movs	r2, #1
 8006b22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b24:	4b2f      	ldr	r3, [pc, #188]	; (8006be4 <USBD_CDC_Init+0x1ec>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3326      	adds	r3, #38	; 0x26
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b3e:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <USBD_CDC_Init+0x1ec>)
 8006b40:	7819      	ldrb	r1, [r3, #0]
 8006b42:	2308      	movs	r3, #8
 8006b44:	2203      	movs	r2, #3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fb72 	bl	8009230 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <USBD_CDC_Init+0x1ec>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 020f 	and.w	r2, r3, #15
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3324      	adds	r3, #36	; 0x24
 8006b62:	2201      	movs	r2, #1
 8006b64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	33b0      	adds	r3, #176	; 0xb0
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e018      	b.n	8006bd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7c1b      	ldrb	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <USBD_CDC_Init+0x1e8>)
 8006baa:	7819      	ldrb	r1, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f002 fcb4 	bl	8009524 <USBD_LL_PrepareReceive>
 8006bbc:	e008      	b.n	8006bd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bbe:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <USBD_CDC_Init+0x1e8>)
 8006bc0:	7819      	ldrb	r1, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f002 fcaa 	bl	8009524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000093 	.word	0x20000093
 8006be0:	20000094 	.word	0x20000094
 8006be4:	20000095 	.word	0x20000095

08006be8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006bf4:	4b3a      	ldr	r3, [pc, #232]	; (8006ce0 <USBD_CDC_DeInit+0xf8>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f002 fb56 	bl	80092ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c00:	4b37      	ldr	r3, [pc, #220]	; (8006ce0 <USBD_CDC_DeInit+0xf8>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	3324      	adds	r3, #36	; 0x24
 8006c16:	2200      	movs	r2, #0
 8006c18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <USBD_CDC_DeInit+0xfc>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f002 fb43 	bl	80092ac <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c26:	4b2f      	ldr	r3, [pc, #188]	; (8006ce4 <USBD_CDC_DeInit+0xfc>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 020f 	and.w	r2, r3, #15
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c3e:	2200      	movs	r2, #0
 8006c40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c42:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <USBD_CDC_DeInit+0x100>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 fb2f 	bl	80092ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c4e:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <USBD_CDC_DeInit+0x100>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	2200      	movs	r2, #0
 8006c66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c68:	4b1f      	ldr	r3, [pc, #124]	; (8006ce8 <USBD_CDC_DeInit+0x100>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f003 020f 	and.w	r2, r3, #15
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3326      	adds	r3, #38	; 0x26
 8006c7e:	2200      	movs	r2, #0
 8006c80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01f      	beq.n	8006cd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	33b0      	adds	r3, #176	; 0xb0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	32b0      	adds	r2, #176	; 0xb0
 8006cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f002 fcdc 	bl	8009674 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	32b0      	adds	r2, #176	; 0xb0
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000093 	.word	0x20000093
 8006ce4:	20000094 	.word	0x20000094
 8006ce8:	20000095 	.word	0x20000095

08006cec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	32b0      	adds	r2, #176	; 0xb0
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e0bf      	b.n	8006e9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d050      	beq.n	8006dca <USBD_CDC_Setup+0xde>
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	f040 80af 	bne.w	8006e8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	88db      	ldrh	r3, [r3, #6]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03a      	beq.n	8006dac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	da1b      	bge.n	8006d78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	33b0      	adds	r3, #176	; 0xb0
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	88d2      	ldrh	r2, [r2, #6]
 8006d5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88db      	ldrh	r3, [r3, #6]
 8006d62:	2b07      	cmp	r3, #7
 8006d64:	bf28      	it	cs
 8006d66:	2307      	movcs	r3, #7
 8006d68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	89fa      	ldrh	r2, [r7, #14]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 fdb3 	bl	80088dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d76:	e090      	b.n	8006e9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	785a      	ldrb	r2, [r3, #1]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b3f      	cmp	r3, #63	; 0x3f
 8006d88:	d803      	bhi.n	8006d92 <USBD_CDC_Setup+0xa6>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	e000      	b.n	8006d94 <USBD_CDC_Setup+0xa8>
 8006d92:	2240      	movs	r2, #64	; 0x40
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d9a:	6939      	ldr	r1, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006da2:	461a      	mov	r2, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fdc5 	bl	8008934 <USBD_CtlPrepareRx>
      break;
 8006daa:	e076      	b.n	8006e9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	33b0      	adds	r3, #176	; 0xb0
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	7850      	ldrb	r0, [r2, #1]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	4798      	blx	r3
      break;
 8006dc8:	e067      	b.n	8006e9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b0b      	cmp	r3, #11
 8006dd0:	d851      	bhi.n	8006e76 <USBD_CDC_Setup+0x18a>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <USBD_CDC_Setup+0xec>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e09 	.word	0x08006e09
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006e77 	.word	0x08006e77
 8006de4:	08006e77 	.word	0x08006e77
 8006de8:	08006e77 	.word	0x08006e77
 8006dec:	08006e77 	.word	0x08006e77
 8006df0:	08006e77 	.word	0x08006e77
 8006df4:	08006e77 	.word	0x08006e77
 8006df8:	08006e77 	.word	0x08006e77
 8006dfc:	08006e77 	.word	0x08006e77
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e5d 	.word	0x08006e5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d107      	bne.n	8006e24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e14:	f107 030a 	add.w	r3, r7, #10
 8006e18:	2202      	movs	r2, #2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fd5d 	bl	80088dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e22:	e032      	b.n	8006e8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fce7 	bl	80087fa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e30:	e02b      	b.n	8006e8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d107      	bne.n	8006e4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e3e:	f107 030d 	add.w	r3, r7, #13
 8006e42:	2201      	movs	r2, #1
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 fd48 	bl	80088dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e4c:	e01d      	b.n	8006e8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fcd2 	bl	80087fa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e56:	2303      	movs	r3, #3
 8006e58:	75fb      	strb	r3, [r7, #23]
          break;
 8006e5a:	e016      	b.n	8006e8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d00f      	beq.n	8006e88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fcc5 	bl	80087fa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e74:	e008      	b.n	8006e88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fcbe 	bl	80087fa <USBD_CtlError>
          ret = USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	75fb      	strb	r3, [r7, #23]
          break;
 8006e82:	e002      	b.n	8006e8a <USBD_CDC_Setup+0x19e>
          break;
 8006e84:	bf00      	nop
 8006e86:	e008      	b.n	8006e9a <USBD_CDC_Setup+0x1ae>
          break;
 8006e88:	bf00      	nop
      }
      break;
 8006e8a:	e006      	b.n	8006e9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fcb3 	bl	80087fa <USBD_CtlError>
      ret = USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	75fb      	strb	r3, [r7, #23]
      break;
 8006e98:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	32b0      	adds	r2, #176	; 0xb0
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e065      	b.n	8006f9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	; 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3318      	adds	r3, #24
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d02f      	beq.n	8006f58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	f003 010f 	and.w	r1, r3, #15
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	460b      	mov	r3, r1
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	440b      	add	r3, r1
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4403      	add	r3, r0
 8006f20:	3344      	adds	r3, #68	; 0x44
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d112      	bne.n	8006f58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	f003 020f 	and.w	r2, r3, #15
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	3318      	adds	r3, #24
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f4a:	78f9      	ldrb	r1, [r7, #3]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2200      	movs	r2, #0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f002 faaf 	bl	80094b4 <USBD_LL_Transmit>
 8006f56:	e01f      	b.n	8006f98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	33b0      	adds	r3, #176	; 0xb0
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d010      	beq.n	8006f98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	33b0      	adds	r3, #176	; 0xb0
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f94:	78fa      	ldrb	r2, [r7, #3]
 8006f96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	32b0      	adds	r2, #176	; 0xb0
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	32b0      	adds	r2, #176	; 0xb0
 8006fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e01a      	b.n	800700a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f002 fadb 	bl	8009594 <USBD_LL_GetRxDataSize>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	33b0      	adds	r3, #176	; 0xb0
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007004:	4611      	mov	r1, r2
 8007006:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	32b0      	adds	r2, #176	; 0xb0
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	e025      	b.n	8007080 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	33b0      	adds	r3, #176	; 0xb0
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01a      	beq.n	800707e <USBD_CDC_EP0_RxReady+0x6c>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800704e:	2bff      	cmp	r3, #255	; 0xff
 8007050:	d015      	beq.n	800707e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	33b0      	adds	r3, #176	; 0xb0
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800706a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007072:	b292      	uxth	r2, r2
 8007074:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	22ff      	movs	r2, #255	; 0xff
 800707a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007090:	2182      	movs	r1, #130	; 0x82
 8007092:	4818      	ldr	r0, [pc, #96]	; (80070f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007094:	f000 fd4f 	bl	8007b36 <USBD_GetEpDesc>
 8007098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800709a:	2101      	movs	r1, #1
 800709c:	4815      	ldr	r0, [pc, #84]	; (80070f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800709e:	f000 fd4a 	bl	8007b36 <USBD_GetEpDesc>
 80070a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070a4:	2181      	movs	r1, #129	; 0x81
 80070a6:	4813      	ldr	r0, [pc, #76]	; (80070f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070a8:	f000 fd45 	bl	8007b36 <USBD_GetEpDesc>
 80070ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2210      	movs	r2, #16
 80070b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070c8:	711a      	strb	r2, [r3, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070dc:	711a      	strb	r2, [r3, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2243      	movs	r2, #67	; 0x43
 80070e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000050 	.word	0x20000050

080070f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007100:	2182      	movs	r1, #130	; 0x82
 8007102:	4818      	ldr	r0, [pc, #96]	; (8007164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007104:	f000 fd17 	bl	8007b36 <USBD_GetEpDesc>
 8007108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800710a:	2101      	movs	r1, #1
 800710c:	4815      	ldr	r0, [pc, #84]	; (8007164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800710e:	f000 fd12 	bl	8007b36 <USBD_GetEpDesc>
 8007112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007114:	2181      	movs	r1, #129	; 0x81
 8007116:	4813      	ldr	r0, [pc, #76]	; (8007164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007118:	f000 fd0d 	bl	8007b36 <USBD_GetEpDesc>
 800711c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2210      	movs	r2, #16
 8007128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2200      	movs	r2, #0
 8007134:	711a      	strb	r2, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f042 0202 	orr.w	r2, r2, #2
 800713c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d006      	beq.n	8007152 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	711a      	strb	r2, [r3, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f042 0202 	orr.w	r2, r2, #2
 8007150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2243      	movs	r2, #67	; 0x43
 8007156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000050 	.word	0x20000050

08007168 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007170:	2182      	movs	r1, #130	; 0x82
 8007172:	4818      	ldr	r0, [pc, #96]	; (80071d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007174:	f000 fcdf 	bl	8007b36 <USBD_GetEpDesc>
 8007178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800717a:	2101      	movs	r1, #1
 800717c:	4815      	ldr	r0, [pc, #84]	; (80071d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800717e:	f000 fcda 	bl	8007b36 <USBD_GetEpDesc>
 8007182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007184:	2181      	movs	r1, #129	; 0x81
 8007186:	4813      	ldr	r0, [pc, #76]	; (80071d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007188:	f000 fcd5 	bl	8007b36 <USBD_GetEpDesc>
 800718c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2210      	movs	r2, #16
 8007198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d006      	beq.n	80071ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a8:	711a      	strb	r2, [r3, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071bc:	711a      	strb	r2, [r3, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2243      	movs	r2, #67	; 0x43
 80071c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000050 	.word	0x20000050

080071d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	220a      	movs	r2, #10
 80071e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	2000000c 	.word	0x2000000c

080071f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	e009      	b.n	8007220 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	33b0      	adds	r3, #176	; 0xb0
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	32b0      	adds	r2, #176	; 0xb0
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800724e:	2303      	movs	r3, #3
 8007250:	e008      	b.n	8007264 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	32b0      	adds	r2, #176	; 0xb0
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	e004      	b.n	800729e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32b0      	adds	r2, #176	; 0xb0
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80072c4:	2301      	movs	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e025      	b.n	800731e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11f      	bne.n	800731c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2201      	movs	r2, #1
 80072e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80072e4:	4b10      	ldr	r3, [pc, #64]	; (8007328 <USBD_CDC_TransmitPacket+0x7c>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4403      	add	r3, r0
 80072fe:	3318      	adds	r3, #24
 8007300:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <USBD_CDC_TransmitPacket+0x7c>)
 8007304:	7819      	ldrb	r1, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f002 f8ce 	bl	80094b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000093 	.word	0x20000093

0800732c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32b0      	adds	r2, #176	; 0xb0
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	32b0      	adds	r2, #176	; 0xb0
 800734e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007356:	2303      	movs	r3, #3
 8007358:	e018      	b.n	800738c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	7c1b      	ldrb	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007362:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <USBD_CDC_ReceivePacket+0x68>)
 8007364:	7819      	ldrb	r1, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800736c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f002 f8d7 	bl	8009524 <USBD_LL_PrepareReceive>
 8007376:	e008      	b.n	800738a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <USBD_CDC_ReceivePacket+0x68>)
 800737a:	7819      	ldrb	r1, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007382:	2340      	movs	r3, #64	; 0x40
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 f8cd 	bl	8009524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000094 	.word	0x20000094

08007398 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e01f      	b.n	80073f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	79fa      	ldrb	r2, [r7, #7]
 80073e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f001 fea5 	bl	8009134 <USBD_LL_Init>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	e025      	b.n	800745c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32ae      	adds	r2, #174	; 0xae
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00f      	beq.n	800744c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	; 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	f107 020e 	add.w	r2, r7, #14
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
 8007444:	4602      	mov	r2, r0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fead 	bl	80091cc <USBD_LL_Start>
 8007472:	4603      	mov	r3, r0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	4611      	mov	r1, r2
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	4611      	mov	r1, r2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f001 f938 	bl	8008786 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	2b02      	cmp	r3, #2
 8007538:	d01a      	beq.n	8007570 <USBD_LL_SetupStage+0x72>
 800753a:	2b02      	cmp	r3, #2
 800753c:	d822      	bhi.n	8007584 <USBD_LL_SetupStage+0x86>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <USBD_LL_SetupStage+0x4a>
 8007542:	2b01      	cmp	r3, #1
 8007544:	d00a      	beq.n	800755c <USBD_LL_SetupStage+0x5e>
 8007546:	e01d      	b.n	8007584 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb65 	bl	8007c20 <USBD_StdDevReq>
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]
      break;
 800755a:	e020      	b.n	800759e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fbcd 	bl	8007d04 <USBD_StdItfReq>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]
      break;
 800756e:	e016      	b.n	800759e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc2f 	bl	8007ddc <USBD_StdEPReq>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
      break;
 8007582:	e00c      	b.n	800759e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800758a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 fec0 	bl	8009318 <USBD_LL_StallEP>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
      break;
 800759c:	bf00      	nop
  }

  return ret;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	460b      	mov	r3, r1
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d16e      	bne.n	800769e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	f040 8098 	bne.w	8007704 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d913      	bls.n	8007608 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	1ad2      	subs	r2, r2, r3
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	bf28      	it	cs
 80075fa:	4613      	movcs	r3, r2
 80075fc:	461a      	mov	r2, r3
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f001 f9b4 	bl	800896e <USBD_CtlContinueRx>
 8007606:	e07d      	b.n	8007704 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	2b02      	cmp	r3, #2
 8007614:	d014      	beq.n	8007640 <USBD_LL_DataOutStage+0x98>
 8007616:	2b02      	cmp	r3, #2
 8007618:	d81d      	bhi.n	8007656 <USBD_LL_DataOutStage+0xae>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <USBD_LL_DataOutStage+0x7c>
 800761e:	2b01      	cmp	r3, #1
 8007620:	d003      	beq.n	800762a <USBD_LL_DataOutStage+0x82>
 8007622:	e018      	b.n	8007656 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	75bb      	strb	r3, [r7, #22]
            break;
 8007628:	e018      	b.n	800765c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007630:	b2db      	uxtb	r3, r3
 8007632:	4619      	mov	r1, r3
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fa64 	bl	8007b02 <USBD_CoreFindIF>
 800763a:	4603      	mov	r3, r0
 800763c:	75bb      	strb	r3, [r7, #22]
            break;
 800763e:	e00d      	b.n	800765c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007646:	b2db      	uxtb	r3, r3
 8007648:	4619      	mov	r1, r3
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fa66 	bl	8007b1c <USBD_CoreFindEP>
 8007650:	4603      	mov	r3, r0
 8007652:	75bb      	strb	r3, [r7, #22]
            break;
 8007654:	e002      	b.n	800765c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	75bb      	strb	r3, [r7, #22]
            break;
 800765a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d119      	bne.n	8007696 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b03      	cmp	r3, #3
 800766c:	d113      	bne.n	8007696 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800766e:	7dba      	ldrb	r2, [r7, #22]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	32ae      	adds	r2, #174	; 0xae
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800767e:	7dba      	ldrb	r2, [r7, #22]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007686:	7dba      	ldrb	r2, [r7, #22]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	32ae      	adds	r2, #174	; 0xae
 800768c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 f97a 	bl	8008990 <USBD_CtlSendStatus>
 800769c:	e032      	b.n	8007704 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fa37 	bl	8007b1c <USBD_CoreFindEP>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076b2:	7dbb      	ldrb	r3, [r7, #22]
 80076b4:	2bff      	cmp	r3, #255	; 0xff
 80076b6:	d025      	beq.n	8007704 <USBD_LL_DataOutStage+0x15c>
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d122      	bne.n	8007704 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d117      	bne.n	80076fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076ca:	7dba      	ldrb	r2, [r7, #22]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	32ae      	adds	r2, #174	; 0xae
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00f      	beq.n	80076fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80076da:	7dba      	ldrb	r2, [r7, #22]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80076e2:	7dba      	ldrb	r2, [r7, #22]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	32ae      	adds	r2, #174	; 0xae
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	7afa      	ldrb	r2, [r7, #11]
 80076f0:	4611      	mov	r1, r2
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	4798      	blx	r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	e000      	b.n	8007706 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	460b      	mov	r3, r1
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d16f      	bne.n	8007802 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3314      	adds	r3, #20
 8007726:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800772e:	2b02      	cmp	r3, #2
 8007730:	d15a      	bne.n	80077e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	429a      	cmp	r2, r3
 800773c:	d914      	bls.n	8007768 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	1ad2      	subs	r2, r2, r3
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	461a      	mov	r2, r3
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f001 f8dc 	bl	8008912 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800775a:	2300      	movs	r3, #0
 800775c:	2200      	movs	r2, #0
 800775e:	2100      	movs	r1, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f001 fedf 	bl	8009524 <USBD_LL_PrepareReceive>
 8007766:	e03f      	b.n	80077e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d11c      	bne.n	80077ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800777c:	429a      	cmp	r2, r3
 800777e:	d316      	bcc.n	80077ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800778a:	429a      	cmp	r2, r3
 800778c:	d20f      	bcs.n	80077ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800778e:	2200      	movs	r2, #0
 8007790:	2100      	movs	r1, #0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f001 f8bd 	bl	8008912 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077a0:	2300      	movs	r3, #0
 80077a2:	2200      	movs	r2, #0
 80077a4:	2100      	movs	r1, #0
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f001 febc 	bl	8009524 <USBD_LL_PrepareReceive>
 80077ac:	e01c      	b.n	80077e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d10f      	bne.n	80077da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077da:	2180      	movs	r1, #128	; 0x80
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f001 fd9b 	bl	8009318 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f001 f8e7 	bl	80089b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d03a      	beq.n	8007868 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff fe42 	bl	800747c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007800:	e032      	b.n	8007868 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007808:	b2db      	uxtb	r3, r3
 800780a:	4619      	mov	r1, r3
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f985 	bl	8007b1c <USBD_CoreFindEP>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2bff      	cmp	r3, #255	; 0xff
 800781a:	d025      	beq.n	8007868 <USBD_LL_DataInStage+0x15a>
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d122      	bne.n	8007868 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b03      	cmp	r3, #3
 800782c:	d11c      	bne.n	8007868 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800782e:	7dfa      	ldrb	r2, [r7, #23]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	32ae      	adds	r2, #174	; 0xae
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d014      	beq.n	8007868 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800783e:	7dfa      	ldrb	r2, [r7, #23]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007846:	7dfa      	ldrb	r2, [r7, #23]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	32ae      	adds	r2, #174	; 0xae
 800784c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	7afa      	ldrb	r2, [r7, #11]
 8007854:	4611      	mov	r1, r2
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	4798      	blx	r3
 800785a:	4603      	mov	r3, r0
 800785c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800785e:	7dbb      	ldrb	r3, [r7, #22]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007864:	7dbb      	ldrb	r3, [r7, #22]
 8007866:	e000      	b.n	800786a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d014      	beq.n	80078d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00e      	beq.n	80078d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6852      	ldr	r2, [r2, #4]
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	4611      	mov	r1, r2
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80078d4:	2303      	movs	r3, #3
 80078d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fca6 	bl	8009230 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2240      	movs	r2, #64	; 0x40
 80078f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078f4:	2340      	movs	r3, #64	; 0x40
 80078f6:	2200      	movs	r2, #0
 80078f8:	2180      	movs	r1, #128	; 0x80
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fc98 	bl	8009230 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2240      	movs	r2, #64	; 0x40
 800790a:	621a      	str	r2, [r3, #32]

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b04      	cmp	r3, #4
 8007948:	d006      	beq.n	8007958 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007950:	b2da      	uxtb	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2204      	movs	r2, #4
 800795c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b04      	cmp	r3, #4
 8007980:	d106      	bne.n	8007990 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d110      	bne.n	80079d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	32ae      	adds	r2, #174	; 0xae
 80079f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e01c      	b.n	8007a3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d115      	bne.n	8007a38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32ae      	adds	r2, #174	; 0xae
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	32ae      	adds	r2, #174	; 0xae
 8007a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	78fa      	ldrb	r2, [r7, #3]
 8007a32:	4611      	mov	r1, r2
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	32ae      	adds	r2, #174	; 0xae
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e01c      	b.n	8007a9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d115      	bne.n	8007a9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	32ae      	adds	r2, #174	; 0xae
 8007a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32ae      	adds	r2, #174	; 0xae
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	4611      	mov	r1, r2
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6852      	ldr	r2, [r2, #4]
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	4611      	mov	r1, r2
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b086      	sub	sp, #24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	885b      	ldrh	r3, [r3, #2]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d920      	bls.n	8007ba0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b66:	e013      	b.n	8007b90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b68:	f107 030a 	add.w	r3, r7, #10
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6978      	ldr	r0, [r7, #20]
 8007b70:	f000 f81b 	bl	8007baa <USBD_GetNextDesc>
 8007b74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	d108      	bne.n	8007b90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	789b      	ldrb	r3, [r3, #2]
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d008      	beq.n	8007b9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	897b      	ldrh	r3, [r7, #10]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d8e5      	bhi.n	8007b68 <USBD_GetEpDesc+0x32>
 8007b9c:	e000      	b.n	8007ba0 <USBD_GetEpDesc+0x6a>
          break;
 8007b9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ba0:	693b      	ldr	r3, [r7, #16]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	881a      	ldrh	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4413      	add	r3, r2
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c02:	8a3b      	ldrh	r3, [r7, #16]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	b21a      	sxth	r2, r3
 8007c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b21b      	sxth	r3, r3
 8007c10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c12:	89fb      	ldrh	r3, [r7, #14]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d005      	beq.n	8007c46 <USBD_StdDevReq+0x26>
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d857      	bhi.n	8007cee <USBD_StdDevReq+0xce>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00f      	beq.n	8007c62 <USBD_StdDevReq+0x42>
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d153      	bne.n	8007cee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	32ae      	adds	r2, #174	; 0xae
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c60:	e04a      	b.n	8007cf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d83b      	bhi.n	8007ce2 <USBD_StdDevReq+0xc2>
 8007c6a:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <USBD_StdDevReq+0x50>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007cc5 	.word	0x08007cc5
 8007c74:	08007cd9 	.word	0x08007cd9
 8007c78:	08007ce3 	.word	0x08007ce3
 8007c7c:	08007ccf 	.word	0x08007ccf
 8007c80:	08007ce3 	.word	0x08007ce3
 8007c84:	08007ca3 	.word	0x08007ca3
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007ce3 	.word	0x08007ce3
 8007c90:	08007cbb 	.word	0x08007cbb
 8007c94:	08007cad 	.word	0x08007cad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa3c 	bl	8008118 <USBD_GetDescriptor>
          break;
 8007ca0:	e024      	b.n	8007cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fbcb 	bl	8008440 <USBD_SetAddress>
          break;
 8007caa:	e01f      	b.n	8007cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fc0a 	bl	80084c8 <USBD_SetConfig>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
          break;
 8007cb8:	e018      	b.n	8007cec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fcad 	bl	800861c <USBD_GetConfig>
          break;
 8007cc2:	e013      	b.n	8007cec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fcde 	bl	8008688 <USBD_GetStatus>
          break;
 8007ccc:	e00e      	b.n	8007cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fd0d 	bl	80086f0 <USBD_SetFeature>
          break;
 8007cd6:	e009      	b.n	8007cec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fd31 	bl	8008742 <USBD_ClrFeature>
          break;
 8007ce0:	e004      	b.n	8007cec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fd88 	bl	80087fa <USBD_CtlError>
          break;
 8007cea:	bf00      	nop
      }
      break;
 8007cec:	e004      	b.n	8007cf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fd82 	bl	80087fa <USBD_CtlError>
      break;
 8007cf6:	bf00      	nop
  }

  return ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop

08007d04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d1a:	2b40      	cmp	r3, #64	; 0x40
 8007d1c:	d005      	beq.n	8007d2a <USBD_StdItfReq+0x26>
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d852      	bhi.n	8007dc8 <USBD_StdItfReq+0xc4>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <USBD_StdItfReq+0x26>
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d14e      	bne.n	8007dc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d840      	bhi.n	8007dba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	889b      	ldrh	r3, [r3, #4]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d836      	bhi.n	8007db0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	889b      	ldrh	r3, [r3, #4]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fed9 	bl	8007b02 <USBD_CoreFindIF>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2bff      	cmp	r3, #255	; 0xff
 8007d58:	d01d      	beq.n	8007d96 <USBD_StdItfReq+0x92>
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11a      	bne.n	8007d96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d60:	7bba      	ldrb	r2, [r7, #14]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32ae      	adds	r2, #174	; 0xae
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00f      	beq.n	8007d90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d70:	7bba      	ldrb	r2, [r7, #14]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d78:	7bba      	ldrb	r2, [r7, #14]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	32ae      	adds	r2, #174	; 0xae
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d8e:	e004      	b.n	8007d9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d94:	e001      	b.n	8007d9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	88db      	ldrh	r3, [r3, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d110      	bne.n	8007dc4 <USBD_StdItfReq+0xc0>
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10d      	bne.n	8007dc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fdf1 	bl	8008990 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dae:	e009      	b.n	8007dc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fd21 	bl	80087fa <USBD_CtlError>
          break;
 8007db8:	e004      	b.n	8007dc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fd1c 	bl	80087fa <USBD_CtlError>
          break;
 8007dc2:	e000      	b.n	8007dc6 <USBD_StdItfReq+0xc2>
          break;
 8007dc4:	bf00      	nop
      }
      break;
 8007dc6:	e004      	b.n	8007dd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fd15 	bl	80087fa <USBD_CtlError>
      break;
 8007dd0:	bf00      	nop
  }

  return ret;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	889b      	ldrh	r3, [r3, #4]
 8007dee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	d007      	beq.n	8007e0c <USBD_StdEPReq+0x30>
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	f200 817f 	bhi.w	8008100 <USBD_StdEPReq+0x324>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d02a      	beq.n	8007e5c <USBD_StdEPReq+0x80>
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	f040 817a 	bne.w	8008100 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fe83 	bl	8007b1c <USBD_CoreFindEP>
 8007e16:	4603      	mov	r3, r0
 8007e18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e1a:	7b7b      	ldrb	r3, [r7, #13]
 8007e1c:	2bff      	cmp	r3, #255	; 0xff
 8007e1e:	f000 8174 	beq.w	800810a <USBD_StdEPReq+0x32e>
 8007e22:	7b7b      	ldrb	r3, [r7, #13]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f040 8170 	bne.w	800810a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e2a:	7b7a      	ldrb	r2, [r7, #13]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e32:	7b7a      	ldrb	r2, [r7, #13]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	32ae      	adds	r2, #174	; 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8163 	beq.w	800810a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e44:	7b7a      	ldrb	r2, [r7, #13]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	32ae      	adds	r2, #174	; 0xae
 8007e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e5a:	e156      	b.n	800810a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d008      	beq.n	8007e76 <USBD_StdEPReq+0x9a>
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	f300 8145 	bgt.w	80080f4 <USBD_StdEPReq+0x318>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 809b 	beq.w	8007fa6 <USBD_StdEPReq+0x1ca>
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d03c      	beq.n	8007eee <USBD_StdEPReq+0x112>
 8007e74:	e13e      	b.n	80080f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d002      	beq.n	8007e88 <USBD_StdEPReq+0xac>
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d016      	beq.n	8007eb4 <USBD_StdEPReq+0xd8>
 8007e86:	e02c      	b.n	8007ee2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <USBD_StdEPReq+0xce>
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b80      	cmp	r3, #128	; 0x80
 8007e92:	d00a      	beq.n	8007eaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fa3d 	bl	8009318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 fa39 	bl	8009318 <USBD_LL_StallEP>
 8007ea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ea8:	e020      	b.n	8007eec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fca4 	bl	80087fa <USBD_CtlError>
              break;
 8007eb2:	e01b      	b.n	8007eec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	885b      	ldrh	r3, [r3, #2]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10e      	bne.n	8007eda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <USBD_StdEPReq+0xfe>
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d008      	beq.n	8007eda <USBD_StdEPReq+0xfe>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	88db      	ldrh	r3, [r3, #6]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fa1f 	bl	8009318 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fd58 	bl	8008990 <USBD_CtlSendStatus>

              break;
 8007ee0:	e004      	b.n	8007eec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc88 	bl	80087fa <USBD_CtlError>
              break;
 8007eea:	bf00      	nop
          }
          break;
 8007eec:	e107      	b.n	80080fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d002      	beq.n	8007f00 <USBD_StdEPReq+0x124>
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d016      	beq.n	8007f2c <USBD_StdEPReq+0x150>
 8007efe:	e04b      	b.n	8007f98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00d      	beq.n	8007f22 <USBD_StdEPReq+0x146>
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b80      	cmp	r3, #128	; 0x80
 8007f0a:	d00a      	beq.n	8007f22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fa01 	bl	8009318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 f9fd 	bl	8009318 <USBD_LL_StallEP>
 8007f1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f20:	e040      	b.n	8007fa4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fc68 	bl	80087fa <USBD_CtlError>
              break;
 8007f2a:	e03b      	b.n	8007fa4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	885b      	ldrh	r3, [r3, #2]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d136      	bne.n	8007fa2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d004      	beq.n	8007f48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fa1e 	bl	8009384 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fd21 	bl	8008990 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff fde2 	bl	8007b1c <USBD_CoreFindEP>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
 8007f5e:	2bff      	cmp	r3, #255	; 0xff
 8007f60:	d01f      	beq.n	8007fa2 <USBD_StdEPReq+0x1c6>
 8007f62:	7b7b      	ldrb	r3, [r7, #13]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d11c      	bne.n	8007fa2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f68:	7b7a      	ldrb	r2, [r7, #13]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f70:	7b7a      	ldrb	r2, [r7, #13]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	32ae      	adds	r2, #174	; 0xae
 8007f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d010      	beq.n	8007fa2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f80:	7b7a      	ldrb	r2, [r7, #13]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	32ae      	adds	r2, #174	; 0xae
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f96:	e004      	b.n	8007fa2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fc2d 	bl	80087fa <USBD_CtlError>
              break;
 8007fa0:	e000      	b.n	8007fa4 <USBD_StdEPReq+0x1c8>
              break;
 8007fa2:	bf00      	nop
          }
          break;
 8007fa4:	e0ab      	b.n	80080fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d002      	beq.n	8007fb8 <USBD_StdEPReq+0x1dc>
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d032      	beq.n	800801c <USBD_StdEPReq+0x240>
 8007fb6:	e097      	b.n	80080e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <USBD_StdEPReq+0x1f2>
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b80      	cmp	r3, #128	; 0x80
 8007fc2:	d004      	beq.n	8007fce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fc17 	bl	80087fa <USBD_CtlError>
                break;
 8007fcc:	e091      	b.n	80080f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0b      	bge.n	8007fee <USBD_StdEPReq+0x212>
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	3304      	adds	r3, #4
 8007fec:	e00b      	b.n	8008006 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	3304      	adds	r3, #4
 8008006:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2202      	movs	r2, #2
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fc61 	bl	80088dc <USBD_CtlSendData>
              break;
 800801a:	e06a      	b.n	80080f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800801c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da11      	bge.n	8008048 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	f003 020f 	and.w	r2, r3, #15
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	3324      	adds	r3, #36	; 0x24
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d117      	bne.n	800806e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fbda 	bl	80087fa <USBD_CtlError>
                  break;
 8008046:	e054      	b.n	80080f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	f003 020f 	and.w	r2, r3, #15
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fbc7 	bl	80087fa <USBD_CtlError>
                  break;
 800806c:	e041      	b.n	80080f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	da0b      	bge.n	800808e <USBD_StdEPReq+0x2b2>
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	3310      	adds	r3, #16
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4413      	add	r3, r2
 800808a:	3304      	adds	r3, #4
 800808c:	e00b      	b.n	80080a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	3304      	adds	r3, #4
 80080a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <USBD_StdEPReq+0x2d8>
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b80      	cmp	r3, #128	; 0x80
 80080b2:	d103      	bne.n	80080bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	e00e      	b.n	80080da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f995 	bl	80093f0 <USBD_LL_IsStallEP>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2201      	movs	r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e002      	b.n	80080da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2202      	movs	r2, #2
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fbfb 	bl	80088dc <USBD_CtlSendData>
              break;
 80080e6:	e004      	b.n	80080f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fb85 	bl	80087fa <USBD_CtlError>
              break;
 80080f0:	bf00      	nop
          }
          break;
 80080f2:	e004      	b.n	80080fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fb7f 	bl	80087fa <USBD_CtlError>
          break;
 80080fc:	bf00      	nop
      }
      break;
 80080fe:	e005      	b.n	800810c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fb79 	bl	80087fa <USBD_CtlError>
      break;
 8008108:	e000      	b.n	800810c <USBD_StdEPReq+0x330>
      break;
 800810a:	bf00      	nop
  }

  return ret;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	2b0e      	cmp	r3, #14
 800813a:	f200 8152 	bhi.w	80083e2 <USBD_GetDescriptor+0x2ca>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <USBD_GetDescriptor+0x2c>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	080081b5 	.word	0x080081b5
 8008148:	080081cd 	.word	0x080081cd
 800814c:	0800820d 	.word	0x0800820d
 8008150:	080083e3 	.word	0x080083e3
 8008154:	080083e3 	.word	0x080083e3
 8008158:	08008383 	.word	0x08008383
 800815c:	080083af 	.word	0x080083af
 8008160:	080083e3 	.word	0x080083e3
 8008164:	080083e3 	.word	0x080083e3
 8008168:	080083e3 	.word	0x080083e3
 800816c:	080083e3 	.word	0x080083e3
 8008170:	080083e3 	.word	0x080083e3
 8008174:	080083e3 	.word	0x080083e3
 8008178:	080083e3 	.word	0x080083e3
 800817c:	08008181 	.word	0x08008181
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	7c12      	ldrb	r2, [r2, #16]
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a2:	e126      	b.n	80083f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb27 	bl	80087fa <USBD_CtlError>
        err++;
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	3301      	adds	r3, #1
 80081b0:	72fb      	strb	r3, [r7, #11]
      break;
 80081b2:	e11e      	b.n	80083f2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	7c12      	ldrb	r2, [r2, #16]
 80081c0:	f107 0108 	add.w	r1, r7, #8
 80081c4:	4610      	mov	r0, r2
 80081c6:	4798      	blx	r3
 80081c8:	60f8      	str	r0, [r7, #12]
      break;
 80081ca:	e112      	b.n	80083f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7c1b      	ldrb	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10d      	bne.n	80081f0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f107 0208 	add.w	r2, r7, #8
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
 80081e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	2202      	movs	r2, #2
 80081ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081ee:	e100      	b.n	80083f2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	f107 0208 	add.w	r2, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	2202      	movs	r2, #2
 8008208:	701a      	strb	r2, [r3, #0]
      break;
 800820a:	e0f2      	b.n	80083f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	885b      	ldrh	r3, [r3, #2]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b05      	cmp	r3, #5
 8008214:	f200 80ac 	bhi.w	8008370 <USBD_GetDescriptor+0x258>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <USBD_GetDescriptor+0x108>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008239 	.word	0x08008239
 8008224:	0800826d 	.word	0x0800826d
 8008228:	080082a1 	.word	0x080082a1
 800822c:	080082d5 	.word	0x080082d5
 8008230:	08008309 	.word	0x08008309
 8008234:	0800833d 	.word	0x0800833d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	7c12      	ldrb	r2, [r2, #16]
 8008250:	f107 0108 	add.w	r1, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800825a:	e091      	b.n	8008380 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 facb 	bl	80087fa <USBD_CtlError>
            err++;
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	3301      	adds	r3, #1
 8008268:	72fb      	strb	r3, [r7, #11]
          break;
 800826a:	e089      	b.n	8008380 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00b      	beq.n	8008290 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	7c12      	ldrb	r2, [r2, #16]
 8008284:	f107 0108 	add.w	r1, r7, #8
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800828e:	e077      	b.n	8008380 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fab1 	bl	80087fa <USBD_CtlError>
            err++;
 8008298:	7afb      	ldrb	r3, [r7, #11]
 800829a:	3301      	adds	r3, #1
 800829c:	72fb      	strb	r3, [r7, #11]
          break;
 800829e:	e06f      	b.n	8008380 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7c12      	ldrb	r2, [r2, #16]
 80082b8:	f107 0108 	add.w	r1, r7, #8
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c2:	e05d      	b.n	8008380 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa97 	bl	80087fa <USBD_CtlError>
            err++;
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	3301      	adds	r3, #1
 80082d0:	72fb      	strb	r3, [r7, #11]
          break;
 80082d2:	e055      	b.n	8008380 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	7c12      	ldrb	r2, [r2, #16]
 80082ec:	f107 0108 	add.w	r1, r7, #8
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082f6:	e043      	b.n	8008380 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa7d 	bl	80087fa <USBD_CtlError>
            err++;
 8008300:	7afb      	ldrb	r3, [r7, #11]
 8008302:	3301      	adds	r3, #1
 8008304:	72fb      	strb	r3, [r7, #11]
          break;
 8008306:	e03b      	b.n	8008380 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832a:	e029      	b.n	8008380 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa63 	bl	80087fa <USBD_CtlError>
            err++;
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	3301      	adds	r3, #1
 8008338:	72fb      	strb	r3, [r7, #11]
          break;
 800833a:	e021      	b.n	8008380 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	7c12      	ldrb	r2, [r2, #16]
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835e:	e00f      	b.n	8008380 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa49 	bl	80087fa <USBD_CtlError>
            err++;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	3301      	adds	r3, #1
 800836c:	72fb      	strb	r3, [r7, #11]
          break;
 800836e:	e007      	b.n	8008380 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa41 	bl	80087fa <USBD_CtlError>
          err++;
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	3301      	adds	r3, #1
 800837c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800837e:	bf00      	nop
      }
      break;
 8008380:	e037      	b.n	80083f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7c1b      	ldrb	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	f107 0208 	add.w	r2, r7, #8
 8008396:	4610      	mov	r0, r2
 8008398:	4798      	blx	r3
 800839a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800839c:	e029      	b.n	80083f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fa2a 	bl	80087fa <USBD_CtlError>
        err++;
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	3301      	adds	r3, #1
 80083aa:	72fb      	strb	r3, [r7, #11]
      break;
 80083ac:	e021      	b.n	80083f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7c1b      	ldrb	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10d      	bne.n	80083d2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	f107 0208 	add.w	r2, r7, #8
 80083c2:	4610      	mov	r0, r2
 80083c4:	4798      	blx	r3
 80083c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3301      	adds	r3, #1
 80083cc:	2207      	movs	r2, #7
 80083ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083d0:	e00f      	b.n	80083f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa10 	bl	80087fa <USBD_CtlError>
        err++;
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	3301      	adds	r3, #1
 80083de:	72fb      	strb	r3, [r7, #11]
      break;
 80083e0:	e007      	b.n	80083f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa08 	bl	80087fa <USBD_CtlError>
      err++;
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	3301      	adds	r3, #1
 80083ee:	72fb      	strb	r3, [r7, #11]
      break;
 80083f0:	bf00      	nop
  }

  if (err != 0U)
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11e      	bne.n	8008436 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	88db      	ldrh	r3, [r3, #6]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d016      	beq.n	800842e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008400:	893b      	ldrh	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00e      	beq.n	8008424 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	88da      	ldrh	r2, [r3, #6]
 800840a:	893b      	ldrh	r3, [r7, #8]
 800840c:	4293      	cmp	r3, r2
 800840e:	bf28      	it	cs
 8008410:	4613      	movcs	r3, r2
 8008412:	b29b      	uxth	r3, r3
 8008414:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008416:	893b      	ldrh	r3, [r7, #8]
 8008418:	461a      	mov	r2, r3
 800841a:	68f9      	ldr	r1, [r7, #12]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fa5d 	bl	80088dc <USBD_CtlSendData>
 8008422:	e009      	b.n	8008438 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9e7 	bl	80087fa <USBD_CtlError>
 800842c:	e004      	b.n	8008438 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 faae 	bl	8008990 <USBD_CtlSendStatus>
 8008434:	e000      	b.n	8008438 <USBD_GetDescriptor+0x320>
    return;
 8008436:	bf00      	nop
  }
}
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop

08008440 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	889b      	ldrh	r3, [r3, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d131      	bne.n	80084b6 <USBD_SetAddress+0x76>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	88db      	ldrh	r3, [r3, #6]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d12d      	bne.n	80084b6 <USBD_SetAddress+0x76>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	2b7f      	cmp	r3, #127	; 0x7f
 8008460:	d829      	bhi.n	80084b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800846c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d104      	bne.n	8008484 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9bc 	bl	80087fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	e01d      	b.n	80084c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	7bfa      	ldrb	r2, [r7, #15]
 8008488:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 ffd9 	bl	8009448 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa7a 	bl	8008990 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084aa:	e009      	b.n	80084c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b4:	e004      	b.n	80084c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f99e 	bl	80087fa <USBD_CtlError>
  }
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	885b      	ldrh	r3, [r3, #2]
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	4b4e      	ldr	r3, [pc, #312]	; (8008618 <USBD_SetConfig+0x150>)
 80084de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084e0:	4b4d      	ldr	r3, [pc, #308]	; (8008618 <USBD_SetConfig+0x150>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d905      	bls.n	80084f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f985 	bl	80087fa <USBD_CtlError>
    return USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e08c      	b.n	800860e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d002      	beq.n	8008506 <USBD_SetConfig+0x3e>
 8008500:	2b03      	cmp	r3, #3
 8008502:	d029      	beq.n	8008558 <USBD_SetConfig+0x90>
 8008504:	e075      	b.n	80085f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008506:	4b44      	ldr	r3, [pc, #272]	; (8008618 <USBD_SetConfig+0x150>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d020      	beq.n	8008550 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800850e:	4b42      	ldr	r3, [pc, #264]	; (8008618 <USBD_SetConfig+0x150>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008518:	4b3f      	ldr	r3, [pc, #252]	; (8008618 <USBD_SetConfig+0x150>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fe ffb7 	bl	8007492 <USBD_SetClassConfig>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f962 	bl	80087fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800853e:	e065      	b.n	800860c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fa25 	bl	8008990 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2203      	movs	r2, #3
 800854a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800854e:	e05d      	b.n	800860c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa1d 	bl	8008990 <USBD_CtlSendStatus>
      break;
 8008556:	e059      	b.n	800860c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008558:	4b2f      	ldr	r3, [pc, #188]	; (8008618 <USBD_SetConfig+0x150>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d112      	bne.n	8008586 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008568:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <USBD_SetConfig+0x150>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008572:	4b29      	ldr	r3, [pc, #164]	; (8008618 <USBD_SetConfig+0x150>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7fe ffa6 	bl	80074ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa06 	bl	8008990 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008584:	e042      	b.n	800860c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008586:	4b24      	ldr	r3, [pc, #144]	; (8008618 <USBD_SetConfig+0x150>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d02a      	beq.n	80085ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7fe ff94 	bl	80074ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085a2:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <USBD_SetConfig+0x150>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <USBD_SetConfig+0x150>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe ff6d 	bl	8007492 <USBD_SetClassConfig>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00f      	beq.n	80085e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f918 	bl	80087fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fe ff79 	bl	80074ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085e0:	e014      	b.n	800860c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9d4 	bl	8008990 <USBD_CtlSendStatus>
      break;
 80085e8:	e010      	b.n	800860c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9d0 	bl	8008990 <USBD_CtlSendStatus>
      break;
 80085f0:	e00c      	b.n	800860c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f900 	bl	80087fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <USBD_SetConfig+0x150>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7fe ff62 	bl	80074ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008606:	2303      	movs	r3, #3
 8008608:	73fb      	strb	r3, [r7, #15]
      break;
 800860a:	bf00      	nop
  }

  return ret;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000450 	.word	0x20000450

0800861c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d004      	beq.n	8008638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f8e2 	bl	80087fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008636:	e023      	b.n	8008680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	dc02      	bgt.n	800864a <USBD_GetConfig+0x2e>
 8008644:	2b00      	cmp	r3, #0
 8008646:	dc03      	bgt.n	8008650 <USBD_GetConfig+0x34>
 8008648:	e015      	b.n	8008676 <USBD_GetConfig+0x5a>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d00b      	beq.n	8008666 <USBD_GetConfig+0x4a>
 800864e:	e012      	b.n	8008676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3308      	adds	r3, #8
 800865a:	2201      	movs	r2, #1
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f93c 	bl	80088dc <USBD_CtlSendData>
        break;
 8008664:	e00c      	b.n	8008680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3304      	adds	r3, #4
 800866a:	2201      	movs	r2, #1
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f934 	bl	80088dc <USBD_CtlSendData>
        break;
 8008674:	e004      	b.n	8008680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8be 	bl	80087fa <USBD_CtlError>
        break;
 800867e:	bf00      	nop
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	2b02      	cmp	r3, #2
 800869e:	d81e      	bhi.n	80086de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	88db      	ldrh	r3, [r3, #6]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d004      	beq.n	80086b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f8a5 	bl	80087fa <USBD_CtlError>
        break;
 80086b0:	e01a      	b.n	80086e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f043 0202 	orr.w	r2, r3, #2
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	330c      	adds	r3, #12
 80086d2:	2202      	movs	r2, #2
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f900 	bl	80088dc <USBD_CtlSendData>
      break;
 80086dc:	e004      	b.n	80086e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f88a 	bl	80087fa <USBD_CtlError>
      break;
 80086e6:	bf00      	nop
  }
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d107      	bne.n	8008712 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f940 	bl	8008990 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008710:	e013      	b.n	800873a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	885b      	ldrh	r3, [r3, #2]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d10b      	bne.n	8008732 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	889b      	ldrh	r3, [r3, #4]
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	b29b      	uxth	r3, r3
 8008722:	b2da      	uxtb	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f930 	bl	8008990 <USBD_CtlSendStatus>
}
 8008730:	e003      	b.n	800873a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f860 	bl	80087fa <USBD_CtlError>
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	b2db      	uxtb	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	2b02      	cmp	r3, #2
 8008758:	d80b      	bhi.n	8008772 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	885b      	ldrh	r3, [r3, #2]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10c      	bne.n	800877c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f910 	bl	8008990 <USBD_CtlSendStatus>
      }
      break;
 8008770:	e004      	b.n	800877c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f840 	bl	80087fa <USBD_CtlError>
      break;
 800877a:	e000      	b.n	800877e <USBD_ClrFeature+0x3c>
      break;
 800877c:	bf00      	nop
  }
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff fa17 	bl	8007be4 <SWAPBYTE>
 80087b6:	4603      	mov	r3, r0
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff fa0a 	bl	8007be4 <SWAPBYTE>
 80087d0:	4603      	mov	r3, r0
 80087d2:	461a      	mov	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff f9fd 	bl	8007be4 <SWAPBYTE>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	80da      	strh	r2, [r3, #6]
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008804:	2180      	movs	r1, #128	; 0x80
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fd86 	bl	8009318 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800880c:	2100      	movs	r1, #0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fd82 	bl	8009318 <USBD_LL_StallEP>
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d036      	beq.n	80088a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008836:	6938      	ldr	r0, [r7, #16]
 8008838:	f000 f836 	bl	80088a8 <USBD_GetLen>
 800883c:	4603      	mov	r3, r0
 800883e:	3301      	adds	r3, #1
 8008840:	b29b      	uxth	r3, r3
 8008842:	005b      	lsls	r3, r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	4413      	add	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	701a      	strb	r2, [r3, #0]
  idx++;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	3301      	adds	r3, #1
 800885a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4413      	add	r3, r2
 8008862:	2203      	movs	r2, #3
 8008864:	701a      	strb	r2, [r3, #0]
  idx++;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	3301      	adds	r3, #1
 800886a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800886c:	e013      	b.n	8008896 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	4413      	add	r3, r2
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	7812      	ldrb	r2, [r2, #0]
 8008878:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
    idx++;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	3301      	adds	r3, #1
 8008884:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	4413      	add	r3, r2
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	3301      	adds	r3, #1
 8008894:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e7      	bne.n	800886e <USBD_GetString+0x52>
 800889e:	e000      	b.n	80088a2 <USBD_GetString+0x86>
    return;
 80088a0:	bf00      	nop
  }
}
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088b8:	e005      	b.n	80088c6 <USBD_GetLen+0x1e>
  {
    len++;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	3301      	adds	r3, #1
 80088be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3301      	adds	r3, #1
 80088c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f5      	bne.n	80088ba <USBD_GetLen+0x12>
  }

  return len;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	2100      	movs	r1, #0
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fdd6 	bl	80094b4 <USBD_LL_Transmit>

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	2100      	movs	r1, #0
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 fdc5 	bl	80094b4 <USBD_LL_Transmit>

  return USBD_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2203      	movs	r2, #3
 8008944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	2100      	movs	r1, #0
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fde0 	bl	8009524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	2100      	movs	r1, #0
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fdcf 	bl	8009524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2204      	movs	r2, #4
 800899c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089a0:	2300      	movs	r3, #0
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fd84 	bl	80094b4 <USBD_LL_Transmit>

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2205      	movs	r2, #5
 80089c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089c6:	2300      	movs	r3, #0
 80089c8:	2200      	movs	r2, #0
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fda9 	bl	8009524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089e0:	2200      	movs	r2, #0
 80089e2:	4912      	ldr	r1, [pc, #72]	; (8008a2c <MX_USB_DEVICE_Init+0x50>)
 80089e4:	4812      	ldr	r0, [pc, #72]	; (8008a30 <MX_USB_DEVICE_Init+0x54>)
 80089e6:	f7fe fcd7 	bl	8007398 <USBD_Init>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089f0:	f7f8 fe02 	bl	80015f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089f4:	490f      	ldr	r1, [pc, #60]	; (8008a34 <MX_USB_DEVICE_Init+0x58>)
 80089f6:	480e      	ldr	r0, [pc, #56]	; (8008a30 <MX_USB_DEVICE_Init+0x54>)
 80089f8:	f7fe fcfe 	bl	80073f8 <USBD_RegisterClass>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a02:	f7f8 fdf9 	bl	80015f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a06:	490c      	ldr	r1, [pc, #48]	; (8008a38 <MX_USB_DEVICE_Init+0x5c>)
 8008a08:	4809      	ldr	r0, [pc, #36]	; (8008a30 <MX_USB_DEVICE_Init+0x54>)
 8008a0a:	f7fe fbf5 	bl	80071f8 <USBD_CDC_RegisterInterface>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a14:	f7f8 fdf0 	bl	80015f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <MX_USB_DEVICE_Init+0x54>)
 8008a1a:	f7fe fd23 	bl	8007464 <USBD_Start>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a24:	f7f8 fde8 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a28:	bf00      	nop
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	200000ac 	.word	0x200000ac
 8008a30:	20000454 	.word	0x20000454
 8008a34:	20000018 	.word	0x20000018
 8008a38:	20000098 	.word	0x20000098

08008a3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a40:	2200      	movs	r2, #0
 8008a42:	4905      	ldr	r1, [pc, #20]	; (8008a58 <CDC_Init_FS+0x1c>)
 8008a44:	4805      	ldr	r0, [pc, #20]	; (8008a5c <CDC_Init_FS+0x20>)
 8008a46:	f7fe fbf1 	bl	800722c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a4a:	4905      	ldr	r1, [pc, #20]	; (8008a60 <CDC_Init_FS+0x24>)
 8008a4c:	4803      	ldr	r0, [pc, #12]	; (8008a5c <CDC_Init_FS+0x20>)
 8008a4e:	f7fe fc0f 	bl	8007270 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000f30 	.word	0x20000f30
 8008a5c:	20000454 	.word	0x20000454
 8008a60:	20000730 	.word	0x20000730

08008a64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	71fb      	strb	r3, [r7, #7]
 8008a80:	4613      	mov	r3, r2
 8008a82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	2b23      	cmp	r3, #35	; 0x23
 8008a88:	d84a      	bhi.n	8008b20 <CDC_Control_FS+0xac>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <CDC_Control_FS+0x1c>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008b21 	.word	0x08008b21
 8008a94:	08008b21 	.word	0x08008b21
 8008a98:	08008b21 	.word	0x08008b21
 8008a9c:	08008b21 	.word	0x08008b21
 8008aa0:	08008b21 	.word	0x08008b21
 8008aa4:	08008b21 	.word	0x08008b21
 8008aa8:	08008b21 	.word	0x08008b21
 8008aac:	08008b21 	.word	0x08008b21
 8008ab0:	08008b21 	.word	0x08008b21
 8008ab4:	08008b21 	.word	0x08008b21
 8008ab8:	08008b21 	.word	0x08008b21
 8008abc:	08008b21 	.word	0x08008b21
 8008ac0:	08008b21 	.word	0x08008b21
 8008ac4:	08008b21 	.word	0x08008b21
 8008ac8:	08008b21 	.word	0x08008b21
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008b21 	.word	0x08008b21
 8008ad4:	08008b21 	.word	0x08008b21
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b21 	.word	0x08008b21
 8008ae4:	08008b21 	.word	0x08008b21
 8008ae8:	08008b21 	.word	0x08008b21
 8008aec:	08008b21 	.word	0x08008b21
 8008af0:	08008b21 	.word	0x08008b21
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b21 	.word	0x08008b21
 8008b04:	08008b21 	.word	0x08008b21
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b21 	.word	0x08008b21
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b21 	.word	0x08008b21
 8008b18:	08008b21 	.word	0x08008b21
 8008b1c:	08008b21 	.word	0x08008b21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b20:	bf00      	nop
  }

  return (USBD_OK);
 8008b22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4805      	ldr	r0, [pc, #20]	; (8008b54 <CDC_Receive_FS+0x24>)
 8008b3e:	f7fe fb97 	bl	8007270 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b42:	4804      	ldr	r0, [pc, #16]	; (8008b54 <CDC_Receive_FS+0x24>)
 8008b44:	f7fe fbf2 	bl	800732c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000454 	.word	0x20000454

08008b58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b68:	4b0d      	ldr	r3, [pc, #52]	; (8008ba0 <CDC_Transmit_FS+0x48>)
 8008b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e00b      	b.n	8008b96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	461a      	mov	r2, r3
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4806      	ldr	r0, [pc, #24]	; (8008ba0 <CDC_Transmit_FS+0x48>)
 8008b86:	f7fe fb51 	bl	800722c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b8a:	4805      	ldr	r0, [pc, #20]	; (8008ba0 <CDC_Transmit_FS+0x48>)
 8008b8c:	f7fe fb8e 	bl	80072ac <USBD_CDC_TransmitPacket>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000454 	.word	0x20000454

08008ba4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2212      	movs	r2, #18
 8008bd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bda:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	200000cc 	.word	0x200000cc

08008bec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bfe:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	200000ec 	.word	0x200000ec

08008c10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4907      	ldr	r1, [pc, #28]	; (8008c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c26:	4808      	ldr	r0, [pc, #32]	; (8008c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c28:	f7ff fdf8 	bl	800881c <USBD_GetString>
 8008c2c:	e004      	b.n	8008c38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	4904      	ldr	r1, [pc, #16]	; (8008c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c32:	4805      	ldr	r0, [pc, #20]	; (8008c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c34:	f7ff fdf2 	bl	800881c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c38:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20001730 	.word	0x20001730
 8008c48:	0800c418 	.word	0x0800c418

08008c4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	4904      	ldr	r1, [pc, #16]	; (8008c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c5c:	4804      	ldr	r0, [pc, #16]	; (8008c70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c5e:	f7ff fddd 	bl	800881c <USBD_GetString>
  return USBD_StrDesc;
 8008c62:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20001730 	.word	0x20001730
 8008c70:	0800c430 	.word	0x0800c430

08008c74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	221a      	movs	r2, #26
 8008c84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c86:	f000 f855 	bl	8008d34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c8a:	4b02      	ldr	r3, [pc, #8]	; (8008c94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200000f0 	.word	0x200000f0

08008c98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4907      	ldr	r1, [pc, #28]	; (8008ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cae:	4808      	ldr	r0, [pc, #32]	; (8008cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cb0:	f7ff fdb4 	bl	800881c <USBD_GetString>
 8008cb4:	e004      	b.n	8008cc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4904      	ldr	r1, [pc, #16]	; (8008ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cba:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cbc:	f7ff fdae 	bl	800881c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20001730 	.word	0x20001730
 8008cd0:	0800c444 	.word	0x0800c444

08008cd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d105      	bne.n	8008cf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4907      	ldr	r1, [pc, #28]	; (8008d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cea:	4808      	ldr	r0, [pc, #32]	; (8008d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cec:	f7ff fd96 	bl	800881c <USBD_GetString>
 8008cf0:	e004      	b.n	8008cfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	4904      	ldr	r1, [pc, #16]	; (8008d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cf6:	4805      	ldr	r0, [pc, #20]	; (8008d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cf8:	f7ff fd90 	bl	800881c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20001730 	.word	0x20001730
 8008d0c:	0800c450 	.word	0x0800c450

08008d10 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	220c      	movs	r2, #12
 8008d20:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008d22:	4b03      	ldr	r3, [pc, #12]	; (8008d30 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	200000e0 	.word	0x200000e0

08008d34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d3a:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <Get_SerialNum+0x44>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d40:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <Get_SerialNum+0x48>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d46:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <Get_SerialNum+0x4c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	4909      	ldr	r1, [pc, #36]	; (8008d84 <Get_SerialNum+0x50>)
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f814 	bl	8008d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d64:	2204      	movs	r2, #4
 8008d66:	4908      	ldr	r1, [pc, #32]	; (8008d88 <Get_SerialNum+0x54>)
 8008d68:	68b8      	ldr	r0, [r7, #8]
 8008d6a:	f000 f80f 	bl	8008d8c <IntToUnicode>
  }
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	1fff7590 	.word	0x1fff7590
 8008d7c:	1fff7594 	.word	0x1fff7594
 8008d80:	1fff7598 	.word	0x1fff7598
 8008d84:	200000f2 	.word	0x200000f2
 8008d88:	20000102 	.word	0x20000102

08008d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]
 8008da2:	e027      	b.n	8008df4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	0f1b      	lsrs	r3, r3, #28
 8008da8:	2b09      	cmp	r3, #9
 8008daa:	d80b      	bhi.n	8008dc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	0f1b      	lsrs	r3, r3, #28
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	4619      	mov	r1, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	440b      	add	r3, r1
 8008dbc:	3230      	adds	r2, #48	; 0x30
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	e00a      	b.n	8008dda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	0f1b      	lsrs	r3, r3, #28
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	440b      	add	r3, r1
 8008dd4:	3237      	adds	r2, #55	; 0x37
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	3301      	adds	r3, #1
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	4413      	add	r3, r2
 8008dea:	2200      	movs	r2, #0
 8008dec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	3301      	adds	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]
 8008df4:	7dfa      	ldrb	r2, [r7, #23]
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d3d3      	bcc.n	8008da4 <IntToUnicode+0x18>
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b0ac      	sub	sp, #176	; 0xb0
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	609a      	str	r2, [r3, #8]
 8008e20:	60da      	str	r2, [r3, #12]
 8008e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e24:	f107 0314 	add.w	r3, r7, #20
 8008e28:	2288      	movs	r2, #136	; 0x88
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 f979 	bl	800a124 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e3a:	d173      	bne.n	8008f24 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008e42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8008e52:	230c      	movs	r3, #12
 8008e54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008e56:	2307      	movs	r3, #7
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e66:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fb f8f9 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008e78:	f7f8 fbbe 	bl	80015f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e7c:	4b2b      	ldr	r3, [pc, #172]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e80:	4a2a      	ldr	r2, [pc, #168]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e88:	4b28      	ldr	r3, [pc, #160]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008eae:	230a      	movs	r3, #10
 8008eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ebe:	f7f8 ff21 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ec2:	4b1a      	ldr	r3, [pc, #104]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec6:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ece:	4b17      	ldr	r3, [pc, #92]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eda:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d114      	bne.n	8008f10 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ee6:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eea:	4a10      	ldr	r2, [pc, #64]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008efa:	60bb      	str	r3, [r7, #8]
 8008efc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008efe:	f7fa facf 	bl	80034a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <HAL_PCD_MspInit+0x120>)
 8008f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f0e:	e001      	b.n	8008f14 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008f10:	f7fa fac6 	bl	80034a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f14:	2200      	movs	r2, #0
 8008f16:	2100      	movs	r1, #0
 8008f18:	2043      	movs	r0, #67	; 0x43
 8008f1a:	f7f8 febc 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f1e:	2043      	movs	r0, #67	; 0x43
 8008f20:	f7f8 fed5 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f24:	bf00      	nop
 8008f26:	37b0      	adds	r7, #176	; 0xb0
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	40021000 	.word	0x40021000

08008f30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	f7fe fad9 	bl	80074fe <USBD_LL_SetupStage>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	f7fe fb13 	bl	80075a8 <USBD_LL_DataOutStage>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	3348      	adds	r3, #72	; 0x48
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f7fe fbac 	bl	800770e <USBD_LL_DataInStage>
}
 8008fb6:	bf00      	nop
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fce6 	bl	800799e <USBD_LL_SOF>
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d001      	beq.n	8008ff2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fee:	f7f8 fb03 	bl	80015f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ff8:	7bfa      	ldrb	r2, [r7, #15]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fe fc8a 	bl	8007916 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fc32 	bl	8007872 <USBD_LL_Reset>
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	6812      	ldr	r2, [r2, #0]
 800902e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fc79 	bl	8007936 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <HAL_PCD_SuspendCallback+0x48>)
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	4a03      	ldr	r2, [pc, #12]	; (8009060 <HAL_PCD_SuspendCallback+0x48>)
 8009052:	f043 0306 	orr.w	r3, r3, #6
 8009056:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	e000ed00 	.word	0xe000ed00

08009064 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6812      	ldr	r2, [r2, #0]
 800907a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d007      	beq.n	800909c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800908c:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <HAL_PCD_ResumeCallback+0x4c>)
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	4a07      	ldr	r2, [pc, #28]	; (80090b0 <HAL_PCD_ResumeCallback+0x4c>)
 8009092:	f023 0306 	bic.w	r3, r3, #6
 8009096:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009098:	f000 faf6 	bl	8009688 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fc63 	bl	800796e <USBD_LL_Resume>
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	e000ed00 	.word	0xe000ed00

080090b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fcb9 	bl	8007a42 <USBD_LL_IsoOUTIncomplete>
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ea:	78fa      	ldrb	r2, [r7, #3]
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fc75 	bl	80079de <USBD_LL_IsoINIncomplete>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fccb 	bl	8007aa6 <USBD_LL_DevConnected>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fcc8 	bl	8007abc <USBD_LL_DevDisconnected>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d13c      	bne.n	80091be <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009144:	4a20      	ldr	r2, [pc, #128]	; (80091c8 <USBD_LL_Init+0x94>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <USBD_LL_Init+0x94>)
 8009150:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009154:	4b1c      	ldr	r3, [pc, #112]	; (80091c8 <USBD_LL_Init+0x94>)
 8009156:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800915a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <USBD_LL_Init+0x94>)
 800915e:	2206      	movs	r2, #6
 8009160:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009162:	4b19      	ldr	r3, [pc, #100]	; (80091c8 <USBD_LL_Init+0x94>)
 8009164:	2202      	movs	r2, #2
 8009166:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009168:	4b17      	ldr	r3, [pc, #92]	; (80091c8 <USBD_LL_Init+0x94>)
 800916a:	2202      	movs	r2, #2
 800916c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <USBD_LL_Init+0x94>)
 8009170:	2200      	movs	r2, #0
 8009172:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009174:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <USBD_LL_Init+0x94>)
 8009176:	2200      	movs	r2, #0
 8009178:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800917a:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <USBD_LL_Init+0x94>)
 800917c:	2200      	movs	r2, #0
 800917e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <USBD_LL_Init+0x94>)
 8009182:	2200      	movs	r2, #0
 8009184:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009186:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <USBD_LL_Init+0x94>)
 8009188:	2200      	movs	r2, #0
 800918a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800918c:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <USBD_LL_Init+0x94>)
 800918e:	2200      	movs	r2, #0
 8009190:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009192:	480d      	ldr	r0, [pc, #52]	; (80091c8 <USBD_LL_Init+0x94>)
 8009194:	f7f8 ff78 	bl	8002088 <HAL_PCD_Init>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800919e:	f7f8 fa2b 	bl	80015f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091a2:	2180      	movs	r1, #128	; 0x80
 80091a4:	4808      	ldr	r0, [pc, #32]	; (80091c8 <USBD_LL_Init+0x94>)
 80091a6:	f7fa f8e2 	bl	800336e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091aa:	2240      	movs	r2, #64	; 0x40
 80091ac:	2100      	movs	r1, #0
 80091ae:	4806      	ldr	r0, [pc, #24]	; (80091c8 <USBD_LL_Init+0x94>)
 80091b0:	f7fa f896 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091b4:	2280      	movs	r2, #128	; 0x80
 80091b6:	2101      	movs	r1, #1
 80091b8:	4803      	ldr	r0, [pc, #12]	; (80091c8 <USBD_LL_Init+0x94>)
 80091ba:	f7fa f891 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20001930 	.word	0x20001930

080091cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f9 f874 	bl	80022d0 <HAL_PCD_Start>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d816      	bhi.n	8009220 <USBD_LL_Start+0x54>
 80091f2:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <USBD_LL_Start+0x2c>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	08009209 	.word	0x08009209
 80091fc:	0800920f 	.word	0x0800920f
 8009200:	08009215 	.word	0x08009215
 8009204:	0800921b 	.word	0x0800921b
    case HAL_OK :
      usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
    break;
 800920c:	e00b      	b.n	8009226 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	73fb      	strb	r3, [r7, #15]
    break;
 8009212:	e008      	b.n	8009226 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009214:	2301      	movs	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
    break;
 8009218:	e005      	b.n	8009226 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800921a:	2303      	movs	r3, #3
 800921c:	73fb      	strb	r3, [r7, #15]
    break;
 800921e:	e002      	b.n	8009226 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009220:	2303      	movs	r3, #3
 8009222:	73fb      	strb	r3, [r7, #15]
    break;
 8009224:	bf00      	nop
  }
  return usb_status;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4603      	mov	r3, r0
 8009240:	70fb      	strb	r3, [r7, #3]
 8009242:	460b      	mov	r3, r1
 8009244:	70bb      	strb	r3, [r7, #2]
 8009246:	4613      	mov	r3, r2
 8009248:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009258:	78bb      	ldrb	r3, [r7, #2]
 800925a:	883a      	ldrh	r2, [r7, #0]
 800925c:	78f9      	ldrb	r1, [r7, #3]
 800925e:	f7f9 fd1e 	bl	8002c9e <HAL_PCD_EP_Open>
 8009262:	4603      	mov	r3, r0
 8009264:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d817      	bhi.n	800929c <USBD_LL_OpenEP+0x6c>
 800926c:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <USBD_LL_OpenEP+0x44>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	08009285 	.word	0x08009285
 8009278:	0800928b 	.word	0x0800928b
 800927c:	08009291 	.word	0x08009291
 8009280:	08009297 	.word	0x08009297
    case HAL_OK :
      usb_status = USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
    break;
 8009288:	e00b      	b.n	80092a2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800928a:	2303      	movs	r3, #3
 800928c:	73fb      	strb	r3, [r7, #15]
    break;
 800928e:	e008      	b.n	80092a2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]
    break;
 8009294:	e005      	b.n	80092a2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
    break;
 800929a:	e002      	b.n	80092a2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	73fb      	strb	r3, [r7, #15]
    break;
 80092a0:	bf00      	nop
  }
  return usb_status;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	4611      	mov	r1, r2
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f9 fd4f 	bl	8002d6e <HAL_PCD_EP_Close>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d816      	bhi.n	8009308 <USBD_LL_CloseEP+0x5c>
 80092da:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <USBD_LL_CloseEP+0x34>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	080092f1 	.word	0x080092f1
 80092e4:	080092f7 	.word	0x080092f7
 80092e8:	080092fd 	.word	0x080092fd
 80092ec:	08009303 	.word	0x08009303
    case HAL_OK :
      usb_status = USBD_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
    break;
 80092f4:	e00b      	b.n	800930e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092f6:	2303      	movs	r3, #3
 80092f8:	73fb      	strb	r3, [r7, #15]
    break;
 80092fa:	e008      	b.n	800930e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092fc:	2301      	movs	r3, #1
 80092fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009300:	e005      	b.n	800930e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	73fb      	strb	r3, [r7, #15]
    break;
 8009306:	e002      	b.n	800930e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	73fb      	strb	r3, [r7, #15]
    break;
 800930c:	bf00      	nop
  }
  return usb_status;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7f9 fdde 	bl	8002ef8 <HAL_PCD_EP_SetStall>
 800933c:	4603      	mov	r3, r0
 800933e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b03      	cmp	r3, #3
 8009344:	d816      	bhi.n	8009374 <USBD_LL_StallEP+0x5c>
 8009346:	a201      	add	r2, pc, #4	; (adr r2, 800934c <USBD_LL_StallEP+0x34>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	0800935d 	.word	0x0800935d
 8009350:	08009363 	.word	0x08009363
 8009354:	08009369 	.word	0x08009369
 8009358:	0800936f 	.word	0x0800936f
    case HAL_OK :
      usb_status = USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
    break;
 8009360:	e00b      	b.n	800937a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	73fb      	strb	r3, [r7, #15]
    break;
 8009366:	e008      	b.n	800937a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009368:	2301      	movs	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
    break;
 800936c:	e005      	b.n	800937a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800936e:	2303      	movs	r3, #3
 8009370:	73fb      	strb	r3, [r7, #15]
    break;
 8009372:	e002      	b.n	800937a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	73fb      	strb	r3, [r7, #15]
    break;
 8009378:	bf00      	nop
  }
  return usb_status;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7f9 fe0a 	bl	8002fbc <HAL_PCD_EP_ClrStall>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d816      	bhi.n	80093e0 <USBD_LL_ClearStallEP+0x5c>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <USBD_LL_ClearStallEP+0x34>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093c9 	.word	0x080093c9
 80093bc:	080093cf 	.word	0x080093cf
 80093c0:	080093d5 	.word	0x080093d5
 80093c4:	080093db 	.word	0x080093db
    case HAL_OK :
      usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e00b      	b.n	80093e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093ce:	2303      	movs	r3, #3
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	e008      	b.n	80093e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093d4:	2301      	movs	r3, #1
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	e005      	b.n	80093e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093da:	2303      	movs	r3, #3
 80093dc:	73fb      	strb	r3, [r7, #15]
    break;
 80093de:	e002      	b.n	80093e6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093e0:	2303      	movs	r3, #3
 80093e2:	73fb      	strb	r3, [r7, #15]
    break;
 80093e4:	bf00      	nop
  }
  return usb_status;
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009402:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009408:	2b00      	cmp	r3, #0
 800940a:	da0b      	bge.n	8009424 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009412:	68f9      	ldr	r1, [r7, #12]
 8009414:	4613      	mov	r3, r2
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	333e      	adds	r3, #62	; 0x3e
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	e00b      	b.n	800943c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	4613      	mov	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800943a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7f9 fbf4 	bl	8002c54 <HAL_PCD_SetAddress>
 800946c:	4603      	mov	r3, r0
 800946e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	2b03      	cmp	r3, #3
 8009474:	d816      	bhi.n	80094a4 <USBD_LL_SetUSBAddress+0x5c>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <USBD_LL_SetUSBAddress+0x34>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	0800948d 	.word	0x0800948d
 8009480:	08009493 	.word	0x08009493
 8009484:	08009499 	.word	0x08009499
 8009488:	0800949f 	.word	0x0800949f
    case HAL_OK :
      usb_status = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
    break;
 8009490:	e00b      	b.n	80094aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009492:	2303      	movs	r3, #3
 8009494:	73fb      	strb	r3, [r7, #15]
    break;
 8009496:	e008      	b.n	80094aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009498:	2301      	movs	r3, #1
 800949a:	73fb      	strb	r3, [r7, #15]
    break;
 800949c:	e005      	b.n	80094aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800949e:	2303      	movs	r3, #3
 80094a0:	73fb      	strb	r3, [r7, #15]
    break;
 80094a2:	e002      	b.n	80094aa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80094a4:	2303      	movs	r3, #3
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	bf00      	nop
  }
  return usb_status;
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	460b      	mov	r3, r1
 80094c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094d2:	7af9      	ldrb	r1, [r7, #11]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	f7f9 fcdd 	bl	8002e96 <HAL_PCD_EP_Transmit>
 80094dc:	4603      	mov	r3, r0
 80094de:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80094e0:	7dbb      	ldrb	r3, [r7, #22]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d816      	bhi.n	8009514 <USBD_LL_Transmit+0x60>
 80094e6:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <USBD_LL_Transmit+0x38>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	080094fd 	.word	0x080094fd
 80094f0:	08009503 	.word	0x08009503
 80094f4:	08009509 	.word	0x08009509
 80094f8:	0800950f 	.word	0x0800950f
    case HAL_OK :
      usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]
    break;
 8009500:	e00b      	b.n	800951a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	75fb      	strb	r3, [r7, #23]
    break;
 8009506:	e008      	b.n	800951a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009508:	2301      	movs	r3, #1
 800950a:	75fb      	strb	r3, [r7, #23]
    break;
 800950c:	e005      	b.n	800951a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	75fb      	strb	r3, [r7, #23]
    break;
 8009512:	e002      	b.n	800951a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009514:	2303      	movs	r3, #3
 8009516:	75fb      	strb	r3, [r7, #23]
    break;
 8009518:	bf00      	nop
  }
  return usb_status;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	607a      	str	r2, [r7, #4]
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	460b      	mov	r3, r1
 8009532:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009542:	7af9      	ldrb	r1, [r7, #11]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	f7f9 fc5b 	bl	8002e02 <HAL_PCD_EP_Receive>
 800954c:	4603      	mov	r3, r0
 800954e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009550:	7dbb      	ldrb	r3, [r7, #22]
 8009552:	2b03      	cmp	r3, #3
 8009554:	d816      	bhi.n	8009584 <USBD_LL_PrepareReceive+0x60>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <USBD_LL_PrepareReceive+0x38>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	0800956d 	.word	0x0800956d
 8009560:	08009573 	.word	0x08009573
 8009564:	08009579 	.word	0x08009579
 8009568:	0800957f 	.word	0x0800957f
    case HAL_OK :
      usb_status = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]
    break;
 8009570:	e00b      	b.n	800958a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009572:	2303      	movs	r3, #3
 8009574:	75fb      	strb	r3, [r7, #23]
    break;
 8009576:	e008      	b.n	800958a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009578:	2301      	movs	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
    break;
 800957c:	e005      	b.n	800958a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800957e:	2303      	movs	r3, #3
 8009580:	75fb      	strb	r3, [r7, #23]
    break;
 8009582:	e002      	b.n	800958a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009584:	2303      	movs	r3, #3
 8009586:	75fb      	strb	r3, [r7, #23]
    break;
 8009588:	bf00      	nop
  }
  return usb_status;
 800958a:	7dfb      	ldrb	r3, [r7, #23]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f9 fc5b 	bl	8002e66 <HAL_PCD_EP_GetRxCount>
 80095b0:	4603      	mov	r3, r0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <HAL_PCDEx_LPM_Callback+0x18>
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d01f      	beq.n	8009612 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80095d2:	e03b      	b.n	800964c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80095dc:	f000 f854 	bl	8009688 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e0:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <HAL_PCDEx_LPM_Callback+0x98>)
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	4a1b      	ldr	r2, [pc, #108]	; (8009654 <HAL_PCDEx_LPM_Callback+0x98>)
 80095e6:	f023 0306 	bic.w	r3, r3, #6
 80095ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe f9af 	bl	800796e <USBD_LL_Resume>
    break;
 8009610:	e01c      	b.n	800964c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009624:	f043 0301 	orr.w	r3, r3, #1
 8009628:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe f980 	bl	8007936 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <HAL_PCDEx_LPM_Callback+0x98>)
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	4a04      	ldr	r2, [pc, #16]	; (8009654 <HAL_PCDEx_LPM_Callback+0x98>)
 8009644:	f043 0306 	orr.w	r3, r3, #6
 8009648:	6113      	str	r3, [r2, #16]
    break;
 800964a:	bf00      	nop
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	e000ed00 	.word	0xe000ed00

08009658 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009660:	4b03      	ldr	r3, [pc, #12]	; (8009670 <USBD_static_malloc+0x18>)
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20001e3c 	.word	0x20001e3c

08009674 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]

}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800968c:	f7f7 fe0e 	bl	80012ac <SystemClock_Config>
}
 8009690:	bf00      	nop
 8009692:	bd80      	pop	{r7, pc}

08009694 <__cvt>:
 8009694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	ec55 4b10 	vmov	r4, r5, d0
 800969c:	2d00      	cmp	r5, #0
 800969e:	460e      	mov	r6, r1
 80096a0:	4619      	mov	r1, r3
 80096a2:	462b      	mov	r3, r5
 80096a4:	bfbb      	ittet	lt
 80096a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096aa:	461d      	movlt	r5, r3
 80096ac:	2300      	movge	r3, #0
 80096ae:	232d      	movlt	r3, #45	; 0x2d
 80096b0:	700b      	strb	r3, [r1, #0]
 80096b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096b8:	4691      	mov	r9, r2
 80096ba:	f023 0820 	bic.w	r8, r3, #32
 80096be:	bfbc      	itt	lt
 80096c0:	4622      	movlt	r2, r4
 80096c2:	4614      	movlt	r4, r2
 80096c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096c8:	d005      	beq.n	80096d6 <__cvt+0x42>
 80096ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096ce:	d100      	bne.n	80096d2 <__cvt+0x3e>
 80096d0:	3601      	adds	r6, #1
 80096d2:	2102      	movs	r1, #2
 80096d4:	e000      	b.n	80096d8 <__cvt+0x44>
 80096d6:	2103      	movs	r1, #3
 80096d8:	ab03      	add	r3, sp, #12
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	ab02      	add	r3, sp, #8
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	ec45 4b10 	vmov	d0, r4, r5
 80096e4:	4653      	mov	r3, sl
 80096e6:	4632      	mov	r2, r6
 80096e8:	f000 fdde 	bl	800a2a8 <_dtoa_r>
 80096ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096f0:	4607      	mov	r7, r0
 80096f2:	d102      	bne.n	80096fa <__cvt+0x66>
 80096f4:	f019 0f01 	tst.w	r9, #1
 80096f8:	d022      	beq.n	8009740 <__cvt+0xac>
 80096fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096fe:	eb07 0906 	add.w	r9, r7, r6
 8009702:	d110      	bne.n	8009726 <__cvt+0x92>
 8009704:	783b      	ldrb	r3, [r7, #0]
 8009706:	2b30      	cmp	r3, #48	; 0x30
 8009708:	d10a      	bne.n	8009720 <__cvt+0x8c>
 800970a:	2200      	movs	r2, #0
 800970c:	2300      	movs	r3, #0
 800970e:	4620      	mov	r0, r4
 8009710:	4629      	mov	r1, r5
 8009712:	f7f7 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009716:	b918      	cbnz	r0, 8009720 <__cvt+0x8c>
 8009718:	f1c6 0601 	rsb	r6, r6, #1
 800971c:	f8ca 6000 	str.w	r6, [sl]
 8009720:	f8da 3000 	ldr.w	r3, [sl]
 8009724:	4499      	add	r9, r3
 8009726:	2200      	movs	r2, #0
 8009728:	2300      	movs	r3, #0
 800972a:	4620      	mov	r0, r4
 800972c:	4629      	mov	r1, r5
 800972e:	f7f7 f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009732:	b108      	cbz	r0, 8009738 <__cvt+0xa4>
 8009734:	f8cd 900c 	str.w	r9, [sp, #12]
 8009738:	2230      	movs	r2, #48	; 0x30
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	454b      	cmp	r3, r9
 800973e:	d307      	bcc.n	8009750 <__cvt+0xbc>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009744:	1bdb      	subs	r3, r3, r7
 8009746:	4638      	mov	r0, r7
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	b004      	add	sp, #16
 800974c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009750:	1c59      	adds	r1, r3, #1
 8009752:	9103      	str	r1, [sp, #12]
 8009754:	701a      	strb	r2, [r3, #0]
 8009756:	e7f0      	b.n	800973a <__cvt+0xa6>

08009758 <__exponent>:
 8009758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800975a:	4603      	mov	r3, r0
 800975c:	2900      	cmp	r1, #0
 800975e:	bfb8      	it	lt
 8009760:	4249      	neglt	r1, r1
 8009762:	f803 2b02 	strb.w	r2, [r3], #2
 8009766:	bfb4      	ite	lt
 8009768:	222d      	movlt	r2, #45	; 0x2d
 800976a:	222b      	movge	r2, #43	; 0x2b
 800976c:	2909      	cmp	r1, #9
 800976e:	7042      	strb	r2, [r0, #1]
 8009770:	dd2a      	ble.n	80097c8 <__exponent+0x70>
 8009772:	f10d 0207 	add.w	r2, sp, #7
 8009776:	4617      	mov	r7, r2
 8009778:	260a      	movs	r6, #10
 800977a:	4694      	mov	ip, r2
 800977c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009780:	fb06 1415 	mls	r4, r6, r5, r1
 8009784:	3430      	adds	r4, #48	; 0x30
 8009786:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800978a:	460c      	mov	r4, r1
 800978c:	2c63      	cmp	r4, #99	; 0x63
 800978e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009792:	4629      	mov	r1, r5
 8009794:	dcf1      	bgt.n	800977a <__exponent+0x22>
 8009796:	3130      	adds	r1, #48	; 0x30
 8009798:	f1ac 0402 	sub.w	r4, ip, #2
 800979c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80097a0:	1c41      	adds	r1, r0, #1
 80097a2:	4622      	mov	r2, r4
 80097a4:	42ba      	cmp	r2, r7
 80097a6:	d30a      	bcc.n	80097be <__exponent+0x66>
 80097a8:	f10d 0209 	add.w	r2, sp, #9
 80097ac:	eba2 020c 	sub.w	r2, r2, ip
 80097b0:	42bc      	cmp	r4, r7
 80097b2:	bf88      	it	hi
 80097b4:	2200      	movhi	r2, #0
 80097b6:	4413      	add	r3, r2
 80097b8:	1a18      	subs	r0, r3, r0
 80097ba:	b003      	add	sp, #12
 80097bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80097c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80097c6:	e7ed      	b.n	80097a4 <__exponent+0x4c>
 80097c8:	2330      	movs	r3, #48	; 0x30
 80097ca:	3130      	adds	r1, #48	; 0x30
 80097cc:	7083      	strb	r3, [r0, #2]
 80097ce:	70c1      	strb	r1, [r0, #3]
 80097d0:	1d03      	adds	r3, r0, #4
 80097d2:	e7f1      	b.n	80097b8 <__exponent+0x60>

080097d4 <_printf_float>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	ed2d 8b02 	vpush	{d8}
 80097dc:	b08d      	sub	sp, #52	; 0x34
 80097de:	460c      	mov	r4, r1
 80097e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097e4:	4616      	mov	r6, r2
 80097e6:	461f      	mov	r7, r3
 80097e8:	4605      	mov	r5, r0
 80097ea:	f000 fca3 	bl	800a134 <_localeconv_r>
 80097ee:	f8d0 a000 	ldr.w	sl, [r0]
 80097f2:	4650      	mov	r0, sl
 80097f4:	f7f6 fd3c 	bl	8000270 <strlen>
 80097f8:	2300      	movs	r3, #0
 80097fa:	930a      	str	r3, [sp, #40]	; 0x28
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	9305      	str	r3, [sp, #20]
 8009800:	f8d8 3000 	ldr.w	r3, [r8]
 8009804:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009808:	3307      	adds	r3, #7
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	f103 0208 	add.w	r2, r3, #8
 8009812:	f8c8 2000 	str.w	r2, [r8]
 8009816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800981a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	f8cd 8018 	str.w	r8, [sp, #24]
 8009824:	ee08 0a10 	vmov	s16, r0
 8009828:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800982c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009830:	4b9e      	ldr	r3, [pc, #632]	; (8009aac <_printf_float+0x2d8>)
 8009832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009836:	f7f7 f979 	bl	8000b2c <__aeabi_dcmpun>
 800983a:	bb88      	cbnz	r0, 80098a0 <_printf_float+0xcc>
 800983c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009840:	4b9a      	ldr	r3, [pc, #616]	; (8009aac <_printf_float+0x2d8>)
 8009842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009846:	f7f7 f953 	bl	8000af0 <__aeabi_dcmple>
 800984a:	bb48      	cbnz	r0, 80098a0 <_printf_float+0xcc>
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4640      	mov	r0, r8
 8009852:	4649      	mov	r1, r9
 8009854:	f7f7 f942 	bl	8000adc <__aeabi_dcmplt>
 8009858:	b110      	cbz	r0, 8009860 <_printf_float+0x8c>
 800985a:	232d      	movs	r3, #45	; 0x2d
 800985c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009860:	4a93      	ldr	r2, [pc, #588]	; (8009ab0 <_printf_float+0x2dc>)
 8009862:	4b94      	ldr	r3, [pc, #592]	; (8009ab4 <_printf_float+0x2e0>)
 8009864:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009868:	bf94      	ite	ls
 800986a:	4690      	movls	r8, r2
 800986c:	4698      	movhi	r8, r3
 800986e:	2303      	movs	r3, #3
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	9b05      	ldr	r3, [sp, #20]
 8009874:	f023 0304 	bic.w	r3, r3, #4
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	9700      	str	r7, [sp, #0]
 8009880:	4633      	mov	r3, r6
 8009882:	aa0b      	add	r2, sp, #44	; 0x2c
 8009884:	4621      	mov	r1, r4
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f9da 	bl	8009c40 <_printf_common>
 800988c:	3001      	adds	r0, #1
 800988e:	f040 8090 	bne.w	80099b2 <_printf_float+0x1de>
 8009892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009896:	b00d      	add	sp, #52	; 0x34
 8009898:	ecbd 8b02 	vpop	{d8}
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	4642      	mov	r2, r8
 80098a2:	464b      	mov	r3, r9
 80098a4:	4640      	mov	r0, r8
 80098a6:	4649      	mov	r1, r9
 80098a8:	f7f7 f940 	bl	8000b2c <__aeabi_dcmpun>
 80098ac:	b140      	cbz	r0, 80098c0 <_printf_float+0xec>
 80098ae:	464b      	mov	r3, r9
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bfbc      	itt	lt
 80098b4:	232d      	movlt	r3, #45	; 0x2d
 80098b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098ba:	4a7f      	ldr	r2, [pc, #508]	; (8009ab8 <_printf_float+0x2e4>)
 80098bc:	4b7f      	ldr	r3, [pc, #508]	; (8009abc <_printf_float+0x2e8>)
 80098be:	e7d1      	b.n	8009864 <_printf_float+0x90>
 80098c0:	6863      	ldr	r3, [r4, #4]
 80098c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098c6:	9206      	str	r2, [sp, #24]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	d13f      	bne.n	800994c <_printf_float+0x178>
 80098cc:	2306      	movs	r3, #6
 80098ce:	6063      	str	r3, [r4, #4]
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	6861      	ldr	r1, [r4, #4]
 80098d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098d8:	2300      	movs	r3, #0
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	ab0a      	add	r3, sp, #40	; 0x28
 80098de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098e2:	ab09      	add	r3, sp, #36	; 0x24
 80098e4:	ec49 8b10 	vmov	d0, r8, r9
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098f0:	4628      	mov	r0, r5
 80098f2:	f7ff fecf 	bl	8009694 <__cvt>
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098fa:	2b47      	cmp	r3, #71	; 0x47
 80098fc:	4680      	mov	r8, r0
 80098fe:	d108      	bne.n	8009912 <_printf_float+0x13e>
 8009900:	1cc8      	adds	r0, r1, #3
 8009902:	db02      	blt.n	800990a <_printf_float+0x136>
 8009904:	6863      	ldr	r3, [r4, #4]
 8009906:	4299      	cmp	r1, r3
 8009908:	dd41      	ble.n	800998e <_printf_float+0x1ba>
 800990a:	f1ab 0302 	sub.w	r3, fp, #2
 800990e:	fa5f fb83 	uxtb.w	fp, r3
 8009912:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009916:	d820      	bhi.n	800995a <_printf_float+0x186>
 8009918:	3901      	subs	r1, #1
 800991a:	465a      	mov	r2, fp
 800991c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009920:	9109      	str	r1, [sp, #36]	; 0x24
 8009922:	f7ff ff19 	bl	8009758 <__exponent>
 8009926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009928:	1813      	adds	r3, r2, r0
 800992a:	2a01      	cmp	r2, #1
 800992c:	4681      	mov	r9, r0
 800992e:	6123      	str	r3, [r4, #16]
 8009930:	dc02      	bgt.n	8009938 <_printf_float+0x164>
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	07d2      	lsls	r2, r2, #31
 8009936:	d501      	bpl.n	800993c <_printf_float+0x168>
 8009938:	3301      	adds	r3, #1
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009940:	2b00      	cmp	r3, #0
 8009942:	d09c      	beq.n	800987e <_printf_float+0xaa>
 8009944:	232d      	movs	r3, #45	; 0x2d
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	e798      	b.n	800987e <_printf_float+0xaa>
 800994c:	9a06      	ldr	r2, [sp, #24]
 800994e:	2a47      	cmp	r2, #71	; 0x47
 8009950:	d1be      	bne.n	80098d0 <_printf_float+0xfc>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1bc      	bne.n	80098d0 <_printf_float+0xfc>
 8009956:	2301      	movs	r3, #1
 8009958:	e7b9      	b.n	80098ce <_printf_float+0xfa>
 800995a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800995e:	d118      	bne.n	8009992 <_printf_float+0x1be>
 8009960:	2900      	cmp	r1, #0
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	dd0b      	ble.n	800997e <_printf_float+0x1aa>
 8009966:	6121      	str	r1, [r4, #16]
 8009968:	b913      	cbnz	r3, 8009970 <_printf_float+0x19c>
 800996a:	6822      	ldr	r2, [r4, #0]
 800996c:	07d0      	lsls	r0, r2, #31
 800996e:	d502      	bpl.n	8009976 <_printf_float+0x1a2>
 8009970:	3301      	adds	r3, #1
 8009972:	440b      	add	r3, r1
 8009974:	6123      	str	r3, [r4, #16]
 8009976:	65a1      	str	r1, [r4, #88]	; 0x58
 8009978:	f04f 0900 	mov.w	r9, #0
 800997c:	e7de      	b.n	800993c <_printf_float+0x168>
 800997e:	b913      	cbnz	r3, 8009986 <_printf_float+0x1b2>
 8009980:	6822      	ldr	r2, [r4, #0]
 8009982:	07d2      	lsls	r2, r2, #31
 8009984:	d501      	bpl.n	800998a <_printf_float+0x1b6>
 8009986:	3302      	adds	r3, #2
 8009988:	e7f4      	b.n	8009974 <_printf_float+0x1a0>
 800998a:	2301      	movs	r3, #1
 800998c:	e7f2      	b.n	8009974 <_printf_float+0x1a0>
 800998e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009994:	4299      	cmp	r1, r3
 8009996:	db05      	blt.n	80099a4 <_printf_float+0x1d0>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	6121      	str	r1, [r4, #16]
 800999c:	07d8      	lsls	r0, r3, #31
 800999e:	d5ea      	bpl.n	8009976 <_printf_float+0x1a2>
 80099a0:	1c4b      	adds	r3, r1, #1
 80099a2:	e7e7      	b.n	8009974 <_printf_float+0x1a0>
 80099a4:	2900      	cmp	r1, #0
 80099a6:	bfd4      	ite	le
 80099a8:	f1c1 0202 	rsble	r2, r1, #2
 80099ac:	2201      	movgt	r2, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	e7e0      	b.n	8009974 <_printf_float+0x1a0>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	055a      	lsls	r2, r3, #21
 80099b6:	d407      	bmi.n	80099c8 <_printf_float+0x1f4>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	4642      	mov	r2, r8
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	d12c      	bne.n	8009a20 <_printf_float+0x24c>
 80099c6:	e764      	b.n	8009892 <_printf_float+0xbe>
 80099c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099cc:	f240 80e0 	bls.w	8009b90 <_printf_float+0x3bc>
 80099d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099d4:	2200      	movs	r2, #0
 80099d6:	2300      	movs	r3, #0
 80099d8:	f7f7 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d034      	beq.n	8009a4a <_printf_float+0x276>
 80099e0:	4a37      	ldr	r2, [pc, #220]	; (8009ac0 <_printf_float+0x2ec>)
 80099e2:	2301      	movs	r3, #1
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	f43f af51 	beq.w	8009892 <_printf_float+0xbe>
 80099f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f4:	429a      	cmp	r2, r3
 80099f6:	db02      	blt.n	80099fe <_printf_float+0x22a>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	07d8      	lsls	r0, r3, #31
 80099fc:	d510      	bpl.n	8009a20 <_printf_float+0x24c>
 80099fe:	ee18 3a10 	vmov	r3, s16
 8009a02:	4652      	mov	r2, sl
 8009a04:	4631      	mov	r1, r6
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b8      	blx	r7
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	f43f af41 	beq.w	8009892 <_printf_float+0xbe>
 8009a10:	f04f 0800 	mov.w	r8, #0
 8009a14:	f104 091a 	add.w	r9, r4, #26
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	4543      	cmp	r3, r8
 8009a1e:	dc09      	bgt.n	8009a34 <_printf_float+0x260>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	079b      	lsls	r3, r3, #30
 8009a24:	f100 8107 	bmi.w	8009c36 <_printf_float+0x462>
 8009a28:	68e0      	ldr	r0, [r4, #12]
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	4298      	cmp	r0, r3
 8009a2e:	bfb8      	it	lt
 8009a30:	4618      	movlt	r0, r3
 8009a32:	e730      	b.n	8009896 <_printf_float+0xc2>
 8009a34:	2301      	movs	r3, #1
 8009a36:	464a      	mov	r2, r9
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af27 	beq.w	8009892 <_printf_float+0xbe>
 8009a44:	f108 0801 	add.w	r8, r8, #1
 8009a48:	e7e6      	b.n	8009a18 <_printf_float+0x244>
 8009a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc39      	bgt.n	8009ac4 <_printf_float+0x2f0>
 8009a50:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <_printf_float+0x2ec>)
 8009a52:	2301      	movs	r3, #1
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	47b8      	blx	r7
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	f43f af19 	beq.w	8009892 <_printf_float+0xbe>
 8009a60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d102      	bne.n	8009a6e <_printf_float+0x29a>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	07d9      	lsls	r1, r3, #31
 8009a6c:	d5d8      	bpl.n	8009a20 <_printf_float+0x24c>
 8009a6e:	ee18 3a10 	vmov	r3, s16
 8009a72:	4652      	mov	r2, sl
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f af09 	beq.w	8009892 <_printf_float+0xbe>
 8009a80:	f04f 0900 	mov.w	r9, #0
 8009a84:	f104 0a1a 	add.w	sl, r4, #26
 8009a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8a:	425b      	negs	r3, r3
 8009a8c:	454b      	cmp	r3, r9
 8009a8e:	dc01      	bgt.n	8009a94 <_printf_float+0x2c0>
 8009a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a92:	e792      	b.n	80099ba <_printf_float+0x1e6>
 8009a94:	2301      	movs	r3, #1
 8009a96:	4652      	mov	r2, sl
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	f43f aef7 	beq.w	8009892 <_printf_float+0xbe>
 8009aa4:	f109 0901 	add.w	r9, r9, #1
 8009aa8:	e7ee      	b.n	8009a88 <_printf_float+0x2b4>
 8009aaa:	bf00      	nop
 8009aac:	7fefffff 	.word	0x7fefffff
 8009ab0:	0800c4a0 	.word	0x0800c4a0
 8009ab4:	0800c4a4 	.word	0x0800c4a4
 8009ab8:	0800c4a8 	.word	0x0800c4a8
 8009abc:	0800c4ac 	.word	0x0800c4ac
 8009ac0:	0800c4b0 	.word	0x0800c4b0
 8009ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	bfa8      	it	ge
 8009acc:	461a      	movge	r2, r3
 8009ace:	2a00      	cmp	r2, #0
 8009ad0:	4691      	mov	r9, r2
 8009ad2:	dc37      	bgt.n	8009b44 <_printf_float+0x370>
 8009ad4:	f04f 0b00 	mov.w	fp, #0
 8009ad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009adc:	f104 021a 	add.w	r2, r4, #26
 8009ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	eba3 0309 	sub.w	r3, r3, r9
 8009ae8:	455b      	cmp	r3, fp
 8009aea:	dc33      	bgt.n	8009b54 <_printf_float+0x380>
 8009aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af0:	429a      	cmp	r2, r3
 8009af2:	db3b      	blt.n	8009b6c <_printf_float+0x398>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07da      	lsls	r2, r3, #31
 8009af8:	d438      	bmi.n	8009b6c <_printf_float+0x398>
 8009afa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009afe:	eba2 0903 	sub.w	r9, r2, r3
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	1ad2      	subs	r2, r2, r3
 8009b06:	4591      	cmp	r9, r2
 8009b08:	bfa8      	it	ge
 8009b0a:	4691      	movge	r9, r2
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	dc35      	bgt.n	8009b7e <_printf_float+0x3aa>
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b1a:	f104 0a1a 	add.w	sl, r4, #26
 8009b1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	eba3 0309 	sub.w	r3, r3, r9
 8009b28:	4543      	cmp	r3, r8
 8009b2a:	f77f af79 	ble.w	8009a20 <_printf_float+0x24c>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4652      	mov	r2, sl
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f43f aeaa 	beq.w	8009892 <_printf_float+0xbe>
 8009b3e:	f108 0801 	add.w	r8, r8, #1
 8009b42:	e7ec      	b.n	8009b1e <_printf_float+0x34a>
 8009b44:	4613      	mov	r3, r2
 8009b46:	4631      	mov	r1, r6
 8009b48:	4642      	mov	r2, r8
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d1c0      	bne.n	8009ad4 <_printf_float+0x300>
 8009b52:	e69e      	b.n	8009892 <_printf_float+0xbe>
 8009b54:	2301      	movs	r3, #1
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	9205      	str	r2, [sp, #20]
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f ae97 	beq.w	8009892 <_printf_float+0xbe>
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	f10b 0b01 	add.w	fp, fp, #1
 8009b6a:	e7b9      	b.n	8009ae0 <_printf_float+0x30c>
 8009b6c:	ee18 3a10 	vmov	r3, s16
 8009b70:	4652      	mov	r2, sl
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d1be      	bne.n	8009afa <_printf_float+0x326>
 8009b7c:	e689      	b.n	8009892 <_printf_float+0xbe>
 8009b7e:	9a05      	ldr	r2, [sp, #20]
 8009b80:	464b      	mov	r3, r9
 8009b82:	4442      	add	r2, r8
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d1c1      	bne.n	8009b12 <_printf_float+0x33e>
 8009b8e:	e680      	b.n	8009892 <_printf_float+0xbe>
 8009b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b92:	2a01      	cmp	r2, #1
 8009b94:	dc01      	bgt.n	8009b9a <_printf_float+0x3c6>
 8009b96:	07db      	lsls	r3, r3, #31
 8009b98:	d53a      	bpl.n	8009c10 <_printf_float+0x43c>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	f43f ae74 	beq.w	8009892 <_printf_float+0xbe>
 8009baa:	ee18 3a10 	vmov	r3, s16
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f ae6b 	beq.w	8009892 <_printf_float+0xbe>
 8009bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009bc8:	f7f6 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bcc:	b9d8      	cbnz	r0, 8009c06 <_printf_float+0x432>
 8009bce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009bd2:	f108 0201 	add.w	r2, r8, #1
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4628      	mov	r0, r5
 8009bda:	47b8      	blx	r7
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d10e      	bne.n	8009bfe <_printf_float+0x42a>
 8009be0:	e657      	b.n	8009892 <_printf_float+0xbe>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4652      	mov	r2, sl
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	47b8      	blx	r7
 8009bec:	3001      	adds	r0, #1
 8009bee:	f43f ae50 	beq.w	8009892 <_printf_float+0xbe>
 8009bf2:	f108 0801 	add.w	r8, r8, #1
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	4543      	cmp	r3, r8
 8009bfc:	dcf1      	bgt.n	8009be2 <_printf_float+0x40e>
 8009bfe:	464b      	mov	r3, r9
 8009c00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c04:	e6da      	b.n	80099bc <_printf_float+0x1e8>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	f104 0a1a 	add.w	sl, r4, #26
 8009c0e:	e7f2      	b.n	8009bf6 <_printf_float+0x422>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4642      	mov	r2, r8
 8009c14:	e7df      	b.n	8009bd6 <_printf_float+0x402>
 8009c16:	2301      	movs	r3, #1
 8009c18:	464a      	mov	r2, r9
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	47b8      	blx	r7
 8009c20:	3001      	adds	r0, #1
 8009c22:	f43f ae36 	beq.w	8009892 <_printf_float+0xbe>
 8009c26:	f108 0801 	add.w	r8, r8, #1
 8009c2a:	68e3      	ldr	r3, [r4, #12]
 8009c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c2e:	1a5b      	subs	r3, r3, r1
 8009c30:	4543      	cmp	r3, r8
 8009c32:	dcf0      	bgt.n	8009c16 <_printf_float+0x442>
 8009c34:	e6f8      	b.n	8009a28 <_printf_float+0x254>
 8009c36:	f04f 0800 	mov.w	r8, #0
 8009c3a:	f104 0919 	add.w	r9, r4, #25
 8009c3e:	e7f4      	b.n	8009c2a <_printf_float+0x456>

08009c40 <_printf_common>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	4616      	mov	r6, r2
 8009c46:	4699      	mov	r9, r3
 8009c48:	688a      	ldr	r2, [r1, #8]
 8009c4a:	690b      	ldr	r3, [r1, #16]
 8009c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c50:	4293      	cmp	r3, r2
 8009c52:	bfb8      	it	lt
 8009c54:	4613      	movlt	r3, r2
 8009c56:	6033      	str	r3, [r6, #0]
 8009c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	b10a      	cbz	r2, 8009c66 <_printf_common+0x26>
 8009c62:	3301      	adds	r3, #1
 8009c64:	6033      	str	r3, [r6, #0]
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	0699      	lsls	r1, r3, #26
 8009c6a:	bf42      	ittt	mi
 8009c6c:	6833      	ldrmi	r3, [r6, #0]
 8009c6e:	3302      	addmi	r3, #2
 8009c70:	6033      	strmi	r3, [r6, #0]
 8009c72:	6825      	ldr	r5, [r4, #0]
 8009c74:	f015 0506 	ands.w	r5, r5, #6
 8009c78:	d106      	bne.n	8009c88 <_printf_common+0x48>
 8009c7a:	f104 0a19 	add.w	sl, r4, #25
 8009c7e:	68e3      	ldr	r3, [r4, #12]
 8009c80:	6832      	ldr	r2, [r6, #0]
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	42ab      	cmp	r3, r5
 8009c86:	dc26      	bgt.n	8009cd6 <_printf_common+0x96>
 8009c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c8c:	1e13      	subs	r3, r2, #0
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	bf18      	it	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	0692      	lsls	r2, r2, #26
 8009c96:	d42b      	bmi.n	8009cf0 <_printf_common+0xb0>
 8009c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	47c0      	blx	r8
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d01e      	beq.n	8009ce4 <_printf_common+0xa4>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	6922      	ldr	r2, [r4, #16]
 8009caa:	f003 0306 	and.w	r3, r3, #6
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	bf02      	ittt	eq
 8009cb2:	68e5      	ldreq	r5, [r4, #12]
 8009cb4:	6833      	ldreq	r3, [r6, #0]
 8009cb6:	1aed      	subeq	r5, r5, r3
 8009cb8:	68a3      	ldr	r3, [r4, #8]
 8009cba:	bf0c      	ite	eq
 8009cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc0:	2500      	movne	r5, #0
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	bfc4      	itt	gt
 8009cc6:	1a9b      	subgt	r3, r3, r2
 8009cc8:	18ed      	addgt	r5, r5, r3
 8009cca:	2600      	movs	r6, #0
 8009ccc:	341a      	adds	r4, #26
 8009cce:	42b5      	cmp	r5, r6
 8009cd0:	d11a      	bne.n	8009d08 <_printf_common+0xc8>
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	e008      	b.n	8009ce8 <_printf_common+0xa8>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4652      	mov	r2, sl
 8009cda:	4649      	mov	r1, r9
 8009cdc:	4638      	mov	r0, r7
 8009cde:	47c0      	blx	r8
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d103      	bne.n	8009cec <_printf_common+0xac>
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cec:	3501      	adds	r5, #1
 8009cee:	e7c6      	b.n	8009c7e <_printf_common+0x3e>
 8009cf0:	18e1      	adds	r1, r4, r3
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	2030      	movs	r0, #48	; 0x30
 8009cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cfa:	4422      	add	r2, r4
 8009cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d04:	3302      	adds	r3, #2
 8009d06:	e7c7      	b.n	8009c98 <_printf_common+0x58>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	4638      	mov	r0, r7
 8009d10:	47c0      	blx	r8
 8009d12:	3001      	adds	r0, #1
 8009d14:	d0e6      	beq.n	8009ce4 <_printf_common+0xa4>
 8009d16:	3601      	adds	r6, #1
 8009d18:	e7d9      	b.n	8009cce <_printf_common+0x8e>
	...

08009d1c <_printf_i>:
 8009d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	7e0f      	ldrb	r7, [r1, #24]
 8009d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d24:	2f78      	cmp	r7, #120	; 0x78
 8009d26:	4691      	mov	r9, r2
 8009d28:	4680      	mov	r8, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d32:	d807      	bhi.n	8009d44 <_printf_i+0x28>
 8009d34:	2f62      	cmp	r7, #98	; 0x62
 8009d36:	d80a      	bhi.n	8009d4e <_printf_i+0x32>
 8009d38:	2f00      	cmp	r7, #0
 8009d3a:	f000 80d4 	beq.w	8009ee6 <_printf_i+0x1ca>
 8009d3e:	2f58      	cmp	r7, #88	; 0x58
 8009d40:	f000 80c0 	beq.w	8009ec4 <_printf_i+0x1a8>
 8009d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d4c:	e03a      	b.n	8009dc4 <_printf_i+0xa8>
 8009d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d52:	2b15      	cmp	r3, #21
 8009d54:	d8f6      	bhi.n	8009d44 <_printf_i+0x28>
 8009d56:	a101      	add	r1, pc, #4	; (adr r1, 8009d5c <_printf_i+0x40>)
 8009d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d5c:	08009db5 	.word	0x08009db5
 8009d60:	08009dc9 	.word	0x08009dc9
 8009d64:	08009d45 	.word	0x08009d45
 8009d68:	08009d45 	.word	0x08009d45
 8009d6c:	08009d45 	.word	0x08009d45
 8009d70:	08009d45 	.word	0x08009d45
 8009d74:	08009dc9 	.word	0x08009dc9
 8009d78:	08009d45 	.word	0x08009d45
 8009d7c:	08009d45 	.word	0x08009d45
 8009d80:	08009d45 	.word	0x08009d45
 8009d84:	08009d45 	.word	0x08009d45
 8009d88:	08009ecd 	.word	0x08009ecd
 8009d8c:	08009df5 	.word	0x08009df5
 8009d90:	08009e87 	.word	0x08009e87
 8009d94:	08009d45 	.word	0x08009d45
 8009d98:	08009d45 	.word	0x08009d45
 8009d9c:	08009eef 	.word	0x08009eef
 8009da0:	08009d45 	.word	0x08009d45
 8009da4:	08009df5 	.word	0x08009df5
 8009da8:	08009d45 	.word	0x08009d45
 8009dac:	08009d45 	.word	0x08009d45
 8009db0:	08009e8f 	.word	0x08009e8f
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	1d1a      	adds	r2, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	602a      	str	r2, [r5, #0]
 8009dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e09f      	b.n	8009f08 <_printf_i+0x1ec>
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	0607      	lsls	r7, r0, #24
 8009dce:	f103 0104 	add.w	r1, r3, #4
 8009dd2:	6029      	str	r1, [r5, #0]
 8009dd4:	d501      	bpl.n	8009dda <_printf_i+0xbe>
 8009dd6:	681e      	ldr	r6, [r3, #0]
 8009dd8:	e003      	b.n	8009de2 <_printf_i+0xc6>
 8009dda:	0646      	lsls	r6, r0, #25
 8009ddc:	d5fb      	bpl.n	8009dd6 <_printf_i+0xba>
 8009dde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	da03      	bge.n	8009dee <_printf_i+0xd2>
 8009de6:	232d      	movs	r3, #45	; 0x2d
 8009de8:	4276      	negs	r6, r6
 8009dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dee:	485a      	ldr	r0, [pc, #360]	; (8009f58 <_printf_i+0x23c>)
 8009df0:	230a      	movs	r3, #10
 8009df2:	e012      	b.n	8009e1a <_printf_i+0xfe>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	6820      	ldr	r0, [r4, #0]
 8009df8:	1d19      	adds	r1, r3, #4
 8009dfa:	6029      	str	r1, [r5, #0]
 8009dfc:	0605      	lsls	r5, r0, #24
 8009dfe:	d501      	bpl.n	8009e04 <_printf_i+0xe8>
 8009e00:	681e      	ldr	r6, [r3, #0]
 8009e02:	e002      	b.n	8009e0a <_printf_i+0xee>
 8009e04:	0641      	lsls	r1, r0, #25
 8009e06:	d5fb      	bpl.n	8009e00 <_printf_i+0xe4>
 8009e08:	881e      	ldrh	r6, [r3, #0]
 8009e0a:	4853      	ldr	r0, [pc, #332]	; (8009f58 <_printf_i+0x23c>)
 8009e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009e0e:	bf0c      	ite	eq
 8009e10:	2308      	moveq	r3, #8
 8009e12:	230a      	movne	r3, #10
 8009e14:	2100      	movs	r1, #0
 8009e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e1a:	6865      	ldr	r5, [r4, #4]
 8009e1c:	60a5      	str	r5, [r4, #8]
 8009e1e:	2d00      	cmp	r5, #0
 8009e20:	bfa2      	ittt	ge
 8009e22:	6821      	ldrge	r1, [r4, #0]
 8009e24:	f021 0104 	bicge.w	r1, r1, #4
 8009e28:	6021      	strge	r1, [r4, #0]
 8009e2a:	b90e      	cbnz	r6, 8009e30 <_printf_i+0x114>
 8009e2c:	2d00      	cmp	r5, #0
 8009e2e:	d04b      	beq.n	8009ec8 <_printf_i+0x1ac>
 8009e30:	4615      	mov	r5, r2
 8009e32:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e36:	fb03 6711 	mls	r7, r3, r1, r6
 8009e3a:	5dc7      	ldrb	r7, [r0, r7]
 8009e3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e40:	4637      	mov	r7, r6
 8009e42:	42bb      	cmp	r3, r7
 8009e44:	460e      	mov	r6, r1
 8009e46:	d9f4      	bls.n	8009e32 <_printf_i+0x116>
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d10b      	bne.n	8009e64 <_printf_i+0x148>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	07de      	lsls	r6, r3, #31
 8009e50:	d508      	bpl.n	8009e64 <_printf_i+0x148>
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	6861      	ldr	r1, [r4, #4]
 8009e56:	4299      	cmp	r1, r3
 8009e58:	bfde      	ittt	le
 8009e5a:	2330      	movle	r3, #48	; 0x30
 8009e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e64:	1b52      	subs	r2, r2, r5
 8009e66:	6122      	str	r2, [r4, #16]
 8009e68:	f8cd a000 	str.w	sl, [sp]
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	aa03      	add	r2, sp, #12
 8009e70:	4621      	mov	r1, r4
 8009e72:	4640      	mov	r0, r8
 8009e74:	f7ff fee4 	bl	8009c40 <_printf_common>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d14a      	bne.n	8009f12 <_printf_i+0x1f6>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e80:	b004      	add	sp, #16
 8009e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	f043 0320 	orr.w	r3, r3, #32
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	4833      	ldr	r0, [pc, #204]	; (8009f5c <_printf_i+0x240>)
 8009e90:	2778      	movs	r7, #120	; 0x78
 8009e92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	6829      	ldr	r1, [r5, #0]
 8009e9a:	061f      	lsls	r7, r3, #24
 8009e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ea0:	d402      	bmi.n	8009ea8 <_printf_i+0x18c>
 8009ea2:	065f      	lsls	r7, r3, #25
 8009ea4:	bf48      	it	mi
 8009ea6:	b2b6      	uxthmi	r6, r6
 8009ea8:	07df      	lsls	r7, r3, #31
 8009eaa:	bf48      	it	mi
 8009eac:	f043 0320 	orrmi.w	r3, r3, #32
 8009eb0:	6029      	str	r1, [r5, #0]
 8009eb2:	bf48      	it	mi
 8009eb4:	6023      	strmi	r3, [r4, #0]
 8009eb6:	b91e      	cbnz	r6, 8009ec0 <_printf_i+0x1a4>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	f023 0320 	bic.w	r3, r3, #32
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	e7a7      	b.n	8009e14 <_printf_i+0xf8>
 8009ec4:	4824      	ldr	r0, [pc, #144]	; (8009f58 <_printf_i+0x23c>)
 8009ec6:	e7e4      	b.n	8009e92 <_printf_i+0x176>
 8009ec8:	4615      	mov	r5, r2
 8009eca:	e7bd      	b.n	8009e48 <_printf_i+0x12c>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	6826      	ldr	r6, [r4, #0]
 8009ed0:	6961      	ldr	r1, [r4, #20]
 8009ed2:	1d18      	adds	r0, r3, #4
 8009ed4:	6028      	str	r0, [r5, #0]
 8009ed6:	0635      	lsls	r5, r6, #24
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	d501      	bpl.n	8009ee0 <_printf_i+0x1c4>
 8009edc:	6019      	str	r1, [r3, #0]
 8009ede:	e002      	b.n	8009ee6 <_printf_i+0x1ca>
 8009ee0:	0670      	lsls	r0, r6, #25
 8009ee2:	d5fb      	bpl.n	8009edc <_printf_i+0x1c0>
 8009ee4:	8019      	strh	r1, [r3, #0]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	6123      	str	r3, [r4, #16]
 8009eea:	4615      	mov	r5, r2
 8009eec:	e7bc      	b.n	8009e68 <_printf_i+0x14c>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	1d1a      	adds	r2, r3, #4
 8009ef2:	602a      	str	r2, [r5, #0]
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	6862      	ldr	r2, [r4, #4]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4628      	mov	r0, r5
 8009efc:	f7f6 f968 	bl	80001d0 <memchr>
 8009f00:	b108      	cbz	r0, 8009f06 <_printf_i+0x1ea>
 8009f02:	1b40      	subs	r0, r0, r5
 8009f04:	6060      	str	r0, [r4, #4]
 8009f06:	6863      	ldr	r3, [r4, #4]
 8009f08:	6123      	str	r3, [r4, #16]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f10:	e7aa      	b.n	8009e68 <_printf_i+0x14c>
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	462a      	mov	r2, r5
 8009f16:	4649      	mov	r1, r9
 8009f18:	4640      	mov	r0, r8
 8009f1a:	47d0      	blx	sl
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d0ad      	beq.n	8009e7c <_printf_i+0x160>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	079b      	lsls	r3, r3, #30
 8009f24:	d413      	bmi.n	8009f4e <_printf_i+0x232>
 8009f26:	68e0      	ldr	r0, [r4, #12]
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	4298      	cmp	r0, r3
 8009f2c:	bfb8      	it	lt
 8009f2e:	4618      	movlt	r0, r3
 8009f30:	e7a6      	b.n	8009e80 <_printf_i+0x164>
 8009f32:	2301      	movs	r3, #1
 8009f34:	4632      	mov	r2, r6
 8009f36:	4649      	mov	r1, r9
 8009f38:	4640      	mov	r0, r8
 8009f3a:	47d0      	blx	sl
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d09d      	beq.n	8009e7c <_printf_i+0x160>
 8009f40:	3501      	adds	r5, #1
 8009f42:	68e3      	ldr	r3, [r4, #12]
 8009f44:	9903      	ldr	r1, [sp, #12]
 8009f46:	1a5b      	subs	r3, r3, r1
 8009f48:	42ab      	cmp	r3, r5
 8009f4a:	dcf2      	bgt.n	8009f32 <_printf_i+0x216>
 8009f4c:	e7eb      	b.n	8009f26 <_printf_i+0x20a>
 8009f4e:	2500      	movs	r5, #0
 8009f50:	f104 0619 	add.w	r6, r4, #25
 8009f54:	e7f5      	b.n	8009f42 <_printf_i+0x226>
 8009f56:	bf00      	nop
 8009f58:	0800c4b2 	.word	0x0800c4b2
 8009f5c:	0800c4c3 	.word	0x0800c4c3

08009f60 <siprintf>:
 8009f60:	b40e      	push	{r1, r2, r3}
 8009f62:	b500      	push	{lr}
 8009f64:	b09c      	sub	sp, #112	; 0x70
 8009f66:	ab1d      	add	r3, sp, #116	; 0x74
 8009f68:	9002      	str	r0, [sp, #8]
 8009f6a:	9006      	str	r0, [sp, #24]
 8009f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f70:	4809      	ldr	r0, [pc, #36]	; (8009f98 <siprintf+0x38>)
 8009f72:	9107      	str	r1, [sp, #28]
 8009f74:	9104      	str	r1, [sp, #16]
 8009f76:	4909      	ldr	r1, [pc, #36]	; (8009f9c <siprintf+0x3c>)
 8009f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	6800      	ldr	r0, [r0, #0]
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	a902      	add	r1, sp, #8
 8009f84:	f000 ffdc 	bl	800af40 <_svfiprintf_r>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	b01c      	add	sp, #112	; 0x70
 8009f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f94:	b003      	add	sp, #12
 8009f96:	4770      	bx	lr
 8009f98:	20000164 	.word	0x20000164
 8009f9c:	ffff0208 	.word	0xffff0208

08009fa0 <std>:
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	b510      	push	{r4, lr}
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8009faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fae:	6083      	str	r3, [r0, #8]
 8009fb0:	8181      	strh	r1, [r0, #12]
 8009fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb4:	81c2      	strh	r2, [r0, #14]
 8009fb6:	6183      	str	r3, [r0, #24]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	2208      	movs	r2, #8
 8009fbc:	305c      	adds	r0, #92	; 0x5c
 8009fbe:	f000 f8b1 	bl	800a124 <memset>
 8009fc2:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <std+0x58>)
 8009fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fc6:	4b0d      	ldr	r3, [pc, #52]	; (8009ffc <std+0x5c>)
 8009fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fca:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <std+0x60>)
 8009fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <std+0x64>)
 8009fd0:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd2:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <std+0x68>)
 8009fd4:	6224      	str	r4, [r4, #32]
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	d006      	beq.n	8009fe8 <std+0x48>
 8009fda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009fde:	4294      	cmp	r4, r2
 8009fe0:	d002      	beq.n	8009fe8 <std+0x48>
 8009fe2:	33d0      	adds	r3, #208	; 0xd0
 8009fe4:	429c      	cmp	r4, r3
 8009fe6:	d105      	bne.n	8009ff4 <std+0x54>
 8009fe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff0:	f000 b8ce 	b.w	800a190 <__retarget_lock_init_recursive>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800baf9 	.word	0x0800baf9
 8009ffc:	0800bb1b 	.word	0x0800bb1b
 800a000:	0800bb53 	.word	0x0800bb53
 800a004:	0800bb77 	.word	0x0800bb77
 800a008:	2000205c 	.word	0x2000205c

0800a00c <stdio_exit_handler>:
 800a00c:	4a02      	ldr	r2, [pc, #8]	; (800a018 <stdio_exit_handler+0xc>)
 800a00e:	4903      	ldr	r1, [pc, #12]	; (800a01c <stdio_exit_handler+0x10>)
 800a010:	4803      	ldr	r0, [pc, #12]	; (800a020 <stdio_exit_handler+0x14>)
 800a012:	f000 b869 	b.w	800a0e8 <_fwalk_sglue>
 800a016:	bf00      	nop
 800a018:	2000010c 	.word	0x2000010c
 800a01c:	0800b399 	.word	0x0800b399
 800a020:	20000118 	.word	0x20000118

0800a024 <cleanup_stdio>:
 800a024:	6841      	ldr	r1, [r0, #4]
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <cleanup_stdio+0x34>)
 800a028:	4299      	cmp	r1, r3
 800a02a:	b510      	push	{r4, lr}
 800a02c:	4604      	mov	r4, r0
 800a02e:	d001      	beq.n	800a034 <cleanup_stdio+0x10>
 800a030:	f001 f9b2 	bl	800b398 <_fflush_r>
 800a034:	68a1      	ldr	r1, [r4, #8]
 800a036:	4b09      	ldr	r3, [pc, #36]	; (800a05c <cleanup_stdio+0x38>)
 800a038:	4299      	cmp	r1, r3
 800a03a:	d002      	beq.n	800a042 <cleanup_stdio+0x1e>
 800a03c:	4620      	mov	r0, r4
 800a03e:	f001 f9ab 	bl	800b398 <_fflush_r>
 800a042:	68e1      	ldr	r1, [r4, #12]
 800a044:	4b06      	ldr	r3, [pc, #24]	; (800a060 <cleanup_stdio+0x3c>)
 800a046:	4299      	cmp	r1, r3
 800a048:	d004      	beq.n	800a054 <cleanup_stdio+0x30>
 800a04a:	4620      	mov	r0, r4
 800a04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a050:	f001 b9a2 	b.w	800b398 <_fflush_r>
 800a054:	bd10      	pop	{r4, pc}
 800a056:	bf00      	nop
 800a058:	2000205c 	.word	0x2000205c
 800a05c:	200020c4 	.word	0x200020c4
 800a060:	2000212c 	.word	0x2000212c

0800a064 <global_stdio_init.part.0>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <global_stdio_init.part.0+0x30>)
 800a068:	4c0b      	ldr	r4, [pc, #44]	; (800a098 <global_stdio_init.part.0+0x34>)
 800a06a:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <global_stdio_init.part.0+0x38>)
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	4620      	mov	r0, r4
 800a070:	2200      	movs	r2, #0
 800a072:	2104      	movs	r1, #4
 800a074:	f7ff ff94 	bl	8009fa0 <std>
 800a078:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a07c:	2201      	movs	r2, #1
 800a07e:	2109      	movs	r1, #9
 800a080:	f7ff ff8e 	bl	8009fa0 <std>
 800a084:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a088:	2202      	movs	r2, #2
 800a08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08e:	2112      	movs	r1, #18
 800a090:	f7ff bf86 	b.w	8009fa0 <std>
 800a094:	20002194 	.word	0x20002194
 800a098:	2000205c 	.word	0x2000205c
 800a09c:	0800a00d 	.word	0x0800a00d

0800a0a0 <__sfp_lock_acquire>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	; (800a0a8 <__sfp_lock_acquire+0x8>)
 800a0a2:	f000 b876 	b.w	800a192 <__retarget_lock_acquire_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	20002199 	.word	0x20002199

0800a0ac <__sfp_lock_release>:
 800a0ac:	4801      	ldr	r0, [pc, #4]	; (800a0b4 <__sfp_lock_release+0x8>)
 800a0ae:	f000 b871 	b.w	800a194 <__retarget_lock_release_recursive>
 800a0b2:	bf00      	nop
 800a0b4:	20002199 	.word	0x20002199

0800a0b8 <__sinit>:
 800a0b8:	b510      	push	{r4, lr}
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	f7ff fff0 	bl	800a0a0 <__sfp_lock_acquire>
 800a0c0:	6a23      	ldr	r3, [r4, #32]
 800a0c2:	b11b      	cbz	r3, 800a0cc <__sinit+0x14>
 800a0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c8:	f7ff bff0 	b.w	800a0ac <__sfp_lock_release>
 800a0cc:	4b04      	ldr	r3, [pc, #16]	; (800a0e0 <__sinit+0x28>)
 800a0ce:	6223      	str	r3, [r4, #32]
 800a0d0:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <__sinit+0x2c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f5      	bne.n	800a0c4 <__sinit+0xc>
 800a0d8:	f7ff ffc4 	bl	800a064 <global_stdio_init.part.0>
 800a0dc:	e7f2      	b.n	800a0c4 <__sinit+0xc>
 800a0de:	bf00      	nop
 800a0e0:	0800a025 	.word	0x0800a025
 800a0e4:	20002194 	.word	0x20002194

0800a0e8 <_fwalk_sglue>:
 800a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	4688      	mov	r8, r1
 800a0f0:	4614      	mov	r4, r2
 800a0f2:	2600      	movs	r6, #0
 800a0f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a0fc:	d505      	bpl.n	800a10a <_fwalk_sglue+0x22>
 800a0fe:	6824      	ldr	r4, [r4, #0]
 800a100:	2c00      	cmp	r4, #0
 800a102:	d1f7      	bne.n	800a0f4 <_fwalk_sglue+0xc>
 800a104:	4630      	mov	r0, r6
 800a106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10a:	89ab      	ldrh	r3, [r5, #12]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d907      	bls.n	800a120 <_fwalk_sglue+0x38>
 800a110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a114:	3301      	adds	r3, #1
 800a116:	d003      	beq.n	800a120 <_fwalk_sglue+0x38>
 800a118:	4629      	mov	r1, r5
 800a11a:	4638      	mov	r0, r7
 800a11c:	47c0      	blx	r8
 800a11e:	4306      	orrs	r6, r0
 800a120:	3568      	adds	r5, #104	; 0x68
 800a122:	e7e9      	b.n	800a0f8 <_fwalk_sglue+0x10>

0800a124 <memset>:
 800a124:	4402      	add	r2, r0
 800a126:	4603      	mov	r3, r0
 800a128:	4293      	cmp	r3, r2
 800a12a:	d100      	bne.n	800a12e <memset+0xa>
 800a12c:	4770      	bx	lr
 800a12e:	f803 1b01 	strb.w	r1, [r3], #1
 800a132:	e7f9      	b.n	800a128 <memset+0x4>

0800a134 <_localeconv_r>:
 800a134:	4800      	ldr	r0, [pc, #0]	; (800a138 <_localeconv_r+0x4>)
 800a136:	4770      	bx	lr
 800a138:	20000258 	.word	0x20000258

0800a13c <__errno>:
 800a13c:	4b01      	ldr	r3, [pc, #4]	; (800a144 <__errno+0x8>)
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	20000164 	.word	0x20000164

0800a148 <__libc_init_array>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	4d0d      	ldr	r5, [pc, #52]	; (800a180 <__libc_init_array+0x38>)
 800a14c:	4c0d      	ldr	r4, [pc, #52]	; (800a184 <__libc_init_array+0x3c>)
 800a14e:	1b64      	subs	r4, r4, r5
 800a150:	10a4      	asrs	r4, r4, #2
 800a152:	2600      	movs	r6, #0
 800a154:	42a6      	cmp	r6, r4
 800a156:	d109      	bne.n	800a16c <__libc_init_array+0x24>
 800a158:	4d0b      	ldr	r5, [pc, #44]	; (800a188 <__libc_init_array+0x40>)
 800a15a:	4c0c      	ldr	r4, [pc, #48]	; (800a18c <__libc_init_array+0x44>)
 800a15c:	f002 f91e 	bl	800c39c <_init>
 800a160:	1b64      	subs	r4, r4, r5
 800a162:	10a4      	asrs	r4, r4, #2
 800a164:	2600      	movs	r6, #0
 800a166:	42a6      	cmp	r6, r4
 800a168:	d105      	bne.n	800a176 <__libc_init_array+0x2e>
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a170:	4798      	blx	r3
 800a172:	3601      	adds	r6, #1
 800a174:	e7ee      	b.n	800a154 <__libc_init_array+0xc>
 800a176:	f855 3b04 	ldr.w	r3, [r5], #4
 800a17a:	4798      	blx	r3
 800a17c:	3601      	adds	r6, #1
 800a17e:	e7f2      	b.n	800a166 <__libc_init_array+0x1e>
 800a180:	0800c814 	.word	0x0800c814
 800a184:	0800c814 	.word	0x0800c814
 800a188:	0800c814 	.word	0x0800c814
 800a18c:	0800c818 	.word	0x0800c818

0800a190 <__retarget_lock_init_recursive>:
 800a190:	4770      	bx	lr

0800a192 <__retarget_lock_acquire_recursive>:
 800a192:	4770      	bx	lr

0800a194 <__retarget_lock_release_recursive>:
 800a194:	4770      	bx	lr

0800a196 <quorem>:
 800a196:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	6903      	ldr	r3, [r0, #16]
 800a19c:	690c      	ldr	r4, [r1, #16]
 800a19e:	42a3      	cmp	r3, r4
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	db7e      	blt.n	800a2a2 <quorem+0x10c>
 800a1a4:	3c01      	subs	r4, #1
 800a1a6:	f101 0814 	add.w	r8, r1, #20
 800a1aa:	f100 0514 	add.w	r5, r0, #20
 800a1ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1cc:	d331      	bcc.n	800a232 <quorem+0x9c>
 800a1ce:	f04f 0e00 	mov.w	lr, #0
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	46ac      	mov	ip, r5
 800a1d6:	46f2      	mov	sl, lr
 800a1d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1dc:	b293      	uxth	r3, r2
 800a1de:	fb06 e303 	mla	r3, r6, r3, lr
 800a1e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1e6:	0c1a      	lsrs	r2, r3, #16
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	ebaa 0303 	sub.w	r3, sl, r3
 800a1ee:	f8dc a000 	ldr.w	sl, [ip]
 800a1f2:	fa13 f38a 	uxtah	r3, r3, sl
 800a1f6:	fb06 220e 	mla	r2, r6, lr, r2
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	9b00      	ldr	r3, [sp, #0]
 800a1fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a202:	b292      	uxth	r2, r2
 800a204:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a208:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a20c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a210:	4581      	cmp	r9, r0
 800a212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a216:	f84c 3b04 	str.w	r3, [ip], #4
 800a21a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a21e:	d2db      	bcs.n	800a1d8 <quorem+0x42>
 800a220:	f855 300b 	ldr.w	r3, [r5, fp]
 800a224:	b92b      	cbnz	r3, 800a232 <quorem+0x9c>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	3b04      	subs	r3, #4
 800a22a:	429d      	cmp	r5, r3
 800a22c:	461a      	mov	r2, r3
 800a22e:	d32c      	bcc.n	800a28a <quorem+0xf4>
 800a230:	613c      	str	r4, [r7, #16]
 800a232:	4638      	mov	r0, r7
 800a234:	f001 fb60 	bl	800b8f8 <__mcmp>
 800a238:	2800      	cmp	r0, #0
 800a23a:	db22      	blt.n	800a282 <quorem+0xec>
 800a23c:	3601      	adds	r6, #1
 800a23e:	4629      	mov	r1, r5
 800a240:	2000      	movs	r0, #0
 800a242:	f858 2b04 	ldr.w	r2, [r8], #4
 800a246:	f8d1 c000 	ldr.w	ip, [r1]
 800a24a:	b293      	uxth	r3, r2
 800a24c:	1ac3      	subs	r3, r0, r3
 800a24e:	0c12      	lsrs	r2, r2, #16
 800a250:	fa13 f38c 	uxtah	r3, r3, ip
 800a254:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a262:	45c1      	cmp	r9, r8
 800a264:	f841 3b04 	str.w	r3, [r1], #4
 800a268:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a26c:	d2e9      	bcs.n	800a242 <quorem+0xac>
 800a26e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a276:	b922      	cbnz	r2, 800a282 <quorem+0xec>
 800a278:	3b04      	subs	r3, #4
 800a27a:	429d      	cmp	r5, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	d30a      	bcc.n	800a296 <quorem+0x100>
 800a280:	613c      	str	r4, [r7, #16]
 800a282:	4630      	mov	r0, r6
 800a284:	b003      	add	sp, #12
 800a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	3b04      	subs	r3, #4
 800a28e:	2a00      	cmp	r2, #0
 800a290:	d1ce      	bne.n	800a230 <quorem+0x9a>
 800a292:	3c01      	subs	r4, #1
 800a294:	e7c9      	b.n	800a22a <quorem+0x94>
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	3b04      	subs	r3, #4
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	d1f0      	bne.n	800a280 <quorem+0xea>
 800a29e:	3c01      	subs	r4, #1
 800a2a0:	e7eb      	b.n	800a27a <quorem+0xe4>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e7ee      	b.n	800a284 <quorem+0xee>
	...

0800a2a8 <_dtoa_r>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	ed2d 8b04 	vpush	{d8-d9}
 800a2b0:	69c5      	ldr	r5, [r0, #28]
 800a2b2:	b093      	sub	sp, #76	; 0x4c
 800a2b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2b8:	ec57 6b10 	vmov	r6, r7, d0
 800a2bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2c0:	9107      	str	r1, [sp, #28]
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a2c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a2c8:	b975      	cbnz	r5, 800a2e8 <_dtoa_r+0x40>
 800a2ca:	2010      	movs	r0, #16
 800a2cc:	f000 ff36 	bl	800b13c <malloc>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	61e0      	str	r0, [r4, #28]
 800a2d4:	b920      	cbnz	r0, 800a2e0 <_dtoa_r+0x38>
 800a2d6:	4bae      	ldr	r3, [pc, #696]	; (800a590 <_dtoa_r+0x2e8>)
 800a2d8:	21ef      	movs	r1, #239	; 0xef
 800a2da:	48ae      	ldr	r0, [pc, #696]	; (800a594 <_dtoa_r+0x2ec>)
 800a2dc:	f001 fcfc 	bl	800bcd8 <__assert_func>
 800a2e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2e4:	6005      	str	r5, [r0, #0]
 800a2e6:	60c5      	str	r5, [r0, #12]
 800a2e8:	69e3      	ldr	r3, [r4, #28]
 800a2ea:	6819      	ldr	r1, [r3, #0]
 800a2ec:	b151      	cbz	r1, 800a304 <_dtoa_r+0x5c>
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	604a      	str	r2, [r1, #4]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4093      	lsls	r3, r2
 800a2f6:	608b      	str	r3, [r1, #8]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f001 f8c1 	bl	800b480 <_Bfree>
 800a2fe:	69e3      	ldr	r3, [r4, #28]
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	1e3b      	subs	r3, r7, #0
 800a306:	bfbb      	ittet	lt
 800a308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a30c:	9303      	strlt	r3, [sp, #12]
 800a30e:	2300      	movge	r3, #0
 800a310:	2201      	movlt	r2, #1
 800a312:	bfac      	ite	ge
 800a314:	f8c8 3000 	strge.w	r3, [r8]
 800a318:	f8c8 2000 	strlt.w	r2, [r8]
 800a31c:	4b9e      	ldr	r3, [pc, #632]	; (800a598 <_dtoa_r+0x2f0>)
 800a31e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a322:	ea33 0308 	bics.w	r3, r3, r8
 800a326:	d11b      	bne.n	800a360 <_dtoa_r+0xb8>
 800a328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a32a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a334:	4333      	orrs	r3, r6
 800a336:	f000 8593 	beq.w	800ae60 <_dtoa_r+0xbb8>
 800a33a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a33c:	b963      	cbnz	r3, 800a358 <_dtoa_r+0xb0>
 800a33e:	4b97      	ldr	r3, [pc, #604]	; (800a59c <_dtoa_r+0x2f4>)
 800a340:	e027      	b.n	800a392 <_dtoa_r+0xea>
 800a342:	4b97      	ldr	r3, [pc, #604]	; (800a5a0 <_dtoa_r+0x2f8>)
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	3308      	adds	r3, #8
 800a348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	9800      	ldr	r0, [sp, #0]
 800a34e:	b013      	add	sp, #76	; 0x4c
 800a350:	ecbd 8b04 	vpop	{d8-d9}
 800a354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a358:	4b90      	ldr	r3, [pc, #576]	; (800a59c <_dtoa_r+0x2f4>)
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	3303      	adds	r3, #3
 800a35e:	e7f3      	b.n	800a348 <_dtoa_r+0xa0>
 800a360:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a364:	2200      	movs	r2, #0
 800a366:	ec51 0b17 	vmov	r0, r1, d7
 800a36a:	eeb0 8a47 	vmov.f32	s16, s14
 800a36e:	eef0 8a67 	vmov.f32	s17, s15
 800a372:	2300      	movs	r3, #0
 800a374:	f7f6 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a378:	4681      	mov	r9, r0
 800a37a:	b160      	cbz	r0, 800a396 <_dtoa_r+0xee>
 800a37c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a37e:	2301      	movs	r3, #1
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8568 	beq.w	800ae5a <_dtoa_r+0xbb2>
 800a38a:	4b86      	ldr	r3, [pc, #536]	; (800a5a4 <_dtoa_r+0x2fc>)
 800a38c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	3b01      	subs	r3, #1
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	e7da      	b.n	800a34c <_dtoa_r+0xa4>
 800a396:	aa10      	add	r2, sp, #64	; 0x40
 800a398:	a911      	add	r1, sp, #68	; 0x44
 800a39a:	4620      	mov	r0, r4
 800a39c:	eeb0 0a48 	vmov.f32	s0, s16
 800a3a0:	eef0 0a68 	vmov.f32	s1, s17
 800a3a4:	f001 fb4e 	bl	800ba44 <__d2b>
 800a3a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a3ac:	4682      	mov	sl, r0
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	d07f      	beq.n	800a4b2 <_dtoa_r+0x20a>
 800a3b2:	ee18 3a90 	vmov	r3, s17
 800a3b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a3be:	ec51 0b18 	vmov	r0, r1, d8
 800a3c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4b75      	ldr	r3, [pc, #468]	; (800a5a8 <_dtoa_r+0x300>)
 800a3d4:	f7f5 ff58 	bl	8000288 <__aeabi_dsub>
 800a3d8:	a367      	add	r3, pc, #412	; (adr r3, 800a578 <_dtoa_r+0x2d0>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f6 f90b 	bl	80005f8 <__aeabi_dmul>
 800a3e2:	a367      	add	r3, pc, #412	; (adr r3, 800a580 <_dtoa_r+0x2d8>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff50 	bl	800028c <__adddf3>
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	f7f6 f897 	bl	8000524 <__aeabi_i2d>
 800a3f6:	a364      	add	r3, pc, #400	; (adr r3, 800a588 <_dtoa_r+0x2e0>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f6 f8fc 	bl	80005f8 <__aeabi_dmul>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4630      	mov	r0, r6
 800a406:	4639      	mov	r1, r7
 800a408:	f7f5 ff40 	bl	800028c <__adddf3>
 800a40c:	4606      	mov	r6, r0
 800a40e:	460f      	mov	r7, r1
 800a410:	f7f6 fba2 	bl	8000b58 <__aeabi_d2iz>
 800a414:	2200      	movs	r2, #0
 800a416:	4683      	mov	fp, r0
 800a418:	2300      	movs	r3, #0
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f6 fb5d 	bl	8000adc <__aeabi_dcmplt>
 800a422:	b148      	cbz	r0, 800a438 <_dtoa_r+0x190>
 800a424:	4658      	mov	r0, fp
 800a426:	f7f6 f87d 	bl	8000524 <__aeabi_i2d>
 800a42a:	4632      	mov	r2, r6
 800a42c:	463b      	mov	r3, r7
 800a42e:	f7f6 fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a432:	b908      	cbnz	r0, 800a438 <_dtoa_r+0x190>
 800a434:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a438:	f1bb 0f16 	cmp.w	fp, #22
 800a43c:	d857      	bhi.n	800a4ee <_dtoa_r+0x246>
 800a43e:	4b5b      	ldr	r3, [pc, #364]	; (800a5ac <_dtoa_r+0x304>)
 800a440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	ec51 0b18 	vmov	r0, r1, d8
 800a44c:	f7f6 fb46 	bl	8000adc <__aeabi_dcmplt>
 800a450:	2800      	cmp	r0, #0
 800a452:	d04e      	beq.n	800a4f2 <_dtoa_r+0x24a>
 800a454:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a458:	2300      	movs	r3, #0
 800a45a:	930c      	str	r3, [sp, #48]	; 0x30
 800a45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a45e:	1b5b      	subs	r3, r3, r5
 800a460:	1e5a      	subs	r2, r3, #1
 800a462:	bf45      	ittet	mi
 800a464:	f1c3 0301 	rsbmi	r3, r3, #1
 800a468:	9305      	strmi	r3, [sp, #20]
 800a46a:	2300      	movpl	r3, #0
 800a46c:	2300      	movmi	r3, #0
 800a46e:	9206      	str	r2, [sp, #24]
 800a470:	bf54      	ite	pl
 800a472:	9305      	strpl	r3, [sp, #20]
 800a474:	9306      	strmi	r3, [sp, #24]
 800a476:	f1bb 0f00 	cmp.w	fp, #0
 800a47a:	db3c      	blt.n	800a4f6 <_dtoa_r+0x24e>
 800a47c:	9b06      	ldr	r3, [sp, #24]
 800a47e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a482:	445b      	add	r3, fp
 800a484:	9306      	str	r3, [sp, #24]
 800a486:	2300      	movs	r3, #0
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9b07      	ldr	r3, [sp, #28]
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d868      	bhi.n	800a562 <_dtoa_r+0x2ba>
 800a490:	2b05      	cmp	r3, #5
 800a492:	bfc4      	itt	gt
 800a494:	3b04      	subgt	r3, #4
 800a496:	9307      	strgt	r3, [sp, #28]
 800a498:	9b07      	ldr	r3, [sp, #28]
 800a49a:	f1a3 0302 	sub.w	r3, r3, #2
 800a49e:	bfcc      	ite	gt
 800a4a0:	2500      	movgt	r5, #0
 800a4a2:	2501      	movle	r5, #1
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	f200 8085 	bhi.w	800a5b4 <_dtoa_r+0x30c>
 800a4aa:	e8df f003 	tbb	[pc, r3]
 800a4ae:	3b2e      	.short	0x3b2e
 800a4b0:	5839      	.short	0x5839
 800a4b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4b6:	441d      	add	r5, r3
 800a4b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	bfc1      	itttt	gt
 800a4c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a4c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a4cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a4d0:	bfd6      	itet	le
 800a4d2:	f1c3 0320 	rsble	r3, r3, #32
 800a4d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a4da:	fa06 f003 	lslle.w	r0, r6, r3
 800a4de:	f7f6 f811 	bl	8000504 <__aeabi_ui2d>
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a4e8:	3d01      	subs	r5, #1
 800a4ea:	920e      	str	r2, [sp, #56]	; 0x38
 800a4ec:	e76f      	b.n	800a3ce <_dtoa_r+0x126>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e7b3      	b.n	800a45a <_dtoa_r+0x1b2>
 800a4f2:	900c      	str	r0, [sp, #48]	; 0x30
 800a4f4:	e7b2      	b.n	800a45c <_dtoa_r+0x1b4>
 800a4f6:	9b05      	ldr	r3, [sp, #20]
 800a4f8:	eba3 030b 	sub.w	r3, r3, fp
 800a4fc:	9305      	str	r3, [sp, #20]
 800a4fe:	f1cb 0300 	rsb	r3, fp, #0
 800a502:	9308      	str	r3, [sp, #32]
 800a504:	2300      	movs	r3, #0
 800a506:	930b      	str	r3, [sp, #44]	; 0x2c
 800a508:	e7bf      	b.n	800a48a <_dtoa_r+0x1e2>
 800a50a:	2300      	movs	r3, #0
 800a50c:	9309      	str	r3, [sp, #36]	; 0x24
 800a50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a510:	2b00      	cmp	r3, #0
 800a512:	dc52      	bgt.n	800a5ba <_dtoa_r+0x312>
 800a514:	2301      	movs	r3, #1
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	9304      	str	r3, [sp, #16]
 800a51a:	461a      	mov	r2, r3
 800a51c:	920a      	str	r2, [sp, #40]	; 0x28
 800a51e:	e00b      	b.n	800a538 <_dtoa_r+0x290>
 800a520:	2301      	movs	r3, #1
 800a522:	e7f3      	b.n	800a50c <_dtoa_r+0x264>
 800a524:	2300      	movs	r3, #0
 800a526:	9309      	str	r3, [sp, #36]	; 0x24
 800a528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52a:	445b      	add	r3, fp
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	3301      	adds	r3, #1
 800a530:	2b01      	cmp	r3, #1
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	bfb8      	it	lt
 800a536:	2301      	movlt	r3, #1
 800a538:	69e0      	ldr	r0, [r4, #28]
 800a53a:	2100      	movs	r1, #0
 800a53c:	2204      	movs	r2, #4
 800a53e:	f102 0614 	add.w	r6, r2, #20
 800a542:	429e      	cmp	r6, r3
 800a544:	d93d      	bls.n	800a5c2 <_dtoa_r+0x31a>
 800a546:	6041      	str	r1, [r0, #4]
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 ff59 	bl	800b400 <_Balloc>
 800a54e:	9000      	str	r0, [sp, #0]
 800a550:	2800      	cmp	r0, #0
 800a552:	d139      	bne.n	800a5c8 <_dtoa_r+0x320>
 800a554:	4b16      	ldr	r3, [pc, #88]	; (800a5b0 <_dtoa_r+0x308>)
 800a556:	4602      	mov	r2, r0
 800a558:	f240 11af 	movw	r1, #431	; 0x1af
 800a55c:	e6bd      	b.n	800a2da <_dtoa_r+0x32>
 800a55e:	2301      	movs	r3, #1
 800a560:	e7e1      	b.n	800a526 <_dtoa_r+0x27e>
 800a562:	2501      	movs	r5, #1
 800a564:	2300      	movs	r3, #0
 800a566:	9307      	str	r3, [sp, #28]
 800a568:	9509      	str	r5, [sp, #36]	; 0x24
 800a56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	9304      	str	r3, [sp, #16]
 800a572:	2200      	movs	r2, #0
 800a574:	2312      	movs	r3, #18
 800a576:	e7d1      	b.n	800a51c <_dtoa_r+0x274>
 800a578:	636f4361 	.word	0x636f4361
 800a57c:	3fd287a7 	.word	0x3fd287a7
 800a580:	8b60c8b3 	.word	0x8b60c8b3
 800a584:	3fc68a28 	.word	0x3fc68a28
 800a588:	509f79fb 	.word	0x509f79fb
 800a58c:	3fd34413 	.word	0x3fd34413
 800a590:	0800c4e1 	.word	0x0800c4e1
 800a594:	0800c4f8 	.word	0x0800c4f8
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	0800c4dd 	.word	0x0800c4dd
 800a5a0:	0800c4d4 	.word	0x0800c4d4
 800a5a4:	0800c4b1 	.word	0x0800c4b1
 800a5a8:	3ff80000 	.word	0x3ff80000
 800a5ac:	0800c5f8 	.word	0x0800c5f8
 800a5b0:	0800c550 	.word	0x0800c550
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b8:	e7d7      	b.n	800a56a <_dtoa_r+0x2c2>
 800a5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5bc:	9301      	str	r3, [sp, #4]
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	e7ba      	b.n	800a538 <_dtoa_r+0x290>
 800a5c2:	3101      	adds	r1, #1
 800a5c4:	0052      	lsls	r2, r2, #1
 800a5c6:	e7ba      	b.n	800a53e <_dtoa_r+0x296>
 800a5c8:	69e3      	ldr	r3, [r4, #28]
 800a5ca:	9a00      	ldr	r2, [sp, #0]
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	2b0e      	cmp	r3, #14
 800a5d2:	f200 80a8 	bhi.w	800a726 <_dtoa_r+0x47e>
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	f000 80a5 	beq.w	800a726 <_dtoa_r+0x47e>
 800a5dc:	f1bb 0f00 	cmp.w	fp, #0
 800a5e0:	dd38      	ble.n	800a654 <_dtoa_r+0x3ac>
 800a5e2:	4bc0      	ldr	r3, [pc, #768]	; (800a8e4 <_dtoa_r+0x63c>)
 800a5e4:	f00b 020f 	and.w	r2, fp, #15
 800a5e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a5f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a5f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a5f8:	d019      	beq.n	800a62e <_dtoa_r+0x386>
 800a5fa:	4bbb      	ldr	r3, [pc, #748]	; (800a8e8 <_dtoa_r+0x640>)
 800a5fc:	ec51 0b18 	vmov	r0, r1, d8
 800a600:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a604:	f7f6 f922 	bl	800084c <__aeabi_ddiv>
 800a608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a60c:	f008 080f 	and.w	r8, r8, #15
 800a610:	2503      	movs	r5, #3
 800a612:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a8e8 <_dtoa_r+0x640>
 800a616:	f1b8 0f00 	cmp.w	r8, #0
 800a61a:	d10a      	bne.n	800a632 <_dtoa_r+0x38a>
 800a61c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a620:	4632      	mov	r2, r6
 800a622:	463b      	mov	r3, r7
 800a624:	f7f6 f912 	bl	800084c <__aeabi_ddiv>
 800a628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62c:	e02b      	b.n	800a686 <_dtoa_r+0x3de>
 800a62e:	2502      	movs	r5, #2
 800a630:	e7ef      	b.n	800a612 <_dtoa_r+0x36a>
 800a632:	f018 0f01 	tst.w	r8, #1
 800a636:	d008      	beq.n	800a64a <_dtoa_r+0x3a2>
 800a638:	4630      	mov	r0, r6
 800a63a:	4639      	mov	r1, r7
 800a63c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a640:	f7f5 ffda 	bl	80005f8 <__aeabi_dmul>
 800a644:	3501      	adds	r5, #1
 800a646:	4606      	mov	r6, r0
 800a648:	460f      	mov	r7, r1
 800a64a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a64e:	f109 0908 	add.w	r9, r9, #8
 800a652:	e7e0      	b.n	800a616 <_dtoa_r+0x36e>
 800a654:	f000 809f 	beq.w	800a796 <_dtoa_r+0x4ee>
 800a658:	f1cb 0600 	rsb	r6, fp, #0
 800a65c:	4ba1      	ldr	r3, [pc, #644]	; (800a8e4 <_dtoa_r+0x63c>)
 800a65e:	4fa2      	ldr	r7, [pc, #648]	; (800a8e8 <_dtoa_r+0x640>)
 800a660:	f006 020f 	and.w	r2, r6, #15
 800a664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	ec51 0b18 	vmov	r0, r1, d8
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a678:	1136      	asrs	r6, r6, #4
 800a67a:	2300      	movs	r3, #0
 800a67c:	2502      	movs	r5, #2
 800a67e:	2e00      	cmp	r6, #0
 800a680:	d17e      	bne.n	800a780 <_dtoa_r+0x4d8>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1d0      	bne.n	800a628 <_dtoa_r+0x380>
 800a686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a688:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8084 	beq.w	800a79a <_dtoa_r+0x4f2>
 800a692:	4b96      	ldr	r3, [pc, #600]	; (800a8ec <_dtoa_r+0x644>)
 800a694:	2200      	movs	r2, #0
 800a696:	4640      	mov	r0, r8
 800a698:	4649      	mov	r1, r9
 800a69a:	f7f6 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d07b      	beq.n	800a79a <_dtoa_r+0x4f2>
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d078      	beq.n	800a79a <_dtoa_r+0x4f2>
 800a6a8:	9b01      	ldr	r3, [sp, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd39      	ble.n	800a722 <_dtoa_r+0x47a>
 800a6ae:	4b90      	ldr	r3, [pc, #576]	; (800a8f0 <_dtoa_r+0x648>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f5 ff9f 	bl	80005f8 <__aeabi_dmul>
 800a6ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6be:	9e01      	ldr	r6, [sp, #4]
 800a6c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7f5 ff2a 	bl	8000524 <__aeabi_i2d>
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	f7f5 ff90 	bl	80005f8 <__aeabi_dmul>
 800a6d8:	4b86      	ldr	r3, [pc, #536]	; (800a8f4 <_dtoa_r+0x64c>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f5 fdd6 	bl	800028c <__adddf3>
 800a6e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	2e00      	cmp	r6, #0
 800a6ec:	d158      	bne.n	800a7a0 <_dtoa_r+0x4f8>
 800a6ee:	4b82      	ldr	r3, [pc, #520]	; (800a8f8 <_dtoa_r+0x650>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	f7f5 fdc7 	bl	8000288 <__aeabi_dsub>
 800a6fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6fe:	4680      	mov	r8, r0
 800a700:	4689      	mov	r9, r1
 800a702:	f7f6 fa09 	bl	8000b18 <__aeabi_dcmpgt>
 800a706:	2800      	cmp	r0, #0
 800a708:	f040 8296 	bne.w	800ac38 <_dtoa_r+0x990>
 800a70c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a710:	4640      	mov	r0, r8
 800a712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a716:	4649      	mov	r1, r9
 800a718:	f7f6 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 8289 	bne.w	800ac34 <_dtoa_r+0x98c>
 800a722:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f2c0 814e 	blt.w	800a9ca <_dtoa_r+0x722>
 800a72e:	f1bb 0f0e 	cmp.w	fp, #14
 800a732:	f300 814a 	bgt.w	800a9ca <_dtoa_r+0x722>
 800a736:	4b6b      	ldr	r3, [pc, #428]	; (800a8e4 <_dtoa_r+0x63c>)
 800a738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a73c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a742:	2b00      	cmp	r3, #0
 800a744:	f280 80dc 	bge.w	800a900 <_dtoa_r+0x658>
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f300 80d8 	bgt.w	800a900 <_dtoa_r+0x658>
 800a750:	f040 826f 	bne.w	800ac32 <_dtoa_r+0x98a>
 800a754:	4b68      	ldr	r3, [pc, #416]	; (800a8f8 <_dtoa_r+0x650>)
 800a756:	2200      	movs	r2, #0
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	f7f5 ff4c 	bl	80005f8 <__aeabi_dmul>
 800a760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a764:	f7f6 f9ce 	bl	8000b04 <__aeabi_dcmpge>
 800a768:	9e04      	ldr	r6, [sp, #16]
 800a76a:	4637      	mov	r7, r6
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f040 8245 	bne.w	800abfc <_dtoa_r+0x954>
 800a772:	9d00      	ldr	r5, [sp, #0]
 800a774:	2331      	movs	r3, #49	; 0x31
 800a776:	f805 3b01 	strb.w	r3, [r5], #1
 800a77a:	f10b 0b01 	add.w	fp, fp, #1
 800a77e:	e241      	b.n	800ac04 <_dtoa_r+0x95c>
 800a780:	07f2      	lsls	r2, r6, #31
 800a782:	d505      	bpl.n	800a790 <_dtoa_r+0x4e8>
 800a784:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a788:	f7f5 ff36 	bl	80005f8 <__aeabi_dmul>
 800a78c:	3501      	adds	r5, #1
 800a78e:	2301      	movs	r3, #1
 800a790:	1076      	asrs	r6, r6, #1
 800a792:	3708      	adds	r7, #8
 800a794:	e773      	b.n	800a67e <_dtoa_r+0x3d6>
 800a796:	2502      	movs	r5, #2
 800a798:	e775      	b.n	800a686 <_dtoa_r+0x3de>
 800a79a:	9e04      	ldr	r6, [sp, #16]
 800a79c:	465f      	mov	r7, fp
 800a79e:	e792      	b.n	800a6c6 <_dtoa_r+0x41e>
 800a7a0:	9900      	ldr	r1, [sp, #0]
 800a7a2:	4b50      	ldr	r3, [pc, #320]	; (800a8e4 <_dtoa_r+0x63c>)
 800a7a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7a8:	4431      	add	r1, r6
 800a7aa:	9102      	str	r1, [sp, #8]
 800a7ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ae:	eeb0 9a47 	vmov.f32	s18, s14
 800a7b2:	eef0 9a67 	vmov.f32	s19, s15
 800a7b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7be:	2900      	cmp	r1, #0
 800a7c0:	d044      	beq.n	800a84c <_dtoa_r+0x5a4>
 800a7c2:	494e      	ldr	r1, [pc, #312]	; (800a8fc <_dtoa_r+0x654>)
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f7f6 f841 	bl	800084c <__aeabi_ddiv>
 800a7ca:	ec53 2b19 	vmov	r2, r3, d9
 800a7ce:	f7f5 fd5b 	bl	8000288 <__aeabi_dsub>
 800a7d2:	9d00      	ldr	r5, [sp, #0]
 800a7d4:	ec41 0b19 	vmov	d9, r0, r1
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7f6 f9bc 	bl	8000b58 <__aeabi_d2iz>
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	f7f5 fe9f 	bl	8000524 <__aeabi_i2d>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	f7f5 fd4b 	bl	8000288 <__aeabi_dsub>
 800a7f2:	3630      	adds	r6, #48	; 0x30
 800a7f4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7f8:	ec53 2b19 	vmov	r2, r3, d9
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	f7f6 f96c 	bl	8000adc <__aeabi_dcmplt>
 800a804:	2800      	cmp	r0, #0
 800a806:	d164      	bne.n	800a8d2 <_dtoa_r+0x62a>
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4937      	ldr	r1, [pc, #220]	; (800a8ec <_dtoa_r+0x644>)
 800a80e:	2000      	movs	r0, #0
 800a810:	f7f5 fd3a 	bl	8000288 <__aeabi_dsub>
 800a814:	ec53 2b19 	vmov	r2, r3, d9
 800a818:	f7f6 f960 	bl	8000adc <__aeabi_dcmplt>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f040 80b6 	bne.w	800a98e <_dtoa_r+0x6e6>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	429d      	cmp	r5, r3
 800a826:	f43f af7c 	beq.w	800a722 <_dtoa_r+0x47a>
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <_dtoa_r+0x648>)
 800a82c:	ec51 0b19 	vmov	r0, r1, d9
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	4b2e      	ldr	r3, [pc, #184]	; (800a8f0 <_dtoa_r+0x648>)
 800a838:	ec41 0b19 	vmov	d9, r0, r1
 800a83c:	2200      	movs	r2, #0
 800a83e:	4640      	mov	r0, r8
 800a840:	4649      	mov	r1, r9
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	4680      	mov	r8, r0
 800a848:	4689      	mov	r9, r1
 800a84a:	e7c5      	b.n	800a7d8 <_dtoa_r+0x530>
 800a84c:	ec51 0b17 	vmov	r0, r1, d7
 800a850:	f7f5 fed2 	bl	80005f8 <__aeabi_dmul>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	9d00      	ldr	r5, [sp, #0]
 800a858:	930f      	str	r3, [sp, #60]	; 0x3c
 800a85a:	ec41 0b19 	vmov	d9, r0, r1
 800a85e:	4649      	mov	r1, r9
 800a860:	4640      	mov	r0, r8
 800a862:	f7f6 f979 	bl	8000b58 <__aeabi_d2iz>
 800a866:	4606      	mov	r6, r0
 800a868:	f7f5 fe5c 	bl	8000524 <__aeabi_i2d>
 800a86c:	3630      	adds	r6, #48	; 0x30
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fd07 	bl	8000288 <__aeabi_dsub>
 800a87a:	f805 6b01 	strb.w	r6, [r5], #1
 800a87e:	9b02      	ldr	r3, [sp, #8]
 800a880:	429d      	cmp	r5, r3
 800a882:	4680      	mov	r8, r0
 800a884:	4689      	mov	r9, r1
 800a886:	f04f 0200 	mov.w	r2, #0
 800a88a:	d124      	bne.n	800a8d6 <_dtoa_r+0x62e>
 800a88c:	4b1b      	ldr	r3, [pc, #108]	; (800a8fc <_dtoa_r+0x654>)
 800a88e:	ec51 0b19 	vmov	r0, r1, d9
 800a892:	f7f5 fcfb 	bl	800028c <__adddf3>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4640      	mov	r0, r8
 800a89c:	4649      	mov	r1, r9
 800a89e:	f7f6 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d173      	bne.n	800a98e <_dtoa_r+0x6e6>
 800a8a6:	ec53 2b19 	vmov	r2, r3, d9
 800a8aa:	4914      	ldr	r1, [pc, #80]	; (800a8fc <_dtoa_r+0x654>)
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	f7f5 fceb 	bl	8000288 <__aeabi_dsub>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	f7f6 f90f 	bl	8000adc <__aeabi_dcmplt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f43f af2f 	beq.w	800a722 <_dtoa_r+0x47a>
 800a8c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8c6:	1e6b      	subs	r3, r5, #1
 800a8c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8ce:	2b30      	cmp	r3, #48	; 0x30
 800a8d0:	d0f8      	beq.n	800a8c4 <_dtoa_r+0x61c>
 800a8d2:	46bb      	mov	fp, r7
 800a8d4:	e04a      	b.n	800a96c <_dtoa_r+0x6c4>
 800a8d6:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <_dtoa_r+0x648>)
 800a8d8:	f7f5 fe8e 	bl	80005f8 <__aeabi_dmul>
 800a8dc:	4680      	mov	r8, r0
 800a8de:	4689      	mov	r9, r1
 800a8e0:	e7bd      	b.n	800a85e <_dtoa_r+0x5b6>
 800a8e2:	bf00      	nop
 800a8e4:	0800c5f8 	.word	0x0800c5f8
 800a8e8:	0800c5d0 	.word	0x0800c5d0
 800a8ec:	3ff00000 	.word	0x3ff00000
 800a8f0:	40240000 	.word	0x40240000
 800a8f4:	401c0000 	.word	0x401c0000
 800a8f8:	40140000 	.word	0x40140000
 800a8fc:	3fe00000 	.word	0x3fe00000
 800a900:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a904:	9d00      	ldr	r5, [sp, #0]
 800a906:	4642      	mov	r2, r8
 800a908:	464b      	mov	r3, r9
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f5 ff9d 	bl	800084c <__aeabi_ddiv>
 800a912:	f7f6 f921 	bl	8000b58 <__aeabi_d2iz>
 800a916:	9001      	str	r0, [sp, #4]
 800a918:	f7f5 fe04 	bl	8000524 <__aeabi_i2d>
 800a91c:	4642      	mov	r2, r8
 800a91e:	464b      	mov	r3, r9
 800a920:	f7f5 fe6a 	bl	80005f8 <__aeabi_dmul>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4630      	mov	r0, r6
 800a92a:	4639      	mov	r1, r7
 800a92c:	f7f5 fcac 	bl	8000288 <__aeabi_dsub>
 800a930:	9e01      	ldr	r6, [sp, #4]
 800a932:	9f04      	ldr	r7, [sp, #16]
 800a934:	3630      	adds	r6, #48	; 0x30
 800a936:	f805 6b01 	strb.w	r6, [r5], #1
 800a93a:	9e00      	ldr	r6, [sp, #0]
 800a93c:	1bae      	subs	r6, r5, r6
 800a93e:	42b7      	cmp	r7, r6
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	d134      	bne.n	800a9b0 <_dtoa_r+0x708>
 800a946:	f7f5 fca1 	bl	800028c <__adddf3>
 800a94a:	4642      	mov	r2, r8
 800a94c:	464b      	mov	r3, r9
 800a94e:	4606      	mov	r6, r0
 800a950:	460f      	mov	r7, r1
 800a952:	f7f6 f8e1 	bl	8000b18 <__aeabi_dcmpgt>
 800a956:	b9c8      	cbnz	r0, 800a98c <_dtoa_r+0x6e4>
 800a958:	4642      	mov	r2, r8
 800a95a:	464b      	mov	r3, r9
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	f7f6 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a964:	b110      	cbz	r0, 800a96c <_dtoa_r+0x6c4>
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	07db      	lsls	r3, r3, #31
 800a96a:	d40f      	bmi.n	800a98c <_dtoa_r+0x6e4>
 800a96c:	4651      	mov	r1, sl
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 fd86 	bl	800b480 <_Bfree>
 800a974:	2300      	movs	r3, #0
 800a976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a978:	702b      	strb	r3, [r5, #0]
 800a97a:	f10b 0301 	add.w	r3, fp, #1
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a982:	2b00      	cmp	r3, #0
 800a984:	f43f ace2 	beq.w	800a34c <_dtoa_r+0xa4>
 800a988:	601d      	str	r5, [r3, #0]
 800a98a:	e4df      	b.n	800a34c <_dtoa_r+0xa4>
 800a98c:	465f      	mov	r7, fp
 800a98e:	462b      	mov	r3, r5
 800a990:	461d      	mov	r5, r3
 800a992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a996:	2a39      	cmp	r2, #57	; 0x39
 800a998:	d106      	bne.n	800a9a8 <_dtoa_r+0x700>
 800a99a:	9a00      	ldr	r2, [sp, #0]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d1f7      	bne.n	800a990 <_dtoa_r+0x6e8>
 800a9a0:	9900      	ldr	r1, [sp, #0]
 800a9a2:	2230      	movs	r2, #48	; 0x30
 800a9a4:	3701      	adds	r7, #1
 800a9a6:	700a      	strb	r2, [r1, #0]
 800a9a8:	781a      	ldrb	r2, [r3, #0]
 800a9aa:	3201      	adds	r2, #1
 800a9ac:	701a      	strb	r2, [r3, #0]
 800a9ae:	e790      	b.n	800a8d2 <_dtoa_r+0x62a>
 800a9b0:	4ba3      	ldr	r3, [pc, #652]	; (800ac40 <_dtoa_r+0x998>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f7f5 fe20 	bl	80005f8 <__aeabi_dmul>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	f7f6 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d09e      	beq.n	800a906 <_dtoa_r+0x65e>
 800a9c8:	e7d0      	b.n	800a96c <_dtoa_r+0x6c4>
 800a9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	f000 80ca 	beq.w	800ab66 <_dtoa_r+0x8be>
 800a9d2:	9a07      	ldr	r2, [sp, #28]
 800a9d4:	2a01      	cmp	r2, #1
 800a9d6:	f300 80ad 	bgt.w	800ab34 <_dtoa_r+0x88c>
 800a9da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	f000 80a5 	beq.w	800ab2c <_dtoa_r+0x884>
 800a9e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9e6:	9e08      	ldr	r6, [sp, #32]
 800a9e8:	9d05      	ldr	r5, [sp, #20]
 800a9ea:	9a05      	ldr	r2, [sp, #20]
 800a9ec:	441a      	add	r2, r3
 800a9ee:	9205      	str	r2, [sp, #20]
 800a9f0:	9a06      	ldr	r2, [sp, #24]
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	441a      	add	r2, r3
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	9206      	str	r2, [sp, #24]
 800a9fa:	f000 fdf7 	bl	800b5ec <__i2b>
 800a9fe:	4607      	mov	r7, r0
 800aa00:	b165      	cbz	r5, 800aa1c <_dtoa_r+0x774>
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dd09      	ble.n	800aa1c <_dtoa_r+0x774>
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	9a05      	ldr	r2, [sp, #20]
 800aa0c:	bfa8      	it	ge
 800aa0e:	462b      	movge	r3, r5
 800aa10:	1ad2      	subs	r2, r2, r3
 800aa12:	9205      	str	r2, [sp, #20]
 800aa14:	9a06      	ldr	r2, [sp, #24]
 800aa16:	1aed      	subs	r5, r5, r3
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	9306      	str	r3, [sp, #24]
 800aa1c:	9b08      	ldr	r3, [sp, #32]
 800aa1e:	b1f3      	cbz	r3, 800aa5e <_dtoa_r+0x7b6>
 800aa20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 80a3 	beq.w	800ab6e <_dtoa_r+0x8c6>
 800aa28:	2e00      	cmp	r6, #0
 800aa2a:	dd10      	ble.n	800aa4e <_dtoa_r+0x7a6>
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4632      	mov	r2, r6
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 fe9b 	bl	800b76c <__pow5mult>
 800aa36:	4652      	mov	r2, sl
 800aa38:	4601      	mov	r1, r0
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 fdeb 	bl	800b618 <__multiply>
 800aa42:	4651      	mov	r1, sl
 800aa44:	4680      	mov	r8, r0
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 fd1a 	bl	800b480 <_Bfree>
 800aa4c:	46c2      	mov	sl, r8
 800aa4e:	9b08      	ldr	r3, [sp, #32]
 800aa50:	1b9a      	subs	r2, r3, r6
 800aa52:	d004      	beq.n	800aa5e <_dtoa_r+0x7b6>
 800aa54:	4651      	mov	r1, sl
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 fe88 	bl	800b76c <__pow5mult>
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	2101      	movs	r1, #1
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fdc3 	bl	800b5ec <__i2b>
 800aa66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	f340 8081 	ble.w	800ab72 <_dtoa_r+0x8ca>
 800aa70:	461a      	mov	r2, r3
 800aa72:	4601      	mov	r1, r0
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 fe79 	bl	800b76c <__pow5mult>
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	4606      	mov	r6, r0
 800aa80:	dd7a      	ble.n	800ab78 <_dtoa_r+0x8d0>
 800aa82:	f04f 0800 	mov.w	r8, #0
 800aa86:	6933      	ldr	r3, [r6, #16]
 800aa88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa8c:	6918      	ldr	r0, [r3, #16]
 800aa8e:	f000 fd5f 	bl	800b550 <__hi0bits>
 800aa92:	f1c0 0020 	rsb	r0, r0, #32
 800aa96:	9b06      	ldr	r3, [sp, #24]
 800aa98:	4418      	add	r0, r3
 800aa9a:	f010 001f 	ands.w	r0, r0, #31
 800aa9e:	f000 8094 	beq.w	800abca <_dtoa_r+0x922>
 800aaa2:	f1c0 0320 	rsb	r3, r0, #32
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	f340 8085 	ble.w	800abb6 <_dtoa_r+0x90e>
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	f1c0 001c 	rsb	r0, r0, #28
 800aab2:	4403      	add	r3, r0
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	4403      	add	r3, r0
 800aaba:	4405      	add	r5, r0
 800aabc:	9306      	str	r3, [sp, #24]
 800aabe:	9b05      	ldr	r3, [sp, #20]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dd05      	ble.n	800aad0 <_dtoa_r+0x828>
 800aac4:	4651      	mov	r1, sl
 800aac6:	461a      	mov	r2, r3
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 fea9 	bl	800b820 <__lshift>
 800aace:	4682      	mov	sl, r0
 800aad0:	9b06      	ldr	r3, [sp, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dd05      	ble.n	800aae2 <_dtoa_r+0x83a>
 800aad6:	4631      	mov	r1, r6
 800aad8:	461a      	mov	r2, r3
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fea0 	bl	800b820 <__lshift>
 800aae0:	4606      	mov	r6, r0
 800aae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d072      	beq.n	800abce <_dtoa_r+0x926>
 800aae8:	4631      	mov	r1, r6
 800aaea:	4650      	mov	r0, sl
 800aaec:	f000 ff04 	bl	800b8f8 <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	da6c      	bge.n	800abce <_dtoa_r+0x926>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4651      	mov	r1, sl
 800aaf8:	220a      	movs	r2, #10
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fce2 	bl	800b4c4 <__multadd>
 800ab00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab06:	4682      	mov	sl, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 81b0 	beq.w	800ae6e <_dtoa_r+0xbc6>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4639      	mov	r1, r7
 800ab12:	220a      	movs	r2, #10
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fcd5 	bl	800b4c4 <__multadd>
 800ab1a:	9b01      	ldr	r3, [sp, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	4607      	mov	r7, r0
 800ab20:	f300 8096 	bgt.w	800ac50 <_dtoa_r+0x9a8>
 800ab24:	9b07      	ldr	r3, [sp, #28]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	dc59      	bgt.n	800abde <_dtoa_r+0x936>
 800ab2a:	e091      	b.n	800ac50 <_dtoa_r+0x9a8>
 800ab2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab32:	e758      	b.n	800a9e6 <_dtoa_r+0x73e>
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	1e5e      	subs	r6, r3, #1
 800ab38:	9b08      	ldr	r3, [sp, #32]
 800ab3a:	42b3      	cmp	r3, r6
 800ab3c:	bfbf      	itttt	lt
 800ab3e:	9b08      	ldrlt	r3, [sp, #32]
 800ab40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ab42:	9608      	strlt	r6, [sp, #32]
 800ab44:	1af3      	sublt	r3, r6, r3
 800ab46:	bfb4      	ite	lt
 800ab48:	18d2      	addlt	r2, r2, r3
 800ab4a:	1b9e      	subge	r6, r3, r6
 800ab4c:	9b04      	ldr	r3, [sp, #16]
 800ab4e:	bfbc      	itt	lt
 800ab50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ab52:	2600      	movlt	r6, #0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bfb7      	itett	lt
 800ab58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ab5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ab60:	1a9d      	sublt	r5, r3, r2
 800ab62:	2300      	movlt	r3, #0
 800ab64:	e741      	b.n	800a9ea <_dtoa_r+0x742>
 800ab66:	9e08      	ldr	r6, [sp, #32]
 800ab68:	9d05      	ldr	r5, [sp, #20]
 800ab6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab6c:	e748      	b.n	800aa00 <_dtoa_r+0x758>
 800ab6e:	9a08      	ldr	r2, [sp, #32]
 800ab70:	e770      	b.n	800aa54 <_dtoa_r+0x7ac>
 800ab72:	9b07      	ldr	r3, [sp, #28]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	dc19      	bgt.n	800abac <_dtoa_r+0x904>
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	b9bb      	cbnz	r3, 800abac <_dtoa_r+0x904>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab82:	b99b      	cbnz	r3, 800abac <_dtoa_r+0x904>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab8a:	0d1b      	lsrs	r3, r3, #20
 800ab8c:	051b      	lsls	r3, r3, #20
 800ab8e:	b183      	cbz	r3, 800abb2 <_dtoa_r+0x90a>
 800ab90:	9b05      	ldr	r3, [sp, #20]
 800ab92:	3301      	adds	r3, #1
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	9b06      	ldr	r3, [sp, #24]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9306      	str	r3, [sp, #24]
 800ab9c:	f04f 0801 	mov.w	r8, #1
 800aba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f47f af6f 	bne.w	800aa86 <_dtoa_r+0x7de>
 800aba8:	2001      	movs	r0, #1
 800abaa:	e774      	b.n	800aa96 <_dtoa_r+0x7ee>
 800abac:	f04f 0800 	mov.w	r8, #0
 800abb0:	e7f6      	b.n	800aba0 <_dtoa_r+0x8f8>
 800abb2:	4698      	mov	r8, r3
 800abb4:	e7f4      	b.n	800aba0 <_dtoa_r+0x8f8>
 800abb6:	d082      	beq.n	800aabe <_dtoa_r+0x816>
 800abb8:	9a05      	ldr	r2, [sp, #20]
 800abba:	331c      	adds	r3, #28
 800abbc:	441a      	add	r2, r3
 800abbe:	9205      	str	r2, [sp, #20]
 800abc0:	9a06      	ldr	r2, [sp, #24]
 800abc2:	441a      	add	r2, r3
 800abc4:	441d      	add	r5, r3
 800abc6:	9206      	str	r2, [sp, #24]
 800abc8:	e779      	b.n	800aabe <_dtoa_r+0x816>
 800abca:	4603      	mov	r3, r0
 800abcc:	e7f4      	b.n	800abb8 <_dtoa_r+0x910>
 800abce:	9b04      	ldr	r3, [sp, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dc37      	bgt.n	800ac44 <_dtoa_r+0x99c>
 800abd4:	9b07      	ldr	r3, [sp, #28]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	dd34      	ble.n	800ac44 <_dtoa_r+0x99c>
 800abda:	9b04      	ldr	r3, [sp, #16]
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	b963      	cbnz	r3, 800abfc <_dtoa_r+0x954>
 800abe2:	4631      	mov	r1, r6
 800abe4:	2205      	movs	r2, #5
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 fc6c 	bl	800b4c4 <__multadd>
 800abec:	4601      	mov	r1, r0
 800abee:	4606      	mov	r6, r0
 800abf0:	4650      	mov	r0, sl
 800abf2:	f000 fe81 	bl	800b8f8 <__mcmp>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f73f adbb 	bgt.w	800a772 <_dtoa_r+0x4ca>
 800abfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abfe:	9d00      	ldr	r5, [sp, #0]
 800ac00:	ea6f 0b03 	mvn.w	fp, r3
 800ac04:	f04f 0800 	mov.w	r8, #0
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 fc38 	bl	800b480 <_Bfree>
 800ac10:	2f00      	cmp	r7, #0
 800ac12:	f43f aeab 	beq.w	800a96c <_dtoa_r+0x6c4>
 800ac16:	f1b8 0f00 	cmp.w	r8, #0
 800ac1a:	d005      	beq.n	800ac28 <_dtoa_r+0x980>
 800ac1c:	45b8      	cmp	r8, r7
 800ac1e:	d003      	beq.n	800ac28 <_dtoa_r+0x980>
 800ac20:	4641      	mov	r1, r8
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fc2c 	bl	800b480 <_Bfree>
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fc28 	bl	800b480 <_Bfree>
 800ac30:	e69c      	b.n	800a96c <_dtoa_r+0x6c4>
 800ac32:	2600      	movs	r6, #0
 800ac34:	4637      	mov	r7, r6
 800ac36:	e7e1      	b.n	800abfc <_dtoa_r+0x954>
 800ac38:	46bb      	mov	fp, r7
 800ac3a:	4637      	mov	r7, r6
 800ac3c:	e599      	b.n	800a772 <_dtoa_r+0x4ca>
 800ac3e:	bf00      	nop
 800ac40:	40240000 	.word	0x40240000
 800ac44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f000 80c8 	beq.w	800addc <_dtoa_r+0xb34>
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	2d00      	cmp	r5, #0
 800ac52:	dd05      	ble.n	800ac60 <_dtoa_r+0x9b8>
 800ac54:	4639      	mov	r1, r7
 800ac56:	462a      	mov	r2, r5
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fde1 	bl	800b820 <__lshift>
 800ac5e:	4607      	mov	r7, r0
 800ac60:	f1b8 0f00 	cmp.w	r8, #0
 800ac64:	d05b      	beq.n	800ad1e <_dtoa_r+0xa76>
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fbc9 	bl	800b400 <_Balloc>
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b928      	cbnz	r0, 800ac7e <_dtoa_r+0x9d6>
 800ac72:	4b83      	ldr	r3, [pc, #524]	; (800ae80 <_dtoa_r+0xbd8>)
 800ac74:	4602      	mov	r2, r0
 800ac76:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ac7a:	f7ff bb2e 	b.w	800a2da <_dtoa_r+0x32>
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	3202      	adds	r2, #2
 800ac82:	0092      	lsls	r2, r2, #2
 800ac84:	f107 010c 	add.w	r1, r7, #12
 800ac88:	300c      	adds	r0, #12
 800ac8a:	f001 f817 	bl	800bcbc <memcpy>
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4629      	mov	r1, r5
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fdc4 	bl	800b820 <__lshift>
 800ac98:	9b00      	ldr	r3, [sp, #0]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aca2:	4413      	add	r3, r2
 800aca4:	9308      	str	r3, [sp, #32]
 800aca6:	9b02      	ldr	r3, [sp, #8]
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	46b8      	mov	r8, r7
 800acae:	9306      	str	r3, [sp, #24]
 800acb0:	4607      	mov	r7, r0
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	4631      	mov	r1, r6
 800acb6:	3b01      	subs	r3, #1
 800acb8:	4650      	mov	r0, sl
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	f7ff fa6b 	bl	800a196 <quorem>
 800acc0:	4641      	mov	r1, r8
 800acc2:	9002      	str	r0, [sp, #8]
 800acc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acc8:	4650      	mov	r0, sl
 800acca:	f000 fe15 	bl	800b8f8 <__mcmp>
 800acce:	463a      	mov	r2, r7
 800acd0:	9005      	str	r0, [sp, #20]
 800acd2:	4631      	mov	r1, r6
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fe2b 	bl	800b930 <__mdiff>
 800acda:	68c2      	ldr	r2, [r0, #12]
 800acdc:	4605      	mov	r5, r0
 800acde:	bb02      	cbnz	r2, 800ad22 <_dtoa_r+0xa7a>
 800ace0:	4601      	mov	r1, r0
 800ace2:	4650      	mov	r0, sl
 800ace4:	f000 fe08 	bl	800b8f8 <__mcmp>
 800ace8:	4602      	mov	r2, r0
 800acea:	4629      	mov	r1, r5
 800acec:	4620      	mov	r0, r4
 800acee:	9209      	str	r2, [sp, #36]	; 0x24
 800acf0:	f000 fbc6 	bl	800b480 <_Bfree>
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf8:	9d04      	ldr	r5, [sp, #16]
 800acfa:	ea43 0102 	orr.w	r1, r3, r2
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	4319      	orrs	r1, r3
 800ad02:	d110      	bne.n	800ad26 <_dtoa_r+0xa7e>
 800ad04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad08:	d029      	beq.n	800ad5e <_dtoa_r+0xab6>
 800ad0a:	9b05      	ldr	r3, [sp, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd02      	ble.n	800ad16 <_dtoa_r+0xa6e>
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	f883 9000 	strb.w	r9, [r3]
 800ad1c:	e774      	b.n	800ac08 <_dtoa_r+0x960>
 800ad1e:	4638      	mov	r0, r7
 800ad20:	e7ba      	b.n	800ac98 <_dtoa_r+0x9f0>
 800ad22:	2201      	movs	r2, #1
 800ad24:	e7e1      	b.n	800acea <_dtoa_r+0xa42>
 800ad26:	9b05      	ldr	r3, [sp, #20]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	db04      	blt.n	800ad36 <_dtoa_r+0xa8e>
 800ad2c:	9907      	ldr	r1, [sp, #28]
 800ad2e:	430b      	orrs	r3, r1
 800ad30:	9906      	ldr	r1, [sp, #24]
 800ad32:	430b      	orrs	r3, r1
 800ad34:	d120      	bne.n	800ad78 <_dtoa_r+0xad0>
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	dded      	ble.n	800ad16 <_dtoa_r+0xa6e>
 800ad3a:	4651      	mov	r1, sl
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fd6e 	bl	800b820 <__lshift>
 800ad44:	4631      	mov	r1, r6
 800ad46:	4682      	mov	sl, r0
 800ad48:	f000 fdd6 	bl	800b8f8 <__mcmp>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	dc03      	bgt.n	800ad58 <_dtoa_r+0xab0>
 800ad50:	d1e1      	bne.n	800ad16 <_dtoa_r+0xa6e>
 800ad52:	f019 0f01 	tst.w	r9, #1
 800ad56:	d0de      	beq.n	800ad16 <_dtoa_r+0xa6e>
 800ad58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad5c:	d1d8      	bne.n	800ad10 <_dtoa_r+0xa68>
 800ad5e:	9a01      	ldr	r2, [sp, #4]
 800ad60:	2339      	movs	r3, #57	; 0x39
 800ad62:	7013      	strb	r3, [r2, #0]
 800ad64:	462b      	mov	r3, r5
 800ad66:	461d      	mov	r5, r3
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad6e:	2a39      	cmp	r2, #57	; 0x39
 800ad70:	d06c      	beq.n	800ae4c <_dtoa_r+0xba4>
 800ad72:	3201      	adds	r2, #1
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	e747      	b.n	800ac08 <_dtoa_r+0x960>
 800ad78:	2a00      	cmp	r2, #0
 800ad7a:	dd07      	ble.n	800ad8c <_dtoa_r+0xae4>
 800ad7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad80:	d0ed      	beq.n	800ad5e <_dtoa_r+0xab6>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	f109 0301 	add.w	r3, r9, #1
 800ad88:	7013      	strb	r3, [r2, #0]
 800ad8a:	e73d      	b.n	800ac08 <_dtoa_r+0x960>
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	9a08      	ldr	r2, [sp, #32]
 800ad90:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d043      	beq.n	800ae20 <_dtoa_r+0xb78>
 800ad98:	4651      	mov	r1, sl
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	220a      	movs	r2, #10
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 fb90 	bl	800b4c4 <__multadd>
 800ada4:	45b8      	cmp	r8, r7
 800ada6:	4682      	mov	sl, r0
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	f04f 020a 	mov.w	r2, #10
 800adb0:	4641      	mov	r1, r8
 800adb2:	4620      	mov	r0, r4
 800adb4:	d107      	bne.n	800adc6 <_dtoa_r+0xb1e>
 800adb6:	f000 fb85 	bl	800b4c4 <__multadd>
 800adba:	4680      	mov	r8, r0
 800adbc:	4607      	mov	r7, r0
 800adbe:	9b04      	ldr	r3, [sp, #16]
 800adc0:	3301      	adds	r3, #1
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	e775      	b.n	800acb2 <_dtoa_r+0xa0a>
 800adc6:	f000 fb7d 	bl	800b4c4 <__multadd>
 800adca:	4639      	mov	r1, r7
 800adcc:	4680      	mov	r8, r0
 800adce:	2300      	movs	r3, #0
 800add0:	220a      	movs	r2, #10
 800add2:	4620      	mov	r0, r4
 800add4:	f000 fb76 	bl	800b4c4 <__multadd>
 800add8:	4607      	mov	r7, r0
 800adda:	e7f0      	b.n	800adbe <_dtoa_r+0xb16>
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	9d00      	ldr	r5, [sp, #0]
 800ade2:	4631      	mov	r1, r6
 800ade4:	4650      	mov	r0, sl
 800ade6:	f7ff f9d6 	bl	800a196 <quorem>
 800adea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800adee:	9b00      	ldr	r3, [sp, #0]
 800adf0:	f805 9b01 	strb.w	r9, [r5], #1
 800adf4:	1aea      	subs	r2, r5, r3
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	4293      	cmp	r3, r2
 800adfa:	dd07      	ble.n	800ae0c <_dtoa_r+0xb64>
 800adfc:	4651      	mov	r1, sl
 800adfe:	2300      	movs	r3, #0
 800ae00:	220a      	movs	r2, #10
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 fb5e 	bl	800b4c4 <__multadd>
 800ae08:	4682      	mov	sl, r0
 800ae0a:	e7ea      	b.n	800ade2 <_dtoa_r+0xb3a>
 800ae0c:	9b01      	ldr	r3, [sp, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfc8      	it	gt
 800ae12:	461d      	movgt	r5, r3
 800ae14:	9b00      	ldr	r3, [sp, #0]
 800ae16:	bfd8      	it	le
 800ae18:	2501      	movle	r5, #1
 800ae1a:	441d      	add	r5, r3
 800ae1c:	f04f 0800 	mov.w	r8, #0
 800ae20:	4651      	mov	r1, sl
 800ae22:	2201      	movs	r2, #1
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 fcfb 	bl	800b820 <__lshift>
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	f000 fd63 	bl	800b8f8 <__mcmp>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	dc96      	bgt.n	800ad64 <_dtoa_r+0xabc>
 800ae36:	d102      	bne.n	800ae3e <_dtoa_r+0xb96>
 800ae38:	f019 0f01 	tst.w	r9, #1
 800ae3c:	d192      	bne.n	800ad64 <_dtoa_r+0xabc>
 800ae3e:	462b      	mov	r3, r5
 800ae40:	461d      	mov	r5, r3
 800ae42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae46:	2a30      	cmp	r2, #48	; 0x30
 800ae48:	d0fa      	beq.n	800ae40 <_dtoa_r+0xb98>
 800ae4a:	e6dd      	b.n	800ac08 <_dtoa_r+0x960>
 800ae4c:	9a00      	ldr	r2, [sp, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d189      	bne.n	800ad66 <_dtoa_r+0xabe>
 800ae52:	f10b 0b01 	add.w	fp, fp, #1
 800ae56:	2331      	movs	r3, #49	; 0x31
 800ae58:	e796      	b.n	800ad88 <_dtoa_r+0xae0>
 800ae5a:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <_dtoa_r+0xbdc>)
 800ae5c:	f7ff ba99 	b.w	800a392 <_dtoa_r+0xea>
 800ae60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f47f aa6d 	bne.w	800a342 <_dtoa_r+0x9a>
 800ae68:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <_dtoa_r+0xbe0>)
 800ae6a:	f7ff ba92 	b.w	800a392 <_dtoa_r+0xea>
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dcb5      	bgt.n	800ade0 <_dtoa_r+0xb38>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	f73f aeb1 	bgt.w	800abde <_dtoa_r+0x936>
 800ae7c:	e7b0      	b.n	800ade0 <_dtoa_r+0xb38>
 800ae7e:	bf00      	nop
 800ae80:	0800c550 	.word	0x0800c550
 800ae84:	0800c4b0 	.word	0x0800c4b0
 800ae88:	0800c4d4 	.word	0x0800c4d4

0800ae8c <__ssputs_r>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	688e      	ldr	r6, [r1, #8]
 800ae92:	461f      	mov	r7, r3
 800ae94:	42be      	cmp	r6, r7
 800ae96:	680b      	ldr	r3, [r1, #0]
 800ae98:	4682      	mov	sl, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	4690      	mov	r8, r2
 800ae9e:	d82c      	bhi.n	800aefa <__ssputs_r+0x6e>
 800aea0:	898a      	ldrh	r2, [r1, #12]
 800aea2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aea6:	d026      	beq.n	800aef6 <__ssputs_r+0x6a>
 800aea8:	6965      	ldr	r5, [r4, #20]
 800aeaa:	6909      	ldr	r1, [r1, #16]
 800aeac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb0:	eba3 0901 	sub.w	r9, r3, r1
 800aeb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeb8:	1c7b      	adds	r3, r7, #1
 800aeba:	444b      	add	r3, r9
 800aebc:	106d      	asrs	r5, r5, #1
 800aebe:	429d      	cmp	r5, r3
 800aec0:	bf38      	it	cc
 800aec2:	461d      	movcc	r5, r3
 800aec4:	0553      	lsls	r3, r2, #21
 800aec6:	d527      	bpl.n	800af18 <__ssputs_r+0x8c>
 800aec8:	4629      	mov	r1, r5
 800aeca:	f000 f95f 	bl	800b18c <_malloc_r>
 800aece:	4606      	mov	r6, r0
 800aed0:	b360      	cbz	r0, 800af2c <__ssputs_r+0xa0>
 800aed2:	6921      	ldr	r1, [r4, #16]
 800aed4:	464a      	mov	r2, r9
 800aed6:	f000 fef1 	bl	800bcbc <memcpy>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	6126      	str	r6, [r4, #16]
 800aee8:	6165      	str	r5, [r4, #20]
 800aeea:	444e      	add	r6, r9
 800aeec:	eba5 0509 	sub.w	r5, r5, r9
 800aef0:	6026      	str	r6, [r4, #0]
 800aef2:	60a5      	str	r5, [r4, #8]
 800aef4:	463e      	mov	r6, r7
 800aef6:	42be      	cmp	r6, r7
 800aef8:	d900      	bls.n	800aefc <__ssputs_r+0x70>
 800aefa:	463e      	mov	r6, r7
 800aefc:	6820      	ldr	r0, [r4, #0]
 800aefe:	4632      	mov	r2, r6
 800af00:	4641      	mov	r1, r8
 800af02:	f000 fe6b 	bl	800bbdc <memmove>
 800af06:	68a3      	ldr	r3, [r4, #8]
 800af08:	1b9b      	subs	r3, r3, r6
 800af0a:	60a3      	str	r3, [r4, #8]
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	4433      	add	r3, r6
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	2000      	movs	r0, #0
 800af14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af18:	462a      	mov	r2, r5
 800af1a:	f000 fe30 	bl	800bb7e <_realloc_r>
 800af1e:	4606      	mov	r6, r0
 800af20:	2800      	cmp	r0, #0
 800af22:	d1e0      	bne.n	800aee6 <__ssputs_r+0x5a>
 800af24:	6921      	ldr	r1, [r4, #16]
 800af26:	4650      	mov	r0, sl
 800af28:	f000 ff0a 	bl	800bd40 <_free_r>
 800af2c:	230c      	movs	r3, #12
 800af2e:	f8ca 3000 	str.w	r3, [sl]
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af3e:	e7e9      	b.n	800af14 <__ssputs_r+0x88>

0800af40 <_svfiprintf_r>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4698      	mov	r8, r3
 800af46:	898b      	ldrh	r3, [r1, #12]
 800af48:	061b      	lsls	r3, r3, #24
 800af4a:	b09d      	sub	sp, #116	; 0x74
 800af4c:	4607      	mov	r7, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	4614      	mov	r4, r2
 800af52:	d50e      	bpl.n	800af72 <_svfiprintf_r+0x32>
 800af54:	690b      	ldr	r3, [r1, #16]
 800af56:	b963      	cbnz	r3, 800af72 <_svfiprintf_r+0x32>
 800af58:	2140      	movs	r1, #64	; 0x40
 800af5a:	f000 f917 	bl	800b18c <_malloc_r>
 800af5e:	6028      	str	r0, [r5, #0]
 800af60:	6128      	str	r0, [r5, #16]
 800af62:	b920      	cbnz	r0, 800af6e <_svfiprintf_r+0x2e>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af6c:	e0d0      	b.n	800b110 <_svfiprintf_r+0x1d0>
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	616b      	str	r3, [r5, #20]
 800af72:	2300      	movs	r3, #0
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	2320      	movs	r3, #32
 800af78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af80:	2330      	movs	r3, #48	; 0x30
 800af82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b128 <_svfiprintf_r+0x1e8>
 800af86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af8a:	f04f 0901 	mov.w	r9, #1
 800af8e:	4623      	mov	r3, r4
 800af90:	469a      	mov	sl, r3
 800af92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af96:	b10a      	cbz	r2, 800af9c <_svfiprintf_r+0x5c>
 800af98:	2a25      	cmp	r2, #37	; 0x25
 800af9a:	d1f9      	bne.n	800af90 <_svfiprintf_r+0x50>
 800af9c:	ebba 0b04 	subs.w	fp, sl, r4
 800afa0:	d00b      	beq.n	800afba <_svfiprintf_r+0x7a>
 800afa2:	465b      	mov	r3, fp
 800afa4:	4622      	mov	r2, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff ff6f 	bl	800ae8c <__ssputs_r>
 800afae:	3001      	adds	r0, #1
 800afb0:	f000 80a9 	beq.w	800b106 <_svfiprintf_r+0x1c6>
 800afb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb6:	445a      	add	r2, fp
 800afb8:	9209      	str	r2, [sp, #36]	; 0x24
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80a1 	beq.w	800b106 <_svfiprintf_r+0x1c6>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afce:	f10a 0a01 	add.w	sl, sl, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	9307      	str	r3, [sp, #28]
 800afd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afda:	931a      	str	r3, [sp, #104]	; 0x68
 800afdc:	4654      	mov	r4, sl
 800afde:	2205      	movs	r2, #5
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	4850      	ldr	r0, [pc, #320]	; (800b128 <_svfiprintf_r+0x1e8>)
 800afe6:	f7f5 f8f3 	bl	80001d0 <memchr>
 800afea:	9a04      	ldr	r2, [sp, #16]
 800afec:	b9d8      	cbnz	r0, 800b026 <_svfiprintf_r+0xe6>
 800afee:	06d0      	lsls	r0, r2, #27
 800aff0:	bf44      	itt	mi
 800aff2:	2320      	movmi	r3, #32
 800aff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff8:	0711      	lsls	r1, r2, #28
 800affa:	bf44      	itt	mi
 800affc:	232b      	movmi	r3, #43	; 0x2b
 800affe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b2a      	cmp	r3, #42	; 0x2a
 800b008:	d015      	beq.n	800b036 <_svfiprintf_r+0xf6>
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	4654      	mov	r4, sl
 800b00e:	2000      	movs	r0, #0
 800b010:	f04f 0c0a 	mov.w	ip, #10
 800b014:	4621      	mov	r1, r4
 800b016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b01a:	3b30      	subs	r3, #48	; 0x30
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	d94d      	bls.n	800b0bc <_svfiprintf_r+0x17c>
 800b020:	b1b0      	cbz	r0, 800b050 <_svfiprintf_r+0x110>
 800b022:	9207      	str	r2, [sp, #28]
 800b024:	e014      	b.n	800b050 <_svfiprintf_r+0x110>
 800b026:	eba0 0308 	sub.w	r3, r0, r8
 800b02a:	fa09 f303 	lsl.w	r3, r9, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	46a2      	mov	sl, r4
 800b034:	e7d2      	b.n	800afdc <_svfiprintf_r+0x9c>
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	1d19      	adds	r1, r3, #4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	9103      	str	r1, [sp, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bfbb      	ittet	lt
 800b042:	425b      	neglt	r3, r3
 800b044:	f042 0202 	orrlt.w	r2, r2, #2
 800b048:	9307      	strge	r3, [sp, #28]
 800b04a:	9307      	strlt	r3, [sp, #28]
 800b04c:	bfb8      	it	lt
 800b04e:	9204      	strlt	r2, [sp, #16]
 800b050:	7823      	ldrb	r3, [r4, #0]
 800b052:	2b2e      	cmp	r3, #46	; 0x2e
 800b054:	d10c      	bne.n	800b070 <_svfiprintf_r+0x130>
 800b056:	7863      	ldrb	r3, [r4, #1]
 800b058:	2b2a      	cmp	r3, #42	; 0x2a
 800b05a:	d134      	bne.n	800b0c6 <_svfiprintf_r+0x186>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	1d1a      	adds	r2, r3, #4
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	9203      	str	r2, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfb8      	it	lt
 800b068:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b06c:	3402      	adds	r4, #2
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b138 <_svfiprintf_r+0x1f8>
 800b074:	7821      	ldrb	r1, [r4, #0]
 800b076:	2203      	movs	r2, #3
 800b078:	4650      	mov	r0, sl
 800b07a:	f7f5 f8a9 	bl	80001d0 <memchr>
 800b07e:	b138      	cbz	r0, 800b090 <_svfiprintf_r+0x150>
 800b080:	9b04      	ldr	r3, [sp, #16]
 800b082:	eba0 000a 	sub.w	r0, r0, sl
 800b086:	2240      	movs	r2, #64	; 0x40
 800b088:	4082      	lsls	r2, r0
 800b08a:	4313      	orrs	r3, r2
 800b08c:	3401      	adds	r4, #1
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b094:	4825      	ldr	r0, [pc, #148]	; (800b12c <_svfiprintf_r+0x1ec>)
 800b096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b09a:	2206      	movs	r2, #6
 800b09c:	f7f5 f898 	bl	80001d0 <memchr>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d038      	beq.n	800b116 <_svfiprintf_r+0x1d6>
 800b0a4:	4b22      	ldr	r3, [pc, #136]	; (800b130 <_svfiprintf_r+0x1f0>)
 800b0a6:	bb1b      	cbnz	r3, 800b0f0 <_svfiprintf_r+0x1b0>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	3307      	adds	r3, #7
 800b0ac:	f023 0307 	bic.w	r3, r3, #7
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b6:	4433      	add	r3, r6
 800b0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ba:	e768      	b.n	800af8e <_svfiprintf_r+0x4e>
 800b0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	e7a6      	b.n	800b014 <_svfiprintf_r+0xd4>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	3401      	adds	r4, #1
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f04f 0c0a 	mov.w	ip, #10
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0d8:	3a30      	subs	r2, #48	; 0x30
 800b0da:	2a09      	cmp	r2, #9
 800b0dc:	d903      	bls.n	800b0e6 <_svfiprintf_r+0x1a6>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0c6      	beq.n	800b070 <_svfiprintf_r+0x130>
 800b0e2:	9105      	str	r1, [sp, #20]
 800b0e4:	e7c4      	b.n	800b070 <_svfiprintf_r+0x130>
 800b0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e7f0      	b.n	800b0d2 <_svfiprintf_r+0x192>
 800b0f0:	ab03      	add	r3, sp, #12
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <_svfiprintf_r+0x1f4>)
 800b0f8:	a904      	add	r1, sp, #16
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f7fe fb6a 	bl	80097d4 <_printf_float>
 800b100:	1c42      	adds	r2, r0, #1
 800b102:	4606      	mov	r6, r0
 800b104:	d1d6      	bne.n	800b0b4 <_svfiprintf_r+0x174>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	065b      	lsls	r3, r3, #25
 800b10a:	f53f af2d 	bmi.w	800af68 <_svfiprintf_r+0x28>
 800b10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	ab03      	add	r3, sp, #12
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	462a      	mov	r2, r5
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <_svfiprintf_r+0x1f4>)
 800b11e:	a904      	add	r1, sp, #16
 800b120:	4638      	mov	r0, r7
 800b122:	f7fe fdfb 	bl	8009d1c <_printf_i>
 800b126:	e7eb      	b.n	800b100 <_svfiprintf_r+0x1c0>
 800b128:	0800c561 	.word	0x0800c561
 800b12c:	0800c56b 	.word	0x0800c56b
 800b130:	080097d5 	.word	0x080097d5
 800b134:	0800ae8d 	.word	0x0800ae8d
 800b138:	0800c567 	.word	0x0800c567

0800b13c <malloc>:
 800b13c:	4b02      	ldr	r3, [pc, #8]	; (800b148 <malloc+0xc>)
 800b13e:	4601      	mov	r1, r0
 800b140:	6818      	ldr	r0, [r3, #0]
 800b142:	f000 b823 	b.w	800b18c <_malloc_r>
 800b146:	bf00      	nop
 800b148:	20000164 	.word	0x20000164

0800b14c <sbrk_aligned>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	4e0e      	ldr	r6, [pc, #56]	; (800b188 <sbrk_aligned+0x3c>)
 800b150:	460c      	mov	r4, r1
 800b152:	6831      	ldr	r1, [r6, #0]
 800b154:	4605      	mov	r5, r0
 800b156:	b911      	cbnz	r1, 800b15e <sbrk_aligned+0x12>
 800b158:	f000 fd8e 	bl	800bc78 <_sbrk_r>
 800b15c:	6030      	str	r0, [r6, #0]
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f000 fd89 	bl	800bc78 <_sbrk_r>
 800b166:	1c43      	adds	r3, r0, #1
 800b168:	d00a      	beq.n	800b180 <sbrk_aligned+0x34>
 800b16a:	1cc4      	adds	r4, r0, #3
 800b16c:	f024 0403 	bic.w	r4, r4, #3
 800b170:	42a0      	cmp	r0, r4
 800b172:	d007      	beq.n	800b184 <sbrk_aligned+0x38>
 800b174:	1a21      	subs	r1, r4, r0
 800b176:	4628      	mov	r0, r5
 800b178:	f000 fd7e 	bl	800bc78 <_sbrk_r>
 800b17c:	3001      	adds	r0, #1
 800b17e:	d101      	bne.n	800b184 <sbrk_aligned+0x38>
 800b180:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b184:	4620      	mov	r0, r4
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	200021a0 	.word	0x200021a0

0800b18c <_malloc_r>:
 800b18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b190:	1ccd      	adds	r5, r1, #3
 800b192:	f025 0503 	bic.w	r5, r5, #3
 800b196:	3508      	adds	r5, #8
 800b198:	2d0c      	cmp	r5, #12
 800b19a:	bf38      	it	cc
 800b19c:	250c      	movcc	r5, #12
 800b19e:	2d00      	cmp	r5, #0
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	db01      	blt.n	800b1a8 <_malloc_r+0x1c>
 800b1a4:	42a9      	cmp	r1, r5
 800b1a6:	d905      	bls.n	800b1b4 <_malloc_r+0x28>
 800b1a8:	230c      	movs	r3, #12
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	2600      	movs	r6, #0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b288 <_malloc_r+0xfc>
 800b1b8:	f000 f916 	bl	800b3e8 <__malloc_lock>
 800b1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	bb5c      	cbnz	r4, 800b21c <_malloc_r+0x90>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f7ff ffc0 	bl	800b14c <sbrk_aligned>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	d155      	bne.n	800b27e <_malloc_r+0xf2>
 800b1d2:	f8d8 4000 	ldr.w	r4, [r8]
 800b1d6:	4626      	mov	r6, r4
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	d145      	bne.n	800b268 <_malloc_r+0xdc>
 800b1dc:	2c00      	cmp	r4, #0
 800b1de:	d048      	beq.n	800b272 <_malloc_r+0xe6>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	eb04 0903 	add.w	r9, r4, r3
 800b1ea:	f000 fd45 	bl	800bc78 <_sbrk_r>
 800b1ee:	4581      	cmp	r9, r0
 800b1f0:	d13f      	bne.n	800b272 <_malloc_r+0xe6>
 800b1f2:	6821      	ldr	r1, [r4, #0]
 800b1f4:	1a6d      	subs	r5, r5, r1
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f7ff ffa7 	bl	800b14c <sbrk_aligned>
 800b1fe:	3001      	adds	r0, #1
 800b200:	d037      	beq.n	800b272 <_malloc_r+0xe6>
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	442b      	add	r3, r5
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	f8d8 3000 	ldr.w	r3, [r8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d038      	beq.n	800b282 <_malloc_r+0xf6>
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	42a2      	cmp	r2, r4
 800b214:	d12b      	bne.n	800b26e <_malloc_r+0xe2>
 800b216:	2200      	movs	r2, #0
 800b218:	605a      	str	r2, [r3, #4]
 800b21a:	e00f      	b.n	800b23c <_malloc_r+0xb0>
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	1b52      	subs	r2, r2, r5
 800b220:	d41f      	bmi.n	800b262 <_malloc_r+0xd6>
 800b222:	2a0b      	cmp	r2, #11
 800b224:	d917      	bls.n	800b256 <_malloc_r+0xca>
 800b226:	1961      	adds	r1, r4, r5
 800b228:	42a3      	cmp	r3, r4
 800b22a:	6025      	str	r5, [r4, #0]
 800b22c:	bf18      	it	ne
 800b22e:	6059      	strne	r1, [r3, #4]
 800b230:	6863      	ldr	r3, [r4, #4]
 800b232:	bf08      	it	eq
 800b234:	f8c8 1000 	streq.w	r1, [r8]
 800b238:	5162      	str	r2, [r4, r5]
 800b23a:	604b      	str	r3, [r1, #4]
 800b23c:	4638      	mov	r0, r7
 800b23e:	f104 060b 	add.w	r6, r4, #11
 800b242:	f000 f8d7 	bl	800b3f4 <__malloc_unlock>
 800b246:	f026 0607 	bic.w	r6, r6, #7
 800b24a:	1d23      	adds	r3, r4, #4
 800b24c:	1af2      	subs	r2, r6, r3
 800b24e:	d0ae      	beq.n	800b1ae <_malloc_r+0x22>
 800b250:	1b9b      	subs	r3, r3, r6
 800b252:	50a3      	str	r3, [r4, r2]
 800b254:	e7ab      	b.n	800b1ae <_malloc_r+0x22>
 800b256:	42a3      	cmp	r3, r4
 800b258:	6862      	ldr	r2, [r4, #4]
 800b25a:	d1dd      	bne.n	800b218 <_malloc_r+0x8c>
 800b25c:	f8c8 2000 	str.w	r2, [r8]
 800b260:	e7ec      	b.n	800b23c <_malloc_r+0xb0>
 800b262:	4623      	mov	r3, r4
 800b264:	6864      	ldr	r4, [r4, #4]
 800b266:	e7ac      	b.n	800b1c2 <_malloc_r+0x36>
 800b268:	4634      	mov	r4, r6
 800b26a:	6876      	ldr	r6, [r6, #4]
 800b26c:	e7b4      	b.n	800b1d8 <_malloc_r+0x4c>
 800b26e:	4613      	mov	r3, r2
 800b270:	e7cc      	b.n	800b20c <_malloc_r+0x80>
 800b272:	230c      	movs	r3, #12
 800b274:	603b      	str	r3, [r7, #0]
 800b276:	4638      	mov	r0, r7
 800b278:	f000 f8bc 	bl	800b3f4 <__malloc_unlock>
 800b27c:	e797      	b.n	800b1ae <_malloc_r+0x22>
 800b27e:	6025      	str	r5, [r4, #0]
 800b280:	e7dc      	b.n	800b23c <_malloc_r+0xb0>
 800b282:	605b      	str	r3, [r3, #4]
 800b284:	deff      	udf	#255	; 0xff
 800b286:	bf00      	nop
 800b288:	2000219c 	.word	0x2000219c

0800b28c <__sflush_r>:
 800b28c:	898a      	ldrh	r2, [r1, #12]
 800b28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b292:	4605      	mov	r5, r0
 800b294:	0710      	lsls	r0, r2, #28
 800b296:	460c      	mov	r4, r1
 800b298:	d458      	bmi.n	800b34c <__sflush_r+0xc0>
 800b29a:	684b      	ldr	r3, [r1, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	dc05      	bgt.n	800b2ac <__sflush_r+0x20>
 800b2a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dc02      	bgt.n	800b2ac <__sflush_r+0x20>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	d0f9      	beq.n	800b2a6 <__sflush_r+0x1a>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2b8:	682f      	ldr	r7, [r5, #0]
 800b2ba:	6a21      	ldr	r1, [r4, #32]
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	d032      	beq.n	800b326 <__sflush_r+0x9a>
 800b2c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	075a      	lsls	r2, r3, #29
 800b2c6:	d505      	bpl.n	800b2d4 <__sflush_r+0x48>
 800b2c8:	6863      	ldr	r3, [r4, #4]
 800b2ca:	1ac0      	subs	r0, r0, r3
 800b2cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2ce:	b10b      	cbz	r3, 800b2d4 <__sflush_r+0x48>
 800b2d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2d2:	1ac0      	subs	r0, r0, r3
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2da:	6a21      	ldr	r1, [r4, #32]
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b0      	blx	r6
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	d106      	bne.n	800b2f4 <__sflush_r+0x68>
 800b2e6:	6829      	ldr	r1, [r5, #0]
 800b2e8:	291d      	cmp	r1, #29
 800b2ea:	d82b      	bhi.n	800b344 <__sflush_r+0xb8>
 800b2ec:	4a29      	ldr	r2, [pc, #164]	; (800b394 <__sflush_r+0x108>)
 800b2ee:	410a      	asrs	r2, r1
 800b2f0:	07d6      	lsls	r6, r2, #31
 800b2f2:	d427      	bmi.n	800b344 <__sflush_r+0xb8>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	6062      	str	r2, [r4, #4]
 800b2f8:	04d9      	lsls	r1, r3, #19
 800b2fa:	6922      	ldr	r2, [r4, #16]
 800b2fc:	6022      	str	r2, [r4, #0]
 800b2fe:	d504      	bpl.n	800b30a <__sflush_r+0x7e>
 800b300:	1c42      	adds	r2, r0, #1
 800b302:	d101      	bne.n	800b308 <__sflush_r+0x7c>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b903      	cbnz	r3, 800b30a <__sflush_r+0x7e>
 800b308:	6560      	str	r0, [r4, #84]	; 0x54
 800b30a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b30c:	602f      	str	r7, [r5, #0]
 800b30e:	2900      	cmp	r1, #0
 800b310:	d0c9      	beq.n	800b2a6 <__sflush_r+0x1a>
 800b312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b316:	4299      	cmp	r1, r3
 800b318:	d002      	beq.n	800b320 <__sflush_r+0x94>
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 fd10 	bl	800bd40 <_free_r>
 800b320:	2000      	movs	r0, #0
 800b322:	6360      	str	r0, [r4, #52]	; 0x34
 800b324:	e7c0      	b.n	800b2a8 <__sflush_r+0x1c>
 800b326:	2301      	movs	r3, #1
 800b328:	4628      	mov	r0, r5
 800b32a:	47b0      	blx	r6
 800b32c:	1c41      	adds	r1, r0, #1
 800b32e:	d1c8      	bne.n	800b2c2 <__sflush_r+0x36>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0c5      	beq.n	800b2c2 <__sflush_r+0x36>
 800b336:	2b1d      	cmp	r3, #29
 800b338:	d001      	beq.n	800b33e <__sflush_r+0xb2>
 800b33a:	2b16      	cmp	r3, #22
 800b33c:	d101      	bne.n	800b342 <__sflush_r+0xb6>
 800b33e:	602f      	str	r7, [r5, #0]
 800b340:	e7b1      	b.n	800b2a6 <__sflush_r+0x1a>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b348:	81a3      	strh	r3, [r4, #12]
 800b34a:	e7ad      	b.n	800b2a8 <__sflush_r+0x1c>
 800b34c:	690f      	ldr	r7, [r1, #16]
 800b34e:	2f00      	cmp	r7, #0
 800b350:	d0a9      	beq.n	800b2a6 <__sflush_r+0x1a>
 800b352:	0793      	lsls	r3, r2, #30
 800b354:	680e      	ldr	r6, [r1, #0]
 800b356:	bf08      	it	eq
 800b358:	694b      	ldreq	r3, [r1, #20]
 800b35a:	600f      	str	r7, [r1, #0]
 800b35c:	bf18      	it	ne
 800b35e:	2300      	movne	r3, #0
 800b360:	eba6 0807 	sub.w	r8, r6, r7
 800b364:	608b      	str	r3, [r1, #8]
 800b366:	f1b8 0f00 	cmp.w	r8, #0
 800b36a:	dd9c      	ble.n	800b2a6 <__sflush_r+0x1a>
 800b36c:	6a21      	ldr	r1, [r4, #32]
 800b36e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b370:	4643      	mov	r3, r8
 800b372:	463a      	mov	r2, r7
 800b374:	4628      	mov	r0, r5
 800b376:	47b0      	blx	r6
 800b378:	2800      	cmp	r0, #0
 800b37a:	dc06      	bgt.n	800b38a <__sflush_r+0xfe>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b382:	81a3      	strh	r3, [r4, #12]
 800b384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b388:	e78e      	b.n	800b2a8 <__sflush_r+0x1c>
 800b38a:	4407      	add	r7, r0
 800b38c:	eba8 0800 	sub.w	r8, r8, r0
 800b390:	e7e9      	b.n	800b366 <__sflush_r+0xda>
 800b392:	bf00      	nop
 800b394:	dfbffffe 	.word	0xdfbffffe

0800b398 <_fflush_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	690b      	ldr	r3, [r1, #16]
 800b39c:	4605      	mov	r5, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	b913      	cbnz	r3, 800b3a8 <_fflush_r+0x10>
 800b3a2:	2500      	movs	r5, #0
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	b118      	cbz	r0, 800b3b2 <_fflush_r+0x1a>
 800b3aa:	6a03      	ldr	r3, [r0, #32]
 800b3ac:	b90b      	cbnz	r3, 800b3b2 <_fflush_r+0x1a>
 800b3ae:	f7fe fe83 	bl	800a0b8 <__sinit>
 800b3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0f3      	beq.n	800b3a2 <_fflush_r+0xa>
 800b3ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3bc:	07d0      	lsls	r0, r2, #31
 800b3be:	d404      	bmi.n	800b3ca <_fflush_r+0x32>
 800b3c0:	0599      	lsls	r1, r3, #22
 800b3c2:	d402      	bmi.n	800b3ca <_fflush_r+0x32>
 800b3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3c6:	f7fe fee4 	bl	800a192 <__retarget_lock_acquire_recursive>
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	f7ff ff5d 	bl	800b28c <__sflush_r>
 800b3d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3d4:	07da      	lsls	r2, r3, #31
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	d4e4      	bmi.n	800b3a4 <_fflush_r+0xc>
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	059b      	lsls	r3, r3, #22
 800b3de:	d4e1      	bmi.n	800b3a4 <_fflush_r+0xc>
 800b3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3e2:	f7fe fed7 	bl	800a194 <__retarget_lock_release_recursive>
 800b3e6:	e7dd      	b.n	800b3a4 <_fflush_r+0xc>

0800b3e8 <__malloc_lock>:
 800b3e8:	4801      	ldr	r0, [pc, #4]	; (800b3f0 <__malloc_lock+0x8>)
 800b3ea:	f7fe bed2 	b.w	800a192 <__retarget_lock_acquire_recursive>
 800b3ee:	bf00      	nop
 800b3f0:	20002198 	.word	0x20002198

0800b3f4 <__malloc_unlock>:
 800b3f4:	4801      	ldr	r0, [pc, #4]	; (800b3fc <__malloc_unlock+0x8>)
 800b3f6:	f7fe becd 	b.w	800a194 <__retarget_lock_release_recursive>
 800b3fa:	bf00      	nop
 800b3fc:	20002198 	.word	0x20002198

0800b400 <_Balloc>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	69c6      	ldr	r6, [r0, #28]
 800b404:	4604      	mov	r4, r0
 800b406:	460d      	mov	r5, r1
 800b408:	b976      	cbnz	r6, 800b428 <_Balloc+0x28>
 800b40a:	2010      	movs	r0, #16
 800b40c:	f7ff fe96 	bl	800b13c <malloc>
 800b410:	4602      	mov	r2, r0
 800b412:	61e0      	str	r0, [r4, #28]
 800b414:	b920      	cbnz	r0, 800b420 <_Balloc+0x20>
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <_Balloc+0x78>)
 800b418:	4818      	ldr	r0, [pc, #96]	; (800b47c <_Balloc+0x7c>)
 800b41a:	216b      	movs	r1, #107	; 0x6b
 800b41c:	f000 fc5c 	bl	800bcd8 <__assert_func>
 800b420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b424:	6006      	str	r6, [r0, #0]
 800b426:	60c6      	str	r6, [r0, #12]
 800b428:	69e6      	ldr	r6, [r4, #28]
 800b42a:	68f3      	ldr	r3, [r6, #12]
 800b42c:	b183      	cbz	r3, 800b450 <_Balloc+0x50>
 800b42e:	69e3      	ldr	r3, [r4, #28]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b436:	b9b8      	cbnz	r0, 800b468 <_Balloc+0x68>
 800b438:	2101      	movs	r1, #1
 800b43a:	fa01 f605 	lsl.w	r6, r1, r5
 800b43e:	1d72      	adds	r2, r6, #5
 800b440:	0092      	lsls	r2, r2, #2
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fc66 	bl	800bd14 <_calloc_r>
 800b448:	b160      	cbz	r0, 800b464 <_Balloc+0x64>
 800b44a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b44e:	e00e      	b.n	800b46e <_Balloc+0x6e>
 800b450:	2221      	movs	r2, #33	; 0x21
 800b452:	2104      	movs	r1, #4
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fc5d 	bl	800bd14 <_calloc_r>
 800b45a:	69e3      	ldr	r3, [r4, #28]
 800b45c:	60f0      	str	r0, [r6, #12]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e4      	bne.n	800b42e <_Balloc+0x2e>
 800b464:	2000      	movs	r0, #0
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	6802      	ldr	r2, [r0, #0]
 800b46a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b46e:	2300      	movs	r3, #0
 800b470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b474:	e7f7      	b.n	800b466 <_Balloc+0x66>
 800b476:	bf00      	nop
 800b478:	0800c4e1 	.word	0x0800c4e1
 800b47c:	0800c572 	.word	0x0800c572

0800b480 <_Bfree>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	69c6      	ldr	r6, [r0, #28]
 800b484:	4605      	mov	r5, r0
 800b486:	460c      	mov	r4, r1
 800b488:	b976      	cbnz	r6, 800b4a8 <_Bfree+0x28>
 800b48a:	2010      	movs	r0, #16
 800b48c:	f7ff fe56 	bl	800b13c <malloc>
 800b490:	4602      	mov	r2, r0
 800b492:	61e8      	str	r0, [r5, #28]
 800b494:	b920      	cbnz	r0, 800b4a0 <_Bfree+0x20>
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <_Bfree+0x3c>)
 800b498:	4809      	ldr	r0, [pc, #36]	; (800b4c0 <_Bfree+0x40>)
 800b49a:	218f      	movs	r1, #143	; 0x8f
 800b49c:	f000 fc1c 	bl	800bcd8 <__assert_func>
 800b4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4a4:	6006      	str	r6, [r0, #0]
 800b4a6:	60c6      	str	r6, [r0, #12]
 800b4a8:	b13c      	cbz	r4, 800b4ba <_Bfree+0x3a>
 800b4aa:	69eb      	ldr	r3, [r5, #28]
 800b4ac:	6862      	ldr	r2, [r4, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4b4:	6021      	str	r1, [r4, #0]
 800b4b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	0800c4e1 	.word	0x0800c4e1
 800b4c0:	0800c572 	.word	0x0800c572

0800b4c4 <__multadd>:
 800b4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c8:	690d      	ldr	r5, [r1, #16]
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	461e      	mov	r6, r3
 800b4d0:	f101 0c14 	add.w	ip, r1, #20
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b4da:	b299      	uxth	r1, r3
 800b4dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b4e0:	0c1e      	lsrs	r6, r3, #16
 800b4e2:	0c0b      	lsrs	r3, r1, #16
 800b4e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b4e8:	b289      	uxth	r1, r1
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4f0:	4285      	cmp	r5, r0
 800b4f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b4f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4fa:	dcec      	bgt.n	800b4d6 <__multadd+0x12>
 800b4fc:	b30e      	cbz	r6, 800b542 <__multadd+0x7e>
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	42ab      	cmp	r3, r5
 800b502:	dc19      	bgt.n	800b538 <__multadd+0x74>
 800b504:	6861      	ldr	r1, [r4, #4]
 800b506:	4638      	mov	r0, r7
 800b508:	3101      	adds	r1, #1
 800b50a:	f7ff ff79 	bl	800b400 <_Balloc>
 800b50e:	4680      	mov	r8, r0
 800b510:	b928      	cbnz	r0, 800b51e <__multadd+0x5a>
 800b512:	4602      	mov	r2, r0
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <__multadd+0x84>)
 800b516:	480d      	ldr	r0, [pc, #52]	; (800b54c <__multadd+0x88>)
 800b518:	21ba      	movs	r1, #186	; 0xba
 800b51a:	f000 fbdd 	bl	800bcd8 <__assert_func>
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	3202      	adds	r2, #2
 800b522:	f104 010c 	add.w	r1, r4, #12
 800b526:	0092      	lsls	r2, r2, #2
 800b528:	300c      	adds	r0, #12
 800b52a:	f000 fbc7 	bl	800bcbc <memcpy>
 800b52e:	4621      	mov	r1, r4
 800b530:	4638      	mov	r0, r7
 800b532:	f7ff ffa5 	bl	800b480 <_Bfree>
 800b536:	4644      	mov	r4, r8
 800b538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b53c:	3501      	adds	r5, #1
 800b53e:	615e      	str	r6, [r3, #20]
 800b540:	6125      	str	r5, [r4, #16]
 800b542:	4620      	mov	r0, r4
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	0800c550 	.word	0x0800c550
 800b54c:	0800c572 	.word	0x0800c572

0800b550 <__hi0bits>:
 800b550:	0c03      	lsrs	r3, r0, #16
 800b552:	041b      	lsls	r3, r3, #16
 800b554:	b9d3      	cbnz	r3, 800b58c <__hi0bits+0x3c>
 800b556:	0400      	lsls	r0, r0, #16
 800b558:	2310      	movs	r3, #16
 800b55a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b55e:	bf04      	itt	eq
 800b560:	0200      	lsleq	r0, r0, #8
 800b562:	3308      	addeq	r3, #8
 800b564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b568:	bf04      	itt	eq
 800b56a:	0100      	lsleq	r0, r0, #4
 800b56c:	3304      	addeq	r3, #4
 800b56e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b572:	bf04      	itt	eq
 800b574:	0080      	lsleq	r0, r0, #2
 800b576:	3302      	addeq	r3, #2
 800b578:	2800      	cmp	r0, #0
 800b57a:	db05      	blt.n	800b588 <__hi0bits+0x38>
 800b57c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b580:	f103 0301 	add.w	r3, r3, #1
 800b584:	bf08      	it	eq
 800b586:	2320      	moveq	r3, #32
 800b588:	4618      	mov	r0, r3
 800b58a:	4770      	bx	lr
 800b58c:	2300      	movs	r3, #0
 800b58e:	e7e4      	b.n	800b55a <__hi0bits+0xa>

0800b590 <__lo0bits>:
 800b590:	6803      	ldr	r3, [r0, #0]
 800b592:	f013 0207 	ands.w	r2, r3, #7
 800b596:	d00c      	beq.n	800b5b2 <__lo0bits+0x22>
 800b598:	07d9      	lsls	r1, r3, #31
 800b59a:	d422      	bmi.n	800b5e2 <__lo0bits+0x52>
 800b59c:	079a      	lsls	r2, r3, #30
 800b59e:	bf49      	itett	mi
 800b5a0:	085b      	lsrmi	r3, r3, #1
 800b5a2:	089b      	lsrpl	r3, r3, #2
 800b5a4:	6003      	strmi	r3, [r0, #0]
 800b5a6:	2201      	movmi	r2, #1
 800b5a8:	bf5c      	itt	pl
 800b5aa:	6003      	strpl	r3, [r0, #0]
 800b5ac:	2202      	movpl	r2, #2
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	4770      	bx	lr
 800b5b2:	b299      	uxth	r1, r3
 800b5b4:	b909      	cbnz	r1, 800b5ba <__lo0bits+0x2a>
 800b5b6:	0c1b      	lsrs	r3, r3, #16
 800b5b8:	2210      	movs	r2, #16
 800b5ba:	b2d9      	uxtb	r1, r3
 800b5bc:	b909      	cbnz	r1, 800b5c2 <__lo0bits+0x32>
 800b5be:	3208      	adds	r2, #8
 800b5c0:	0a1b      	lsrs	r3, r3, #8
 800b5c2:	0719      	lsls	r1, r3, #28
 800b5c4:	bf04      	itt	eq
 800b5c6:	091b      	lsreq	r3, r3, #4
 800b5c8:	3204      	addeq	r2, #4
 800b5ca:	0799      	lsls	r1, r3, #30
 800b5cc:	bf04      	itt	eq
 800b5ce:	089b      	lsreq	r3, r3, #2
 800b5d0:	3202      	addeq	r2, #2
 800b5d2:	07d9      	lsls	r1, r3, #31
 800b5d4:	d403      	bmi.n	800b5de <__lo0bits+0x4e>
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	f102 0201 	add.w	r2, r2, #1
 800b5dc:	d003      	beq.n	800b5e6 <__lo0bits+0x56>
 800b5de:	6003      	str	r3, [r0, #0]
 800b5e0:	e7e5      	b.n	800b5ae <__lo0bits+0x1e>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	e7e3      	b.n	800b5ae <__lo0bits+0x1e>
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	e7e1      	b.n	800b5ae <__lo0bits+0x1e>
	...

0800b5ec <__i2b>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	f7ff ff05 	bl	800b400 <_Balloc>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	b928      	cbnz	r0, 800b606 <__i2b+0x1a>
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <__i2b+0x24>)
 800b5fc:	4805      	ldr	r0, [pc, #20]	; (800b614 <__i2b+0x28>)
 800b5fe:	f240 1145 	movw	r1, #325	; 0x145
 800b602:	f000 fb69 	bl	800bcd8 <__assert_func>
 800b606:	2301      	movs	r3, #1
 800b608:	6144      	str	r4, [r0, #20]
 800b60a:	6103      	str	r3, [r0, #16]
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0800c550 	.word	0x0800c550
 800b614:	0800c572 	.word	0x0800c572

0800b618 <__multiply>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4691      	mov	r9, r2
 800b61e:	690a      	ldr	r2, [r1, #16]
 800b620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b624:	429a      	cmp	r2, r3
 800b626:	bfb8      	it	lt
 800b628:	460b      	movlt	r3, r1
 800b62a:	460c      	mov	r4, r1
 800b62c:	bfbc      	itt	lt
 800b62e:	464c      	movlt	r4, r9
 800b630:	4699      	movlt	r9, r3
 800b632:	6927      	ldr	r7, [r4, #16]
 800b634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	6861      	ldr	r1, [r4, #4]
 800b63c:	eb07 060a 	add.w	r6, r7, sl
 800b640:	42b3      	cmp	r3, r6
 800b642:	b085      	sub	sp, #20
 800b644:	bfb8      	it	lt
 800b646:	3101      	addlt	r1, #1
 800b648:	f7ff feda 	bl	800b400 <_Balloc>
 800b64c:	b930      	cbnz	r0, 800b65c <__multiply+0x44>
 800b64e:	4602      	mov	r2, r0
 800b650:	4b44      	ldr	r3, [pc, #272]	; (800b764 <__multiply+0x14c>)
 800b652:	4845      	ldr	r0, [pc, #276]	; (800b768 <__multiply+0x150>)
 800b654:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b658:	f000 fb3e 	bl	800bcd8 <__assert_func>
 800b65c:	f100 0514 	add.w	r5, r0, #20
 800b660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b664:	462b      	mov	r3, r5
 800b666:	2200      	movs	r2, #0
 800b668:	4543      	cmp	r3, r8
 800b66a:	d321      	bcc.n	800b6b0 <__multiply+0x98>
 800b66c:	f104 0314 	add.w	r3, r4, #20
 800b670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b674:	f109 0314 	add.w	r3, r9, #20
 800b678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b67c:	9202      	str	r2, [sp, #8]
 800b67e:	1b3a      	subs	r2, r7, r4
 800b680:	3a15      	subs	r2, #21
 800b682:	f022 0203 	bic.w	r2, r2, #3
 800b686:	3204      	adds	r2, #4
 800b688:	f104 0115 	add.w	r1, r4, #21
 800b68c:	428f      	cmp	r7, r1
 800b68e:	bf38      	it	cc
 800b690:	2204      	movcc	r2, #4
 800b692:	9201      	str	r2, [sp, #4]
 800b694:	9a02      	ldr	r2, [sp, #8]
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d80c      	bhi.n	800b6b6 <__multiply+0x9e>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	dd03      	ble.n	800b6a8 <__multiply+0x90>
 800b6a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d05b      	beq.n	800b760 <__multiply+0x148>
 800b6a8:	6106      	str	r6, [r0, #16]
 800b6aa:	b005      	add	sp, #20
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	f843 2b04 	str.w	r2, [r3], #4
 800b6b4:	e7d8      	b.n	800b668 <__multiply+0x50>
 800b6b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6ba:	f1ba 0f00 	cmp.w	sl, #0
 800b6be:	d024      	beq.n	800b70a <__multiply+0xf2>
 800b6c0:	f104 0e14 	add.w	lr, r4, #20
 800b6c4:	46a9      	mov	r9, r5
 800b6c6:	f04f 0c00 	mov.w	ip, #0
 800b6ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b6ce:	f8d9 1000 	ldr.w	r1, [r9]
 800b6d2:	fa1f fb82 	uxth.w	fp, r2
 800b6d6:	b289      	uxth	r1, r1
 800b6d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b6e4:	4461      	add	r1, ip
 800b6e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6f2:	b289      	uxth	r1, r1
 800b6f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6f8:	4577      	cmp	r7, lr
 800b6fa:	f849 1b04 	str.w	r1, [r9], #4
 800b6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b702:	d8e2      	bhi.n	800b6ca <__multiply+0xb2>
 800b704:	9a01      	ldr	r2, [sp, #4]
 800b706:	f845 c002 	str.w	ip, [r5, r2]
 800b70a:	9a03      	ldr	r2, [sp, #12]
 800b70c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b710:	3304      	adds	r3, #4
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d021      	beq.n	800b75c <__multiply+0x144>
 800b718:	6829      	ldr	r1, [r5, #0]
 800b71a:	f104 0c14 	add.w	ip, r4, #20
 800b71e:	46ae      	mov	lr, r5
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	f8bc b000 	ldrh.w	fp, [ip]
 800b728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b72c:	fb09 220b 	mla	r2, r9, fp, r2
 800b730:	4452      	add	r2, sl
 800b732:	b289      	uxth	r1, r1
 800b734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b738:	f84e 1b04 	str.w	r1, [lr], #4
 800b73c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b740:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b744:	f8be 1000 	ldrh.w	r1, [lr]
 800b748:	fb09 110a 	mla	r1, r9, sl, r1
 800b74c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b750:	4567      	cmp	r7, ip
 800b752:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b756:	d8e5      	bhi.n	800b724 <__multiply+0x10c>
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	50a9      	str	r1, [r5, r2]
 800b75c:	3504      	adds	r5, #4
 800b75e:	e799      	b.n	800b694 <__multiply+0x7c>
 800b760:	3e01      	subs	r6, #1
 800b762:	e79b      	b.n	800b69c <__multiply+0x84>
 800b764:	0800c550 	.word	0x0800c550
 800b768:	0800c572 	.word	0x0800c572

0800b76c <__pow5mult>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4615      	mov	r5, r2
 800b772:	f012 0203 	ands.w	r2, r2, #3
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	d007      	beq.n	800b78c <__pow5mult+0x20>
 800b77c:	4c25      	ldr	r4, [pc, #148]	; (800b814 <__pow5mult+0xa8>)
 800b77e:	3a01      	subs	r2, #1
 800b780:	2300      	movs	r3, #0
 800b782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b786:	f7ff fe9d 	bl	800b4c4 <__multadd>
 800b78a:	4607      	mov	r7, r0
 800b78c:	10ad      	asrs	r5, r5, #2
 800b78e:	d03d      	beq.n	800b80c <__pow5mult+0xa0>
 800b790:	69f4      	ldr	r4, [r6, #28]
 800b792:	b97c      	cbnz	r4, 800b7b4 <__pow5mult+0x48>
 800b794:	2010      	movs	r0, #16
 800b796:	f7ff fcd1 	bl	800b13c <malloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	61f0      	str	r0, [r6, #28]
 800b79e:	b928      	cbnz	r0, 800b7ac <__pow5mult+0x40>
 800b7a0:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <__pow5mult+0xac>)
 800b7a2:	481e      	ldr	r0, [pc, #120]	; (800b81c <__pow5mult+0xb0>)
 800b7a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7a8:	f000 fa96 	bl	800bcd8 <__assert_func>
 800b7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b0:	6004      	str	r4, [r0, #0]
 800b7b2:	60c4      	str	r4, [r0, #12]
 800b7b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7bc:	b94c      	cbnz	r4, 800b7d2 <__pow5mult+0x66>
 800b7be:	f240 2171 	movw	r1, #625	; 0x271
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ff12 	bl	800b5ec <__i2b>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	f04f 0900 	mov.w	r9, #0
 800b7d6:	07eb      	lsls	r3, r5, #31
 800b7d8:	d50a      	bpl.n	800b7f0 <__pow5mult+0x84>
 800b7da:	4639      	mov	r1, r7
 800b7dc:	4622      	mov	r2, r4
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ff1a 	bl	800b618 <__multiply>
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff fe49 	bl	800b480 <_Bfree>
 800b7ee:	4647      	mov	r7, r8
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	d00b      	beq.n	800b80c <__pow5mult+0xa0>
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	b938      	cbnz	r0, 800b808 <__pow5mult+0x9c>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f7ff ff0b 	bl	800b618 <__multiply>
 800b802:	6020      	str	r0, [r4, #0]
 800b804:	f8c0 9000 	str.w	r9, [r0]
 800b808:	4604      	mov	r4, r0
 800b80a:	e7e4      	b.n	800b7d6 <__pow5mult+0x6a>
 800b80c:	4638      	mov	r0, r7
 800b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b812:	bf00      	nop
 800b814:	0800c6c0 	.word	0x0800c6c0
 800b818:	0800c4e1 	.word	0x0800c4e1
 800b81c:	0800c572 	.word	0x0800c572

0800b820 <__lshift>:
 800b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	6849      	ldr	r1, [r1, #4]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	4607      	mov	r7, r0
 800b832:	4691      	mov	r9, r2
 800b834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b838:	f108 0601 	add.w	r6, r8, #1
 800b83c:	42b3      	cmp	r3, r6
 800b83e:	db0b      	blt.n	800b858 <__lshift+0x38>
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff fddd 	bl	800b400 <_Balloc>
 800b846:	4605      	mov	r5, r0
 800b848:	b948      	cbnz	r0, 800b85e <__lshift+0x3e>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <__lshift+0xd0>)
 800b84e:	4829      	ldr	r0, [pc, #164]	; (800b8f4 <__lshift+0xd4>)
 800b850:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b854:	f000 fa40 	bl	800bcd8 <__assert_func>
 800b858:	3101      	adds	r1, #1
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	e7ee      	b.n	800b83c <__lshift+0x1c>
 800b85e:	2300      	movs	r3, #0
 800b860:	f100 0114 	add.w	r1, r0, #20
 800b864:	f100 0210 	add.w	r2, r0, #16
 800b868:	4618      	mov	r0, r3
 800b86a:	4553      	cmp	r3, sl
 800b86c:	db33      	blt.n	800b8d6 <__lshift+0xb6>
 800b86e:	6920      	ldr	r0, [r4, #16]
 800b870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b874:	f104 0314 	add.w	r3, r4, #20
 800b878:	f019 091f 	ands.w	r9, r9, #31
 800b87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b884:	d02b      	beq.n	800b8de <__lshift+0xbe>
 800b886:	f1c9 0e20 	rsb	lr, r9, #32
 800b88a:	468a      	mov	sl, r1
 800b88c:	2200      	movs	r2, #0
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	fa00 f009 	lsl.w	r0, r0, r9
 800b894:	4310      	orrs	r0, r2
 800b896:	f84a 0b04 	str.w	r0, [sl], #4
 800b89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b89e:	459c      	cmp	ip, r3
 800b8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8a4:	d8f3      	bhi.n	800b88e <__lshift+0x6e>
 800b8a6:	ebac 0304 	sub.w	r3, ip, r4
 800b8aa:	3b15      	subs	r3, #21
 800b8ac:	f023 0303 	bic.w	r3, r3, #3
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	f104 0015 	add.w	r0, r4, #21
 800b8b6:	4584      	cmp	ip, r0
 800b8b8:	bf38      	it	cc
 800b8ba:	2304      	movcc	r3, #4
 800b8bc:	50ca      	str	r2, [r1, r3]
 800b8be:	b10a      	cbz	r2, 800b8c4 <__lshift+0xa4>
 800b8c0:	f108 0602 	add.w	r6, r8, #2
 800b8c4:	3e01      	subs	r6, #1
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	612e      	str	r6, [r5, #16]
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f7ff fdd8 	bl	800b480 <_Bfree>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8da:	3301      	adds	r3, #1
 800b8dc:	e7c5      	b.n	800b86a <__lshift+0x4a>
 800b8de:	3904      	subs	r1, #4
 800b8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8e8:	459c      	cmp	ip, r3
 800b8ea:	d8f9      	bhi.n	800b8e0 <__lshift+0xc0>
 800b8ec:	e7ea      	b.n	800b8c4 <__lshift+0xa4>
 800b8ee:	bf00      	nop
 800b8f0:	0800c550 	.word	0x0800c550
 800b8f4:	0800c572 	.word	0x0800c572

0800b8f8 <__mcmp>:
 800b8f8:	b530      	push	{r4, r5, lr}
 800b8fa:	6902      	ldr	r2, [r0, #16]
 800b8fc:	690c      	ldr	r4, [r1, #16]
 800b8fe:	1b12      	subs	r2, r2, r4
 800b900:	d10e      	bne.n	800b920 <__mcmp+0x28>
 800b902:	f100 0314 	add.w	r3, r0, #20
 800b906:	3114      	adds	r1, #20
 800b908:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b90c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b910:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b914:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b918:	42a5      	cmp	r5, r4
 800b91a:	d003      	beq.n	800b924 <__mcmp+0x2c>
 800b91c:	d305      	bcc.n	800b92a <__mcmp+0x32>
 800b91e:	2201      	movs	r2, #1
 800b920:	4610      	mov	r0, r2
 800b922:	bd30      	pop	{r4, r5, pc}
 800b924:	4283      	cmp	r3, r0
 800b926:	d3f3      	bcc.n	800b910 <__mcmp+0x18>
 800b928:	e7fa      	b.n	800b920 <__mcmp+0x28>
 800b92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b92e:	e7f7      	b.n	800b920 <__mcmp+0x28>

0800b930 <__mdiff>:
 800b930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	460c      	mov	r4, r1
 800b936:	4606      	mov	r6, r0
 800b938:	4611      	mov	r1, r2
 800b93a:	4620      	mov	r0, r4
 800b93c:	4690      	mov	r8, r2
 800b93e:	f7ff ffdb 	bl	800b8f8 <__mcmp>
 800b942:	1e05      	subs	r5, r0, #0
 800b944:	d110      	bne.n	800b968 <__mdiff+0x38>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff fd59 	bl	800b400 <_Balloc>
 800b94e:	b930      	cbnz	r0, 800b95e <__mdiff+0x2e>
 800b950:	4b3a      	ldr	r3, [pc, #232]	; (800ba3c <__mdiff+0x10c>)
 800b952:	4602      	mov	r2, r0
 800b954:	f240 2137 	movw	r1, #567	; 0x237
 800b958:	4839      	ldr	r0, [pc, #228]	; (800ba40 <__mdiff+0x110>)
 800b95a:	f000 f9bd 	bl	800bcd8 <__assert_func>
 800b95e:	2301      	movs	r3, #1
 800b960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	bfa4      	itt	ge
 800b96a:	4643      	movge	r3, r8
 800b96c:	46a0      	movge	r8, r4
 800b96e:	4630      	mov	r0, r6
 800b970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b974:	bfa6      	itte	ge
 800b976:	461c      	movge	r4, r3
 800b978:	2500      	movge	r5, #0
 800b97a:	2501      	movlt	r5, #1
 800b97c:	f7ff fd40 	bl	800b400 <_Balloc>
 800b980:	b920      	cbnz	r0, 800b98c <__mdiff+0x5c>
 800b982:	4b2e      	ldr	r3, [pc, #184]	; (800ba3c <__mdiff+0x10c>)
 800b984:	4602      	mov	r2, r0
 800b986:	f240 2145 	movw	r1, #581	; 0x245
 800b98a:	e7e5      	b.n	800b958 <__mdiff+0x28>
 800b98c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b990:	6926      	ldr	r6, [r4, #16]
 800b992:	60c5      	str	r5, [r0, #12]
 800b994:	f104 0914 	add.w	r9, r4, #20
 800b998:	f108 0514 	add.w	r5, r8, #20
 800b99c:	f100 0e14 	add.w	lr, r0, #20
 800b9a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9a8:	f108 0210 	add.w	r2, r8, #16
 800b9ac:	46f2      	mov	sl, lr
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9b8:	fa11 f88b 	uxtah	r8, r1, fp
 800b9bc:	b299      	uxth	r1, r3
 800b9be:	0c1b      	lsrs	r3, r3, #16
 800b9c0:	eba8 0801 	sub.w	r8, r8, r1
 800b9c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9cc:	fa1f f888 	uxth.w	r8, r8
 800b9d0:	1419      	asrs	r1, r3, #16
 800b9d2:	454e      	cmp	r6, r9
 800b9d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9d8:	f84a 3b04 	str.w	r3, [sl], #4
 800b9dc:	d8e8      	bhi.n	800b9b0 <__mdiff+0x80>
 800b9de:	1b33      	subs	r3, r6, r4
 800b9e0:	3b15      	subs	r3, #21
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	3415      	adds	r4, #21
 800b9ea:	42a6      	cmp	r6, r4
 800b9ec:	bf38      	it	cc
 800b9ee:	2304      	movcc	r3, #4
 800b9f0:	441d      	add	r5, r3
 800b9f2:	4473      	add	r3, lr
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	462e      	mov	r6, r5
 800b9f8:	4566      	cmp	r6, ip
 800b9fa:	d30e      	bcc.n	800ba1a <__mdiff+0xea>
 800b9fc:	f10c 0203 	add.w	r2, ip, #3
 800ba00:	1b52      	subs	r2, r2, r5
 800ba02:	f022 0203 	bic.w	r2, r2, #3
 800ba06:	3d03      	subs	r5, #3
 800ba08:	45ac      	cmp	ip, r5
 800ba0a:	bf38      	it	cc
 800ba0c:	2200      	movcc	r2, #0
 800ba0e:	4413      	add	r3, r2
 800ba10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba14:	b17a      	cbz	r2, 800ba36 <__mdiff+0x106>
 800ba16:	6107      	str	r7, [r0, #16]
 800ba18:	e7a4      	b.n	800b964 <__mdiff+0x34>
 800ba1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba1e:	fa11 f288 	uxtah	r2, r1, r8
 800ba22:	1414      	asrs	r4, r2, #16
 800ba24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba2e:	f84e 2b04 	str.w	r2, [lr], #4
 800ba32:	1421      	asrs	r1, r4, #16
 800ba34:	e7e0      	b.n	800b9f8 <__mdiff+0xc8>
 800ba36:	3f01      	subs	r7, #1
 800ba38:	e7ea      	b.n	800ba10 <__mdiff+0xe0>
 800ba3a:	bf00      	nop
 800ba3c:	0800c550 	.word	0x0800c550
 800ba40:	0800c572 	.word	0x0800c572

0800ba44 <__d2b>:
 800ba44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba48:	460f      	mov	r7, r1
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	ec59 8b10 	vmov	r8, r9, d0
 800ba50:	4616      	mov	r6, r2
 800ba52:	f7ff fcd5 	bl	800b400 <_Balloc>
 800ba56:	4604      	mov	r4, r0
 800ba58:	b930      	cbnz	r0, 800ba68 <__d2b+0x24>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <__d2b+0xac>)
 800ba5e:	4825      	ldr	r0, [pc, #148]	; (800baf4 <__d2b+0xb0>)
 800ba60:	f240 310f 	movw	r1, #783	; 0x30f
 800ba64:	f000 f938 	bl	800bcd8 <__assert_func>
 800ba68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba70:	bb2d      	cbnz	r5, 800babe <__d2b+0x7a>
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	f1b8 0300 	subs.w	r3, r8, #0
 800ba78:	d026      	beq.n	800bac8 <__d2b+0x84>
 800ba7a:	4668      	mov	r0, sp
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	f7ff fd87 	bl	800b590 <__lo0bits>
 800ba82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba86:	b1e8      	cbz	r0, 800bac4 <__d2b+0x80>
 800ba88:	f1c0 0320 	rsb	r3, r0, #32
 800ba8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba90:	430b      	orrs	r3, r1
 800ba92:	40c2      	lsrs	r2, r0
 800ba94:	6163      	str	r3, [r4, #20]
 800ba96:	9201      	str	r2, [sp, #4]
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	61a3      	str	r3, [r4, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bf14      	ite	ne
 800baa0:	2202      	movne	r2, #2
 800baa2:	2201      	moveq	r2, #1
 800baa4:	6122      	str	r2, [r4, #16]
 800baa6:	b1bd      	cbz	r5, 800bad8 <__d2b+0x94>
 800baa8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800baac:	4405      	add	r5, r0
 800baae:	603d      	str	r5, [r7, #0]
 800bab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bab4:	6030      	str	r0, [r6, #0]
 800bab6:	4620      	mov	r0, r4
 800bab8:	b003      	add	sp, #12
 800baba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800babe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bac2:	e7d6      	b.n	800ba72 <__d2b+0x2e>
 800bac4:	6161      	str	r1, [r4, #20]
 800bac6:	e7e7      	b.n	800ba98 <__d2b+0x54>
 800bac8:	a801      	add	r0, sp, #4
 800baca:	f7ff fd61 	bl	800b590 <__lo0bits>
 800bace:	9b01      	ldr	r3, [sp, #4]
 800bad0:	6163      	str	r3, [r4, #20]
 800bad2:	3020      	adds	r0, #32
 800bad4:	2201      	movs	r2, #1
 800bad6:	e7e5      	b.n	800baa4 <__d2b+0x60>
 800bad8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800badc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bae0:	6038      	str	r0, [r7, #0]
 800bae2:	6918      	ldr	r0, [r3, #16]
 800bae4:	f7ff fd34 	bl	800b550 <__hi0bits>
 800bae8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baec:	e7e2      	b.n	800bab4 <__d2b+0x70>
 800baee:	bf00      	nop
 800baf0:	0800c550 	.word	0x0800c550
 800baf4:	0800c572 	.word	0x0800c572

0800baf8 <__sread>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	460c      	mov	r4, r1
 800bafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb00:	f000 f8a8 	bl	800bc54 <_read_r>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	bfab      	itete	ge
 800bb08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb0a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb0c:	181b      	addge	r3, r3, r0
 800bb0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb12:	bfac      	ite	ge
 800bb14:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb16:	81a3      	strhlt	r3, [r4, #12]
 800bb18:	bd10      	pop	{r4, pc}

0800bb1a <__swrite>:
 800bb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1e:	461f      	mov	r7, r3
 800bb20:	898b      	ldrh	r3, [r1, #12]
 800bb22:	05db      	lsls	r3, r3, #23
 800bb24:	4605      	mov	r5, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	4616      	mov	r6, r2
 800bb2a:	d505      	bpl.n	800bb38 <__swrite+0x1e>
 800bb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb30:	2302      	movs	r3, #2
 800bb32:	2200      	movs	r2, #0
 800bb34:	f000 f87c 	bl	800bc30 <_lseek_r>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	4632      	mov	r2, r6
 800bb46:	463b      	mov	r3, r7
 800bb48:	4628      	mov	r0, r5
 800bb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4e:	f000 b8a3 	b.w	800bc98 <_write_r>

0800bb52 <__sseek>:
 800bb52:	b510      	push	{r4, lr}
 800bb54:	460c      	mov	r4, r1
 800bb56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5a:	f000 f869 	bl	800bc30 <_lseek_r>
 800bb5e:	1c43      	adds	r3, r0, #1
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	bf15      	itete	ne
 800bb64:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb6e:	81a3      	strheq	r3, [r4, #12]
 800bb70:	bf18      	it	ne
 800bb72:	81a3      	strhne	r3, [r4, #12]
 800bb74:	bd10      	pop	{r4, pc}

0800bb76 <__sclose>:
 800bb76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7a:	f000 b849 	b.w	800bc10 <_close_r>

0800bb7e <_realloc_r>:
 800bb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	4680      	mov	r8, r0
 800bb84:	4614      	mov	r4, r2
 800bb86:	460e      	mov	r6, r1
 800bb88:	b921      	cbnz	r1, 800bb94 <_realloc_r+0x16>
 800bb8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8e:	4611      	mov	r1, r2
 800bb90:	f7ff bafc 	b.w	800b18c <_malloc_r>
 800bb94:	b92a      	cbnz	r2, 800bba2 <_realloc_r+0x24>
 800bb96:	f000 f8d3 	bl	800bd40 <_free_r>
 800bb9a:	4625      	mov	r5, r4
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba2:	f000 f92b 	bl	800bdfc <_malloc_usable_size_r>
 800bba6:	4284      	cmp	r4, r0
 800bba8:	4607      	mov	r7, r0
 800bbaa:	d802      	bhi.n	800bbb2 <_realloc_r+0x34>
 800bbac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbb0:	d812      	bhi.n	800bbd8 <_realloc_r+0x5a>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	f7ff fae9 	bl	800b18c <_malloc_r>
 800bbba:	4605      	mov	r5, r0
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d0ed      	beq.n	800bb9c <_realloc_r+0x1e>
 800bbc0:	42bc      	cmp	r4, r7
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	bf28      	it	cs
 800bbc8:	463a      	movcs	r2, r7
 800bbca:	f000 f877 	bl	800bcbc <memcpy>
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	f000 f8b5 	bl	800bd40 <_free_r>
 800bbd6:	e7e1      	b.n	800bb9c <_realloc_r+0x1e>
 800bbd8:	4635      	mov	r5, r6
 800bbda:	e7df      	b.n	800bb9c <_realloc_r+0x1e>

0800bbdc <memmove>:
 800bbdc:	4288      	cmp	r0, r1
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	eb01 0402 	add.w	r4, r1, r2
 800bbe4:	d902      	bls.n	800bbec <memmove+0x10>
 800bbe6:	4284      	cmp	r4, r0
 800bbe8:	4623      	mov	r3, r4
 800bbea:	d807      	bhi.n	800bbfc <memmove+0x20>
 800bbec:	1e43      	subs	r3, r0, #1
 800bbee:	42a1      	cmp	r1, r4
 800bbf0:	d008      	beq.n	800bc04 <memmove+0x28>
 800bbf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbfa:	e7f8      	b.n	800bbee <memmove+0x12>
 800bbfc:	4402      	add	r2, r0
 800bbfe:	4601      	mov	r1, r0
 800bc00:	428a      	cmp	r2, r1
 800bc02:	d100      	bne.n	800bc06 <memmove+0x2a>
 800bc04:	bd10      	pop	{r4, pc}
 800bc06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc0e:	e7f7      	b.n	800bc00 <memmove+0x24>

0800bc10 <_close_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4d06      	ldr	r5, [pc, #24]	; (800bc2c <_close_r+0x1c>)
 800bc14:	2300      	movs	r3, #0
 800bc16:	4604      	mov	r4, r0
 800bc18:	4608      	mov	r0, r1
 800bc1a:	602b      	str	r3, [r5, #0]
 800bc1c:	f7f5 fe21 	bl	8001862 <_close>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d102      	bne.n	800bc2a <_close_r+0x1a>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	b103      	cbz	r3, 800bc2a <_close_r+0x1a>
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	bd38      	pop	{r3, r4, r5, pc}
 800bc2c:	200021a4 	.word	0x200021a4

0800bc30 <_lseek_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	; (800bc50 <_lseek_r+0x20>)
 800bc34:	4604      	mov	r4, r0
 800bc36:	4608      	mov	r0, r1
 800bc38:	4611      	mov	r1, r2
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	602a      	str	r2, [r5, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f7f5 fe36 	bl	80018b0 <_lseek>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_lseek_r+0x1e>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_lseek_r+0x1e>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	200021a4 	.word	0x200021a4

0800bc54 <_read_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d07      	ldr	r5, [pc, #28]	; (800bc74 <_read_r+0x20>)
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	602a      	str	r2, [r5, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f7f5 fdc4 	bl	80017f0 <_read>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_read_r+0x1e>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_read_r+0x1e>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	200021a4 	.word	0x200021a4

0800bc78 <_sbrk_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d06      	ldr	r5, [pc, #24]	; (800bc94 <_sbrk_r+0x1c>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f7f5 fe22 	bl	80018cc <_sbrk>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_sbrk_r+0x1a>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_sbrk_r+0x1a>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	200021a4 	.word	0x200021a4

0800bc98 <_write_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d07      	ldr	r5, [pc, #28]	; (800bcb8 <_write_r+0x20>)
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	4608      	mov	r0, r1
 800bca0:	4611      	mov	r1, r2
 800bca2:	2200      	movs	r2, #0
 800bca4:	602a      	str	r2, [r5, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	f7f5 fdbf 	bl	800182a <_write>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_write_r+0x1e>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_write_r+0x1e>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	200021a4 	.word	0x200021a4

0800bcbc <memcpy>:
 800bcbc:	440a      	add	r2, r1
 800bcbe:	4291      	cmp	r1, r2
 800bcc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bcc4:	d100      	bne.n	800bcc8 <memcpy+0xc>
 800bcc6:	4770      	bx	lr
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	d1f9      	bne.n	800bcca <memcpy+0xe>
 800bcd6:	bd10      	pop	{r4, pc}

0800bcd8 <__assert_func>:
 800bcd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcda:	4614      	mov	r4, r2
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <__assert_func+0x2c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4605      	mov	r5, r0
 800bce4:	68d8      	ldr	r0, [r3, #12]
 800bce6:	b14c      	cbz	r4, 800bcfc <__assert_func+0x24>
 800bce8:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <__assert_func+0x30>)
 800bcea:	9100      	str	r1, [sp, #0]
 800bcec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcf0:	4906      	ldr	r1, [pc, #24]	; (800bd0c <__assert_func+0x34>)
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	f000 f88a 	bl	800be0c <fiprintf>
 800bcf8:	f000 f8a7 	bl	800be4a <abort>
 800bcfc:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <__assert_func+0x38>)
 800bcfe:	461c      	mov	r4, r3
 800bd00:	e7f3      	b.n	800bcea <__assert_func+0x12>
 800bd02:	bf00      	nop
 800bd04:	20000164 	.word	0x20000164
 800bd08:	0800c7d7 	.word	0x0800c7d7
 800bd0c:	0800c7e4 	.word	0x0800c7e4
 800bd10:	0800c812 	.word	0x0800c812

0800bd14 <_calloc_r>:
 800bd14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd16:	fba1 2402 	umull	r2, r4, r1, r2
 800bd1a:	b94c      	cbnz	r4, 800bd30 <_calloc_r+0x1c>
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	9201      	str	r2, [sp, #4]
 800bd20:	f7ff fa34 	bl	800b18c <_malloc_r>
 800bd24:	9a01      	ldr	r2, [sp, #4]
 800bd26:	4605      	mov	r5, r0
 800bd28:	b930      	cbnz	r0, 800bd38 <_calloc_r+0x24>
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	b003      	add	sp, #12
 800bd2e:	bd30      	pop	{r4, r5, pc}
 800bd30:	220c      	movs	r2, #12
 800bd32:	6002      	str	r2, [r0, #0]
 800bd34:	2500      	movs	r5, #0
 800bd36:	e7f8      	b.n	800bd2a <_calloc_r+0x16>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	f7fe f9f3 	bl	800a124 <memset>
 800bd3e:	e7f4      	b.n	800bd2a <_calloc_r+0x16>

0800bd40 <_free_r>:
 800bd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd42:	2900      	cmp	r1, #0
 800bd44:	d044      	beq.n	800bdd0 <_free_r+0x90>
 800bd46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd4a:	9001      	str	r0, [sp, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f1a1 0404 	sub.w	r4, r1, #4
 800bd52:	bfb8      	it	lt
 800bd54:	18e4      	addlt	r4, r4, r3
 800bd56:	f7ff fb47 	bl	800b3e8 <__malloc_lock>
 800bd5a:	4a1e      	ldr	r2, [pc, #120]	; (800bdd4 <_free_r+0x94>)
 800bd5c:	9801      	ldr	r0, [sp, #4]
 800bd5e:	6813      	ldr	r3, [r2, #0]
 800bd60:	b933      	cbnz	r3, 800bd70 <_free_r+0x30>
 800bd62:	6063      	str	r3, [r4, #4]
 800bd64:	6014      	str	r4, [r2, #0]
 800bd66:	b003      	add	sp, #12
 800bd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd6c:	f7ff bb42 	b.w	800b3f4 <__malloc_unlock>
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	d908      	bls.n	800bd86 <_free_r+0x46>
 800bd74:	6825      	ldr	r5, [r4, #0]
 800bd76:	1961      	adds	r1, r4, r5
 800bd78:	428b      	cmp	r3, r1
 800bd7a:	bf01      	itttt	eq
 800bd7c:	6819      	ldreq	r1, [r3, #0]
 800bd7e:	685b      	ldreq	r3, [r3, #4]
 800bd80:	1949      	addeq	r1, r1, r5
 800bd82:	6021      	streq	r1, [r4, #0]
 800bd84:	e7ed      	b.n	800bd62 <_free_r+0x22>
 800bd86:	461a      	mov	r2, r3
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	b10b      	cbz	r3, 800bd90 <_free_r+0x50>
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	d9fa      	bls.n	800bd86 <_free_r+0x46>
 800bd90:	6811      	ldr	r1, [r2, #0]
 800bd92:	1855      	adds	r5, r2, r1
 800bd94:	42a5      	cmp	r5, r4
 800bd96:	d10b      	bne.n	800bdb0 <_free_r+0x70>
 800bd98:	6824      	ldr	r4, [r4, #0]
 800bd9a:	4421      	add	r1, r4
 800bd9c:	1854      	adds	r4, r2, r1
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	6011      	str	r1, [r2, #0]
 800bda2:	d1e0      	bne.n	800bd66 <_free_r+0x26>
 800bda4:	681c      	ldr	r4, [r3, #0]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	6053      	str	r3, [r2, #4]
 800bdaa:	440c      	add	r4, r1
 800bdac:	6014      	str	r4, [r2, #0]
 800bdae:	e7da      	b.n	800bd66 <_free_r+0x26>
 800bdb0:	d902      	bls.n	800bdb8 <_free_r+0x78>
 800bdb2:	230c      	movs	r3, #12
 800bdb4:	6003      	str	r3, [r0, #0]
 800bdb6:	e7d6      	b.n	800bd66 <_free_r+0x26>
 800bdb8:	6825      	ldr	r5, [r4, #0]
 800bdba:	1961      	adds	r1, r4, r5
 800bdbc:	428b      	cmp	r3, r1
 800bdbe:	bf04      	itt	eq
 800bdc0:	6819      	ldreq	r1, [r3, #0]
 800bdc2:	685b      	ldreq	r3, [r3, #4]
 800bdc4:	6063      	str	r3, [r4, #4]
 800bdc6:	bf04      	itt	eq
 800bdc8:	1949      	addeq	r1, r1, r5
 800bdca:	6021      	streq	r1, [r4, #0]
 800bdcc:	6054      	str	r4, [r2, #4]
 800bdce:	e7ca      	b.n	800bd66 <_free_r+0x26>
 800bdd0:	b003      	add	sp, #12
 800bdd2:	bd30      	pop	{r4, r5, pc}
 800bdd4:	2000219c 	.word	0x2000219c

0800bdd8 <__ascii_mbtowc>:
 800bdd8:	b082      	sub	sp, #8
 800bdda:	b901      	cbnz	r1, 800bdde <__ascii_mbtowc+0x6>
 800bddc:	a901      	add	r1, sp, #4
 800bdde:	b142      	cbz	r2, 800bdf2 <__ascii_mbtowc+0x1a>
 800bde0:	b14b      	cbz	r3, 800bdf6 <__ascii_mbtowc+0x1e>
 800bde2:	7813      	ldrb	r3, [r2, #0]
 800bde4:	600b      	str	r3, [r1, #0]
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	1e10      	subs	r0, r2, #0
 800bdea:	bf18      	it	ne
 800bdec:	2001      	movne	r0, #1
 800bdee:	b002      	add	sp, #8
 800bdf0:	4770      	bx	lr
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	e7fb      	b.n	800bdee <__ascii_mbtowc+0x16>
 800bdf6:	f06f 0001 	mvn.w	r0, #1
 800bdfa:	e7f8      	b.n	800bdee <__ascii_mbtowc+0x16>

0800bdfc <_malloc_usable_size_r>:
 800bdfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be00:	1f18      	subs	r0, r3, #4
 800be02:	2b00      	cmp	r3, #0
 800be04:	bfbc      	itt	lt
 800be06:	580b      	ldrlt	r3, [r1, r0]
 800be08:	18c0      	addlt	r0, r0, r3
 800be0a:	4770      	bx	lr

0800be0c <fiprintf>:
 800be0c:	b40e      	push	{r1, r2, r3}
 800be0e:	b503      	push	{r0, r1, lr}
 800be10:	4601      	mov	r1, r0
 800be12:	ab03      	add	r3, sp, #12
 800be14:	4805      	ldr	r0, [pc, #20]	; (800be2c <fiprintf+0x20>)
 800be16:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	f000 f845 	bl	800beac <_vfiprintf_r>
 800be22:	b002      	add	sp, #8
 800be24:	f85d eb04 	ldr.w	lr, [sp], #4
 800be28:	b003      	add	sp, #12
 800be2a:	4770      	bx	lr
 800be2c:	20000164 	.word	0x20000164

0800be30 <__ascii_wctomb>:
 800be30:	b149      	cbz	r1, 800be46 <__ascii_wctomb+0x16>
 800be32:	2aff      	cmp	r2, #255	; 0xff
 800be34:	bf85      	ittet	hi
 800be36:	238a      	movhi	r3, #138	; 0x8a
 800be38:	6003      	strhi	r3, [r0, #0]
 800be3a:	700a      	strbls	r2, [r1, #0]
 800be3c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800be40:	bf98      	it	ls
 800be42:	2001      	movls	r0, #1
 800be44:	4770      	bx	lr
 800be46:	4608      	mov	r0, r1
 800be48:	4770      	bx	lr

0800be4a <abort>:
 800be4a:	b508      	push	{r3, lr}
 800be4c:	2006      	movs	r0, #6
 800be4e:	f000 fa89 	bl	800c364 <raise>
 800be52:	2001      	movs	r0, #1
 800be54:	f7f5 fcc2 	bl	80017dc <_exit>

0800be58 <__sfputc_r>:
 800be58:	6893      	ldr	r3, [r2, #8]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	b410      	push	{r4}
 800be60:	6093      	str	r3, [r2, #8]
 800be62:	da08      	bge.n	800be76 <__sfputc_r+0x1e>
 800be64:	6994      	ldr	r4, [r2, #24]
 800be66:	42a3      	cmp	r3, r4
 800be68:	db01      	blt.n	800be6e <__sfputc_r+0x16>
 800be6a:	290a      	cmp	r1, #10
 800be6c:	d103      	bne.n	800be76 <__sfputc_r+0x1e>
 800be6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be72:	f000 b935 	b.w	800c0e0 <__swbuf_r>
 800be76:	6813      	ldr	r3, [r2, #0]
 800be78:	1c58      	adds	r0, r3, #1
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	7019      	strb	r1, [r3, #0]
 800be7e:	4608      	mov	r0, r1
 800be80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <__sfputs_r>:
 800be86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be88:	4606      	mov	r6, r0
 800be8a:	460f      	mov	r7, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	18d5      	adds	r5, r2, r3
 800be90:	42ac      	cmp	r4, r5
 800be92:	d101      	bne.n	800be98 <__sfputs_r+0x12>
 800be94:	2000      	movs	r0, #0
 800be96:	e007      	b.n	800bea8 <__sfputs_r+0x22>
 800be98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9c:	463a      	mov	r2, r7
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ffda 	bl	800be58 <__sfputc_r>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d1f3      	bne.n	800be90 <__sfputs_r+0xa>
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beac <_vfiprintf_r>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460d      	mov	r5, r1
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4614      	mov	r4, r2
 800beb6:	4698      	mov	r8, r3
 800beb8:	4606      	mov	r6, r0
 800beba:	b118      	cbz	r0, 800bec4 <_vfiprintf_r+0x18>
 800bebc:	6a03      	ldr	r3, [r0, #32]
 800bebe:	b90b      	cbnz	r3, 800bec4 <_vfiprintf_r+0x18>
 800bec0:	f7fe f8fa 	bl	800a0b8 <__sinit>
 800bec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bec6:	07d9      	lsls	r1, r3, #31
 800bec8:	d405      	bmi.n	800bed6 <_vfiprintf_r+0x2a>
 800beca:	89ab      	ldrh	r3, [r5, #12]
 800becc:	059a      	lsls	r2, r3, #22
 800bece:	d402      	bmi.n	800bed6 <_vfiprintf_r+0x2a>
 800bed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bed2:	f7fe f95e 	bl	800a192 <__retarget_lock_acquire_recursive>
 800bed6:	89ab      	ldrh	r3, [r5, #12]
 800bed8:	071b      	lsls	r3, r3, #28
 800beda:	d501      	bpl.n	800bee0 <_vfiprintf_r+0x34>
 800bedc:	692b      	ldr	r3, [r5, #16]
 800bede:	b99b      	cbnz	r3, 800bf08 <_vfiprintf_r+0x5c>
 800bee0:	4629      	mov	r1, r5
 800bee2:	4630      	mov	r0, r6
 800bee4:	f000 f93a 	bl	800c15c <__swsetup_r>
 800bee8:	b170      	cbz	r0, 800bf08 <_vfiprintf_r+0x5c>
 800beea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beec:	07dc      	lsls	r4, r3, #31
 800beee:	d504      	bpl.n	800befa <_vfiprintf_r+0x4e>
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bef4:	b01d      	add	sp, #116	; 0x74
 800bef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	0598      	lsls	r0, r3, #22
 800befe:	d4f7      	bmi.n	800bef0 <_vfiprintf_r+0x44>
 800bf00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf02:	f7fe f947 	bl	800a194 <__retarget_lock_release_recursive>
 800bf06:	e7f3      	b.n	800bef0 <_vfiprintf_r+0x44>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0c:	2320      	movs	r3, #32
 800bf0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf12:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf16:	2330      	movs	r3, #48	; 0x30
 800bf18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c0cc <_vfiprintf_r+0x220>
 800bf1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf20:	f04f 0901 	mov.w	r9, #1
 800bf24:	4623      	mov	r3, r4
 800bf26:	469a      	mov	sl, r3
 800bf28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2c:	b10a      	cbz	r2, 800bf32 <_vfiprintf_r+0x86>
 800bf2e:	2a25      	cmp	r2, #37	; 0x25
 800bf30:	d1f9      	bne.n	800bf26 <_vfiprintf_r+0x7a>
 800bf32:	ebba 0b04 	subs.w	fp, sl, r4
 800bf36:	d00b      	beq.n	800bf50 <_vfiprintf_r+0xa4>
 800bf38:	465b      	mov	r3, fp
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7ff ffa1 	bl	800be86 <__sfputs_r>
 800bf44:	3001      	adds	r0, #1
 800bf46:	f000 80a9 	beq.w	800c09c <_vfiprintf_r+0x1f0>
 800bf4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf4c:	445a      	add	r2, fp
 800bf4e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf50:	f89a 3000 	ldrb.w	r3, [sl]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 80a1 	beq.w	800c09c <_vfiprintf_r+0x1f0>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf64:	f10a 0a01 	add.w	sl, sl, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	9307      	str	r3, [sp, #28]
 800bf6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf70:	931a      	str	r3, [sp, #104]	; 0x68
 800bf72:	4654      	mov	r4, sl
 800bf74:	2205      	movs	r2, #5
 800bf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7a:	4854      	ldr	r0, [pc, #336]	; (800c0cc <_vfiprintf_r+0x220>)
 800bf7c:	f7f4 f928 	bl	80001d0 <memchr>
 800bf80:	9a04      	ldr	r2, [sp, #16]
 800bf82:	b9d8      	cbnz	r0, 800bfbc <_vfiprintf_r+0x110>
 800bf84:	06d1      	lsls	r1, r2, #27
 800bf86:	bf44      	itt	mi
 800bf88:	2320      	movmi	r3, #32
 800bf8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf8e:	0713      	lsls	r3, r2, #28
 800bf90:	bf44      	itt	mi
 800bf92:	232b      	movmi	r3, #43	; 0x2b
 800bf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf98:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9e:	d015      	beq.n	800bfcc <_vfiprintf_r+0x120>
 800bfa0:	9a07      	ldr	r2, [sp, #28]
 800bfa2:	4654      	mov	r4, sl
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f04f 0c0a 	mov.w	ip, #10
 800bfaa:	4621      	mov	r1, r4
 800bfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb0:	3b30      	subs	r3, #48	; 0x30
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d94d      	bls.n	800c052 <_vfiprintf_r+0x1a6>
 800bfb6:	b1b0      	cbz	r0, 800bfe6 <_vfiprintf_r+0x13a>
 800bfb8:	9207      	str	r2, [sp, #28]
 800bfba:	e014      	b.n	800bfe6 <_vfiprintf_r+0x13a>
 800bfbc:	eba0 0308 	sub.w	r3, r0, r8
 800bfc0:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	46a2      	mov	sl, r4
 800bfca:	e7d2      	b.n	800bf72 <_vfiprintf_r+0xc6>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	1d19      	adds	r1, r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	9103      	str	r1, [sp, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bfbb      	ittet	lt
 800bfd8:	425b      	neglt	r3, r3
 800bfda:	f042 0202 	orrlt.w	r2, r2, #2
 800bfde:	9307      	strge	r3, [sp, #28]
 800bfe0:	9307      	strlt	r3, [sp, #28]
 800bfe2:	bfb8      	it	lt
 800bfe4:	9204      	strlt	r2, [sp, #16]
 800bfe6:	7823      	ldrb	r3, [r4, #0]
 800bfe8:	2b2e      	cmp	r3, #46	; 0x2e
 800bfea:	d10c      	bne.n	800c006 <_vfiprintf_r+0x15a>
 800bfec:	7863      	ldrb	r3, [r4, #1]
 800bfee:	2b2a      	cmp	r3, #42	; 0x2a
 800bff0:	d134      	bne.n	800c05c <_vfiprintf_r+0x1b0>
 800bff2:	9b03      	ldr	r3, [sp, #12]
 800bff4:	1d1a      	adds	r2, r3, #4
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	9203      	str	r2, [sp, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	bfb8      	it	lt
 800bffe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c002:	3402      	adds	r4, #2
 800c004:	9305      	str	r3, [sp, #20]
 800c006:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c0dc <_vfiprintf_r+0x230>
 800c00a:	7821      	ldrb	r1, [r4, #0]
 800c00c:	2203      	movs	r2, #3
 800c00e:	4650      	mov	r0, sl
 800c010:	f7f4 f8de 	bl	80001d0 <memchr>
 800c014:	b138      	cbz	r0, 800c026 <_vfiprintf_r+0x17a>
 800c016:	9b04      	ldr	r3, [sp, #16]
 800c018:	eba0 000a 	sub.w	r0, r0, sl
 800c01c:	2240      	movs	r2, #64	; 0x40
 800c01e:	4082      	lsls	r2, r0
 800c020:	4313      	orrs	r3, r2
 800c022:	3401      	adds	r4, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c02a:	4829      	ldr	r0, [pc, #164]	; (800c0d0 <_vfiprintf_r+0x224>)
 800c02c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c030:	2206      	movs	r2, #6
 800c032:	f7f4 f8cd 	bl	80001d0 <memchr>
 800c036:	2800      	cmp	r0, #0
 800c038:	d03f      	beq.n	800c0ba <_vfiprintf_r+0x20e>
 800c03a:	4b26      	ldr	r3, [pc, #152]	; (800c0d4 <_vfiprintf_r+0x228>)
 800c03c:	bb1b      	cbnz	r3, 800c086 <_vfiprintf_r+0x1da>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	f023 0307 	bic.w	r3, r3, #7
 800c046:	3308      	adds	r3, #8
 800c048:	9303      	str	r3, [sp, #12]
 800c04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04c:	443b      	add	r3, r7
 800c04e:	9309      	str	r3, [sp, #36]	; 0x24
 800c050:	e768      	b.n	800bf24 <_vfiprintf_r+0x78>
 800c052:	fb0c 3202 	mla	r2, ip, r2, r3
 800c056:	460c      	mov	r4, r1
 800c058:	2001      	movs	r0, #1
 800c05a:	e7a6      	b.n	800bfaa <_vfiprintf_r+0xfe>
 800c05c:	2300      	movs	r3, #0
 800c05e:	3401      	adds	r4, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4619      	mov	r1, r3
 800c064:	f04f 0c0a 	mov.w	ip, #10
 800c068:	4620      	mov	r0, r4
 800c06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06e:	3a30      	subs	r2, #48	; 0x30
 800c070:	2a09      	cmp	r2, #9
 800c072:	d903      	bls.n	800c07c <_vfiprintf_r+0x1d0>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0c6      	beq.n	800c006 <_vfiprintf_r+0x15a>
 800c078:	9105      	str	r1, [sp, #20]
 800c07a:	e7c4      	b.n	800c006 <_vfiprintf_r+0x15a>
 800c07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c080:	4604      	mov	r4, r0
 800c082:	2301      	movs	r3, #1
 800c084:	e7f0      	b.n	800c068 <_vfiprintf_r+0x1bc>
 800c086:	ab03      	add	r3, sp, #12
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	462a      	mov	r2, r5
 800c08c:	4b12      	ldr	r3, [pc, #72]	; (800c0d8 <_vfiprintf_r+0x22c>)
 800c08e:	a904      	add	r1, sp, #16
 800c090:	4630      	mov	r0, r6
 800c092:	f7fd fb9f 	bl	80097d4 <_printf_float>
 800c096:	4607      	mov	r7, r0
 800c098:	1c78      	adds	r0, r7, #1
 800c09a:	d1d6      	bne.n	800c04a <_vfiprintf_r+0x19e>
 800c09c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c09e:	07d9      	lsls	r1, r3, #31
 800c0a0:	d405      	bmi.n	800c0ae <_vfiprintf_r+0x202>
 800c0a2:	89ab      	ldrh	r3, [r5, #12]
 800c0a4:	059a      	lsls	r2, r3, #22
 800c0a6:	d402      	bmi.n	800c0ae <_vfiprintf_r+0x202>
 800c0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0aa:	f7fe f873 	bl	800a194 <__retarget_lock_release_recursive>
 800c0ae:	89ab      	ldrh	r3, [r5, #12]
 800c0b0:	065b      	lsls	r3, r3, #25
 800c0b2:	f53f af1d 	bmi.w	800bef0 <_vfiprintf_r+0x44>
 800c0b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0b8:	e71c      	b.n	800bef4 <_vfiprintf_r+0x48>
 800c0ba:	ab03      	add	r3, sp, #12
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	462a      	mov	r2, r5
 800c0c0:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <_vfiprintf_r+0x22c>)
 800c0c2:	a904      	add	r1, sp, #16
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f7fd fe29 	bl	8009d1c <_printf_i>
 800c0ca:	e7e4      	b.n	800c096 <_vfiprintf_r+0x1ea>
 800c0cc:	0800c561 	.word	0x0800c561
 800c0d0:	0800c56b 	.word	0x0800c56b
 800c0d4:	080097d5 	.word	0x080097d5
 800c0d8:	0800be87 	.word	0x0800be87
 800c0dc:	0800c567 	.word	0x0800c567

0800c0e0 <__swbuf_r>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	460e      	mov	r6, r1
 800c0e4:	4614      	mov	r4, r2
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	b118      	cbz	r0, 800c0f2 <__swbuf_r+0x12>
 800c0ea:	6a03      	ldr	r3, [r0, #32]
 800c0ec:	b90b      	cbnz	r3, 800c0f2 <__swbuf_r+0x12>
 800c0ee:	f7fd ffe3 	bl	800a0b8 <__sinit>
 800c0f2:	69a3      	ldr	r3, [r4, #24]
 800c0f4:	60a3      	str	r3, [r4, #8]
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	071a      	lsls	r2, r3, #28
 800c0fa:	d525      	bpl.n	800c148 <__swbuf_r+0x68>
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	b31b      	cbz	r3, 800c148 <__swbuf_r+0x68>
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	6922      	ldr	r2, [r4, #16]
 800c104:	1a98      	subs	r0, r3, r2
 800c106:	6963      	ldr	r3, [r4, #20]
 800c108:	b2f6      	uxtb	r6, r6
 800c10a:	4283      	cmp	r3, r0
 800c10c:	4637      	mov	r7, r6
 800c10e:	dc04      	bgt.n	800c11a <__swbuf_r+0x3a>
 800c110:	4621      	mov	r1, r4
 800c112:	4628      	mov	r0, r5
 800c114:	f7ff f940 	bl	800b398 <_fflush_r>
 800c118:	b9e0      	cbnz	r0, 800c154 <__swbuf_r+0x74>
 800c11a:	68a3      	ldr	r3, [r4, #8]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	60a3      	str	r3, [r4, #8]
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	6022      	str	r2, [r4, #0]
 800c126:	701e      	strb	r6, [r3, #0]
 800c128:	6962      	ldr	r2, [r4, #20]
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d004      	beq.n	800c13a <__swbuf_r+0x5a>
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	07db      	lsls	r3, r3, #31
 800c134:	d506      	bpl.n	800c144 <__swbuf_r+0x64>
 800c136:	2e0a      	cmp	r6, #10
 800c138:	d104      	bne.n	800c144 <__swbuf_r+0x64>
 800c13a:	4621      	mov	r1, r4
 800c13c:	4628      	mov	r0, r5
 800c13e:	f7ff f92b 	bl	800b398 <_fflush_r>
 800c142:	b938      	cbnz	r0, 800c154 <__swbuf_r+0x74>
 800c144:	4638      	mov	r0, r7
 800c146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f806 	bl	800c15c <__swsetup_r>
 800c150:	2800      	cmp	r0, #0
 800c152:	d0d5      	beq.n	800c100 <__swbuf_r+0x20>
 800c154:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c158:	e7f4      	b.n	800c144 <__swbuf_r+0x64>
	...

0800c15c <__swsetup_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4b2a      	ldr	r3, [pc, #168]	; (800c208 <__swsetup_r+0xac>)
 800c160:	4605      	mov	r5, r0
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	460c      	mov	r4, r1
 800c166:	b118      	cbz	r0, 800c170 <__swsetup_r+0x14>
 800c168:	6a03      	ldr	r3, [r0, #32]
 800c16a:	b90b      	cbnz	r3, 800c170 <__swsetup_r+0x14>
 800c16c:	f7fd ffa4 	bl	800a0b8 <__sinit>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c176:	0718      	lsls	r0, r3, #28
 800c178:	d422      	bmi.n	800c1c0 <__swsetup_r+0x64>
 800c17a:	06d9      	lsls	r1, r3, #27
 800c17c:	d407      	bmi.n	800c18e <__swsetup_r+0x32>
 800c17e:	2309      	movs	r3, #9
 800c180:	602b      	str	r3, [r5, #0]
 800c182:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c18c:	e034      	b.n	800c1f8 <__swsetup_r+0x9c>
 800c18e:	0758      	lsls	r0, r3, #29
 800c190:	d512      	bpl.n	800c1b8 <__swsetup_r+0x5c>
 800c192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c194:	b141      	cbz	r1, 800c1a8 <__swsetup_r+0x4c>
 800c196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c19a:	4299      	cmp	r1, r3
 800c19c:	d002      	beq.n	800c1a4 <__swsetup_r+0x48>
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f7ff fdce 	bl	800bd40 <_free_r>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	6363      	str	r3, [r4, #52]	; 0x34
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6063      	str	r3, [r4, #4]
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f043 0308 	orr.w	r3, r3, #8
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	b94b      	cbnz	r3, 800c1d8 <__swsetup_r+0x7c>
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ce:	d003      	beq.n	800c1d8 <__swsetup_r+0x7c>
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f000 f840 	bl	800c258 <__smakebuf_r>
 800c1d8:	89a0      	ldrh	r0, [r4, #12]
 800c1da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1de:	f010 0301 	ands.w	r3, r0, #1
 800c1e2:	d00a      	beq.n	800c1fa <__swsetup_r+0x9e>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60a3      	str	r3, [r4, #8]
 800c1e8:	6963      	ldr	r3, [r4, #20]
 800c1ea:	425b      	negs	r3, r3
 800c1ec:	61a3      	str	r3, [r4, #24]
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	b943      	cbnz	r3, 800c204 <__swsetup_r+0xa8>
 800c1f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1f6:	d1c4      	bne.n	800c182 <__swsetup_r+0x26>
 800c1f8:	bd38      	pop	{r3, r4, r5, pc}
 800c1fa:	0781      	lsls	r1, r0, #30
 800c1fc:	bf58      	it	pl
 800c1fe:	6963      	ldrpl	r3, [r4, #20]
 800c200:	60a3      	str	r3, [r4, #8]
 800c202:	e7f4      	b.n	800c1ee <__swsetup_r+0x92>
 800c204:	2000      	movs	r0, #0
 800c206:	e7f7      	b.n	800c1f8 <__swsetup_r+0x9c>
 800c208:	20000164 	.word	0x20000164

0800c20c <__swhatbuf_r>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	460c      	mov	r4, r1
 800c210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c214:	2900      	cmp	r1, #0
 800c216:	b096      	sub	sp, #88	; 0x58
 800c218:	4615      	mov	r5, r2
 800c21a:	461e      	mov	r6, r3
 800c21c:	da0d      	bge.n	800c23a <__swhatbuf_r+0x2e>
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c224:	f04f 0100 	mov.w	r1, #0
 800c228:	bf0c      	ite	eq
 800c22a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c22e:	2340      	movne	r3, #64	; 0x40
 800c230:	2000      	movs	r0, #0
 800c232:	6031      	str	r1, [r6, #0]
 800c234:	602b      	str	r3, [r5, #0]
 800c236:	b016      	add	sp, #88	; 0x58
 800c238:	bd70      	pop	{r4, r5, r6, pc}
 800c23a:	466a      	mov	r2, sp
 800c23c:	f000 f848 	bl	800c2d0 <_fstat_r>
 800c240:	2800      	cmp	r0, #0
 800c242:	dbec      	blt.n	800c21e <__swhatbuf_r+0x12>
 800c244:	9901      	ldr	r1, [sp, #4]
 800c246:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c24a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c24e:	4259      	negs	r1, r3
 800c250:	4159      	adcs	r1, r3
 800c252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c256:	e7eb      	b.n	800c230 <__swhatbuf_r+0x24>

0800c258 <__smakebuf_r>:
 800c258:	898b      	ldrh	r3, [r1, #12]
 800c25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c25c:	079d      	lsls	r5, r3, #30
 800c25e:	4606      	mov	r6, r0
 800c260:	460c      	mov	r4, r1
 800c262:	d507      	bpl.n	800c274 <__smakebuf_r+0x1c>
 800c264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	6123      	str	r3, [r4, #16]
 800c26c:	2301      	movs	r3, #1
 800c26e:	6163      	str	r3, [r4, #20]
 800c270:	b002      	add	sp, #8
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	ab01      	add	r3, sp, #4
 800c276:	466a      	mov	r2, sp
 800c278:	f7ff ffc8 	bl	800c20c <__swhatbuf_r>
 800c27c:	9900      	ldr	r1, [sp, #0]
 800c27e:	4605      	mov	r5, r0
 800c280:	4630      	mov	r0, r6
 800c282:	f7fe ff83 	bl	800b18c <_malloc_r>
 800c286:	b948      	cbnz	r0, 800c29c <__smakebuf_r+0x44>
 800c288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28c:	059a      	lsls	r2, r3, #22
 800c28e:	d4ef      	bmi.n	800c270 <__smakebuf_r+0x18>
 800c290:	f023 0303 	bic.w	r3, r3, #3
 800c294:	f043 0302 	orr.w	r3, r3, #2
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	e7e3      	b.n	800c264 <__smakebuf_r+0xc>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	6020      	str	r0, [r4, #0]
 800c2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	9b00      	ldr	r3, [sp, #0]
 800c2a8:	6163      	str	r3, [r4, #20]
 800c2aa:	9b01      	ldr	r3, [sp, #4]
 800c2ac:	6120      	str	r0, [r4, #16]
 800c2ae:	b15b      	cbz	r3, 800c2c8 <__smakebuf_r+0x70>
 800c2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f000 f81d 	bl	800c2f4 <_isatty_r>
 800c2ba:	b128      	cbz	r0, 800c2c8 <__smakebuf_r+0x70>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f023 0303 	bic.w	r3, r3, #3
 800c2c2:	f043 0301 	orr.w	r3, r3, #1
 800c2c6:	81a3      	strh	r3, [r4, #12]
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	431d      	orrs	r5, r3
 800c2cc:	81a5      	strh	r5, [r4, #12]
 800c2ce:	e7cf      	b.n	800c270 <__smakebuf_r+0x18>

0800c2d0 <_fstat_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d07      	ldr	r5, [pc, #28]	; (800c2f0 <_fstat_r+0x20>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	4611      	mov	r1, r2
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	f7f5 facc 	bl	800187a <_fstat>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d102      	bne.n	800c2ec <_fstat_r+0x1c>
 800c2e6:	682b      	ldr	r3, [r5, #0]
 800c2e8:	b103      	cbz	r3, 800c2ec <_fstat_r+0x1c>
 800c2ea:	6023      	str	r3, [r4, #0]
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	bf00      	nop
 800c2f0:	200021a4 	.word	0x200021a4

0800c2f4 <_isatty_r>:
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	4d06      	ldr	r5, [pc, #24]	; (800c310 <_isatty_r+0x1c>)
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	602b      	str	r3, [r5, #0]
 800c300:	f7f5 facb 	bl	800189a <_isatty>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_isatty_r+0x1a>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_isatty_r+0x1a>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	200021a4 	.word	0x200021a4

0800c314 <_raise_r>:
 800c314:	291f      	cmp	r1, #31
 800c316:	b538      	push	{r3, r4, r5, lr}
 800c318:	4604      	mov	r4, r0
 800c31a:	460d      	mov	r5, r1
 800c31c:	d904      	bls.n	800c328 <_raise_r+0x14>
 800c31e:	2316      	movs	r3, #22
 800c320:	6003      	str	r3, [r0, #0]
 800c322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c32a:	b112      	cbz	r2, 800c332 <_raise_r+0x1e>
 800c32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c330:	b94b      	cbnz	r3, 800c346 <_raise_r+0x32>
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f830 	bl	800c398 <_getpid_r>
 800c338:	462a      	mov	r2, r5
 800c33a:	4601      	mov	r1, r0
 800c33c:	4620      	mov	r0, r4
 800c33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c342:	f000 b817 	b.w	800c374 <_kill_r>
 800c346:	2b01      	cmp	r3, #1
 800c348:	d00a      	beq.n	800c360 <_raise_r+0x4c>
 800c34a:	1c59      	adds	r1, r3, #1
 800c34c:	d103      	bne.n	800c356 <_raise_r+0x42>
 800c34e:	2316      	movs	r3, #22
 800c350:	6003      	str	r3, [r0, #0]
 800c352:	2001      	movs	r0, #1
 800c354:	e7e7      	b.n	800c326 <_raise_r+0x12>
 800c356:	2400      	movs	r4, #0
 800c358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c35c:	4628      	mov	r0, r5
 800c35e:	4798      	blx	r3
 800c360:	2000      	movs	r0, #0
 800c362:	e7e0      	b.n	800c326 <_raise_r+0x12>

0800c364 <raise>:
 800c364:	4b02      	ldr	r3, [pc, #8]	; (800c370 <raise+0xc>)
 800c366:	4601      	mov	r1, r0
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	f7ff bfd3 	b.w	800c314 <_raise_r>
 800c36e:	bf00      	nop
 800c370:	20000164 	.word	0x20000164

0800c374 <_kill_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	; (800c394 <_kill_r+0x20>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	4611      	mov	r1, r2
 800c380:	602b      	str	r3, [r5, #0]
 800c382:	f7f5 fa1b 	bl	80017bc <_kill>
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	d102      	bne.n	800c390 <_kill_r+0x1c>
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	b103      	cbz	r3, 800c390 <_kill_r+0x1c>
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	bd38      	pop	{r3, r4, r5, pc}
 800c392:	bf00      	nop
 800c394:	200021a4 	.word	0x200021a4

0800c398 <_getpid_r>:
 800c398:	f7f5 ba08 	b.w	80017ac <_getpid>

0800c39c <_init>:
 800c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39e:	bf00      	nop
 800c3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a2:	bc08      	pop	{r3}
 800c3a4:	469e      	mov	lr, r3
 800c3a6:	4770      	bx	lr

0800c3a8 <_fini>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	bf00      	nop
 800c3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ae:	bc08      	pop	{r3}
 800c3b0:	469e      	mov	lr, r3
 800c3b2:	4770      	bx	lr

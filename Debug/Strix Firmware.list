
Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  0800f260  0800f260  0001f260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fddc  0800fddc  000202d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800fddc  0800fddc  000202d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fddc  0800fddc  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fddc  0800fddc  0001fddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fde0  0800fde0  0001fde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800fde4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002168  200002d4  080100b8  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001a04  2000243c  080100b8  0002243c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017981  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044a5  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efe  00000000  00000000  0003d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a84a  00000000  00000000  0003e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3be  00000000  00000000  00068cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed897  00000000  00000000  00083086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006184  00000000  00000000  00170920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00176aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f248 	.word	0x0800f248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800f248 	.word	0x0800f248

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bd2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6858      	ldr	r0, [r3, #4]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	899b      	ldrh	r3, [r3, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f003 fc6c 	bl	80044cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f003 f857 	bl	8003ca8 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6858      	ldr	r0, [r3, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	899b      	ldrh	r3, [r3, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f003 fc61 	bl	80044cc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000c0a:	2032      	movs	r0, #50	; 0x32
 8000c0c:	f003 f84c 	bl	8003ca8 <HAL_Delay>
	//status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
	//HAL_Delay(50);

	/* Check chip ID */
	uint8_t chipID_accel;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID_accel);
 8000c10:	f107 0316 	add.w	r3, r7, #22
 8000c14:	461a      	mov	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f8dd 	bl	8000dd8 <BMI088_ReadAccRegister>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	4413      	add	r3, r2
 8000c26:	75fb      	strb	r3, [r7, #23]

	if (chipID_accel != 0x1E) {
 8000c28:	7dbb      	ldrb	r3, [r7, #22]
 8000c2a:	2b1e      	cmp	r3, #30
 8000c2c:	d002      	beq.n	8000c34 <BMI088_Init+0x8c>
		status+=50;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	3332      	adds	r3, #50	; 0x32
 8000c32:	75fb      	strb	r3, [r7, #23]
	}
	HAL_Delay(10);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f003 f837 	bl	8003ca8 <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000c3a:	22a8      	movs	r2, #168	; 0xa8
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f944 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f003 f82a 	bl	8003ca8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000c54:	2200      	movs	r2, #0
 8000c56:	2141      	movs	r1, #65	; 0x41
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f937 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4413      	add	r3, r2
 8000c66:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f003 f81d 	bl	8003ca8 <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000c6e:	220a      	movs	r2, #10
 8000c70:	2153      	movs	r1, #83	; 0x53
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f92a 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	4413      	add	r3, r2
 8000c80:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c82:	200a      	movs	r0, #10
 8000c84:	f003 f810 	bl	8003ca8 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000c88:	2204      	movs	r2, #4
 8000c8a:	2158      	movs	r1, #88	; 0x58
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 f91d 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 8000c98:	4413      	add	r3, r2
 8000c9a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f003 f803 	bl	8003ca8 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	217c      	movs	r1, #124	; 0x7c
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 f910 	bl	8000ecc <BMI088_WriteAccRegister>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f002 fff6 	bl	8003ca8 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	217d      	movs	r1, #125	; 0x7d
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f903 	bl	8000ecc <BMI088_WriteAccRegister>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	4413      	add	r3, r2
 8000cce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f002 ffe9 	bl	8003ca8 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	; (8000dd0 <BMI088_Init+0x228>)
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2292      	movs	r2, #146	; 0x92
 8000ce0:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6898      	ldr	r0, [r3, #8]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	89db      	ldrh	r3, [r3, #14]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	f003 fbed 	bl	80044cc <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000cf2:	22b6      	movs	r2, #182	; 0xb6
 8000cf4:	2114      	movs	r1, #20
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 f922 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	4413      	add	r3, r2
 8000d04:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8000d06:	20fa      	movs	r0, #250	; 0xfa
 8000d08:	f002 ffce 	bl	8003ca8 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID_gyr;
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID_gyr);
 8000d0c:	f107 0315 	add.w	r3, r7, #21
 8000d10:	461a      	mov	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f89d 	bl	8000e54 <BMI088_ReadGyrRegister>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	4413      	add	r3, r2
 8000d22:	75fb      	strb	r3, [r7, #23]

	if (chipID_gyr != 0x0F) {
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d002      	beq.n	8000d30 <BMI088_Init+0x188>

		status+=70;
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 8000d2c:	3346      	adds	r3, #70	; 0x46
 8000d2e:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f002 ffb9 	bl	8003ca8 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x00); /* +- 2000 deg/s */
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f000 f900 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	4413      	add	r3, r2
 8000d48:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f002 ffac 	bl	8003ca8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x02); /* ODR = 1000 Hz */
 8000d50:	2202      	movs	r2, #2
 8000d52:	2110      	movs	r1, #16
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f8f3 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	4413      	add	r3, r2
 8000d62:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f002 ff9f 	bl	8003ca8 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	2115      	movs	r1, #21
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f000 f8e6 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f002 ff92 	bl	8003ca8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8000d84:	2201      	movs	r2, #1
 8000d86:	2116      	movs	r1, #22
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f8d9 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	4413      	add	r3, r2
 8000d96:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d98:	200a      	movs	r0, #10
 8000d9a:	f002 ff85 	bl	8003ca8 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2118      	movs	r1, #24
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f8cc 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	4413      	add	r3, r2
 8000db0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f002 ff78 	bl	8003ca8 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to deg/s) */
	imu->gyrConversion = 2000.0f / 32768.0f; /* Datasheet page 39 */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <BMI088_Init+0x22c>)
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2282      	movs	r2, #130	; 0x82
 8000dc2:	769a      	strb	r2, [r3, #26]

	//return status;
	return status;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]

}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	3a6b70a4 	.word	0x3a6b70a4
 8000dd4:	3d7a0000 	.word	0x3d7a0000

08000dd8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	460b      	mov	r3, r1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	753b      	strb	r3, [r7, #20]
 8000df0:	2300      	movs	r3, #0
 8000df2:	757b      	strb	r3, [r7, #21]
 8000df4:	2300      	movs	r3, #0
 8000df6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	f003 fb62 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	f107 0114 	add.w	r1, r7, #20
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f006 ff36 	bl	8007c8c <HAL_SPI_TransmitReceive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	899b      	ldrh	r3, [r3, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f003 fb47 	bl	80044cc <HAL_GPIO_WritePin>

	if (status == 1) {
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8000e44:	7cba      	ldrb	r2, [r7, #18]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	753b      	strb	r3, [r7, #20]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	89db      	ldrh	r3, [r3, #14]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f003 fb26 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0114 	add.w	r1, r7, #20
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f006 fefa 	bl	8007c8c <HAL_SPI_TransmitReceive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6898      	ldr	r0, [r3, #8]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	89db      	ldrh	r3, [r3, #14]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f003 fb0b 	bl	80044cc <HAL_GPIO_WritePin>

	if (status == 1) {
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8000ebc:	7c7a      	ldrb	r2, [r7, #17]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	733b      	strb	r3, [r7, #12]
 8000ee0:	78bb      	ldrb	r3, [r7, #2]
 8000ee2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	899b      	ldrh	r3, [r3, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f003 faec 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f00:	2202      	movs	r2, #2
 8000f02:	f006 fd4e 	bl	80079a2 <HAL_SPI_Transmit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f14:	bf00      	nop
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 f8d8 	bl	80080d0 <HAL_SPI_GetState>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1f7      	bne.n	8000f16 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6858      	ldr	r0, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	899b      	ldrh	r3, [r3, #12]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f003 facb 	bl	80044cc <HAL_GPIO_WritePin>

	return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	78bb      	ldrb	r3, [r7, #2]
 8000f56:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6898      	ldr	r0, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	89db      	ldrh	r3, [r3, #14]
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	f003 fab2 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f107 010c 	add.w	r1, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f74:	2202      	movs	r2, #2
 8000f76:	f006 fd14 	bl	80079a2 <HAL_SPI_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f88:	bf00      	nop
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f007 f89e 	bl	80080d0 <HAL_SPI_GetState>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d1f7      	bne.n	8000f8a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6898      	ldr	r0, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	89db      	ldrh	r3, [r3, #14]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f003 fa91 	bl	80044cc <HAL_GPIO_WritePin>

	return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8000fbc:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <BMI088_ReadAccelerometer+0x10c>)
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6858      	ldr	r0, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	899b      	ldrh	r3, [r3, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f003 fa79 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f107 0208 	add.w	r2, r7, #8
 8000fe2:	f107 0110 	add.w	r1, r7, #16
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2308      	movs	r3, #8
 8000fee:	f006 fe4d 	bl	8007c8c <HAL_SPI_TransmitReceive>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	77bb      	strb	r3, [r7, #30]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6858      	ldr	r0, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	899b      	ldrh	r3, [r3, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	f003 fa5e 	bl	80044cc <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001040:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001078:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	/* copy the raw data to the structure */
	for (uint8_t i = 2; i < 8; i++) {
 800108e:	2302      	movs	r3, #2
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	e00d      	b.n	80010b0 <BMI088_ReadAccelerometer+0xfc>
		imu->acc_data[i] = rxBuf[i];
 8001094:	7ffa      	ldrb	r2, [r7, #31]
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	3220      	adds	r2, #32
 800109a:	443a      	add	r2, r7
 800109c:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	460a      	mov	r2, r1
 80010a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	for (uint8_t i = 2; i < 8; i++) {
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	3301      	adds	r3, #1
 80010ae:	77fb      	strb	r3, [r7, #31]
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	d9ee      	bls.n	8001094 <BMI088_ReadAccelerometer+0xe0>
	}

	return status;
 80010b6:	7fbb      	ldrb	r3, [r7, #30]

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	0800f260 	.word	0x0800f260

080010c4 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80010cc:	4a42      	ldr	r2, [pc, #264]	; (80011d8 <BMI088_ReadGyroscope+0x114>)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d6:	6018      	str	r0, [r3, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	8019      	strh	r1, [r3, #0]
 80010dc:	3302      	adds	r3, #2
 80010de:	0c0a      	lsrs	r2, r1, #16
 80010e0:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6898      	ldr	r0, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	89db      	ldrh	r3, [r3, #14]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	f003 f9ed 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f107 0208 	add.w	r2, r7, #8
 80010fa:	f107 0110 	add.w	r1, r7, #16
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2307      	movs	r3, #7
 8001106:	f006 fdc1 	bl	8007c8c <HAL_SPI_TransmitReceive>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	77bb      	strb	r3, [r7, #30]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6898      	ldr	r0, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	89db      	ldrh	r3, [r3, #14]
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	f003 f9d2 	bl	80044cc <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001158:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001174:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001190:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	/* copy the raw data to the structure */
	for (uint8_t i = 1; i < 7; i++) {
 80011a6:	2301      	movs	r3, #1
 80011a8:	77fb      	strb	r3, [r7, #31]
 80011aa:	e00d      	b.n	80011c8 <BMI088_ReadGyroscope+0x104>
		imu->gyr_data[i] = rxBuf[i];
 80011ac:	7ffa      	ldrb	r2, [r7, #31]
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	3220      	adds	r2, #32
 80011b2:	443a      	add	r2, r7
 80011b4:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	460a      	mov	r2, r1
 80011be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	for (uint8_t i = 1; i < 7; i++) {
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	3301      	adds	r3, #1
 80011c6:	77fb      	strb	r3, [r7, #31]
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d9ee      	bls.n	80011ac <BMI088_ReadGyroscope+0xe8>
	}

	return status;
 80011ce:	7fbb      	ldrb	r3, [r7, #30]

}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800f268 	.word	0x0800f268

080011dc <KX134_Init>:
 * INITIALISATION
 *
 */
uint8_t KX134_Init(KX134 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in structure */
	imu->spiHandle 		= spiHandle;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	601a      	str	r2, [r3, #0]
	imu->csPinBank 		= csPinBank;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	605a      	str	r2, [r3, #4]
	imu->csPin 			= csPin;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	887a      	ldrh	r2, [r7, #2]
 80011fa:	811a      	strh	r2, [r3, #8]

	/* Clear DMA flags */
	imu->reading = 0;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	729a      	strb	r2, [r3, #10]

	uint8_t status = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]

	/* Check chip ID */
	uint8_t chipID_accel;
	status += KX134_ReadRegister(imu, KX_CHIP_ID, &chipID_accel);
 8001206:	f107 0316 	add.w	r3, r7, #22
 800120a:	461a      	mov	r2, r3
 800120c:	2113      	movs	r1, #19
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f86c 	bl	80012ec <KX134_ReadRegister>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	4413      	add	r3, r2
 800121c:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 800121e:	200a      	movs	r0, #10
 8001220:	f002 fd42 	bl	8003ca8 <HAL_Delay>

	/* use the COTR register to test if it works */
	status += KX134_WriteRegister(imu, KX_CNTL_2, 0x40);
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	211c      	movs	r1, #28
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 f8a0 	bl	800136e <KX134_WriteRegister>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	4413      	add	r3, r2
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t cotr;
	status += KX134_ReadRegister(imu, KX_COTR, &cotr);
 8001238:	f107 0315 	add.w	r3, r7, #21
 800123c:	461a      	mov	r2, r3
 800123e:	2112      	movs	r1, #18
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f853 	bl	80012ec <KX134_ReadRegister>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	4413      	add	r3, r2
 800124e:	75fb      	strb	r3, [r7, #23]

	if (cotr != 0xAA) {
 8001250:	7d7b      	ldrb	r3, [r7, #21]
 8001252:	2baa      	cmp	r3, #170	; 0xaa
 8001254:	d002      	beq.n	800125c <KX134_Init+0x80>
		status += 70;
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	3346      	adds	r3, #70	; 0x46
 800125a:	75fb      	strb	r3, [r7, #23]
	}
	HAL_Delay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f002 fd23 	bl	8003ca8 <HAL_Delay>

	/* turn off device to enable changes to configuration */
	status += KX134_WriteRegister(imu, KX_CNTL_1, 0x68); // everything is correct except for bit 7 (1st), which is 0 instead of 1
 8001262:	2268      	movs	r2, #104	; 0x68
 8001264:	211b      	movs	r1, #27
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 f881 	bl	800136e <KX134_WriteRegister>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	4413      	add	r3, r2
 8001274:	75fb      	strb	r3, [r7, #23]

	/* set output data rate to 400Hz, disable IIR filter */
	status += KX134_WriteRegister(imu, KX_ODCNTL, 0x89);
 8001276:	2289      	movs	r2, #137	; 0x89
 8001278:	2121      	movs	r1, #33	; 0x21
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f877 	bl	800136e <KX134_WriteRegister>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	4413      	add	r3, r2
 8001288:	75fb      	strb	r3, [r7, #23]

	/* interrupt control */
	status += KX134_WriteRegister(imu, KX_INC1, 0xA8); // set interrupt to real time non-latched, enable pin 1, active high
 800128a:	22a8      	movs	r2, #168	; 0xa8
 800128c:	2122      	movs	r1, #34	; 0x22
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f86d 	bl	800136e <KX134_WriteRegister>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	4413      	add	r3, r2
 800129c:	75fb      	strb	r3, [r7, #23]

	/* other interrupt control */
	status += KX134_WriteRegister(imu, KX_INC4, 0x10); // enable DRDY interrupt
 800129e:	2210      	movs	r2, #16
 80012a0:	2125      	movs	r1, #37	; 0x25
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f863 	bl	800136e <KX134_WriteRegister>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	4413      	add	r3, r2
 80012b0:	75fb      	strb	r3, [r7, #23]

	/* turn device back on */
	status += KX134_WriteRegister(imu, KX_CNTL_1, 0xE8); // now turn things on, ±16G
 80012b2:	22e8      	movs	r2, #232	; 0xe8
 80012b4:	211b      	movs	r1, #27
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f859 	bl	800136e <KX134_WriteRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	4413      	add	r3, r2
 80012c4:	75fb      	strb	r3, [r7, #23]

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion =  (9.81f / 32768.0f) * 16.0f;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <KX134_Init+0x10c>)
 80012ca:	61da      	str	r2, [r3, #28]

	/* Set accelerometer TX buffer for DMA */
	imu->txBuf[0] = KX_DATA | 0x80;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2288      	movs	r2, #136	; 0x88
 80012d0:	72da      	strb	r2, [r3, #11]


	if (chipID_accel != 0x46) {
 80012d2:	7dbb      	ldrb	r3, [r7, #22]
 80012d4:	2b46      	cmp	r3, #70	; 0x46
 80012d6:	d001      	beq.n	80012dc <KX134_Init+0x100>
		return chipID_accel;
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	e000      	b.n	80012de <KX134_Init+0x102>
	}
	return status;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]

}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	3b9cf5c3 	.word	0x3b9cf5c3

080012ec <KX134_ReadRegister>:
 *
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t KX134_ReadRegister(KX134 *imu, uint8_t regAddr, uint8_t *data) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	460b      	mov	r3, r1
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001306:	2300      	movs	r3, #0
 8001308:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t rxBuf[21];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6858      	ldr	r0, [r3, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	891b      	ldrh	r3, [r3, #8]
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	f003 f8d8 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	f107 0214 	add.w	r2, r7, #20
 8001324:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2303      	movs	r3, #3
 8001330:	f006 fcac 	bl	8007c8c <HAL_SPI_TransmitReceive>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6858      	ldr	r0, [r3, #4]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	891b      	ldrh	r3, [r3, #8]
 800134c:	2201      	movs	r2, #1
 800134e:	4619      	mov	r1, r3
 8001350:	f003 f8bc 	bl	80044cc <HAL_GPIO_WritePin>

	if (status == 1) {
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <KX134_ReadRegister+0x76>
		*data = rxBuf[2];
 800135c:	7dba      	ldrb	r2, [r7, #22]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8001366:	4618      	mov	r0, r3
 8001368:	3730      	adds	r7, #48	; 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <KX134_WriteRegister>:

uint8_t KX134_WriteRegister(KX134 *imu, uint8_t regAddr, uint8_t data) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	70fb      	strb	r3, [r7, #3]
 800137a:	4613      	mov	r3, r2
 800137c:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	733b      	strb	r3, [r7, #12]
 8001382:	78bb      	ldrb	r3, [r7, #2]
 8001384:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6858      	ldr	r0, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	891b      	ldrh	r3, [r3, #8]
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	f003 f89b 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	f107 010c 	add.w	r1, r7, #12
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a2:	2202      	movs	r2, #2
 80013a4:	f006 fafd 	bl	80079a2 <HAL_SPI_Transmit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	73fb      	strb	r3, [r7, #15]
	//wait for the SPI bus to finish being used
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80013b6:	bf00      	nop
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fe87 	bl	80080d0 <HAL_SPI_GetState>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d1f7      	bne.n	80013b8 <KX134_WriteRegister+0x4a>
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6858      	ldr	r0, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	891b      	ldrh	r3, [r3, #8]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f003 f87a 	bl	80044cc <HAL_GPIO_WritePin>

	return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]

}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <KX134_Read>:
/*
 *
 * POLLING
 *
 */
uint8_t KX134_Read(KX134 *imu) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[7] = {(KX_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80013ec:	4a43      	ldr	r2, [pc, #268]	; (80014fc <KX134_Read+0x118>)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f6:	6018      	str	r0, [r3, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	8019      	strh	r1, [r3, #0]
 80013fc:	3302      	adds	r3, #2
 80013fe:	0c0a      	lsrs	r2, r1, #16
 8001400:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6858      	ldr	r0, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	891b      	ldrh	r3, [r3, #8]
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	f003 f85d 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 0208 	add.w	r2, r7, #8
 800141a:	f107 0110 	add.w	r1, r7, #16
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2307      	movs	r3, #7
 8001426:	f006 fc31 	bl	8007c8c <HAL_SPI_TransmitReceive>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	77bb      	strb	r3, [r7, #30]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6858      	ldr	r0, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	891b      	ldrh	r3, [r3, #8]
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f003 f842 	bl	80044cc <HAL_GPIO_WritePin>

	//write data into data array
	for (uint8_t i = 0; i < 6; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
 800144c:	e00e      	b.n	800146c <KX134_Read+0x88>
		imu->data[i] = rxBuf[i+1];
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	3220      	adds	r2, #32
 8001456:	443a      	add	r2, r7
 8001458:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	460a      	mov	r2, r1
 8001462:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for (uint8_t i = 0; i < 6; i++) {
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	3301      	adds	r3, #1
 800146a:	77fb      	strb	r3, [r7, #31]
 800146c:	7ffb      	ldrb	r3, [r7, #31]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d9ed      	bls.n	800144e <KX134_Read+0x6a>
	}

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8001472:	7abb      	ldrb	r3, [r7, #10]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	7a7b      	ldrb	r3, [r7, #9]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8001480:	7b3b      	ldrb	r3, [r7, #12]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7b7b      	ldrb	r3, [r7, #13]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	ed93 7a07 	vldr	s14, [r3, #28]
 80014a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->acc_mps2[1] = imu->accConversion * accY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	ed93 7a07 	vldr	s14, [r3, #28]
 80014be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80014da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	return status;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0800f270 	.word	0x0800f270

08001500 <LIS3MDL_Init>:
 * Setup
 *
 */
uint8_t LIS3MDL_Init(LIS3MDL *mag,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	807b      	strh	r3, [r7, #2]

	/* enter values into the structure */
	mag->spiHandle = spiHandle;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	601a      	str	r2, [r3, #0]
	mag->csPin = csPin;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	811a      	strh	r2, [r3, #8]
	mag->csPinBank = csPinBank;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]

	/* define a status for function success */
	uint8_t status = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]

	/* check the device id */
	uint8_t device_id;
	status += LIS3MDL_ReadRegister(mag, LIS3MDL_ID, &device_id);
 8001524:	f107 0316 	add.w	r3, r7, #22
 8001528:	461a      	mov	r2, r3
 800152a:	210f      	movs	r1, #15
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f82d 	bl	800158c <LIS3MDL_ReadRegister>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	4413      	add	r3, r2
 800153a:	75fb      	strb	r3, [r7, #23]

	if (device_id != 0x3D) {
 800153c:	7dbb      	ldrb	r3, [r7, #22]
 800153e:	2b3d      	cmp	r3, #61	; 0x3d
 8001540:	d001      	beq.n	8001546 <LIS3MDL_Init+0x46>
		return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e01e      	b.n	8001584 <LIS3MDL_Init+0x84>
	}

	/* set the first control register; x and y axes -> high performance; ODR -> 80Hz */
	status += LIS3MDL_WriteRegister(mag, LIS3MDL_CTRL1, 0b01011100);
 8001546:	225c      	movs	r2, #92	; 0x5c
 8001548:	2120      	movs	r1, #32
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f85a 	bl	8001604 <LIS3MDL_WriteRegister>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	4413      	add	r3, r2
 8001558:	75fb      	strb	r3, [r7, #23]

	/* set the second control register; ±4 gauss */
	status += LIS3MDL_WriteRegister(mag, LIS3MDL_CTRL2, 0x00);
 800155a:	2200      	movs	r2, #0
 800155c:	2121      	movs	r1, #33	; 0x21
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f850 	bl	8001604 <LIS3MDL_WriteRegister>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	4413      	add	r3, r2
 800156c:	75fb      	strb	r3, [r7, #23]

	/* set the third control register; disable low power mode; 4-wire SPI; single conversion mode */
	status += LIS3MDL_WriteRegister(mag, LIS3MDL_CTRL3, 0x01);
 800156e:	2201      	movs	r2, #1
 8001570:	2122      	movs	r1, #34	; 0x22
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f846 	bl	8001604 <LIS3MDL_WriteRegister>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	4413      	add	r3, r2
 8001580:	75fb      	strb	r3, [r7, #23]

	return status;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <LIS3MDL_ReadRegister>:

/*
 * Low-level reading and writing registers
 *
 */
uint8_t LIS3MDL_ReadRegister(LIS3MDL *mag, uint8_t regAddr, uint8_t *data) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	460b      	mov	r3, r1
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80 , 0x00};
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	753b      	strb	r3, [r7, #20]
 80015a4:	2300      	movs	r3, #0
 80015a6:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(mag->csPinBank, mag->csPin, GPIO_PIN_RESET);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6858      	ldr	r0, [r3, #4]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	891b      	ldrh	r3, [r3, #8]
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	f002 ff8a 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(mag->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	f107 0114 	add.w	r1, r7, #20
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2302      	movs	r3, #2
 80015cc:	f006 fb5e 	bl	8007c8c <HAL_SPI_TransmitReceive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(mag->csPinBank, mag->csPin, GPIO_PIN_SET);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6858      	ldr	r0, [r3, #4]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	891b      	ldrh	r3, [r3, #8]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	f002 ff6f 	bl	80044cc <HAL_GPIO_WritePin>

	if (status == 1) {
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <LIS3MDL_ReadRegister+0x6e>
		*data = rxBuf[2];
 80015f4:	7cba      	ldrb	r2, [r7, #18]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <LIS3MDL_WriteRegister>:


uint8_t LIS3MDL_WriteRegister(LIS3MDL *mag, uint8_t regAddr, uint8_t data) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
 8001610:	4613      	mov	r3, r2
 8001612:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	733b      	strb	r3, [r7, #12]
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(mag->csPinBank, mag->csPin, GPIO_PIN_RESET);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6858      	ldr	r0, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	891b      	ldrh	r3, [r3, #8]
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	f002 ff50 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(mag->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	f107 010c 	add.w	r1, r7, #12
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001638:	2202      	movs	r2, #2
 800163a:	f006 f9b2 	bl	80079a2 <HAL_SPI_Transmit>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(mag->spiHandle) != HAL_SPI_STATE_READY);
 800164c:	bf00      	nop
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fd3c 	bl	80080d0 <HAL_SPI_GetState>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d1f7      	bne.n	800164e <LIS3MDL_WriteRegister+0x4a>
	HAL_GPIO_WritePin(mag->csPinBank, mag->csPin, GPIO_PIN_SET);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6858      	ldr	r0, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	891b      	ldrh	r3, [r3, #8]
 8001666:	2201      	movs	r2, #1
 8001668:	4619      	mov	r1, r3
 800166a:	f002 ff2f 	bl	80044cc <HAL_GPIO_WritePin>

	return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <LIS3MDL_DataReady>:
/*
 *
 * POLLING
 *
 */
uint8_t LIS3MDL_DataReady(LIS3MDL *mag) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

	/* read the status register */
	uint8_t status;
	uint8_t status_register;

	status = LIS3MDL_ReadRegister(mag, LIS3MDL_STATUS, &status_register);
 8001680:	f107 030e 	add.w	r3, r7, #14
 8001684:	461a      	mov	r2, r3
 8001686:	2127      	movs	r1, #39	; 0x27
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff7f 	bl	800158c <LIS3MDL_ReadRegister>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]

	if ((status_register | 0xF7) == 0xFF) {
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	f063 0308 	orn	r3, r3, #8
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d101      	bne.n	80016a2 <LIS3MDL_DataReady+0x2a>
		return 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <LIS3MDL_DataReady+0x2c>
	}

	return status;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <LIS3MDL_Read>:

uint8_t LIS3MDL_Read(LIS3MDL *mag) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]

	/* check data availability */
	if(LIS3MDL_DataReady(mag) == 0) {
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffdf 	bl	8001678 <LIS3MDL_DataReady>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <LIS3MDL_Read+0x18>
		return 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e081      	b.n	80017c8 <LIS3MDL_Read+0x11c>
	}

	/* buffers for burst reading the six data registers */
	uint8_t txBuf[7] = {(LIS3MDL_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80016c4:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <LIS3MDL_Read+0x124>)
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ce:	6018      	str	r0, [r3, #0]
 80016d0:	3304      	adds	r3, #4
 80016d2:	8019      	strh	r1, [r3, #0]
 80016d4:	3302      	adds	r3, #2
 80016d6:	0c0a      	lsrs	r2, r1, #16
 80016d8:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	/* use the buffers to SPI read */
	HAL_GPIO_WritePin(mag->csPinBank, mag->csPin, GPIO_PIN_RESET);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6858      	ldr	r0, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	f002 fef1 	bl	80044cc <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(mag->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f107 0208 	add.w	r2, r7, #8
 80016f2:	f107 0110 	add.w	r1, r7, #16
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2307      	movs	r3, #7
 80016fe:	f006 fac5 	bl	8007c8c <HAL_SPI_TransmitReceive>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	77bb      	strb	r3, [r7, #30]
	HAL_GPIO_WritePin(mag->csPinBank, mag->csPin, GPIO_PIN_SET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6858      	ldr	r0, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	891b      	ldrh	r3, [r3, #8]
 8001718:	2201      	movs	r2, #1
 800171a:	4619      	mov	r1, r3
 800171c:	f002 fed6 	bl	80044cc <HAL_GPIO_WritePin>

	//write data into data array
	for (uint8_t i = 0; i < 6; i++) {
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
 8001724:	e00d      	b.n	8001742 <LIS3MDL_Read+0x96>
		mag->data[i] = rxBuf[i+1];
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	7ffb      	ldrb	r3, [r7, #31]
 800172c:	3220      	adds	r2, #32
 800172e:	443a      	add	r2, r7
 8001730:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	460a      	mov	r2, r1
 800173a:	761a      	strb	r2, [r3, #24]
	for (uint8_t i = 0; i < 6; i++) {
 800173c:	7ffb      	ldrb	r3, [r7, #31]
 800173e:	3301      	adds	r3, #1
 8001740:	77fb      	strb	r3, [r7, #31]
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b05      	cmp	r3, #5
 8001746:	d9ee      	bls.n	8001726 <LIS3MDL_Read+0x7a>
	}

	/* get the raw data */
	uint16_t x_gauss = (rxBuf[2] << 8) + rxBuf[1];
 8001748:	7abb      	ldrb	r3, [r7, #10]
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	7a7b      	ldrb	r3, [r7, #9]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	83bb      	strh	r3, [r7, #28]
	uint16_t y_gauss = (rxBuf[4] << 8) + rxBuf[3];
 8001758:	7b3b      	ldrb	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b29a      	uxth	r2, r3
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4413      	add	r3, r2
 8001766:	837b      	strh	r3, [r7, #26]
	uint16_t z_gauss = (rxBuf[6] << 8) + rxBuf[5];
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	b29b      	uxth	r3, r3
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b29a      	uxth	r2, r3
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	833b      	strh	r3, [r7, #24]

	/* use conversion value specified for ±4 gauss on datasheet pg. 4 */
	mag->mag[0] = x_gauss/6842;
 8001778:	8bbb      	ldrh	r3, [r7, #28]
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <LIS3MDL_Read+0x128>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0adb      	lsrs	r3, r3, #11
 8001782:	b29b      	uxth	r3, r3
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	edc3 7a03 	vstr	s15, [r3, #12]
	mag->mag[1] = y_gauss/6842;
 8001792:	8b7b      	ldrh	r3, [r7, #26]
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <LIS3MDL_Read+0x128>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0adb      	lsrs	r3, r3, #11
 800179c:	b29b      	uxth	r3, r3
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edc3 7a04 	vstr	s15, [r3, #16]
	mag->mag[2] = z_gauss/6842;
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <LIS3MDL_Read+0x128>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0adb      	lsrs	r3, r3, #11
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edc3 7a05 	vstr	s15, [r3, #20]

	/* return the status of the SPI operation, 1 for success */
	return status;
 80017c6:	7fbb      	ldrb	r3, [r7, #30]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	0800f278 	.word	0x0800f278
 80017d4:	4ca0bd2d 	.word	0x4ca0bd2d

080017d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <MX_GPIO_Init+0x1a4>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a62      	ldr	r2, [pc, #392]	; (800197c <MX_GPIO_Init+0x1a4>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <MX_GPIO_Init+0x1a4>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a5c      	ldr	r2, [pc, #368]	; (800197c <MX_GPIO_Init+0x1a4>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b5a      	ldr	r3, [pc, #360]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a56      	ldr	r2, [pc, #344]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b54      	ldr	r3, [pc, #336]	; (800197c <MX_GPIO_Init+0x1a4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a50      	ldr	r2, [pc, #320]	; (800197c <MX_GPIO_Init+0x1a4>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a4a      	ldr	r2, [pc, #296]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <MX_GPIO_Init+0x1a4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a44      	ldr	r2, [pc, #272]	; (800197c <MX_GPIO_Init+0x1a4>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <MX_GPIO_Init+0x1a4>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|BMI088_Gyro_Int_Pin
 800187e:	2200      	movs	r2, #0
 8001880:	f24c 1144 	movw	r1, #49476	; 0xc144
 8001884:	483e      	ldr	r0, [pc, #248]	; (8001980 <MX_GPIO_Init+0x1a8>)
 8001886:	f002 fe21 	bl	80044cc <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin|Pyro_E_Trigger_Pin
 800188a:	2200      	movs	r2, #0
 800188c:	f24b 3181 	movw	r1, #45953	; 0xb381
 8001890:	483c      	ldr	r0, [pc, #240]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001892:	f002 fe1b 	bl	80044cc <HAL_GPIO_WritePin>
                          |Pyro_F_Trigger_Pin|Buzzer_Pin|BMP388_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8001896:	2200      	movs	r2, #0
 8001898:	f647 4104 	movw	r1, #31748	; 0x7c04
 800189c:	483a      	ldr	r0, [pc, #232]	; (8001988 <MX_GPIO_Init+0x1b0>)
 800189e:	f002 fe15 	bl	80044cc <HAL_GPIO_WritePin>
                          |Status_LED_Pin|KX134_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS3MDL_NCS_GPIO_Port, LIS3MDL_NCS_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f002 fe0e 	bl	80044cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|BMI088_Gyro_Int_Pin
 80018b0:	f24c 1344 	movw	r3, #49476	; 0xc144
 80018b4:	61fb      	str	r3, [r7, #28]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	482d      	ldr	r0, [pc, #180]	; (8001980 <MX_GPIO_Init+0x1a8>)
 80018ca:	f002 fb61 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin|Pyro_E_Trigger_Pin
 80018ce:	f24b 3381 	movw	r3, #45953	; 0xb381
 80018d2:	61fb      	str	r3, [r7, #28]
                          |Pyro_F_Trigger_Pin|Buzzer_Pin|BMP388_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4827      	ldr	r0, [pc, #156]	; (8001984 <MX_GPIO_Init+0x1ac>)
 80018e8:	f002 fb52 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 80018ec:	f647 4304 	movw	r3, #31748	; 0x7c04
 80018f0:	61fb      	str	r3, [r7, #28]
                          |Status_LED_Pin|KX134_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4820      	ldr	r0, [pc, #128]	; (8001988 <MX_GPIO_Init+0x1b0>)
 8001906:	f002 fb43 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIS3MDL_NCS_Pin;
 800190a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LIS3MDL_NCS_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f002 fb33 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LIS3MDL_Int_Pin|KX134_Int_Pin;
 800192a:	2303      	movs	r3, #3
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4812      	ldr	r0, [pc, #72]	; (8001988 <MX_GPIO_Init+0x1b0>)
 800193e:	f002 fb27 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BMI088_Accel_NCS_Pin|BMI088_Accel_Int_Pin;
 8001942:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <MX_GPIO_Init+0x1a8>)
 8001958:	f002 fb1a 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin;
 800195c:	2302      	movs	r3, #2
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BMP388_Int_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_GPIO_Init+0x1ac>)
 8001970:	f002 fb0e 	bl	8003f90 <HAL_GPIO_Init>

}
 8001974:	bf00      	nop
 8001976:	3730      	adds	r7, #48	; 0x30
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400
 8001984:	48001000 	.word	0x48001000
 8001988:	48000c00 	.word	0x48000c00

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001990:	b0a7      	sub	sp, #156	; 0x9c
 8001992:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001994:	f002 f913 	bl	8003bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001998:	f001 fa00 	bl	8002d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f7ff ff1c 	bl	80017d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80019a0:	f001 fec2 	bl	8003728 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80019a4:	f009 ff5a 	bl	800b85c <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 80019a8:	f001 fefc 	bl	80037a4 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 80019ac:	f001 fa5c 	bl	8002e68 <MX_QUADSPI_Init>
   * SEND STARTING COMMUNICATION TO LAPTOP
   *
   *
   */

  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Waiting for connection..."));
 80019b0:	495d      	ldr	r1, [pc, #372]	; (8001b28 <main+0x19c>)
 80019b2:	485e      	ldr	r0, [pc, #376]	; (8001b2c <main+0x1a0>)
 80019b4:	f00b fa2a 	bl	800ce0c <siprintf>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	485b      	ldr	r0, [pc, #364]	; (8001b2c <main+0x1a0>)
 80019c0:	f00a f820 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(4000); //wait ten seconds so user has time to connect serial port viewer
 80019c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80019c8:	f002 f96e 	bl	8003ca8 <HAL_Delay>

  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n# ------------------------------ \n#\n"));
 80019cc:	4958      	ldr	r1, [pc, #352]	; (8001b30 <main+0x1a4>)
 80019ce:	4857      	ldr	r0, [pc, #348]	; (8001b2c <main+0x1a0>)
 80019d0:	f00b fa1c 	bl	800ce0c <siprintf>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	4854      	ldr	r0, [pc, #336]	; (8001b2c <main+0x1a0>)
 80019dc:	f00a f812 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1); //this is a shitty fucking solution but whatever I'm not getting paid
 80019e0:	2001      	movs	r0, #1
 80019e2:	f002 f961 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# StrixFlight v0.0\n#\t\t\tRunning on Strix v3.0 \n#\n#\n"));
 80019e6:	4953      	ldr	r1, [pc, #332]	; (8001b34 <main+0x1a8>)
 80019e8:	4850      	ldr	r0, [pc, #320]	; (8001b2c <main+0x1a0>)
 80019ea:	f00b fa0f 	bl	800ce0c <siprintf>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	484d      	ldr	r0, [pc, #308]	; (8001b2c <main+0x1a0>)
 80019f6:	f00a f805 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f002 f954 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# ------------------------------ \n# Initializing sensors...\n"));
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <main+0x1ac>)
 8001a02:	484a      	ldr	r0, [pc, #296]	; (8001b2c <main+0x1a0>)
 8001a04:	f00b fa02 	bl	800ce0c <siprintf>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4847      	ldr	r0, [pc, #284]	; (8001b2c <main+0x1a0>)
 8001a10:	f009 fff8 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f002 f947 	bl	8003ca8 <HAL_Delay>
  /*
   * devices that use hspi1
   */

  /* Initialize BMI088 */
  uint8_t bmi_status = BMI088_Init(&bmi088, &hspi1, BMI088_Accel_NCS_GPIO_Port, BMI088_Accel_NCS_Pin, BMI088_Gyro_NCS_GPIO_Port, BMI088_Gyro_NCS_Pin);
 8001a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <main+0x1b0>)
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	4a45      	ldr	r2, [pc, #276]	; (8001b3c <main+0x1b0>)
 8001a28:	4945      	ldr	r1, [pc, #276]	; (8001b40 <main+0x1b4>)
 8001a2a:	4846      	ldr	r0, [pc, #280]	; (8001b44 <main+0x1b8>)
 8001a2c:	f7ff f8bc 	bl	8000ba8 <BMI088_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tStatus of BMI088: %i\n", bmi_status));
 8001a36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4942      	ldr	r1, [pc, #264]	; (8001b48 <main+0x1bc>)
 8001a3e:	483b      	ldr	r0, [pc, #236]	; (8001b2c <main+0x1a0>)
 8001a40:	f00b f9e4 	bl	800ce0c <siprintf>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4838      	ldr	r0, [pc, #224]	; (8001b2c <main+0x1a0>)
 8001a4c:	f009 ffda 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f002 f929 	bl	8003ca8 <HAL_Delay>

  /*
   * devices that use hspi3
   */

  uint8_t kx_status = KX134_Init(&kx134, &hspi3, KX134_NCS_GPIO_Port, KX134_NCS_Pin);
 8001a56:	2304      	movs	r3, #4
 8001a58:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <main+0x1c0>)
 8001a5a:	493d      	ldr	r1, [pc, #244]	; (8001b50 <main+0x1c4>)
 8001a5c:	483d      	ldr	r0, [pc, #244]	; (8001b54 <main+0x1c8>)
 8001a5e:	f7ff fbbd 	bl	80011dc <KX134_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tStatus of KX134: %i\n", kx_status));
 8001a68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	493a      	ldr	r1, [pc, #232]	; (8001b58 <main+0x1cc>)
 8001a70:	482e      	ldr	r0, [pc, #184]	; (8001b2c <main+0x1a0>)
 8001a72:	f00b f9cb 	bl	800ce0c <siprintf>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	482b      	ldr	r0, [pc, #172]	; (8001b2c <main+0x1a0>)
 8001a7e:	f009 ffc1 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f002 f910 	bl	8003ca8 <HAL_Delay>
  /* Initialize LIS3MDL */
  uint8_t lis3mdl_status = LIS3MDL_Init(&lis3mdl, &hspi3, LIS3MDL_NCS_GPIO_Port, LIS3MDL_NCS_Pin);
 8001a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a90:	492f      	ldr	r1, [pc, #188]	; (8001b50 <main+0x1c4>)
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <main+0x1d0>)
 8001a94:	f7ff fd34 	bl	8001500 <LIS3MDL_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tStatus of LIS3MDL: %i\n", lis3mdl_status));
 8001a9e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	492e      	ldr	r1, [pc, #184]	; (8001b60 <main+0x1d4>)
 8001aa6:	4821      	ldr	r0, [pc, #132]	; (8001b2c <main+0x1a0>)
 8001aa8:	f00b f9b0 	bl	800ce0c <siprintf>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481e      	ldr	r0, [pc, #120]	; (8001b2c <main+0x1a0>)
 8001ab4:	f009 ffa6 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f002 f8f5 	bl	8003ca8 <HAL_Delay>


  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# Finished Sensor Initialization\n"));
 8001abe:	4929      	ldr	r1, [pc, #164]	; (8001b64 <main+0x1d8>)
 8001ac0:	481a      	ldr	r0, [pc, #104]	; (8001b2c <main+0x1a0>)
 8001ac2:	f00b f9a3 	bl	800ce0c <siprintf>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	4817      	ldr	r0, [pc, #92]	; (8001b2c <main+0x1a0>)
 8001ace:	f009 ff99 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f002 f8e8 	bl	8003ca8 <HAL_Delay>
  /*
   *
   * QSPI Memory Status
   *
   */
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# Reading Status from Flash Memory\n"));
 8001ad8:	4923      	ldr	r1, [pc, #140]	; (8001b68 <main+0x1dc>)
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <main+0x1a0>)
 8001adc:	f00b f996 	bl	800ce0c <siprintf>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4811      	ldr	r0, [pc, #68]	; (8001b2c <main+0x1a0>)
 8001ae8:	f009 ff8c 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f002 f8db 	bl	8003ca8 <HAL_Delay>
  if (CSP_QUADSPI_Init() != HAL_OK) {
 8001af2:	f001 fa89 	bl	8003008 <CSP_QUADSPI_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00c      	beq.n	8001b16 <main+0x18a>
	  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tError Configuring QSPI Flash Chip:\n#\t\t\tW25Q128JVSIQ\n#\n"));
 8001afc:	491b      	ldr	r1, [pc, #108]	; (8001b6c <main+0x1e0>)
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <main+0x1a0>)
 8001b00:	f00b f984 	bl	800ce0c <siprintf>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4808      	ldr	r0, [pc, #32]	; (8001b2c <main+0x1a0>)
 8001b0c:	f009 ff7a 	bl	800ba04 <CDC_Transmit_FS>
	  HAL_Delay(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f002 f8c9 	bl	8003ca8 <HAL_Delay>
  }

  //get 16 bytes, which hold configuration information
  CSP_QSPI_Read(flashReadBuffer, DATA_CONFIG_LOCATION, 16);
 8001b16:	2210      	movs	r2, #16
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4815      	ldr	r0, [pc, #84]	; (8001b70 <main+0x1e4>)
 8001b1c:	f001 fdae 	bl	800367c <CSP_QSPI_Read>

  //calculate the number of recordings
  uint8_t l = 7;
 8001b20:	2307      	movs	r3, #7
 8001b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  while (flashReadBuffer[0] >>= 1) { --l; }
 8001b26:	e02a      	b.n	8001b7e <main+0x1f2>
 8001b28:	0800f280 	.word	0x0800f280
 8001b2c:	200002f0 	.word	0x200002f0
 8001b30:	0800f29c 	.word	0x0800f29c
 8001b34:	0800f2c4 	.word	0x0800f2c4
 8001b38:	0800f2f8 	.word	0x0800f2f8
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	20000614 	.word	0x20000614
 8001b44:	200004d8 	.word	0x200004d8
 8001b48:	0800f338 	.word	0x0800f338
 8001b4c:	48000c00 	.word	0x48000c00
 8001b50:	20000678 	.word	0x20000678
 8001b54:	20000598 	.word	0x20000598
 8001b58:	0800f354 	.word	0x0800f354
 8001b5c:	20000578 	.word	0x20000578
 8001b60:	0800f36c 	.word	0x0800f36c
 8001b64:	0800f388 	.word	0x0800f388
 8001b68:	0800f3ac 	.word	0x0800f3ac
 8001b6c:	0800f3d0 	.word	0x0800f3d0
 8001b70:	20000478 	.word	0x20000478
 8001b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001b7e:	4bb3      	ldr	r3, [pc, #716]	; (8001e4c <main+0x4c0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4bb1      	ldr	r3, [pc, #708]	; (8001e4c <main+0x4c0>)
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	4bb0      	ldr	r3, [pc, #704]	; (8001e4c <main+0x4c0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <main+0x1e8>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tNumber of Recordings: %i out of 7 possible\n", l));
 8001b92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b96:	461a      	mov	r2, r3
 8001b98:	49ad      	ldr	r1, [pc, #692]	; (8001e50 <main+0x4c4>)
 8001b9a:	48ae      	ldr	r0, [pc, #696]	; (8001e54 <main+0x4c8>)
 8001b9c:	f00b f936 	bl	800ce0c <siprintf>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	48ab      	ldr	r0, [pc, #684]	; (8001e54 <main+0x4c8>)
 8001ba8:	f009 ff2c 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f002 f87b 	bl	8003ca8 <HAL_Delay>
  if (flashReadBuffer[0] > 0x4) {
 8001bb2:	4ba6      	ldr	r3, [pc, #664]	; (8001e4c <main+0x4c0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d905      	bls.n	8001bc6 <main+0x23a>
	  HAL_GPIO_WritePin(Continuity_LED_E_GPIO_Port, Continuity_LED_E_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc0:	48a5      	ldr	r0, [pc, #660]	; (8001e58 <main+0x4cc>)
 8001bc2:	f002 fc83 	bl	80044cc <HAL_GPIO_WritePin>
  }

  /*
   * TELL THE USER HOW TO COMMUNICATE
   */
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\n#\t1 to test USB functionality\n"));
 8001bc6:	49a5      	ldr	r1, [pc, #660]	; (8001e5c <main+0x4d0>)
 8001bc8:	48a2      	ldr	r0, [pc, #648]	; (8001e54 <main+0x4c8>)
 8001bca:	f00b f91f 	bl	800ce0c <siprintf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	489f      	ldr	r0, [pc, #636]	; (8001e54 <main+0x4c8>)
 8001bd6:	f009 ff15 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f002 f864 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t2 to access a recording\n"));
 8001be0:	499f      	ldr	r1, [pc, #636]	; (8001e60 <main+0x4d4>)
 8001be2:	489c      	ldr	r0, [pc, #624]	; (8001e54 <main+0x4c8>)
 8001be4:	f00b f912 	bl	800ce0c <siprintf>
 8001be8:	4603      	mov	r3, r0
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	4899      	ldr	r0, [pc, #612]	; (8001e54 <main+0x4c8>)
 8001bf0:	f009 ff08 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f002 f857 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t3 to delete data (confirmation required)\n"));
 8001bfa:	499a      	ldr	r1, [pc, #616]	; (8001e64 <main+0x4d8>)
 8001bfc:	4895      	ldr	r0, [pc, #596]	; (8001e54 <main+0x4c8>)
 8001bfe:	f00b f905 	bl	800ce0c <siprintf>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	4892      	ldr	r0, [pc, #584]	; (8001e54 <main+0x4c8>)
 8001c0a:	f009 fefb 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f002 f84a 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t4 to toggle live sensor data reporting\n"));
 8001c14:	4994      	ldr	r1, [pc, #592]	; (8001e68 <main+0x4dc>)
 8001c16:	488f      	ldr	r0, [pc, #572]	; (8001e54 <main+0x4c8>)
 8001c18:	f00b f8f8 	bl	800ce0c <siprintf>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	488c      	ldr	r0, [pc, #560]	; (8001e54 <main+0x4c8>)
 8001c24:	f009 feee 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f002 f83d 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t5 to test writing to the flash memory\n"));
 8001c2e:	498f      	ldr	r1, [pc, #572]	; (8001e6c <main+0x4e0>)
 8001c30:	4888      	ldr	r0, [pc, #544]	; (8001e54 <main+0x4c8>)
 8001c32:	f00b f8eb 	bl	800ce0c <siprintf>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4885      	ldr	r0, [pc, #532]	; (8001e54 <main+0x4c8>)
 8001c3e:	f009 fee1 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f002 f830 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t6 to read the cofiguration bytes back\n"));
 8001c48:	4989      	ldr	r1, [pc, #548]	; (8001e70 <main+0x4e4>)
 8001c4a:	4882      	ldr	r0, [pc, #520]	; (8001e54 <main+0x4c8>)
 8001c4c:	f00b f8de 	bl	800ce0c <siprintf>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4619      	mov	r1, r3
 8001c56:	487f      	ldr	r0, [pc, #508]	; (8001e54 <main+0x4c8>)
 8001c58:	f009 fed4 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f002 f823 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t7 to write one data set to 256 in mem\n"));
 8001c62:	4984      	ldr	r1, [pc, #528]	; (8001e74 <main+0x4e8>)
 8001c64:	487b      	ldr	r0, [pc, #492]	; (8001e54 <main+0x4c8>)
 8001c66:	f00b f8d1 	bl	800ce0c <siprintf>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4878      	ldr	r0, [pc, #480]	; (8001e54 <main+0x4c8>)
 8001c72:	f009 fec7 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f002 f816 	bl	8003ca8 <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t8 to clear the first sector\n#\n"));
 8001c7c:	497e      	ldr	r1, [pc, #504]	; (8001e78 <main+0x4ec>)
 8001c7e:	4875      	ldr	r0, [pc, #468]	; (8001e54 <main+0x4c8>)
 8001c80:	f00b f8c4 	bl	800ce0c <siprintf>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4872      	ldr	r0, [pc, #456]	; (8001e54 <main+0x4c8>)
 8001c8c:	f009 feba 	bl	800ba04 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f002 f809 	bl	8003ca8 <HAL_Delay>

  //set the usbStatus to 0 to confirm nothing has been requested yet
  usbStatus = 0;
 8001c96:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <main+0x4f0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  //set the ledTimeout to 500ms for nominal state
  ledTimeout = 500;
 8001c9c:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <main+0x4f4>)
 8001c9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ca2:	801a      	strh	r2, [r3, #0]
  //enable the buzzer
  buzzerEnable = 1;
 8001ca4:	4b77      	ldr	r3, [pc, #476]	; (8001e84 <main+0x4f8>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
  //set the writeHead
  writeHead = MEMORY_SECTOR_SIZE + flashReadBuffer[0]*DATA_RECORDING_LENGTH;
 8001caa:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <main+0x4c0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	059b      	lsls	r3, r3, #22
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b74      	ldr	r3, [pc, #464]	; (8001e88 <main+0x4fc>)
 8001cb8:	601a      	str	r2, [r3, #0]
  //set the data recording end
  writeHeadEnd = MEMORY_SECTOR_SIZE + (flashReadBuffer[0]+1)*DATA_RECORDING_LENGTH;
 8001cba:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <main+0x4c0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	059b      	lsls	r3, r3, #22
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <main+0x500>)
 8001cca:	601a      	str	r2, [r3, #0]
  //set recordingData to 0 bc we haven't detected a launch yet
  recordingData = 0;
 8001ccc:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <main+0x504>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
  //set the newData variable to 0 to prepare for recording data
  newData = 0;
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <main+0x508>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
	 * 	4 = deleting flash chip
	 *
	 */

	//check if there are any commands from the user
	if (rxBuffer[0] != 0) {
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <main+0x50c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8507 	beq.w	80026f0 <main+0xd64>
		if (usbStatus == 0 || usbStatus == 3) {
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <main+0x4f0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <main+0x368>
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <main+0x4f0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	f040 8394 	bne.w	800241c <main+0xa90>
			//check what was sent
			if (rxBuffer[0] == '1') {
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <main+0x50c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b31      	cmp	r3, #49	; 0x31
 8001cfa:	d109      	bne.n	8001d10 <main+0x384>
				//usb transmission test
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nUSB transmission confirmed functional\n"));
 8001cfc:	4967      	ldr	r1, [pc, #412]	; (8001e9c <main+0x510>)
 8001cfe:	4855      	ldr	r0, [pc, #340]	; (8001e54 <main+0x4c8>)
 8001d00:	f00b f884 	bl	800ce0c <siprintf>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4852      	ldr	r0, [pc, #328]	; (8001e54 <main+0x4c8>)
 8001d0c:	f009 fe7a 	bl	800ba04 <CDC_Transmit_FS>
			}
			if (rxBuffer[0] == '2') {
 8001d10:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <main+0x50c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b32      	cmp	r3, #50	; 0x32
 8001d16:	d13e      	bne.n	8001d96 <main+0x40a>
				//check status of the flash memory chip
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nGetting Flash Memory Data...\n"));
 8001d18:	4961      	ldr	r1, [pc, #388]	; (8001ea0 <main+0x514>)
 8001d1a:	484e      	ldr	r0, [pc, #312]	; (8001e54 <main+0x4c8>)
 8001d1c:	f00b f876 	bl	800ce0c <siprintf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	484b      	ldr	r0, [pc, #300]	; (8001e54 <main+0x4c8>)
 8001d28:	f009 fe6c 	bl	800ba04 <CDC_Transmit_FS>
				CSP_QSPI_Read(flashReadBuffer, DATA_CONFIG_LOCATION, 16);
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4846      	ldr	r0, [pc, #280]	; (8001e4c <main+0x4c0>)
 8001d32:	f001 fca3 	bl	800367c <CSP_QSPI_Read>
				//calculate the number of recordings
				uint8_t l = 7;
 8001d36:	2307      	movs	r3, #7
 8001d38:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				while (flashReadBuffer[0] >>= 1) { --l; }
 8001d3c:	e004      	b.n	8001d48 <main+0x3bc>
 8001d3e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001d48:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <main+0x4c0>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <main+0x4c0>)
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <main+0x4c0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <main+0x3b2>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n\tThere are %i recordings\n", l));
 8001d5c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d60:	461a      	mov	r2, r3
 8001d62:	4950      	ldr	r1, [pc, #320]	; (8001ea4 <main+0x518>)
 8001d64:	483b      	ldr	r0, [pc, #236]	; (8001e54 <main+0x4c8>)
 8001d66:	f00b f851 	bl	800ce0c <siprintf>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4838      	ldr	r0, [pc, #224]	; (8001e54 <main+0x4c8>)
 8001d72:	f009 fe47 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f001 ff96 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n\tChoose a recording number (starting at 0)\n"));
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <main+0x51c>)
 8001d7e:	4835      	ldr	r0, [pc, #212]	; (8001e54 <main+0x4c8>)
 8001d80:	f00b f844 	bl	800ce0c <siprintf>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4832      	ldr	r0, [pc, #200]	; (8001e54 <main+0x4c8>)
 8001d8c:	f009 fe3a 	bl	800ba04 <CDC_Transmit_FS>
				usbStatus = 1;
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <main+0x4f0>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
			}
			if (rxBuffer[0] == '3') {
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <main+0x50c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b33      	cmp	r3, #51	; 0x33
 8001d9c:	d11f      	bne.n	8001dde <main+0x452>
				//send the confirmation message and change current state
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nYou have requested to delete all flight recordings\n"));
 8001d9e:	4943      	ldr	r1, [pc, #268]	; (8001eac <main+0x520>)
 8001da0:	482c      	ldr	r0, [pc, #176]	; (8001e54 <main+0x4c8>)
 8001da2:	f00b f833 	bl	800ce0c <siprintf>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	4829      	ldr	r0, [pc, #164]	; (8001e54 <main+0x4c8>)
 8001dae:	f009 fe29 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f001 ff78 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n\t\t\tEnter 'y' to proceed\n"));
 8001db8:	493d      	ldr	r1, [pc, #244]	; (8001eb0 <main+0x524>)
 8001dba:	4826      	ldr	r0, [pc, #152]	; (8001e54 <main+0x4c8>)
 8001dbc:	f00b f826 	bl	800ce0c <siprintf>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4823      	ldr	r0, [pc, #140]	; (8001e54 <main+0x4c8>)
 8001dc8:	f009 fe1c 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f001 ff6b 	bl	8003ca8 <HAL_Delay>
				ledTimeout = 250;
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <main+0x4f4>)
 8001dd4:	22fa      	movs	r2, #250	; 0xfa
 8001dd6:	801a      	strh	r2, [r3, #0]
				usbStatus = 2;
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <main+0x4f0>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	701a      	strb	r2, [r3, #0]
			}
			if (rxBuffer[0] == '4') {
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <main+0x50c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b34      	cmp	r3, #52	; 0x34
 8001de4:	d11e      	bne.n	8001e24 <main+0x498>
				if (usbStatus != 3) {
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <main+0x4f0>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d00d      	beq.n	8001e0a <main+0x47e>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nStarting Data Transmission\n"));
 8001dee:	4931      	ldr	r1, [pc, #196]	; (8001eb4 <main+0x528>)
 8001df0:	4818      	ldr	r0, [pc, #96]	; (8001e54 <main+0x4c8>)
 8001df2:	f00b f80b 	bl	800ce0c <siprintf>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4815      	ldr	r0, [pc, #84]	; (8001e54 <main+0x4c8>)
 8001dfe:	f009 fe01 	bl	800ba04 <CDC_Transmit_FS>
					usbStatus = 3;
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <main+0x4f0>)
 8001e04:	2203      	movs	r2, #3
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e00c      	b.n	8001e24 <main+0x498>
				} else {
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nStopping Data Transmission\n"));
 8001e0a:	492b      	ldr	r1, [pc, #172]	; (8001eb8 <main+0x52c>)
 8001e0c:	4811      	ldr	r0, [pc, #68]	; (8001e54 <main+0x4c8>)
 8001e0e:	f00a fffd 	bl	800ce0c <siprintf>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	480e      	ldr	r0, [pc, #56]	; (8001e54 <main+0x4c8>)
 8001e1a:	f009 fdf3 	bl	800ba04 <CDC_Transmit_FS>
					usbStatus = 0;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <main+0x4f0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
				}
			}
			if (rxBuffer[0] == '5') {
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <main+0x50c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b35      	cmp	r3, #53	; 0x35
 8001e2a:	f040 80b7 	bne.w	8001f9c <main+0x610>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nWriting config bytes\n"));
 8001e2e:	4923      	ldr	r1, [pc, #140]	; (8001ebc <main+0x530>)
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <main+0x4c8>)
 8001e32:	f00a ffeb 	bl	800ce0c <siprintf>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <main+0x4c8>)
 8001e3e:	f009 fde1 	bl	800ba04 <CDC_Transmit_FS>
				//write new data
				for (uint8_t i = 0; i < 16; i++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001e48:	e047      	b.n	8001eda <main+0x54e>
 8001e4a:	bf00      	nop
 8001e4c:	20000478 	.word	0x20000478
 8001e50:	0800f40c 	.word	0x0800f40c
 8001e54:	200002f0 	.word	0x200002f0
 8001e58:	48000c00 	.word	0x48000c00
 8001e5c:	0800f43c 	.word	0x0800f43c
 8001e60:	0800f460 	.word	0x0800f460
 8001e64:	0800f47c 	.word	0x0800f47c
 8001e68:	0800f4a8 	.word	0x0800f4a8
 8001e6c:	0800f4d4 	.word	0x0800f4d4
 8001e70:	0800f500 	.word	0x0800f500
 8001e74:	0800f52c 	.word	0x0800f52c
 8001e78:	0800f558 	.word	0x0800f558
 8001e7c:	20000374 	.word	0x20000374
 8001e80:	200004cc 	.word	0x200004cc
 8001e84:	200004d4 	.word	0x200004d4
 8001e88:	200004bc 	.word	0x200004bc
 8001e8c:	200004c0 	.word	0x200004c0
 8001e90:	200004c4 	.word	0x200004c4
 8001e94:	200004c5 	.word	0x200004c5
 8001e98:	20000330 	.word	0x20000330
 8001e9c:	0800f57c 	.word	0x0800f57c
 8001ea0:	0800f5a4 	.word	0x0800f5a4
 8001ea4:	0800f5c4 	.word	0x0800f5c4
 8001ea8:	0800f5e0 	.word	0x0800f5e0
 8001eac:	0800f610 	.word	0x0800f610
 8001eb0:	0800f648 	.word	0x0800f648
 8001eb4:	0800f664 	.word	0x0800f664
 8001eb8:	0800f684 	.word	0x0800f684
 8001ebc:	0800f6a4 	.word	0x0800f6a4
					flashWriteBuffer[i] = 64+i;
 8001ec0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ec4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001ec8:	3240      	adds	r2, #64	; 0x40
 8001eca:	b2d1      	uxtb	r1, r2
 8001ecc:	4a9e      	ldr	r2, [pc, #632]	; (8002148 <main+0x7bc>)
 8001ece:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 16; i++) {
 8001ed0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001eda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d9ee      	bls.n	8001ec0 <main+0x534>
				}
				CSP_QSPI_WriteMemory(flashWriteBuffer, DATA_CONFIG_LOCATION, 16);
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4898      	ldr	r0, [pc, #608]	; (8002148 <main+0x7bc>)
 8001ee8:	f001 fad4 	bl	8003494 <CSP_QSPI_WriteMemory>
				//reading new configuration
				CSP_QSPI_Read(flashReadBuffer, DATA_CONFIG_LOCATION, 16);
 8001eec:	2210      	movs	r2, #16
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4896      	ldr	r0, [pc, #600]	; (800214c <main+0x7c0>)
 8001ef2:	f001 fbc3 	bl	800367c <CSP_QSPI_Read>
				//transmit to the host computer
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001ef6:	4b95      	ldr	r3, [pc, #596]	; (800214c <main+0x7c0>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	469c      	mov	ip, r3
 8001efc:	4b93      	ldr	r3, [pc, #588]	; (800214c <main+0x7c0>)
 8001efe:	785b      	ldrb	r3, [r3, #1]
 8001f00:	469e      	mov	lr, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f02:	4b92      	ldr	r3, [pc, #584]	; (800214c <main+0x7c0>)
 8001f04:	789b      	ldrb	r3, [r3, #2]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f06:	4618      	mov	r0, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f08:	4b90      	ldr	r3, [pc, #576]	; (800214c <main+0x7c0>)
 8001f0a:	78db      	ldrb	r3, [r3, #3]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f0c:	461c      	mov	r4, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f0e:	4b8f      	ldr	r3, [pc, #572]	; (800214c <main+0x7c0>)
 8001f10:	791b      	ldrb	r3, [r3, #4]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f12:	461d      	mov	r5, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f14:	4b8d      	ldr	r3, [pc, #564]	; (800214c <main+0x7c0>)
 8001f16:	795b      	ldrb	r3, [r3, #5]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f18:	461e      	mov	r6, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f1a:	4b8c      	ldr	r3, [pc, #560]	; (800214c <main+0x7c0>)
 8001f1c:	799b      	ldrb	r3, [r3, #6]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f20:	4b8a      	ldr	r3, [pc, #552]	; (800214c <main+0x7c0>)
 8001f22:	79db      	ldrb	r3, [r3, #7]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f24:	623b      	str	r3, [r7, #32]
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <main+0x7c0>)
 8001f28:	7a1b      	ldrb	r3, [r3, #8]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f2a:	61fb      	str	r3, [r7, #28]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f2c:	4b87      	ldr	r3, [pc, #540]	; (800214c <main+0x7c0>)
 8001f2e:	7a5b      	ldrb	r3, [r3, #9]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f30:	61bb      	str	r3, [r7, #24]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f32:	4b86      	ldr	r3, [pc, #536]	; (800214c <main+0x7c0>)
 8001f34:	7a9b      	ldrb	r3, [r3, #10]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f36:	617b      	str	r3, [r7, #20]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f38:	4b84      	ldr	r3, [pc, #528]	; (800214c <main+0x7c0>)
 8001f3a:	7adb      	ldrb	r3, [r3, #11]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f3c:	613b      	str	r3, [r7, #16]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f3e:	4b83      	ldr	r3, [pc, #524]	; (800214c <main+0x7c0>)
 8001f40:	7b1b      	ldrb	r3, [r3, #12]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f42:	60fb      	str	r3, [r7, #12]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f44:	4b81      	ldr	r3, [pc, #516]	; (800214c <main+0x7c0>)
 8001f46:	7b5b      	ldrb	r3, [r3, #13]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f48:	4619      	mov	r1, r3
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f4a:	4b80      	ldr	r3, [pc, #512]	; (800214c <main+0x7c0>)
 8001f4c:	7b9b      	ldrb	r3, [r3, #14]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f4e:	461a      	mov	r2, r3
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <main+0x7c0>)
 8001f52:	7bdb      	ldrb	r3, [r3, #15]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001f54:	930d      	str	r3, [sp, #52]	; 0x34
 8001f56:	920c      	str	r2, [sp, #48]	; 0x30
 8001f58:	910b      	str	r1, [sp, #44]	; 0x2c
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	9209      	str	r2, [sp, #36]	; 0x24
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	9208      	str	r2, [sp, #32]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	9207      	str	r2, [sp, #28]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	9206      	str	r2, [sp, #24]
 8001f6e:	6a3a      	ldr	r2, [r7, #32]
 8001f70:	9205      	str	r2, [sp, #20]
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	9304      	str	r3, [sp, #16]
 8001f76:	9603      	str	r6, [sp, #12]
 8001f78:	9502      	str	r5, [sp, #8]
 8001f7a:	9401      	str	r4, [sp, #4]
 8001f7c:	9000      	str	r0, [sp, #0]
 8001f7e:	4673      	mov	r3, lr
 8001f80:	4662      	mov	r2, ip
 8001f82:	4973      	ldr	r1, [pc, #460]	; (8002150 <main+0x7c4>)
 8001f84:	4873      	ldr	r0, [pc, #460]	; (8002154 <main+0x7c8>)
 8001f86:	f00a ff41 	bl	800ce0c <siprintf>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4870      	ldr	r0, [pc, #448]	; (8002154 <main+0x7c8>)
 8001f92:	f009 fd37 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f001 fe86 	bl	8003ca8 <HAL_Delay>
			}
			if (rxBuffer[0] == '6') {
 8001f9c:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <main+0x7cc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b36      	cmp	r3, #54	; 0x36
 8001fa2:	d161      	bne.n	8002068 <main+0x6dc>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nReading Config Bytes\n"));
 8001fa4:	496d      	ldr	r1, [pc, #436]	; (800215c <main+0x7d0>)
 8001fa6:	486b      	ldr	r0, [pc, #428]	; (8002154 <main+0x7c8>)
 8001fa8:	f00a ff30 	bl	800ce0c <siprintf>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4868      	ldr	r0, [pc, #416]	; (8002154 <main+0x7c8>)
 8001fb4:	f009 fd26 	bl	800ba04 <CDC_Transmit_FS>
				//reading new configuration
				CSP_QSPI_Read(flashReadBuffer, DATA_CONFIG_LOCATION, 16);
 8001fb8:	2210      	movs	r2, #16
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4863      	ldr	r0, [pc, #396]	; (800214c <main+0x7c0>)
 8001fbe:	f001 fb5d 	bl	800367c <CSP_QSPI_Read>
				//transmit to the host computer
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001fc2:	4b62      	ldr	r3, [pc, #392]	; (800214c <main+0x7c0>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	469c      	mov	ip, r3
 8001fc8:	4b60      	ldr	r3, [pc, #384]	; (800214c <main+0x7c0>)
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	469e      	mov	lr, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <main+0x7c0>)
 8001fd0:	789b      	ldrb	r3, [r3, #2]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001fd2:	4618      	mov	r0, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	; (800214c <main+0x7c0>)
 8001fd6:	78db      	ldrb	r3, [r3, #3]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001fd8:	461c      	mov	r4, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001fda:	4b5c      	ldr	r3, [pc, #368]	; (800214c <main+0x7c0>)
 8001fdc:	791b      	ldrb	r3, [r3, #4]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001fde:	461d      	mov	r5, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <main+0x7c0>)
 8001fe2:	795b      	ldrb	r3, [r3, #5]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001fe4:	461e      	mov	r6, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001fe6:	4b59      	ldr	r3, [pc, #356]	; (800214c <main+0x7c0>)
 8001fe8:	799b      	ldrb	r3, [r3, #6]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <main+0x7c0>)
 8001fee:	79db      	ldrb	r3, [r3, #7]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001ff0:	623b      	str	r3, [r7, #32]
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8001ff2:	4b56      	ldr	r3, [pc, #344]	; (800214c <main+0x7c0>)
 8001ff4:	7a1b      	ldrb	r3, [r3, #8]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001ff6:	61fb      	str	r3, [r7, #28]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001ff8:	4b54      	ldr	r3, [pc, #336]	; (800214c <main+0x7c0>)
 8001ffa:	7a5b      	ldrb	r3, [r3, #9]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8001ffc:	61bb      	str	r3, [r7, #24]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <main+0x7c0>)
 8002000:	7a9b      	ldrb	r3, [r3, #10]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002002:	617b      	str	r3, [r7, #20]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002004:	4b51      	ldr	r3, [pc, #324]	; (800214c <main+0x7c0>)
 8002006:	7adb      	ldrb	r3, [r3, #11]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002008:	613b      	str	r3, [r7, #16]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 800200a:	4b50      	ldr	r3, [pc, #320]	; (800214c <main+0x7c0>)
 800200c:	7b1b      	ldrb	r3, [r3, #12]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 800200e:	60fb      	str	r3, [r7, #12]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002010:	4b4e      	ldr	r3, [pc, #312]	; (800214c <main+0x7c0>)
 8002012:	7b5b      	ldrb	r3, [r3, #13]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002014:	4619      	mov	r1, r3
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002016:	4b4d      	ldr	r3, [pc, #308]	; (800214c <main+0x7c0>)
 8002018:	7b9b      	ldrb	r3, [r3, #14]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 800201a:	461a      	mov	r2, r3
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <main+0x7c0>)
 800201e:	7bdb      	ldrb	r3, [r3, #15]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002020:	930d      	str	r3, [sp, #52]	; 0x34
 8002022:	920c      	str	r2, [sp, #48]	; 0x30
 8002024:	910b      	str	r1, [sp, #44]	; 0x2c
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	920a      	str	r2, [sp, #40]	; 0x28
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	9209      	str	r2, [sp, #36]	; 0x24
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	9208      	str	r2, [sp, #32]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	9207      	str	r2, [sp, #28]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	9206      	str	r2, [sp, #24]
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	9205      	str	r2, [sp, #20]
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	9304      	str	r3, [sp, #16]
 8002042:	9603      	str	r6, [sp, #12]
 8002044:	9502      	str	r5, [sp, #8]
 8002046:	9401      	str	r4, [sp, #4]
 8002048:	9000      	str	r0, [sp, #0]
 800204a:	4673      	mov	r3, lr
 800204c:	4662      	mov	r2, ip
 800204e:	4940      	ldr	r1, [pc, #256]	; (8002150 <main+0x7c4>)
 8002050:	4840      	ldr	r0, [pc, #256]	; (8002154 <main+0x7c8>)
 8002052:	f00a fedb 	bl	800ce0c <siprintf>
 8002056:	4603      	mov	r3, r0
 8002058:	b29b      	uxth	r3, r3
 800205a:	4619      	mov	r1, r3
 800205c:	483d      	ldr	r0, [pc, #244]	; (8002154 <main+0x7c8>)
 800205e:	f009 fcd1 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f001 fe20 	bl	8003ca8 <HAL_Delay>
			}
			if (rxBuffer[0] == '7') {
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <main+0x7cc>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b37      	cmp	r3, #55	; 0x37
 800206e:	f040 81a5 	bne.w	80023bc <main+0xa30>
				//store data from the gyroscope into the first 32 bytes of the flashWriteBuffer
				uint32_t timeValue = HAL_GetTick();
 8002072:	f001 fe0d 	bl	8003c90 <HAL_GetTick>
 8002076:	4603      	mov	r3, r0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
				uint8_t timeArray[4];
				memcpy(timeArray, &timeValue, sizeof(uint32_t));
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nTime: %02X %02X %02X %02X\n", timeArray[0], timeArray[1], timeArray[2], timeArray[3]));
 800207e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002082:	4619      	mov	r1, r3
 8002084:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002088:	4618      	mov	r0, r3
 800208a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800208e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002092:	9201      	str	r2, [sp, #4]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	4931      	ldr	r1, [pc, #196]	; (8002160 <main+0x7d4>)
 800209c:	482d      	ldr	r0, [pc, #180]	; (8002154 <main+0x7c8>)
 800209e:	f00a feb5 	bl	800ce0c <siprintf>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	482a      	ldr	r0, [pc, #168]	; (8002154 <main+0x7c8>)
 80020aa:	f009 fcab 	bl	800ba04 <CDC_Transmit_FS>

				for (uint8_t i = 0; i < 4; i++) {
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80020b4:	e010      	b.n	80020d8 <main+0x74c>
					flashWriteBuffer[i] = timeArray[i];
 80020b6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80020ba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80020be:	3230      	adds	r2, #48	; 0x30
 80020c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80020c4:	440a      	add	r2, r1
 80020c6:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <main+0x7bc>)
 80020cc:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 4; i++) {
 80020ce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80020d2:	3301      	adds	r3, #1
 80020d4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80020d8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d9ea      	bls.n	80020b6 <main+0x72a>
				}
				for (uint8_t i = 0; i < 6; i++) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80020e6:	e00f      	b.n	8002108 <main+0x77c>
					flashWriteBuffer[i+4] = bmi088.gyr_data[i];
 80020e8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80020ec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80020f0:	3304      	adds	r3, #4
 80020f2:	491c      	ldr	r1, [pc, #112]	; (8002164 <main+0x7d8>)
 80020f4:	440a      	add	r2, r1
 80020f6:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <main+0x7bc>)
 80020fc:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) {
 80020fe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002102:	3301      	adds	r3, #1
 8002104:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002108:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800210c:	2b05      	cmp	r3, #5
 800210e:	d9eb      	bls.n	80020e8 <main+0x75c>
				}
				for (uint8_t i = 0; i < 6; i++) {
 8002110:	2300      	movs	r3, #0
 8002112:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002116:	e00f      	b.n	8002138 <main+0x7ac>
					flashWriteBuffer[i+10] = bmi088.acc_data[i];
 8002118:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800211c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002120:	330a      	adds	r3, #10
 8002122:	4910      	ldr	r1, [pc, #64]	; (8002164 <main+0x7d8>)
 8002124:	440a      	add	r2, r1
 8002126:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <main+0x7bc>)
 800212c:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) {
 800212e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002132:	3301      	adds	r3, #1
 8002134:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002138:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800213c:	2b05      	cmp	r3, #5
 800213e:	d9eb      	bls.n	8002118 <main+0x78c>
				}
				for (uint8_t i = 0; i < 6; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002146:	e01e      	b.n	8002186 <main+0x7fa>
 8002148:	20000378 	.word	0x20000378
 800214c:	20000478 	.word	0x20000478
 8002150:	0800f6bc 	.word	0x0800f6bc
 8002154:	200002f0 	.word	0x200002f0
 8002158:	20000330 	.word	0x20000330
 800215c:	0800f710 	.word	0x0800f710
 8002160:	0800f728 	.word	0x0800f728
 8002164:	200004d8 	.word	0x200004d8
					flashWriteBuffer[i+16] = lis3mdl.data[i];
 8002168:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800216c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002170:	3310      	adds	r3, #16
 8002172:	499f      	ldr	r1, [pc, #636]	; (80023f0 <main+0xa64>)
 8002174:	440a      	add	r2, r1
 8002176:	7e11      	ldrb	r1, [r2, #24]
 8002178:	4a9e      	ldr	r2, [pc, #632]	; (80023f4 <main+0xa68>)
 800217a:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) {
 800217c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002180:	3301      	adds	r3, #1
 8002182:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002186:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800218a:	2b05      	cmp	r3, #5
 800218c:	d9ec      	bls.n	8002168 <main+0x7dc>
				}
				for (uint8_t i = 0; i < 6; i++) {
 800218e:	2300      	movs	r3, #0
 8002190:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002194:	e00f      	b.n	80021b6 <main+0x82a>
					flashWriteBuffer[i+22] = kx134.data[i];
 8002196:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800219a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800219e:	3316      	adds	r3, #22
 80021a0:	4995      	ldr	r1, [pc, #596]	; (80023f8 <main+0xa6c>)
 80021a2:	440a      	add	r2, r1
 80021a4:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80021a8:	4a92      	ldr	r2, [pc, #584]	; (80023f4 <main+0xa68>)
 80021aa:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) {
 80021ac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80021b0:	3301      	adds	r3, #1
 80021b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80021b6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d9eb      	bls.n	8002196 <main+0x80a>
				}
				for (uint8_t i = 0; i < 3; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80021c4:	e00f      	b.n	80021e6 <main+0x85a>
					flashWriteBuffer[i+28] = bmp388.data[i];
 80021c6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80021ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021ce:	331c      	adds	r3, #28
 80021d0:	498a      	ldr	r1, [pc, #552]	; (80023fc <main+0xa70>)
 80021d2:	440a      	add	r2, r1
 80021d4:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 80021d8:	4a86      	ldr	r2, [pc, #536]	; (80023f4 <main+0xa68>)
 80021da:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 3; i++) {
 80021dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021e0:	3301      	adds	r3, #1
 80021e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80021e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d9eb      	bls.n	80021c6 <main+0x83a>
				}
				flashWriteBuffer[31] = 0xFF;
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <main+0xa68>)
 80021f0:	22ff      	movs	r2, #255	; 0xff
 80021f2:	77da      	strb	r2, [r3, #31]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X", flashWriteBuffer[0], flashWriteBuffer[1]));
 80021f4:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <main+0xa68>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b7e      	ldr	r3, [pc, #504]	; (80023f4 <main+0xa68>)
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	4980      	ldr	r1, [pc, #512]	; (8002400 <main+0xa74>)
 8002200:	4880      	ldr	r0, [pc, #512]	; (8002404 <main+0xa78>)
 8002202:	f00a fe03 	bl	800ce0c <siprintf>
 8002206:	4603      	mov	r3, r0
 8002208:	b29b      	uxth	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	487d      	ldr	r0, [pc, #500]	; (8002404 <main+0xa78>)
 800220e:	f009 fbf9 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f001 fd48 	bl	8003ca8 <HAL_Delay>

				//write data to the flash chip
				CSP_QSPI_WriteMemory(flashWriteBuffer, 256, 32);
 8002218:	2220      	movs	r2, #32
 800221a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221e:	4875      	ldr	r0, [pc, #468]	; (80023f4 <main+0xa68>)
 8002220:	f001 f938 	bl	8003494 <CSP_QSPI_WriteMemory>

				CSP_QSPI_Read(flashReadBuffer, 256, 32);
 8002224:	2220      	movs	r2, #32
 8002226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222a:	4877      	ldr	r0, [pc, #476]	; (8002408 <main+0xa7c>)
 800222c:	f001 fa26 	bl	800367c <CSP_QSPI_Read>
				//transmit to the host computer
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X", flashReadBuffer[0], flashReadBuffer[1]));
 8002230:	4b75      	ldr	r3, [pc, #468]	; (8002408 <main+0xa7c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b74      	ldr	r3, [pc, #464]	; (8002408 <main+0xa7c>)
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	4971      	ldr	r1, [pc, #452]	; (8002400 <main+0xa74>)
 800223c:	4871      	ldr	r0, [pc, #452]	; (8002404 <main+0xa78>)
 800223e:	f00a fde5 	bl	800ce0c <siprintf>
 8002242:	4603      	mov	r3, r0
 8002244:	b29b      	uxth	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	486e      	ldr	r0, [pc, #440]	; (8002404 <main+0xa78>)
 800224a:	f009 fbdb 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f001 fd2a 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[2], flashReadBuffer[3],
 8002254:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <main+0xa7c>)
 8002256:	789b      	ldrb	r3, [r3, #2]
 8002258:	461c      	mov	r4, r3
 800225a:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <main+0xa7c>)
 800225c:	78db      	ldrb	r3, [r3, #3]
 800225e:	461d      	mov	r5, r3
						flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7]));
 8002260:	4b69      	ldr	r3, [pc, #420]	; (8002408 <main+0xa7c>)
 8002262:	791b      	ldrb	r3, [r3, #4]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[2], flashReadBuffer[3],
 8002264:	461a      	mov	r2, r3
						flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7]));
 8002266:	4b68      	ldr	r3, [pc, #416]	; (8002408 <main+0xa7c>)
 8002268:	795b      	ldrb	r3, [r3, #5]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[2], flashReadBuffer[3],
 800226a:	4619      	mov	r1, r3
						flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7]));
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <main+0xa7c>)
 800226e:	799b      	ldrb	r3, [r3, #6]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[2], flashReadBuffer[3],
 8002270:	4618      	mov	r0, r3
						flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7]));
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <main+0xa7c>)
 8002274:	79db      	ldrb	r3, [r3, #7]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[2], flashReadBuffer[3],
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	9002      	str	r0, [sp, #8]
 800227a:	9101      	str	r1, [sp, #4]
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	462b      	mov	r3, r5
 8002280:	4622      	mov	r2, r4
 8002282:	4962      	ldr	r1, [pc, #392]	; (800240c <main+0xa80>)
 8002284:	485f      	ldr	r0, [pc, #380]	; (8002404 <main+0xa78>)
 8002286:	f00a fdc1 	bl	800ce0c <siprintf>
 800228a:	4603      	mov	r3, r0
 800228c:	b29b      	uxth	r3, r3
 800228e:	4619      	mov	r1, r3
 8002290:	485c      	ldr	r0, [pc, #368]	; (8002404 <main+0xa78>)
 8002292:	f009 fbb7 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f001 fd06 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[8], flashReadBuffer[9],
 800229c:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <main+0xa7c>)
 800229e:	7a1b      	ldrb	r3, [r3, #8]
 80022a0:	461c      	mov	r4, r3
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <main+0xa7c>)
 80022a4:	7a5b      	ldrb	r3, [r3, #9]
 80022a6:	461d      	mov	r5, r3
						flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13]));
 80022a8:	4b57      	ldr	r3, [pc, #348]	; (8002408 <main+0xa7c>)
 80022aa:	7a9b      	ldrb	r3, [r3, #10]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[8], flashReadBuffer[9],
 80022ac:	461a      	mov	r2, r3
						flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13]));
 80022ae:	4b56      	ldr	r3, [pc, #344]	; (8002408 <main+0xa7c>)
 80022b0:	7adb      	ldrb	r3, [r3, #11]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[8], flashReadBuffer[9],
 80022b2:	4619      	mov	r1, r3
						flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13]));
 80022b4:	4b54      	ldr	r3, [pc, #336]	; (8002408 <main+0xa7c>)
 80022b6:	7b1b      	ldrb	r3, [r3, #12]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[8], flashReadBuffer[9],
 80022b8:	4618      	mov	r0, r3
						flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13]));
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <main+0xa7c>)
 80022bc:	7b5b      	ldrb	r3, [r3, #13]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[8], flashReadBuffer[9],
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	9002      	str	r0, [sp, #8]
 80022c2:	9101      	str	r1, [sp, #4]
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	462b      	mov	r3, r5
 80022c8:	4622      	mov	r2, r4
 80022ca:	4950      	ldr	r1, [pc, #320]	; (800240c <main+0xa80>)
 80022cc:	484d      	ldr	r0, [pc, #308]	; (8002404 <main+0xa78>)
 80022ce:	f00a fd9d 	bl	800ce0c <siprintf>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	484a      	ldr	r0, [pc, #296]	; (8002404 <main+0xa78>)
 80022da:	f009 fb93 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f001 fce2 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[14], flashReadBuffer[15],
 80022e4:	4b48      	ldr	r3, [pc, #288]	; (8002408 <main+0xa7c>)
 80022e6:	7b9b      	ldrb	r3, [r3, #14]
 80022e8:	461c      	mov	r4, r3
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <main+0xa7c>)
 80022ec:	7bdb      	ldrb	r3, [r3, #15]
 80022ee:	461d      	mov	r5, r3
						flashReadBuffer[16], flashReadBuffer[17], flashReadBuffer[18], flashReadBuffer[19]));
 80022f0:	4b45      	ldr	r3, [pc, #276]	; (8002408 <main+0xa7c>)
 80022f2:	7c1b      	ldrb	r3, [r3, #16]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[14], flashReadBuffer[15],
 80022f4:	461a      	mov	r2, r3
						flashReadBuffer[16], flashReadBuffer[17], flashReadBuffer[18], flashReadBuffer[19]));
 80022f6:	4b44      	ldr	r3, [pc, #272]	; (8002408 <main+0xa7c>)
 80022f8:	7c5b      	ldrb	r3, [r3, #17]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[14], flashReadBuffer[15],
 80022fa:	4619      	mov	r1, r3
						flashReadBuffer[16], flashReadBuffer[17], flashReadBuffer[18], flashReadBuffer[19]));
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <main+0xa7c>)
 80022fe:	7c9b      	ldrb	r3, [r3, #18]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[14], flashReadBuffer[15],
 8002300:	4618      	mov	r0, r3
						flashReadBuffer[16], flashReadBuffer[17], flashReadBuffer[18], flashReadBuffer[19]));
 8002302:	4b41      	ldr	r3, [pc, #260]	; (8002408 <main+0xa7c>)
 8002304:	7cdb      	ldrb	r3, [r3, #19]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[14], flashReadBuffer[15],
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	9002      	str	r0, [sp, #8]
 800230a:	9101      	str	r1, [sp, #4]
 800230c:	9200      	str	r2, [sp, #0]
 800230e:	462b      	mov	r3, r5
 8002310:	4622      	mov	r2, r4
 8002312:	493e      	ldr	r1, [pc, #248]	; (800240c <main+0xa80>)
 8002314:	483b      	ldr	r0, [pc, #236]	; (8002404 <main+0xa78>)
 8002316:	f00a fd79 	bl	800ce0c <siprintf>
 800231a:	4603      	mov	r3, r0
 800231c:	b29b      	uxth	r3, r3
 800231e:	4619      	mov	r1, r3
 8002320:	4838      	ldr	r0, [pc, #224]	; (8002404 <main+0xa78>)
 8002322:	f009 fb6f 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002326:	2001      	movs	r0, #1
 8002328:	f001 fcbe 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[20], flashReadBuffer[21],
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <main+0xa7c>)
 800232e:	7d1b      	ldrb	r3, [r3, #20]
 8002330:	461c      	mov	r4, r3
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <main+0xa7c>)
 8002334:	7d5b      	ldrb	r3, [r3, #21]
 8002336:	461d      	mov	r5, r3
						flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25]));
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <main+0xa7c>)
 800233a:	7d9b      	ldrb	r3, [r3, #22]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[20], flashReadBuffer[21],
 800233c:	461a      	mov	r2, r3
						flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25]));
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <main+0xa7c>)
 8002340:	7ddb      	ldrb	r3, [r3, #23]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[20], flashReadBuffer[21],
 8002342:	4619      	mov	r1, r3
						flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25]));
 8002344:	4b30      	ldr	r3, [pc, #192]	; (8002408 <main+0xa7c>)
 8002346:	7e1b      	ldrb	r3, [r3, #24]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[20], flashReadBuffer[21],
 8002348:	4618      	mov	r0, r3
						flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25]));
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <main+0xa7c>)
 800234c:	7e5b      	ldrb	r3, [r3, #25]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X", flashReadBuffer[20], flashReadBuffer[21],
 800234e:	9303      	str	r3, [sp, #12]
 8002350:	9002      	str	r0, [sp, #8]
 8002352:	9101      	str	r1, [sp, #4]
 8002354:	9200      	str	r2, [sp, #0]
 8002356:	462b      	mov	r3, r5
 8002358:	4622      	mov	r2, r4
 800235a:	492c      	ldr	r1, [pc, #176]	; (800240c <main+0xa80>)
 800235c:	4829      	ldr	r0, [pc, #164]	; (8002404 <main+0xa78>)
 800235e:	f00a fd55 	bl	800ce0c <siprintf>
 8002362:	4603      	mov	r3, r0
 8002364:	b29b      	uxth	r3, r3
 8002366:	4619      	mov	r1, r3
 8002368:	4826      	ldr	r0, [pc, #152]	; (8002404 <main+0xa78>)
 800236a:	f009 fb4b 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f001 fc9a 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X\n", flashReadBuffer[26], flashReadBuffer[27],
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <main+0xa7c>)
 8002376:	7e9b      	ldrb	r3, [r3, #26]
 8002378:	461c      	mov	r4, r3
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <main+0xa7c>)
 800237c:	7edb      	ldrb	r3, [r3, #27]
 800237e:	461d      	mov	r5, r3
						flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30], flashReadBuffer[31]));
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <main+0xa7c>)
 8002382:	7f1b      	ldrb	r3, [r3, #28]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X\n", flashReadBuffer[26], flashReadBuffer[27],
 8002384:	461a      	mov	r2, r3
						flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30], flashReadBuffer[31]));
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <main+0xa7c>)
 8002388:	7f5b      	ldrb	r3, [r3, #29]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X\n", flashReadBuffer[26], flashReadBuffer[27],
 800238a:	4619      	mov	r1, r3
						flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30], flashReadBuffer[31]));
 800238c:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <main+0xa7c>)
 800238e:	7f9b      	ldrb	r3, [r3, #30]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X\n", flashReadBuffer[26], flashReadBuffer[27],
 8002390:	4618      	mov	r0, r3
						flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30], flashReadBuffer[31]));
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <main+0xa7c>)
 8002394:	7fdb      	ldrb	r3, [r3, #31]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n%02X %02X %02X %02X %02X %02X\n", flashReadBuffer[26], flashReadBuffer[27],
 8002396:	9303      	str	r3, [sp, #12]
 8002398:	9002      	str	r0, [sp, #8]
 800239a:	9101      	str	r1, [sp, #4]
 800239c:	9200      	str	r2, [sp, #0]
 800239e:	462b      	mov	r3, r5
 80023a0:	4622      	mov	r2, r4
 80023a2:	491b      	ldr	r1, [pc, #108]	; (8002410 <main+0xa84>)
 80023a4:	4817      	ldr	r0, [pc, #92]	; (8002404 <main+0xa78>)
 80023a6:	f00a fd31 	bl	800ce0c <siprintf>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	4814      	ldr	r0, [pc, #80]	; (8002404 <main+0xa78>)
 80023b2:	f009 fb27 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f001 fc76 	bl	8003ca8 <HAL_Delay>
			}
			if (rxBuffer[0] == '8') {
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <main+0xa88>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b38      	cmp	r3, #56	; 0x38
 80023c2:	f040 818f 	bne.w	80026e4 <main+0xd58>
				//need to erase flash memory before stuff can be re-written
				if(CSP_QSPI_EraseSector(0, MEMORY_SECTOR_SIZE) == HAL_OK) {
 80023c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ca:	2000      	movs	r0, #0
 80023cc:	f001 f810 	bl	80033f0 <CSP_QSPI_EraseSector>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 8186 	bne.w	80026e4 <main+0xd58>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nFirst flash memory sector rewritten\n"));
 80023d8:	490f      	ldr	r1, [pc, #60]	; (8002418 <main+0xa8c>)
 80023da:	480a      	ldr	r0, [pc, #40]	; (8002404 <main+0xa78>)
 80023dc:	f00a fd16 	bl	800ce0c <siprintf>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	4807      	ldr	r0, [pc, #28]	; (8002404 <main+0xa78>)
 80023e8:	f009 fb0c 	bl	800ba04 <CDC_Transmit_FS>
			if (rxBuffer[0] == '8') {
 80023ec:	e17a      	b.n	80026e4 <main+0xd58>
 80023ee:	bf00      	nop
 80023f0:	20000578 	.word	0x20000578
 80023f4:	20000378 	.word	0x20000378
 80023f8:	20000598 	.word	0x20000598
 80023fc:	20000534 	.word	0x20000534
 8002400:	0800f744 	.word	0x0800f744
 8002404:	200002f0 	.word	0x200002f0
 8002408:	20000478 	.word	0x20000478
 800240c:	0800f750 	.word	0x0800f750
 8002410:	0800f770 	.word	0x0800f770
 8002414:	20000330 	.word	0x20000330
 8002418:	0800f790 	.word	0x0800f790
				}
			}
		} else if (usbStatus == 1) {
 800241c:	4b9a      	ldr	r3, [pc, #616]	; (8002688 <main+0xcfc>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	f040 80f7 	bne.w	8002614 <main+0xc88>
			//usbStatus of 1 corresponds to the user requesting a recording
			//the number that was transmitted must be the desired recording
			if (rxBuffer[0] > 47 && rxBuffer[0] < 58) { //ASCII values for 0-9
 8002426:	4b99      	ldr	r3, [pc, #612]	; (800268c <main+0xd00>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b2f      	cmp	r3, #47	; 0x2f
 800242c:	f240 80e0 	bls.w	80025f0 <main+0xc64>
 8002430:	4b96      	ldr	r3, [pc, #600]	; (800268c <main+0xd00>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b39      	cmp	r3, #57	; 0x39
 8002436:	f200 80db 	bhi.w	80025f0 <main+0xc64>
				//calculate starting address
				uint32_t start_address = (DATA_RECORDING_LENGTH * (rxBuffer[0]-48)) + MEMORY_SECTOR_SIZE; //add sector b.c. writeHead starts after the first sector (config bytes)
 800243a:	4b94      	ldr	r3, [pc, #592]	; (800268c <main+0xd00>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3b30      	subs	r3, #48	; 0x30
 8002440:	059b      	lsls	r3, r3, #22
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
				uint32_t address = start_address;
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
				//read data page by page and transmit through serial port
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nTime,\t\t\tBMI088 Gyro,\t\t\tBMI088 Accel,\t\t\t"));
 800244c:	4990      	ldr	r1, [pc, #576]	; (8002690 <main+0xd04>)
 800244e:	4891      	ldr	r0, [pc, #580]	; (8002694 <main+0xd08>)
 8002450:	f00a fcdc 	bl	800ce0c <siprintf>
 8002454:	4603      	mov	r3, r0
 8002456:	b29b      	uxth	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	488e      	ldr	r0, [pc, #568]	; (8002694 <main+0xd08>)
 800245c:	f009 fad2 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002460:	2001      	movs	r0, #1
 8002462:	f001 fc21 	bl	8003ca8 <HAL_Delay>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "LIS3MDL,\t\t\tKX134,\t\t\tBMP388\n\n"));
 8002466:	498c      	ldr	r1, [pc, #560]	; (8002698 <main+0xd0c>)
 8002468:	488a      	ldr	r0, [pc, #552]	; (8002694 <main+0xd08>)
 800246a:	f00a fccf 	bl	800ce0c <siprintf>
 800246e:	4603      	mov	r3, r0
 8002470:	b29b      	uxth	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	4887      	ldr	r0, [pc, #540]	; (8002694 <main+0xd08>)
 8002476:	f009 fac5 	bl	800ba04 <CDC_Transmit_FS>
				do {
					//read 32 bytes at a time
					CSP_QSPI_Read(flashReadBuffer, address, 32);
 800247a:	2220      	movs	r2, #32
 800247c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800247e:	4887      	ldr	r0, [pc, #540]	; (800269c <main+0xd10>)
 8002480:	f001 f8fc 	bl	800367c <CSP_QSPI_Read>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n"));
 8002484:	4986      	ldr	r1, [pc, #536]	; (80026a0 <main+0xd14>)
 8002486:	4883      	ldr	r0, [pc, #524]	; (8002694 <main+0xd08>)
 8002488:	f00a fcc0 	bl	800ce0c <siprintf>
 800248c:	4603      	mov	r3, r0
 800248e:	b29b      	uxth	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	4880      	ldr	r0, [pc, #512]	; (8002694 <main+0xd08>)
 8002494:	f009 fab6 	bl	800ba04 <CDC_Transmit_FS>
					HAL_Delay(1);
 8002498:	2001      	movs	r0, #1
 800249a:	f001 fc05 	bl	8003ca8 <HAL_Delay>
					//print out the 8 bytes to the computer
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 800249e:	4b7f      	ldr	r3, [pc, #508]	; (800269c <main+0xd10>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	469c      	mov	ip, r3
 80024a4:	4b7d      	ldr	r3, [pc, #500]	; (800269c <main+0xd10>)
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	469e      	mov	lr, r3
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024aa:	4b7c      	ldr	r3, [pc, #496]	; (800269c <main+0xd10>)
 80024ac:	789b      	ldrb	r3, [r3, #2]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024ae:	461d      	mov	r5, r3
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024b0:	4b7a      	ldr	r3, [pc, #488]	; (800269c <main+0xd10>)
 80024b2:	78db      	ldrb	r3, [r3, #3]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024b4:	461e      	mov	r6, r3
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024b6:	4b79      	ldr	r3, [pc, #484]	; (800269c <main+0xd10>)
 80024b8:	791b      	ldrb	r3, [r3, #4]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024bc:	4b77      	ldr	r3, [pc, #476]	; (800269c <main+0xd10>)
 80024be:	795b      	ldrb	r3, [r3, #5]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024c0:	623b      	str	r3, [r7, #32]
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <main+0xd10>)
 80024c4:	799b      	ldrb	r3, [r3, #6]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024c6:	61fb      	str	r3, [r7, #28]
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024c8:	4b74      	ldr	r3, [pc, #464]	; (800269c <main+0xd10>)
 80024ca:	79db      	ldrb	r3, [r3, #7]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024cc:	61bb      	str	r3, [r7, #24]
												flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <main+0xd10>)
 80024d0:	7a1b      	ldrb	r3, [r3, #8]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024d2:	617b      	str	r3, [r7, #20]
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024d4:	4b71      	ldr	r3, [pc, #452]	; (800269c <main+0xd10>)
 80024d6:	7a5b      	ldrb	r3, [r3, #9]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024d8:	613b      	str	r3, [r7, #16]
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024da:	4b70      	ldr	r3, [pc, #448]	; (800269c <main+0xd10>)
 80024dc:	7a9b      	ldrb	r3, [r3, #10]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024de:	60fb      	str	r3, [r7, #12]
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024e0:	4b6e      	ldr	r3, [pc, #440]	; (800269c <main+0xd10>)
 80024e2:	7adb      	ldrb	r3, [r3, #11]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024e4:	60bb      	str	r3, [r7, #8]
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024e6:	4b6d      	ldr	r3, [pc, #436]	; (800269c <main+0xd10>)
 80024e8:	7b1b      	ldrb	r3, [r3, #12]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024ea:	607b      	str	r3, [r7, #4]
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024ec:	4b6b      	ldr	r3, [pc, #428]	; (800269c <main+0xd10>)
 80024ee:	7b5b      	ldrb	r3, [r3, #13]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024f0:	461c      	mov	r4, r3
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024f2:	4b6a      	ldr	r3, [pc, #424]	; (800269c <main+0xd10>)
 80024f4:	7b9b      	ldrb	r3, [r3, #14]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024f6:	4618      	mov	r0, r3
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <main+0xd10>)
 80024fa:	7bdb      	ldrb	r3, [r3, #15]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 80024fc:	4619      	mov	r1, r3
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <main+0xd10>)
 8002500:	7c1b      	ldrb	r3, [r3, #16]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 8002502:	461a      	mov	r2, r3
												flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15], flashReadBuffer[16], flashReadBuffer[17]));
 8002504:	4b65      	ldr	r3, [pc, #404]	; (800269c <main+0xd10>)
 8002506:	7c5b      	ldrb	r3, [r3, #17]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X%02X%02X%02X,    %02X%02X, %02X%02X, %02X%02X,    %02X%02X, %02X%02X, %02X%02X,     %02X%02X", flashReadBuffer[0], flashReadBuffer[1],
 8002508:	930f      	str	r3, [sp, #60]	; 0x3c
 800250a:	920e      	str	r2, [sp, #56]	; 0x38
 800250c:	910d      	str	r1, [sp, #52]	; 0x34
 800250e:	900c      	str	r0, [sp, #48]	; 0x30
 8002510:	940b      	str	r4, [sp, #44]	; 0x2c
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	920a      	str	r2, [sp, #40]	; 0x28
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	9209      	str	r2, [sp, #36]	; 0x24
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	9208      	str	r2, [sp, #32]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	9207      	str	r2, [sp, #28]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	9206      	str	r2, [sp, #24]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	9205      	str	r2, [sp, #20]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	9204      	str	r2, [sp, #16]
 800252e:	6a3a      	ldr	r2, [r7, #32]
 8002530:	9203      	str	r2, [sp, #12]
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	9601      	str	r6, [sp, #4]
 8002538:	9500      	str	r5, [sp, #0]
 800253a:	4673      	mov	r3, lr
 800253c:	4662      	mov	r2, ip
 800253e:	4959      	ldr	r1, [pc, #356]	; (80026a4 <main+0xd18>)
 8002540:	4854      	ldr	r0, [pc, #336]	; (8002694 <main+0xd08>)
 8002542:	f00a fc63 	bl	800ce0c <siprintf>
 8002546:	4603      	mov	r3, r0
 8002548:	b29b      	uxth	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	4851      	ldr	r0, [pc, #324]	; (8002694 <main+0xd08>)
 800254e:	f009 fa59 	bl	800ba04 <CDC_Transmit_FS>
					HAL_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f001 fba8 	bl	8003ca8 <HAL_Delay>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <main+0xd10>)
 800255a:	7c9b      	ldrb	r3, [r3, #18]
 800255c:	469c      	mov	ip, r3
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <main+0xd10>)
 8002560:	7cdb      	ldrb	r3, [r3, #19]
 8002562:	469e      	mov	lr, r3
 8002564:	4b4d      	ldr	r3, [pc, #308]	; (800269c <main+0xd10>)
 8002566:	7d1b      	ldrb	r3, [r3, #20]
 8002568:	461a      	mov	r2, r3
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <main+0xd10>)
 800256c:	7d5b      	ldrb	r3, [r3, #21]
 800256e:	4619      	mov	r1, r3
																	flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25], flashReadBuffer[26], flashReadBuffer[27],
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <main+0xd10>)
 8002572:	7d9b      	ldrb	r3, [r3, #22]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 8002574:	4618      	mov	r0, r3
																	flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25], flashReadBuffer[26], flashReadBuffer[27],
 8002576:	4b49      	ldr	r3, [pc, #292]	; (800269c <main+0xd10>)
 8002578:	7ddb      	ldrb	r3, [r3, #23]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 800257a:	461c      	mov	r4, r3
																	flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25], flashReadBuffer[26], flashReadBuffer[27],
 800257c:	4b47      	ldr	r3, [pc, #284]	; (800269c <main+0xd10>)
 800257e:	7e1b      	ldrb	r3, [r3, #24]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 8002580:	461d      	mov	r5, r3
																	flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25], flashReadBuffer[26], flashReadBuffer[27],
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <main+0xd10>)
 8002584:	7e5b      	ldrb	r3, [r3, #25]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 8002586:	461e      	mov	r6, r3
																	flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25], flashReadBuffer[26], flashReadBuffer[27],
 8002588:	4b44      	ldr	r3, [pc, #272]	; (800269c <main+0xd10>)
 800258a:	7e9b      	ldrb	r3, [r3, #26]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
																	flashReadBuffer[22], flashReadBuffer[23], flashReadBuffer[24], flashReadBuffer[25], flashReadBuffer[26], flashReadBuffer[27],
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <main+0xd10>)
 8002590:	7edb      	ldrb	r3, [r3, #27]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 8002592:	623b      	str	r3, [r7, #32]
																	flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30]));
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <main+0xd10>)
 8002596:	7f1b      	ldrb	r3, [r3, #28]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 8002598:	61fb      	str	r3, [r7, #28]
																	flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30]));
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <main+0xd10>)
 800259c:	7f5b      	ldrb	r3, [r3, #29]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 800259e:	61bb      	str	r3, [r7, #24]
																	flashReadBuffer[28], flashReadBuffer[29], flashReadBuffer[30]));
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <main+0xd10>)
 80025a2:	7f9b      	ldrb	r3, [r3, #30]
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, ", %02X%02X, %02X%02X,     %02X%02X, %02X%02X, %02X%02X,     %02X%02X%02X", flashReadBuffer[18], flashReadBuffer[19], flashReadBuffer[20], flashReadBuffer[21],
 80025a4:	930a      	str	r3, [sp, #40]	; 0x28
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	9309      	str	r3, [sp, #36]	; 0x24
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	9308      	str	r3, [sp, #32]
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	9307      	str	r3, [sp, #28]
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	9306      	str	r3, [sp, #24]
 80025b6:	9605      	str	r6, [sp, #20]
 80025b8:	9504      	str	r5, [sp, #16]
 80025ba:	9403      	str	r4, [sp, #12]
 80025bc:	9002      	str	r0, [sp, #8]
 80025be:	9101      	str	r1, [sp, #4]
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	4673      	mov	r3, lr
 80025c4:	4662      	mov	r2, ip
 80025c6:	4938      	ldr	r1, [pc, #224]	; (80026a8 <main+0xd1c>)
 80025c8:	4832      	ldr	r0, [pc, #200]	; (8002694 <main+0xd08>)
 80025ca:	f00a fc1f 	bl	800ce0c <siprintf>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4619      	mov	r1, r3
 80025d4:	482f      	ldr	r0, [pc, #188]	; (8002694 <main+0xd08>)
 80025d6:	f009 fa15 	bl	800ba04 <CDC_Transmit_FS>
					address+=32;
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	3320      	adds	r3, #32
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48
				} while (address < start_address+DATA_RECORDING_LENGTH);
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80025e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f4ff af46 	bcc.w	800247a <main+0xaee>
			if (rxBuffer[0] > 47 && rxBuffer[0] < 58) { //ASCII values for 0-9
 80025ee:	e009      	b.n	8002604 <main+0xc78>
			} else {
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nExit confirmed\n"));
 80025f0:	492e      	ldr	r1, [pc, #184]	; (80026ac <main+0xd20>)
 80025f2:	4828      	ldr	r0, [pc, #160]	; (8002694 <main+0xd08>)
 80025f4:	f00a fc0a 	bl	800ce0c <siprintf>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	4825      	ldr	r0, [pc, #148]	; (8002694 <main+0xd08>)
 8002600:	f009 fa00 	bl	800ba04 <CDC_Transmit_FS>
			}
			usbStatus = 0;
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <main+0xcfc>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
			ledTimeout = 500;
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <main+0xd24>)
 800260c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e068      	b.n	80026e6 <main+0xd5a>
		} else if (usbStatus == 2) {
 8002614:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <main+0xcfc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d164      	bne.n	80026e6 <main+0xd5a>
			//check if we have confirmation to delete the entire chip
			if (rxBuffer[0] == 'y') {
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <main+0xd00>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b79      	cmp	r3, #121	; 0x79
 8002622:	d14d      	bne.n	80026c0 <main+0xd34>

				CSP_QSPI_Erase_Chip();
 8002624:	f000 fd28 	bl	8003078 <CSP_QSPI_Erase_Chip>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nChip Rewritten\n"));
 8002628:	4922      	ldr	r1, [pc, #136]	; (80026b4 <main+0xd28>)
 800262a:	481a      	ldr	r0, [pc, #104]	; (8002694 <main+0xd08>)
 800262c:	f00a fbee 	bl	800ce0c <siprintf>
 8002630:	4603      	mov	r3, r0
 8002632:	b29b      	uxth	r3, r3
 8002634:	4619      	mov	r1, r3
 8002636:	4817      	ldr	r0, [pc, #92]	; (8002694 <main+0xd08>)
 8002638:	f009 f9e4 	bl	800ba04 <CDC_Transmit_FS>
				for (uint8_t i = 0; i < 16; i++) {
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002642:	e00a      	b.n	800265a <main+0xcce>
					flashWriteBuffer[i] = i;
 8002644:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002648:	491b      	ldr	r1, [pc, #108]	; (80026b8 <main+0xd2c>)
 800264a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800264e:	54ca      	strb	r2, [r1, r3]
				for (uint8_t i = 0; i < 16; i++) {
 8002650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002654:	3301      	adds	r3, #1
 8002656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800265a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800265e:	2b0f      	cmp	r3, #15
 8002660:	d9f0      	bls.n	8002644 <main+0xcb8>
				}
				flashWriteBuffer[0] = 255;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <main+0xd2c>)
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	701a      	strb	r2, [r3, #0]
				CSP_QSPI_WriteMemory(flashWriteBuffer, DATA_CONFIG_LOCATION, 16);
 8002668:	2210      	movs	r2, #16
 800266a:	2100      	movs	r1, #0
 800266c:	4812      	ldr	r0, [pc, #72]	; (80026b8 <main+0xd2c>)
 800266e:	f000 ff11 	bl	8003494 <CSP_QSPI_WriteMemory>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nFlash config rewritten\n"));
 8002672:	4912      	ldr	r1, [pc, #72]	; (80026bc <main+0xd30>)
 8002674:	4807      	ldr	r0, [pc, #28]	; (8002694 <main+0xd08>)
 8002676:	f00a fbc9 	bl	800ce0c <siprintf>
 800267a:	4603      	mov	r3, r0
 800267c:	b29b      	uxth	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <main+0xd08>)
 8002682:	f009 f9bf 	bl	800ba04 <CDC_Transmit_FS>
 8002686:	e025      	b.n	80026d4 <main+0xd48>
 8002688:	20000374 	.word	0x20000374
 800268c:	20000330 	.word	0x20000330
 8002690:	0800f7b8 	.word	0x0800f7b8
 8002694:	200002f0 	.word	0x200002f0
 8002698:	0800f7e4 	.word	0x0800f7e4
 800269c:	20000478 	.word	0x20000478
 80026a0:	0800f804 	.word	0x0800f804
 80026a4:	0800f808 	.word	0x0800f808
 80026a8:	0800f86c 	.word	0x0800f86c
 80026ac:	0800f8b8 	.word	0x0800f8b8
 80026b0:	200004cc 	.word	0x200004cc
 80026b4:	0800f8cc 	.word	0x0800f8cc
 80026b8:	20000378 	.word	0x20000378
 80026bc:	0800f8e0 	.word	0x0800f8e0
			} else {
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\nExit Confirmed\n"));
 80026c0:	49ae      	ldr	r1, [pc, #696]	; (800297c <main+0xff0>)
 80026c2:	48af      	ldr	r0, [pc, #700]	; (8002980 <main+0xff4>)
 80026c4:	f00a fba2 	bl	800ce0c <siprintf>
 80026c8:	4603      	mov	r3, r0
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	48ac      	ldr	r0, [pc, #688]	; (8002980 <main+0xff4>)
 80026d0:	f009 f998 	bl	800ba04 <CDC_Transmit_FS>
			}
			usbStatus = 0;
 80026d4:	4bab      	ldr	r3, [pc, #684]	; (8002984 <main+0xff8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
			ledTimeout = 500;
 80026da:	4bab      	ldr	r3, [pc, #684]	; (8002988 <main+0xffc>)
 80026dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	e000      	b.n	80026e6 <main+0xd5a>
			if (rxBuffer[0] == '8') {
 80026e4:	bf00      	nop
		}
		//reset the rxBuffer so we don't accidentally do things multiple times
		memset (rxBuffer, '\0', 64);
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	2100      	movs	r1, #0
 80026ea:	48a8      	ldr	r0, [pc, #672]	; (800298c <main+0x1000>)
 80026ec:	f00a fc70 	bl	800cfd0 <memset>
	}

	//check if it's time to transmit the next data tick yet
	if (HAL_GetTick() > txDataTransmitTick + 1000 && usbStatus == 3) {
 80026f0:	f001 face 	bl	8003c90 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4ba6      	ldr	r3, [pc, #664]	; (8002990 <main+0x1004>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80026fe:	429a      	cmp	r2, r3
 8002700:	f240 80aa 	bls.w	8002858 <main+0xecc>
 8002704:	4b9f      	ldr	r3, [pc, #636]	; (8002984 <main+0xff8>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b03      	cmp	r3, #3
 800270a:	f040 80a5 	bne.w	8002858 <main+0xecc>
		//update the last time data was transmitted
		txDataTransmitTick = HAL_GetTick();
 800270e:	f001 fabf 	bl	8003c90 <HAL_GetTick>
 8002712:	4603      	mov	r3, r0
 8002714:	4a9e      	ldr	r2, [pc, #632]	; (8002990 <main+0x1004>)
 8002716:	6013      	str	r3, [r2, #0]

		//transmit the current data from the sensor structures
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
					bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 8002718:	4b9e      	ldr	r3, [pc, #632]	; (8002994 <main+0x1008>)
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff13 	bl	8000548 <__aeabi_f2d>
 8002722:	4680      	mov	r8, r0
 8002724:	4689      	mov	r9, r1
					bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 8002726:	4b9b      	ldr	r3, [pc, #620]	; (8002994 <main+0x1008>)
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff0c 	bl	8000548 <__aeabi_f2d>
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
					bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 8002734:	4b97      	ldr	r3, [pc, #604]	; (8002994 <main+0x1008>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd ff05 	bl	8000548 <__aeabi_f2d>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002746:	e9cd 4500 	strd	r4, r5, [sp]
 800274a:	4642      	mov	r2, r8
 800274c:	464b      	mov	r3, r9
 800274e:	4992      	ldr	r1, [pc, #584]	; (8002998 <main+0x100c>)
 8002750:	488b      	ldr	r0, [pc, #556]	; (8002980 <main+0xff4>)
 8002752:	f00a fb5b 	bl	800ce0c <siprintf>
 8002756:	4603      	mov	r3, r0
 8002758:	b29b      	uxth	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	4888      	ldr	r0, [pc, #544]	; (8002980 <main+0xff4>)
 800275e:	f009 f951 	bl	800ba04 <CDC_Transmit_FS>
		HAL_Delay(1);
 8002762:	2001      	movs	r0, #1
 8002764:	f001 faa0 	bl	8003ca8 <HAL_Delay>
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "BMI m/s^2: x: %.3f   y: %.3f   z: %.3f\n", bmi088.acc_mps2[0],bmi088.acc_mps2[1],bmi088.acc_mps2[2]));
 8002768:	4b8a      	ldr	r3, [pc, #552]	; (8002994 <main+0x1008>)
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd feeb 	bl	8000548 <__aeabi_f2d>
 8002772:	4680      	mov	r8, r0
 8002774:	4689      	mov	r9, r1
 8002776:	4b87      	ldr	r3, [pc, #540]	; (8002994 <main+0x1008>)
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fee4 	bl	8000548 <__aeabi_f2d>
 8002780:	4604      	mov	r4, r0
 8002782:	460d      	mov	r5, r1
 8002784:	4b83      	ldr	r3, [pc, #524]	; (8002994 <main+0x1008>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fedd 	bl	8000548 <__aeabi_f2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002796:	e9cd 4500 	strd	r4, r5, [sp]
 800279a:	4642      	mov	r2, r8
 800279c:	464b      	mov	r3, r9
 800279e:	497f      	ldr	r1, [pc, #508]	; (800299c <main+0x1010>)
 80027a0:	4877      	ldr	r0, [pc, #476]	; (8002980 <main+0xff4>)
 80027a2:	f00a fb33 	bl	800ce0c <siprintf>
 80027a6:	4603      	mov	r3, r0
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	4874      	ldr	r0, [pc, #464]	; (8002980 <main+0xff4>)
 80027ae:	f009 f929 	bl	800ba04 <CDC_Transmit_FS>
		HAL_Delay(1);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f001 fa78 	bl	8003ca8 <HAL_Delay>
		//CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Pressure: %.5f; Temperature: %.5f\n", bmp388.pressure,bmp388.temperature));
		//HAL_Delay(1);
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "KX134 m/s^2: x: %.3f   y: %.3f   z: %.3f\n", kx134.acc_mps2[0],kx134.acc_mps2[1],kx134.acc_mps2[2]));
 80027b8:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <main+0x1014>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fec3 	bl	8000548 <__aeabi_f2d>
 80027c2:	4680      	mov	r8, r0
 80027c4:	4689      	mov	r9, r1
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <main+0x1014>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd febc 	bl	8000548 <__aeabi_f2d>
 80027d0:	4604      	mov	r4, r0
 80027d2:	460d      	mov	r5, r1
 80027d4:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <main+0x1014>)
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd feb5 	bl	8000548 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027e6:	e9cd 4500 	strd	r4, r5, [sp]
 80027ea:	4642      	mov	r2, r8
 80027ec:	464b      	mov	r3, r9
 80027ee:	496d      	ldr	r1, [pc, #436]	; (80029a4 <main+0x1018>)
 80027f0:	4863      	ldr	r0, [pc, #396]	; (8002980 <main+0xff4>)
 80027f2:	f00a fb0b 	bl	800ce0c <siprintf>
 80027f6:	4603      	mov	r3, r0
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	4860      	ldr	r0, [pc, #384]	; (8002980 <main+0xff4>)
 80027fe:	f009 f901 	bl	800ba04 <CDC_Transmit_FS>
		HAL_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f001 fa50 	bl	8003ca8 <HAL_Delay>
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "LIS3MDL: x: %.3f   y: %.3f   z: %.3f\n", lis3mdl.mag[0],lis3mdl.mag[1],lis3mdl.mag[2]));
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <main+0x101c>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe9b 	bl	8000548 <__aeabi_f2d>
 8002812:	4680      	mov	r8, r0
 8002814:	4689      	mov	r9, r1
 8002816:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <main+0x101c>)
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe94 	bl	8000548 <__aeabi_f2d>
 8002820:	4604      	mov	r4, r0
 8002822:	460d      	mov	r5, r1
 8002824:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <main+0x101c>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe8d 	bl	8000548 <__aeabi_f2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002836:	e9cd 4500 	strd	r4, r5, [sp]
 800283a:	4642      	mov	r2, r8
 800283c:	464b      	mov	r3, r9
 800283e:	495b      	ldr	r1, [pc, #364]	; (80029ac <main+0x1020>)
 8002840:	484f      	ldr	r0, [pc, #316]	; (8002980 <main+0xff4>)
 8002842:	f00a fae3 	bl	800ce0c <siprintf>
 8002846:	4603      	mov	r3, r0
 8002848:	b29b      	uxth	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	484c      	ldr	r0, [pc, #304]	; (8002980 <main+0xff4>)
 800284e:	f009 f8d9 	bl	800ba04 <CDC_Transmit_FS>
		HAL_Delay(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f001 fa28 	bl	8003ca8 <HAL_Delay>

	/*
	 * TODO:
	 * 	Use fucking DMA next time
	 */
	if (HAL_GetTick() >= bmiTick + 5) { //interrupts fucking suck-- this should trigger ~200Hz
 8002858:	f001 fa1a 	bl	8003c90 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <main+0x1024>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3305      	adds	r3, #5
 8002864:	429a      	cmp	r2, r3
 8002866:	d311      	bcc.n	800288c <main+0xf00>
		bmiTick = HAL_GetTick();
 8002868:	f001 fa12 	bl	8003c90 <HAL_GetTick>
 800286c:	4603      	mov	r3, r0
 800286e:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <main+0x1024>)
 8002870:	6013      	str	r3, [r2, #0]
		newData = newData | 0x1;
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <main+0x1028>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <main+0x1028>)
 800287e:	701a      	strb	r2, [r3, #0]
		BMI088_ReadGyroscope(&bmi088);
 8002880:	4844      	ldr	r0, [pc, #272]	; (8002994 <main+0x1008>)
 8002882:	f7fe fc1f 	bl	80010c4 <BMI088_ReadGyroscope>
		BMI088_ReadAccelerometer(&bmi088);
 8002886:	4843      	ldr	r0, [pc, #268]	; (8002994 <main+0x1008>)
 8002888:	f7fe fb94 	bl	8000fb4 <BMI088_ReadAccelerometer>
	*/

	/*
	 *devices using hspi3
	 */
	if (HAL_GetTick() >= spi3Tick + 5) { //interrupts fucking suck-- this should trigger ~200Hz
 800288c:	f001 fa00 	bl	8003c90 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <main+0x102c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3305      	adds	r3, #5
 8002898:	429a      	cmp	r2, r3
 800289a:	d311      	bcc.n	80028c0 <main+0xf34>
		spi3Tick = HAL_GetTick();
 800289c:	f001 f9f8 	bl	8003c90 <HAL_GetTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <main+0x102c>)
 80028a4:	6013      	str	r3, [r2, #0]
		newData = newData | 0x4;
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <main+0x1028>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <main+0x1028>)
 80028b2:	701a      	strb	r2, [r3, #0]
		KX134_Read(&kx134);
 80028b4:	483a      	ldr	r0, [pc, #232]	; (80029a0 <main+0x1014>)
 80028b6:	f7fe fd95 	bl	80013e4 <KX134_Read>
		LIS3MDL_Read(&lis3mdl);
 80028ba:	483b      	ldr	r0, [pc, #236]	; (80029a8 <main+0x101c>)
 80028bc:	f7fe fef6 	bl	80016ac <LIS3MDL_Read>
	 * DATA RECORDING
	 *
	 *
	 */

	if (recordingData == 1) {
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <main+0x1030>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f040 80ef 	bne.w	8002aa8 <main+0x111c>
		//check if there is new data from the gyroscope
		if ((newData & 0x01) == 0x01) {
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <main+0x1028>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 81f3 	beq.w	8002cbe <main+0x1332>
			//store data from the gyroscope into the first 32 bytes of the flashWriteBuffer
			uint8_t *timeArray;
			uint16_t timeValue = HAL_GetTick() & 0xFFFF;
 80028d8:	f001 f9da 	bl	8003c90 <HAL_GetTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29b      	uxth	r3, r3
 80028e0:	857b      	strh	r3, [r7, #42]	; 0x2a
			timeArray = (uint8_t*)(&timeValue);
 80028e2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34

			for (uint8_t i = 0; i < 4; i++) {
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80028ee:	e00d      	b.n	800290c <main+0xf80>
				flashWriteBuffer[i] = timeArray[i];
 80028f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f6:	441a      	add	r2, r3
 80028f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028fc:	7811      	ldrb	r1, [r2, #0]
 80028fe:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <main+0x1034>)
 8002900:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 4; i++) {
 8002902:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002906:	3301      	adds	r3, #1
 8002908:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800290c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002910:	2b03      	cmp	r3, #3
 8002912:	d9ed      	bls.n	80028f0 <main+0xf64>
			}
			for (uint8_t i = 0; i < 6; i++) {
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800291a:	e00f      	b.n	800293c <main+0xfb0>
				flashWriteBuffer[i+4] = bmi088.gyr_data[i];
 800291c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002920:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002924:	3304      	adds	r3, #4
 8002926:	491b      	ldr	r1, [pc, #108]	; (8002994 <main+0x1008>)
 8002928:	440a      	add	r2, r1
 800292a:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <main+0x1034>)
 8002930:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 6; i++) {
 8002932:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002936:	3301      	adds	r3, #1
 8002938:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800293c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002940:	2b05      	cmp	r3, #5
 8002942:	d9eb      	bls.n	800291c <main+0xf90>
			}
			for (uint8_t i = 0; i < 6; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800294a:	e00f      	b.n	800296c <main+0xfe0>
				flashWriteBuffer[i+10] = bmi088.acc_data[i];
 800294c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002950:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002954:	330a      	adds	r3, #10
 8002956:	490f      	ldr	r1, [pc, #60]	; (8002994 <main+0x1008>)
 8002958:	440a      	add	r2, r1
 800295a:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <main+0x1034>)
 8002960:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 6; i++) {
 8002962:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002966:	3301      	adds	r3, #1
 8002968:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800296c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002970:	2b05      	cmp	r3, #5
 8002972:	d9eb      	bls.n	800294c <main+0xfc0>
			}
			for (uint8_t i = 0; i < 6; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800297a:	e032      	b.n	80029e2 <main+0x1056>
 800297c:	0800f8fc 	.word	0x0800f8fc
 8002980:	200002f0 	.word	0x200002f0
 8002984:	20000374 	.word	0x20000374
 8002988:	200004cc 	.word	0x200004cc
 800298c:	20000330 	.word	0x20000330
 8002990:	20000370 	.word	0x20000370
 8002994:	200004d8 	.word	0x200004d8
 8002998:	0800f910 	.word	0x0800f910
 800299c:	0800f938 	.word	0x0800f938
 80029a0:	20000598 	.word	0x20000598
 80029a4:	0800f960 	.word	0x0800f960
 80029a8:	20000578 	.word	0x20000578
 80029ac:	0800f98c 	.word	0x0800f98c
 80029b0:	20000574 	.word	0x20000574
 80029b4:	200004c5 	.word	0x200004c5
 80029b8:	200005cc 	.word	0x200005cc
 80029bc:	200004c4 	.word	0x200004c4
 80029c0:	20000378 	.word	0x20000378
				flashWriteBuffer[i+16] = lis3mdl.data[i];
 80029c4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80029c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80029cc:	3310      	adds	r3, #16
 80029ce:	4961      	ldr	r1, [pc, #388]	; (8002b54 <main+0x11c8>)
 80029d0:	440a      	add	r2, r1
 80029d2:	7e11      	ldrb	r1, [r2, #24]
 80029d4:	4a60      	ldr	r2, [pc, #384]	; (8002b58 <main+0x11cc>)
 80029d6:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 6; i++) {
 80029d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80029dc:	3301      	adds	r3, #1
 80029de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80029e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d9ec      	bls.n	80029c4 <main+0x1038>
			}
			for (uint8_t i = 0; i < 6; i++) {
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80029f0:	e00f      	b.n	8002a12 <main+0x1086>
				flashWriteBuffer[i+22] = kx134.data[i];
 80029f2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80029f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80029fa:	3316      	adds	r3, #22
 80029fc:	4957      	ldr	r1, [pc, #348]	; (8002b5c <main+0x11d0>)
 80029fe:	440a      	add	r2, r1
 8002a00:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002a04:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <main+0x11cc>)
 8002a06:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 6; i++) {
 8002a08:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002a12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d9eb      	bls.n	80029f2 <main+0x1066>
			}
			for (uint8_t i = 0; i < 3; i++) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002a20:	e00f      	b.n	8002a42 <main+0x10b6>
				flashWriteBuffer[i+28] = bmp388.data[i];
 8002a22:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002a26:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002a2a:	331c      	adds	r3, #28
 8002a2c:	494c      	ldr	r1, [pc, #304]	; (8002b60 <main+0x11d4>)
 8002a2e:	440a      	add	r2, r1
 8002a30:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 8002a34:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <main+0x11cc>)
 8002a36:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 3; i++) {
 8002a38:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002a42:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d9eb      	bls.n	8002a22 <main+0x1096>
			}
			flashWriteBuffer[31] = 0xFF;
 8002a4a:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <main+0x11cc>)
 8002a4c:	22ff      	movs	r2, #255	; 0xff
 8002a4e:	77da      	strb	r2, [r3, #31]

			if (writeHead % 256 == 0) {
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <main+0x11d8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <main+0x10e2>
				//write data to the flash chip
				CSP_QSPI_WriteMemory(flashWriteBuffer, writeHead-256, 256);
 8002a5a:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <main+0x11d8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a66:	4619      	mov	r1, r3
 8002a68:	483b      	ldr	r0, [pc, #236]	; (8002b58 <main+0x11cc>)
 8002a6a:	f000 fd13 	bl	8003494 <CSP_QSPI_WriteMemory>
			}

			if (writeHead > writeHeadEnd) {
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <main+0x11d8>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <main+0x11dc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d912      	bls.n	8002aa0 <main+0x1114>
				//if we reached the end of the data recording length, turn off the function to record data
				recordingData = 0;
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <main+0x11e0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Done Recording Data\n"));
 8002a80:	493b      	ldr	r1, [pc, #236]	; (8002b70 <main+0x11e4>)
 8002a82:	483c      	ldr	r0, [pc, #240]	; (8002b74 <main+0x11e8>)
 8002a84:	f00a f9c2 	bl	800ce0c <siprintf>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4839      	ldr	r0, [pc, #228]	; (8002b74 <main+0x11e8>)
 8002a90:	f008 ffb8 	bl	800ba04 <CDC_Transmit_FS>
				HAL_GPIO_WritePin(Continuity_LED_A_GPIO_Port, Continuity_LED_A_Pin, GPIO_PIN_RESET); //reset the gpio pin A to show no longer recording data
 8002a94:	2200      	movs	r2, #0
 8002a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a9a:	4837      	ldr	r0, [pc, #220]	; (8002b78 <main+0x11ec>)
 8002a9c:	f001 fd16 	bl	80044cc <HAL_GPIO_WritePin>
			}
			newData = 0;
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <main+0x11f0>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e10a      	b.n	8002cbe <main+0x1332>
		}
	} else {
		if (kx134.acc_mps2[0] > 30.f || kx134.acc_mps2[0] < -30.f || kx134.acc_mps2[1] > 30.f || kx134.acc_mps2[1] < -30.f || kx134.acc_mps2[2] > 30.f || kx134.acc_mps2[2] < -30.f) {
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <main+0x11d0>)
 8002aaa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aae:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	dc32      	bgt.n	8002b22 <main+0x1196>
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <main+0x11d0>)
 8002abe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ac2:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	d428      	bmi.n	8002b22 <main+0x1196>
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <main+0x11d0>)
 8002ad2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ad6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	dc1e      	bgt.n	8002b22 <main+0x1196>
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <main+0x11d0>)
 8002ae6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002aea:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	d414      	bmi.n	8002b22 <main+0x1196>
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <main+0x11d0>)
 8002afa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002afe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	dc0a      	bgt.n	8002b22 <main+0x1196>
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <main+0x11d0>)
 8002b0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002b12:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	f140 80ce 	bpl.w	8002cbe <main+0x1332>
			HAL_GPIO_WritePin(Continuity_LED_B_GPIO_Port, Continuity_LED_B_Pin, GPIO_PIN_SET);
 8002b22:	2201      	movs	r2, #1
 8002b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b28:	4813      	ldr	r0, [pc, #76]	; (8002b78 <main+0x11ec>)
 8002b2a:	f001 fccf 	bl	80044cc <HAL_GPIO_WritePin>
			//if we detect movement, check if we haven't already recorded a flight
			//get the current config information
			CSP_QSPI_Read(flashReadBuffer, DATA_CONFIG_LOCATION, 16);
 8002b2e:	2210      	movs	r2, #16
 8002b30:	2100      	movs	r1, #0
 8002b32:	4813      	ldr	r0, [pc, #76]	; (8002b80 <main+0x11f4>)
 8002b34:	f000 fda2 	bl	800367c <CSP_QSPI_Read>
			if (dataWritten == 0 && flashReadBuffer[0] > 31) { //we only want to record up to four times
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <main+0x11f8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 80be 	bne.w	8002cbe <main+0x1332>
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <main+0x11f4>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b1f      	cmp	r3, #31
 8002b48:	f240 80b9 	bls.w	8002cbe <main+0x1332>
				//copy the data read in from the flashReadBuffer to the flashWriteBuffer
				for (uint8_t i = 0; i < 16; i++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002b52:	e026      	b.n	8002ba2 <main+0x1216>
 8002b54:	20000578 	.word	0x20000578
 8002b58:	20000378 	.word	0x20000378
 8002b5c:	20000598 	.word	0x20000598
 8002b60:	20000534 	.word	0x20000534
 8002b64:	200004bc 	.word	0x200004bc
 8002b68:	200004c0 	.word	0x200004c0
 8002b6c:	200004c4 	.word	0x200004c4
 8002b70:	0800f9b4 	.word	0x0800f9b4
 8002b74:	200002f0 	.word	0x200002f0
 8002b78:	48000c00 	.word	0x48000c00
 8002b7c:	200004c5 	.word	0x200004c5
 8002b80:	20000478 	.word	0x20000478
 8002b84:	200004b8 	.word	0x200004b8
					flashWriteBuffer[i] = flashReadBuffer[i];
 8002b88:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002b8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002b90:	4973      	ldr	r1, [pc, #460]	; (8002d60 <main+0x13d4>)
 8002b92:	5c89      	ldrb	r1, [r1, r2]
 8002b94:	4a73      	ldr	r2, [pc, #460]	; (8002d64 <main+0x13d8>)
 8002b96:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 16; i++) {
 8002b98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002ba2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	d9ee      	bls.n	8002b88 <main+0x11fc>
				 * Increment the location of the flash storage-- because of the way NOR memory works,
				 * once a byte has been written 0, it cannot be changed without erasing the sector--
				 * this means we obtain a counter from 1 to 8 by bit shifting down, setting each consecutive
				 * MSB to 0 to indicate another recording
				 */
				flashWriteBuffer[0] = flashWriteBuffer[0] >> 1;
 8002baa:	4b6e      	ldr	r3, [pc, #440]	; (8002d64 <main+0x13d8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <main+0x13d8>)
 8002bb4:	701a      	strb	r2, [r3, #0]

				//need to erase flash memory before stuff can be re-written
				CSP_QSPI_EraseSector(0, MEMORY_SECTOR_SIZE);
 8002bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f000 fc18 	bl	80033f0 <CSP_QSPI_EraseSector>
				CSP_QSPI_WriteMemory(flashWriteBuffer, DATA_CONFIG_LOCATION, 16);
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4867      	ldr	r0, [pc, #412]	; (8002d64 <main+0x13d8>)
 8002bc6:	f000 fc65 	bl	8003494 <CSP_QSPI_WriteMemory>

				CSP_QSPI_Read(flashReadBuffer, DATA_CONFIG_LOCATION, 16);
 8002bca:	2210      	movs	r2, #16
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4864      	ldr	r0, [pc, #400]	; (8002d60 <main+0x13d4>)
 8002bd0:	f000 fd54 	bl	800367c <CSP_QSPI_Read>
				//transmit to the host computer
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002bd4:	4b62      	ldr	r3, [pc, #392]	; (8002d60 <main+0x13d4>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	469c      	mov	ip, r3
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <main+0x13d4>)
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	469e      	mov	lr, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002be0:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <main+0x13d4>)
 8002be2:	789b      	ldrb	r3, [r3, #2]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002be4:	4618      	mov	r0, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002be6:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <main+0x13d4>)
 8002be8:	78db      	ldrb	r3, [r3, #3]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002bea:	461c      	mov	r4, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002bec:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <main+0x13d4>)
 8002bee:	791b      	ldrb	r3, [r3, #4]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002bf0:	461d      	mov	r5, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <main+0x13d4>)
 8002bf4:	795b      	ldrb	r3, [r3, #5]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002bf6:	461e      	mov	r6, r3
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <main+0x13d4>)
 8002bfa:	799b      	ldrb	r3, [r3, #6]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <main+0x13d4>)
 8002c00:	79db      	ldrb	r3, [r3, #7]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c02:	623b      	str	r3, [r7, #32]
						flashReadBuffer[2], flashReadBuffer[3], flashReadBuffer[4], flashReadBuffer[5], flashReadBuffer[6], flashReadBuffer[7], flashReadBuffer[8],
 8002c04:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <main+0x13d4>)
 8002c06:	7a1b      	ldrb	r3, [r3, #8]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c08:	61fb      	str	r3, [r7, #28]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c0a:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <main+0x13d4>)
 8002c0c:	7a5b      	ldrb	r3, [r3, #9]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c0e:	61bb      	str	r3, [r7, #24]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <main+0x13d4>)
 8002c12:	7a9b      	ldrb	r3, [r3, #10]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c14:	617b      	str	r3, [r7, #20]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <main+0x13d4>)
 8002c18:	7adb      	ldrb	r3, [r3, #11]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c1a:	613b      	str	r3, [r7, #16]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <main+0x13d4>)
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c20:	60fb      	str	r3, [r7, #12]
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <main+0x13d4>)
 8002c24:	7b5b      	ldrb	r3, [r3, #13]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c26:	4619      	mov	r1, r3
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c28:	4b4d      	ldr	r3, [pc, #308]	; (8002d60 <main+0x13d4>)
 8002c2a:	7b9b      	ldrb	r3, [r3, #14]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c2c:	461a      	mov	r2, r3
						flashReadBuffer[9], flashReadBuffer[10], flashReadBuffer[11], flashReadBuffer[12], flashReadBuffer[13], flashReadBuffer[14], flashReadBuffer[15]));
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <main+0x13d4>)
 8002c30:	7bdb      	ldrb	r3, [r3, #15]
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n", flashReadBuffer[0], flashReadBuffer[1],
 8002c32:	930d      	str	r3, [sp, #52]	; 0x34
 8002c34:	920c      	str	r2, [sp, #48]	; 0x30
 8002c36:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	920a      	str	r2, [sp, #40]	; 0x28
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	9208      	str	r2, [sp, #32]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	9207      	str	r2, [sp, #28]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	9206      	str	r2, [sp, #24]
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	9205      	str	r2, [sp, #20]
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	9304      	str	r3, [sp, #16]
 8002c54:	9603      	str	r6, [sp, #12]
 8002c56:	9502      	str	r5, [sp, #8]
 8002c58:	9401      	str	r4, [sp, #4]
 8002c5a:	9000      	str	r0, [sp, #0]
 8002c5c:	4673      	mov	r3, lr
 8002c5e:	4662      	mov	r2, ip
 8002c60:	4941      	ldr	r1, [pc, #260]	; (8002d68 <main+0x13dc>)
 8002c62:	4842      	ldr	r0, [pc, #264]	; (8002d6c <main+0x13e0>)
 8002c64:	f00a f8d2 	bl	800ce0c <siprintf>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	483f      	ldr	r0, [pc, #252]	; (8002d6c <main+0x13e0>)
 8002c70:	f008 fec8 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f001 f817 	bl	8003ca8 <HAL_Delay>


				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Recording Data...%i\n", flashWriteBuffer[0]));
 8002c7a:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <main+0x13d8>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	493b      	ldr	r1, [pc, #236]	; (8002d70 <main+0x13e4>)
 8002c82:	483a      	ldr	r0, [pc, #232]	; (8002d6c <main+0x13e0>)
 8002c84:	f00a f8c2 	bl	800ce0c <siprintf>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4837      	ldr	r0, [pc, #220]	; (8002d6c <main+0x13e0>)
 8002c90:	f008 feb8 	bl	800ba04 <CDC_Transmit_FS>
				HAL_Delay(1);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f001 f807 	bl	8003ca8 <HAL_Delay>

				//if recording starts, LED A goes high, if movement is detected but no recording is started, LED B goes high
				HAL_GPIO_WritePin(Continuity_LED_B_GPIO_Port, Continuity_LED_B_Pin, GPIO_PIN_RESET);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ca0:	4834      	ldr	r0, [pc, #208]	; (8002d74 <main+0x13e8>)
 8002ca2:	f001 fc13 	bl	80044cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Continuity_LED_A_GPIO_Port, Continuity_LED_A_Pin, GPIO_PIN_SET);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cac:	4831      	ldr	r0, [pc, #196]	; (8002d74 <main+0x13e8>)
 8002cae:	f001 fc0d 	bl	80044cc <HAL_GPIO_WritePin>

				//set recording flags
				recordingData = 1;
 8002cb2:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <main+0x13ec>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
				dataWritten = 1;
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <main+0x13f0>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
	 *
	 * LED AND BUZZER FEEDBACK
	 *
	 *
	 */
	if (HAL_GetTick() > ledTick + ledTimeout) {
 8002cbe:	f000 ffe7 	bl	8003c90 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <main+0x13f4>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <main+0x13f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	440b      	add	r3, r1
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d91c      	bls.n	8002d0e <main+0x1382>
		ledTick = HAL_GetTick();
 8002cd4:	f000 ffdc 	bl	8003c90 <HAL_GetTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <main+0x13f8>)
 8002cdc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8002cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ce2:	4824      	ldr	r0, [pc, #144]	; (8002d74 <main+0x13e8>)
 8002ce4:	f001 fc0a 	bl	80044fc <HAL_GPIO_TogglePin>
		if (recordingData == 1) {
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <main+0x13ec>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d104      	bne.n	8002cfa <main+0x136e>
			HAL_GPIO_TogglePin(Continuity_LED_C_GPIO_Port, Continuity_LED_C_Pin);
 8002cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf4:	4824      	ldr	r0, [pc, #144]	; (8002d88 <main+0x13fc>)
 8002cf6:	f001 fc01 	bl	80044fc <HAL_GPIO_TogglePin>
		}
		//ternary expression to toggle buzzerEnable on and off
		buzzerEnable = (buzzerEnable == 0) ? 1 : 0;
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <main+0x1400>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <main+0x1400>)
 8002d0c:	701a      	strb	r2, [r3, #0]
	}
	//TODO: use a timer and actual PWM b.c. tones other than 1kHz are nice and more efficient computationally
	if (HAL_GetTick() > buzzerTick && buzzerEnable && buzzerTick < 0xFFFFF) {
 8002d0e:	f000 ffbf 	bl	8003c90 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <main+0x1404>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d913      	bls.n	8002d44 <main+0x13b8>
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <main+0x1400>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00f      	beq.n	8002d44 <main+0x13b8>
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <main+0x1404>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <main+0x1408>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d80a      	bhi.n	8002d44 <main+0x13b8>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8002d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d32:	4819      	ldr	r0, [pc, #100]	; (8002d98 <main+0x140c>)
 8002d34:	f001 fbe2 	bl	80044fc <HAL_GPIO_TogglePin>
		buzzerTick = HAL_GetTick();
 8002d38:	f000 ffaa 	bl	8003c90 <HAL_GetTick>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <main+0x1404>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <main+0x13d0>
	} else if (buzzerTick > 0xFFFF) {
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <main+0x1404>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	f4fe afc4 	bcc.w	8001cd8 <main+0x34c>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d56:	4810      	ldr	r0, [pc, #64]	; (8002d98 <main+0x140c>)
 8002d58:	f001 fbb8 	bl	80044cc <HAL_GPIO_WritePin>
	if (rxBuffer[0] != 0) {
 8002d5c:	f7fe bfbc 	b.w	8001cd8 <main+0x34c>
 8002d60:	20000478 	.word	0x20000478
 8002d64:	20000378 	.word	0x20000378
 8002d68:	0800f6bc 	.word	0x0800f6bc
 8002d6c:	200002f0 	.word	0x200002f0
 8002d70:	0800f9cc 	.word	0x0800f9cc
 8002d74:	48000c00 	.word	0x48000c00
 8002d78:	200004c4 	.word	0x200004c4
 8002d7c:	200004b8 	.word	0x200004b8
 8002d80:	200004cc 	.word	0x200004cc
 8002d84:	200004c8 	.word	0x200004c8
 8002d88:	48000400 	.word	0x48000400
 8002d8c:	200004d4 	.word	0x200004d4
 8002d90:	200004d0 	.word	0x200004d0
 8002d94:	000ffffe 	.word	0x000ffffe
 8002d98:	48001000 	.word	0x48001000

08002d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b096      	sub	sp, #88	; 0x58
 8002da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	2244      	movs	r2, #68	; 0x44
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00a f910 	bl	800cfd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db0:	463b      	mov	r3, r7
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002dbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dc2:	f002 fd6b 	bl	800589c <HAL_PWREx_ControlVoltageScaling>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002dcc:	f000 f836 	bl	8002e3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dde:	2303      	movs	r3, #3
 8002de0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002de6:	230a      	movs	r3, #10
 8002de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002dea:	2307      	movs	r3, #7
 8002dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002dee:	2302      	movs	r3, #2
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002df2:	2302      	movs	r3, #2
 8002df4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 faa0 	bl	8006340 <HAL_RCC_OscConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002e06:	f000 f819 	bl	8002e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0a:	230f      	movs	r3, #15
 8002e0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e1e:	463b      	mov	r3, r7
 8002e20:	2104      	movs	r1, #4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fe68 	bl	8006af8 <HAL_RCC_ClockConfig>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e2e:	f000 f805 	bl	8002e3c <Error_Handler>
  }
}
 8002e32:	bf00      	nop
 8002e34:	3758      	adds	r7, #88	; 0x58
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8002e44:	2201      	movs	r2, #1
 8002e46:	2104      	movs	r1, #4
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <Error_Handler+0x24>)
 8002e4a:	f001 fb3f 	bl	80044cc <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_TogglePin(Pyro_F_Trigger_GPIO_Port, Pyro_F_Trigger_Pin);
 8002e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e52:	4804      	ldr	r0, [pc, #16]	; (8002e64 <Error_Handler+0x28>)
 8002e54:	f001 fb52 	bl	80044fc <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8002e58:	20fa      	movs	r0, #250	; 0xfa
 8002e5a:	f000 ff25 	bl	8003ca8 <HAL_Delay>
	  HAL_GPIO_TogglePin(Pyro_F_Trigger_GPIO_Port, Pyro_F_Trigger_Pin);
 8002e5e:	e7f6      	b.n	8002e4e <Error_Handler+0x12>
 8002e60:	48000400 	.word	0x48000400
 8002e64:	48001000 	.word	0x48001000

08002e68 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <MX_QUADSPI_Init+0x48>)
 8002e70:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e80:	2210      	movs	r2, #16
 8002e82:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e86:	2217      	movs	r2, #23
 8002e88:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_QUADSPI_Init+0x44>)
 8002e98:	f002 fd66 	bl	8005968 <HAL_QSPI_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002ea2:	f7ff ffcb 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200005d0 	.word	0x200005d0
 8002eb0:	a0001000 	.word	0xa0001000

08002eb4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a34      	ldr	r2, [pc, #208]	; (8002fa4 <HAL_QSPI_MspInit+0xf0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d161      	bne.n	8002f9a <HAL_QSPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efa:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f06:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f12:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_QSPI_MspInit+0xf4>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f36:	23c0      	movs	r3, #192	; 0xc0
 8002f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f46:	230a      	movs	r3, #10
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	f107 031c 	add.w	r3, r7, #28
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f54:	f001 f81c 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f68:	230a      	movs	r3, #10
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <HAL_QSPI_MspInit+0xf8>)
 8002f74:	f001 f80c 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	4619      	mov	r1, r3
 8002f94:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <HAL_QSPI_MspInit+0xfc>)
 8002f96:	f000 fffb 	bl	8003f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3730      	adds	r7, #48	; 0x30
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	a0001000 	.word	0xa0001000
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	48000400 	.word	0x48000400
 8002fb0:	48001000 	.word	0x48001000

08002fb4 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_QSPI_MspDeInit+0x44>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d113      	bne.n	8002fee <HAL_QSPI_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_QSPI_MspDeInit+0x48>)
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <HAL_QSPI_MspDeInit+0x48>)
 8002fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd0:	6513      	str	r3, [r2, #80]	; 0x50
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8002fd2:	21c0      	movs	r1, #192	; 0xc0
 8002fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd8:	f001 f984 	bl	80042e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8002fdc:	2103      	movs	r1, #3
 8002fde:	4808      	ldr	r0, [pc, #32]	; (8003000 <HAL_QSPI_MspDeInit+0x4c>)
 8002fe0:	f001 f980 	bl	80042e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11);
 8002fe4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002fe8:	4806      	ldr	r0, [pc, #24]	; (8003004 <HAL_QSPI_MspDeInit+0x50>)
 8002fea:	f001 f97b 	bl	80042e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	a0001000 	.word	0xa0001000
 8002ffc:	40021000 	.word	0x40021000
 8003000:	48000400 	.word	0x48000400
 8003004:	48001000 	.word	0x48001000

08003008 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */
/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0

	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <CSP_QUADSPI_Init+0x68>)
 800300e:	4a19      	ldr	r2, [pc, #100]	; (8003074 <CSP_QUADSPI_Init+0x6c>)
 8003010:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8003012:	4817      	ldr	r0, [pc, #92]	; (8003070 <CSP_QUADSPI_Init+0x68>)
 8003014:	f002 fd1e 	bl	8005a54 <HAL_QSPI_DeInit>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e024      	b.n	800306c <CSP_QUADSPI_Init+0x64>
	}

	MX_QUADSPI_Init();
 8003022:	f7ff ff21 	bl	8002e68 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8003026:	f000 fac1 	bl	80035ac <QSPI_ResetChip>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e01b      	b.n	800306c <CSP_QUADSPI_Init+0x64>
	}

	HAL_Delay(1);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 fe37 	bl	8003ca8 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800303a:	f000 f855 	bl	80030e8 <QSPI_AutoPollingMemReady>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e011      	b.n	800306c <CSP_QUADSPI_Init+0x64>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8003048:	f000 f89a 	bl	8003180 <QSPI_WriteEnable>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00a      	b.n	800306c <CSP_QUADSPI_Init+0x64>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8003056:	f000 f8f5 	bl	8003244 <QSPI_Configuration>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e003      	b.n	800306c <CSP_QUADSPI_Init+0x64>
	}

	HAL_Delay(100);
 8003064:	2064      	movs	r0, #100	; 0x64
 8003066:	f000 fe1f 	bl	8003ca8 <HAL_Delay>

	return HAL_OK;
 800306a:	2300      	movs	r3, #0

}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200005d0 	.word	0x200005d0
 8003074:	a0001000 	.word	0xa0001000

08003078 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	; 0x38
 800307c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;

	if (QSPI_WriteEnable() != HAL_OK) {
 800307e:	f000 f87f 	bl	8003180 <QSPI_WriteEnable>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e026      	b.n	80030da <CSP_QSPI_Erase_Chip+0x62>
	}

	/* Erasing Sequence --------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800308c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003090:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = CHIP_ERASE_CMD;
 8003092:	23c7      	movs	r3, #199	; 0xc7
 8003094:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY) != HAL_OK) {
 80030b2:	463b      	mov	r3, r7
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030b8:	4619      	mov	r1, r3
 80030ba:	480a      	ldr	r0, [pc, #40]	; (80030e4 <CSP_QSPI_Erase_Chip+0x6c>)
 80030bc:	f002 fcee 	bl	8005a9c <HAL_QSPI_Command>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <CSP_QSPI_Erase_Chip+0x52>
		return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e007      	b.n	80030da <CSP_QSPI_Erase_Chip+0x62>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80030ca:	f000 f80d 	bl	80030e8 <QSPI_AutoPollingMemReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <CSP_QSPI_Erase_Chip+0x60>
		return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <CSP_QSPI_Erase_Chip+0x62>
	}

	return HAL_OK;
 80030d8:	2300      	movs	r3, #0

}
 80030da:	4618      	mov	r0, r3
 80030dc:	3738      	adds	r7, #56	; 0x38
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200005d0 	.word	0x200005d0

080030e8 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b096      	sub	sp, #88	; 0x58
 80030ec:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	2238      	movs	r2, #56	; 0x38
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f009 ff6a 	bl	800cfd0 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800310c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8003112:	2305      	movs	r3, #5
 8003114:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8003116:	2300      	movs	r3, #0
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800311e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800312c:	2300      	movs	r3, #0
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003130:	2300      	movs	r3, #0
 8003132:	653b      	str	r3, [r7, #80]	; 0x50

	sConfig.Match = 0x00;
 8003134:	2300      	movs	r3, #0
 8003136:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8003138:	2301      	movs	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8003144:	2310      	movs	r3, #16
 8003146:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003148:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800314c:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800314e:	1d3a      	adds	r2, r7, #4
 8003150:	f107 011c 	add.w	r1, r7, #28
 8003154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003158:	4808      	ldr	r0, [pc, #32]	; (800317c <QSPI_AutoPollingMemReady+0x94>)
 800315a:	f002 fe36 	bl	8005dca <HAL_QSPI_AutoPolling>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 800316c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003170:	e000      	b.n	8003174 <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3758      	adds	r7, #88	; 0x58
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200005d0 	.word	0x200005d0

08003180 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b096      	sub	sp, #88	; 0x58
 8003184:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8003186:	f107 031c 	add.w	r3, r7, #28
 800318a:	2238      	movs	r2, #56	; 0x38
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f009 ff1e 	bl	800cfd0 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80031a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80031aa:	2306      	movs	r3, #6
 80031ac:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80031c2:	2300      	movs	r3, #0
 80031c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80031c6:	2300      	movs	r3, #0
 80031c8:	653b      	str	r3, [r7, #80]	; 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4619      	mov	r1, r3
 80031d4:	481a      	ldr	r0, [pc, #104]	; (8003240 <QSPI_WriteEnable+0xc0>)
 80031d6:	f002 fc61 	bl	8005a9c <HAL_QSPI_Command>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80031e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 80031e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031ec:	e024      	b.n	8003238 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 80031ee:	2302      	movs	r3, #2
 80031f0:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 80031f2:	2302      	movs	r3, #2
 80031f4:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 80031fe:	2310      	movs	r3, #16
 8003200:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003206:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8003208:	2305      	movs	r3, #5
 800320a:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800320c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003210:	643b      	str	r3, [r7, #64]	; 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8003212:	1d3a      	adds	r2, r7, #4
 8003214:	f107 011c 	add.w	r1, r7, #28
 8003218:	f241 3388 	movw	r3, #5000	; 0x1388
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <QSPI_WriteEnable+0xc0>)
 800321e:	f002 fdd4 	bl	8005dca <HAL_QSPI_AutoPolling>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8003230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003234:	e000      	b.n	8003238 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3758      	adds	r7, #88	; 0x58
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200005d0 	.word	0x200005d0

08003244 <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b090      	sub	sp, #64	; 0x40
 8003248:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2238      	movs	r2, #56	; 0x38
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f009 febd 	bl	800cfd0 <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325a:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 800325c:	2335      	movs	r3, #53	; 0x35
 800325e:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8003260:	2300      	movs	r3, #0
 8003262:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8003268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003272:	2300      	movs	r3, #0
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800327a:	2300      	movs	r3, #0
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4619      	mov	r1, r3
 800328a:	4858      	ldr	r0, [pc, #352]	; (80033ec <QSPI_Configuration+0x1a8>)
 800328c:	f002 fc06 	bl	8005a9c <HAL_QSPI_Command>
 8003290:	4603      	mov	r3, r0
 8003292:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003296:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 800329e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032a2:	e09f      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 80032a4:	1cfb      	adds	r3, r7, #3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4619      	mov	r1, r3
 80032ac:	484f      	ldr	r0, [pc, #316]	; (80033ec <QSPI_Configuration+0x1a8>)
 80032ae:	f002 fcea 	bl	8005c86 <HAL_QSPI_Receive>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80032b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 80032c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032c4:	e08e      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 80032ca:	2350      	movs	r3, #80	; 0x50
 80032cc:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4619      	mov	r1, r3
 80032d6:	4845      	ldr	r0, [pc, #276]	; (80033ec <QSPI_Configuration+0x1a8>)
 80032d8:	f002 fbe0 	bl	8005a9c <HAL_QSPI_Command>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 80032e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032e6:	e07d      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80032e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 80032ee:	2331      	movs	r3, #49	; 0x31
 80032f0:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4619      	mov	r1, r3
 8003304:	4839      	ldr	r0, [pc, #228]	; (80033ec <QSPI_Configuration+0x1a8>)
 8003306:	f002 fbc9 	bl	8005a9c <HAL_QSPI_Command>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8003310:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003314:	e066      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003316:	1cfb      	adds	r3, r7, #3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4619      	mov	r1, r3
 800331e:	4833      	ldr	r0, [pc, #204]	; (80033ec <QSPI_Configuration+0x1a8>)
 8003320:	f002 fc1a 	bl	8005b58 <HAL_QSPI_Transmit>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 800332a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800332e:	e059      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003334:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8003336:	2315      	movs	r3, #21
 8003338:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8003342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003354:	2300      	movs	r3, #0
 8003356:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8003358:	2301      	movs	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4619      	mov	r1, r3
 8003364:	4821      	ldr	r0, [pc, #132]	; (80033ec <QSPI_Configuration+0x1a8>)
 8003366:	f002 fb99 	bl	8005a9c <HAL_QSPI_Command>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8003378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800337c:	e032      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 800337e:	1cfb      	adds	r3, r7, #3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4619      	mov	r1, r3
 8003386:	4819      	ldr	r0, [pc, #100]	; (80033ec <QSPI_Configuration+0x1a8>)
 8003388:	f002 fc7d 	bl	8005c86 <HAL_QSPI_Receive>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003392:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 800339a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800339e:	e021      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 80033a0:	2311      	movs	r3, #17
 80033a2:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4619      	mov	r1, r3
 80033b6:	480d      	ldr	r0, [pc, #52]	; (80033ec <QSPI_Configuration+0x1a8>)
 80033b8:	f002 fb70 	bl	8005a9c <HAL_QSPI_Command>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 80033c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033c6:	e00d      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80033c8:	1cfb      	adds	r3, r7, #3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4619      	mov	r1, r3
 80033d0:	4806      	ldr	r0, [pc, #24]	; (80033ec <QSPI_Configuration+0x1a8>)
 80033d2:	f002 fbc1 	bl	8005b58 <HAL_QSPI_Transmit>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 80033dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033e0:	e000      	b.n	80033e4 <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3740      	adds	r7, #64	; 0x40
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200005d0 	.word	0x200005d0

080033f0 <CSP_QSPI_EraseSector>:
	}
	return HAL_OK;
}

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress,
		uint32_t EraseEndAddress) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b090      	sub	sp, #64	; 0x40
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003400:	f023 030f 	bic.w	r3, r3, #15
 8003404:	607b      	str	r3, [r7, #4]
			- EraseStartAddress % MEMORY_SECTOR_SIZE;

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800340a:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = SECTOR_ERASE_CMD;
 800340c:	2320      	movs	r3, #32
 800340e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8003410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8003416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003424:	2300      	movs	r3, #0
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c

	sCommand.DataMode = QSPI_DATA_NONE;
 800342c:	2300      	movs	r3, #0
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]

	while (EraseEndAddress >= EraseStartAddress) {
 8003434:	e022      	b.n	800347c <CSP_QSPI_EraseSector+0x8c>
		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800343c:	60fb      	str	r3, [r7, #12]

		if (QSPI_WriteEnable() != HAL_OK) {
 800343e:	f7ff fe9f 	bl	8003180 <QSPI_WriteEnable>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <CSP_QSPI_EraseSector+0x5c>
			return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01c      	b.n	8003486 <CSP_QSPI_EraseSector+0x96>
		}

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4619      	mov	r1, r3
 8003456:	480e      	ldr	r0, [pc, #56]	; (8003490 <CSP_QSPI_EraseSector+0xa0>)
 8003458:	f002 fb20 	bl	8005a9c <HAL_QSPI_Command>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <CSP_QSPI_EraseSector+0x76>
				!= HAL_OK) {
			return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <CSP_QSPI_EraseSector+0x96>
		}
		EraseStartAddress += MEMORY_SECTOR_SIZE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346c:	607b      	str	r3, [r7, #4]

		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800346e:	f7ff fe3b 	bl	80030e8 <QSPI_AutoPollingMemReady>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <CSP_QSPI_EraseSector+0x8c>
			return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e004      	b.n	8003486 <CSP_QSPI_EraseSector+0x96>
	while (EraseEndAddress >= EraseStartAddress) {
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d2d8      	bcs.n	8003436 <CSP_QSPI_EraseSector+0x46>
		}
	}

	return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3740      	adds	r7, #64	; 0x40
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200005d0 	.word	0x200005d0

08003494 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
		uint32_t buffer_size) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b096      	sub	sp, #88	; 0x58
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	653b      	str	r3, [r7, #80]	; 0x50

	//
	while (current_addr <= address) {
 80034a4:	e003      	b.n	80034ae <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 80034a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034ac:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 80034ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d9f7      	bls.n	80034a6 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 80034b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 80034be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d901      	bls.n	80034ca <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80034d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 80034dc:	2332      	movs	r3, #50	; 0x32
 80034de:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80034e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80034e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ea:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80034f4:	2300      	movs	r3, #0
 80034f6:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80034f8:	2300      	movs	r3, #0
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DataMode = QSPI_DATA_4_LINES;
 80034fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 800350e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003510:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8003512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e03f      	b.n	80035a0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8003520:	f7ff fe2e 	bl	8003180 <QSPI_WriteEnable>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e038      	b.n	80035a0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4619      	mov	r1, r3
 8003538:	481b      	ldr	r0, [pc, #108]	; (80035a8 <CSP_QSPI_WriteMemory+0x114>)
 800353a:	f002 faaf 	bl	8005a9c <HAL_QSPI_Command>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e02b      	b.n	80035a0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	4816      	ldr	r0, [pc, #88]	; (80035a8 <CSP_QSPI_WriteMemory+0x114>)
 8003550:	f002 fb02 	bl	8005b58 <HAL_QSPI_Transmit>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <CSP_QSPI_WriteMemory+0xca>
				!= HAL_OK) {

			return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e020      	b.n	80035a0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800355e:	f7ff fdc3 	bl	80030e8 <QSPI_AutoPollingMemReady>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e019      	b.n	80035a0 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 800356c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800356e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003570:	4413      	add	r3, r2
 8003572:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003578:	4413      	add	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8003582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003584:	429a      	cmp	r2, r3
 8003586:	d203      	bcs.n	8003590 <CSP_QSPI_WriteMemory+0xfc>
 8003588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	e001      	b.n	8003594 <CSP_QSPI_WriteMemory+0x100>
 8003590:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 8003594:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 8003596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	429a      	cmp	r2, r3
 800359c:	d9b7      	bls.n	800350e <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 800359e:	2300      	movs	r3, #0

}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3758      	adds	r7, #88	; 0x58
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200005d0 	.word	0x200005d0

080035ac <QSPI_ResetChip>:
//		return HAL_ERROR;
//	}
//	return HAL_OK;
//}

uint8_t QSPI_ResetChip() {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b090      	sub	sp, #64	; 0x40
 80035b0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80035b2:	463b      	mov	r3, r7
 80035b4:	2238      	movs	r2, #56	; 0x38
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f009 fd09 	bl	800cfd0 <memset>
	uint32_t temp = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80035c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c6:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 80035c8:	2366      	movs	r3, #102	; 0x66
 80035ca:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80035e0:	2300      	movs	r3, #0
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80035e4:	2300      	movs	r3, #0
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80035e8:	463b      	mov	r3, r7
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4619      	mov	r1, r3
 80035f0:	4820      	ldr	r0, [pc, #128]	; (8003674 <QSPI_ResetChip+0xc8>)
 80035f2:	f002 fa53 	bl	8005a9c <HAL_QSPI_Command>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80035fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8003604:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003608:	e02f      	b.n	800366a <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800360a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360e:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8003610:	2399      	movs	r3, #153	; 0x99
 8003612:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003618:	2300      	movs	r3, #0
 800361a:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003628:	2300      	movs	r3, #0
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800362c:	2300      	movs	r3, #0
 800362e:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8003630:	463b      	mov	r3, r7
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4619      	mov	r1, r3
 8003638:	480e      	ldr	r0, [pc, #56]	; (8003674 <QSPI_ResetChip+0xc8>)
 800363a:	f002 fa2f 	bl	8005a9c <HAL_QSPI_Command>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003644:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 800364c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003650:	e00b      	b.n	800366a <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8003652:	2300      	movs	r3, #0
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003656:	e003      	b.n	8003660 <QSPI_ResetChip+0xb4>
		__NOP();
 8003658:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	3301      	adds	r3, #1
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <QSPI_ResetChip+0xcc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d9f7      	bls.n	8003658 <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3740      	adds	r7, #64	; 0x40
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200005d0 	.word	0x200005d0
 8003678:	0007a11f 	.word	0x0007a11f

0800367c <CSP_QSPI_Read>:

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b092      	sub	sp, #72	; 0x48
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 800368e:	23eb      	movs	r3, #235	; 0xeb
 8003690:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8003692:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8003698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800369c:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DataMode = QSPI_DATA_4_LINES;
 80036a6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DummyCycles = 6U;
 80036ac:	2306      	movs	r3, #6
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.NbData = Size;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80036b8:	2300      	movs	r3, #0
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80036bc:	2300      	movs	r3, #0
 80036be:	647b      	str	r3, [r7, #68]	; 0x44

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4619      	mov	r1, r3
 80036ca:	4816      	ldr	r0, [pc, #88]	; (8003724 <CSP_QSPI_Read+0xa8>)
 80036cc:	f002 f9e6 	bl	8005a9c <HAL_QSPI_Command>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <CSP_QSPI_Read+0x5e>
			!= HAL_OK) {
		return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e01f      	b.n	800371a <CSP_QSPI_Read+0x9e>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <CSP_QSPI_Read+0xa8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <CSP_QSPI_Read+0xa8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ec:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_5_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	480b      	ldr	r0, [pc, #44]	; (8003724 <CSP_QSPI_Read+0xa8>)
 80036f6:	f002 fac6 	bl	8005c86 <HAL_QSPI_Receive>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <CSP_QSPI_Read+0x88>
			!= HAL_OK) {
		return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e00a      	b.n	800371a <CSP_QSPI_Read+0x9e>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <CSP_QSPI_Read+0xa8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <CSP_QSPI_Read+0xa8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8003716:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3748      	adds	r7, #72	; 0x48
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200005d0 	.word	0x200005d0

08003728 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <MX_SPI1_Init+0x74>)
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <MX_SPI1_Init+0x78>)
 8003730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_SPI1_Init+0x74>)
 8003734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <MX_SPI1_Init+0x74>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <MX_SPI1_Init+0x74>)
 8003742:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003746:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003748:	4b14      	ldr	r3, [pc, #80]	; (800379c <MX_SPI1_Init+0x74>)
 800374a:	2202      	movs	r2, #2
 800374c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <MX_SPI1_Init+0x74>)
 8003750:	2201      	movs	r2, #1
 8003752:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <MX_SPI1_Init+0x74>)
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <MX_SPI1_Init+0x74>)
 800375e:	2220      	movs	r2, #32
 8003760:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <MX_SPI1_Init+0x74>)
 8003764:	2200      	movs	r2, #0
 8003766:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <MX_SPI1_Init+0x74>)
 800376a:	2200      	movs	r2, #0
 800376c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <MX_SPI1_Init+0x74>)
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <MX_SPI1_Init+0x74>)
 8003776:	2207      	movs	r2, #7
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <MX_SPI1_Init+0x74>)
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <MX_SPI1_Init+0x74>)
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003786:	4805      	ldr	r0, [pc, #20]	; (800379c <MX_SPI1_Init+0x74>)
 8003788:	f004 f868 	bl	800785c <HAL_SPI_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003792:	f7ff fb53 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000614 	.word	0x20000614
 80037a0:	40013000 	.word	0x40013000

080037a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <MX_SPI3_Init+0x74>)
 80037aa:	4a1c      	ldr	r2, [pc, #112]	; (800381c <MX_SPI3_Init+0x78>)
 80037ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <MX_SPI3_Init+0x74>)
 80037b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <MX_SPI3_Init+0x74>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80037bc:	4b16      	ldr	r3, [pc, #88]	; (8003818 <MX_SPI3_Init+0x74>)
 80037be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <MX_SPI3_Init+0x74>)
 80037c6:	2202      	movs	r2, #2
 80037c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <MX_SPI3_Init+0x74>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_SPI3_Init+0x74>)
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <MX_SPI3_Init+0x74>)
 80037da:	2220      	movs	r2, #32
 80037dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <MX_SPI3_Init+0x74>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <MX_SPI3_Init+0x74>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <MX_SPI3_Init+0x74>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <MX_SPI3_Init+0x74>)
 80037f2:	2207      	movs	r2, #7
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <MX_SPI3_Init+0x74>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <MX_SPI3_Init+0x74>)
 80037fe:	2200      	movs	r2, #0
 8003800:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_SPI3_Init+0x74>)
 8003804:	f004 f82a 	bl	800785c <HAL_SPI_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800380e:	f7ff fb15 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000678 	.word	0x20000678
 800381c:	40003c00 	.word	0x40003c00

08003820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <HAL_SPI_MspInit+0xd8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d128      	bne.n	8003894 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 8003848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800384c:	6613      	str	r3, [r2, #96]	; 0x60
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385a:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	4a27      	ldr	r2, [pc, #156]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003872:	2338      	movs	r3, #56	; 0x38
 8003874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003882:	2305      	movs	r3, #5
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4619      	mov	r1, r3
 800388c:	481c      	ldr	r0, [pc, #112]	; (8003900 <HAL_SPI_MspInit+0xe0>)
 800388e:	f000 fb7f 	bl	8003f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003892:	e02d      	b.n	80038f0 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_SPI_MspInit+0xe4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d128      	bne.n	80038f0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 80038a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_SPI_MspInit+0xdc>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80038ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80038d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038e0:	2306      	movs	r3, #6
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e4:	f107 031c 	add.w	r3, r7, #28
 80038e8:	4619      	mov	r1, r3
 80038ea:	4807      	ldr	r0, [pc, #28]	; (8003908 <HAL_SPI_MspInit+0xe8>)
 80038ec:	f000 fb50 	bl	8003f90 <HAL_GPIO_Init>
}
 80038f0:	bf00      	nop
 80038f2:	3730      	adds	r7, #48	; 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40013000 	.word	0x40013000
 80038fc:	40021000 	.word	0x40021000
 8003900:	48000400 	.word	0x48000400
 8003904:	40003c00 	.word	0x40003c00
 8003908:	48000800 	.word	0x48000800

0800390c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_MspInit+0x44>)
 8003914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_MspInit+0x44>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6613      	str	r3, [r2, #96]	; 0x60
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_MspInit+0x44>)
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_MspInit+0x44>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <HAL_MspInit+0x44>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_MspInit+0x44>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000

08003954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <NMI_Handler+0x4>

0800395a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800395e:	e7fe      	b.n	800395e <HardFault_Handler+0x4>

08003960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003964:	e7fe      	b.n	8003964 <MemManage_Handler+0x4>

08003966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396a:	e7fe      	b.n	800396a <BusFault_Handler+0x4>

0800396c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <UsageFault_Handler+0x4>

08003972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a0:	f000 f962 	bl	8003c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <OTG_FS_IRQHandler+0x10>)
 80039ae:	f000 ff12 	bl	80047d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20001bc4 	.word	0x20001bc4

080039bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return 1;
 80039c0:	2301      	movs	r3, #1
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_kill>:

int _kill(int pid, int sig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039d6:	f009 fb07 	bl	800cfe8 <__errno>
 80039da:	4603      	mov	r3, r0
 80039dc:	2216      	movs	r2, #22
 80039de:	601a      	str	r2, [r3, #0]
  return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_exit>:

void _exit (int status)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffe7 	bl	80039cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80039fe:	e7fe      	b.n	80039fe <_exit+0x12>

08003a00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e00a      	b.n	8003a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a12:	f3af 8000 	nop.w
 8003a16:	4601      	mov	r1, r0
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	60ba      	str	r2, [r7, #8]
 8003a1e:	b2ca      	uxtb	r2, r1
 8003a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	dbf0      	blt.n	8003a12 <_read+0x12>
  }

  return len;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e009      	b.n	8003a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	60ba      	str	r2, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dbf1      	blt.n	8003a4c <_write+0x12>
  }
  return len;
 8003a68:	687b      	ldr	r3, [r7, #4]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_close>:

int _close(int file)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a9a:	605a      	str	r2, [r3, #4]
  return 0;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <_isatty>:

int _isatty(int file)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ab2:	2301      	movs	r3, #1
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <_sbrk+0x5c>)
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <_sbrk+0x60>)
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <_sbrk+0x64>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <_sbrk+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_sbrk+0x64>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d207      	bcs.n	8003b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b0c:	f009 fa6c 	bl	800cfe8 <__errno>
 8003b10:	4603      	mov	r3, r0
 8003b12:	220c      	movs	r2, #12
 8003b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1a:	e009      	b.n	8003b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <_sbrk+0x64>)
 8003b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20018000 	.word	0x20018000
 8003b3c:	00000800 	.word	0x00000800
 8003b40:	200006dc 	.word	0x200006dc
 8003b44:	20002440 	.word	0x20002440

08003b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SystemInit+0x20>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <SystemInit+0x20>)
 8003b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b70:	f7ff ffea 	bl	8003b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b74:	480c      	ldr	r0, [pc, #48]	; (8003ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b76:	490d      	ldr	r1, [pc, #52]	; (8003bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b78:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <LoopForever+0xe>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b7c:	e002      	b.n	8003b84 <LoopCopyDataInit>

08003b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b82:	3304      	adds	r3, #4

08003b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b88:	d3f9      	bcc.n	8003b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b8c:	4c0a      	ldr	r4, [pc, #40]	; (8003bb8 <LoopForever+0x16>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b90:	e001      	b.n	8003b96 <LoopFillZerobss>

08003b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b94:	3204      	adds	r2, #4

08003b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b98:	d3fb      	bcc.n	8003b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b9a:	f009 fa2b 	bl	800cff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b9e:	f7fd fef5 	bl	800198c <main>

08003ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ba2:	e7fe      	b.n	8003ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ba4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bac:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003bb0:	0800fde4 	.word	0x0800fde4
  ldr r2, =_sbss
 8003bb4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003bb8:	2000243c 	.word	0x2000243c

08003bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bbc:	e7fe      	b.n	8003bbc <ADC1_2_IRQHandler>

08003bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc8:	2003      	movs	r0, #3
 8003bca:	f000 f961 	bl	8003e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bce:	200f      	movs	r0, #15
 8003bd0:	f000 f80e 	bl	8003bf0 <HAL_InitTick>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	e001      	b.n	8003be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003be0:	f7ff fe94 	bl	800390c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003be4:	79fb      	ldrb	r3, [r7, #7]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_InitTick+0x6c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c04:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <HAL_InitTick+0x70>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_InitTick+0x6c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f96d 	bl	8003efa <HAL_SYSTICK_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0f      	cmp	r3, #15
 8003c2a:	d809      	bhi.n	8003c40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c34:	f000 f937 	bl	8003ea6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_InitTick+0x74>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e007      	b.n	8003c50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	e004      	b.n	8003c50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
 8003c4a:	e001      	b.n	8003c50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000008 	.word	0x20000008
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000004 	.word	0x20000004

08003c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_IncTick+0x20>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_IncTick+0x24>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <HAL_IncTick+0x24>)
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000008 	.word	0x20000008
 8003c8c:	200006e0 	.word	0x200006e0

08003c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return uwTick;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_GetTick+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	200006e0 	.word	0x200006e0

08003ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff ffee 	bl	8003c90 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc0:	d005      	beq.n	8003cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_Delay+0x44>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cce:	bf00      	nop
 8003cd0:	f7ff ffde 	bl	8003c90 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d8f7      	bhi.n	8003cd0 <HAL_Delay+0x28>
  {
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000008 	.word	0x20000008

08003cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d22:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60d3      	str	r3, [r2, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <__NVIC_GetPriorityGrouping+0x18>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 0307 	and.w	r3, r3, #7
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db0b      	blt.n	8003d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4907      	ldr	r1, [pc, #28]	; (8003d8c <__NVIC_EnableIRQ+0x38>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2001      	movs	r0, #1
 8003d76:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000e100 	.word	0xe000e100

08003d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db0a      	blt.n	8003dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	490c      	ldr	r1, [pc, #48]	; (8003ddc <__NVIC_SetPriority+0x4c>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	440b      	add	r3, r1
 8003db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db8:	e00a      	b.n	8003dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4908      	ldr	r1, [pc, #32]	; (8003de0 <__NVIC_SetPriority+0x50>)
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3b04      	subs	r3, #4
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	440b      	add	r3, r1
 8003dce:	761a      	strb	r2, [r3, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000e100 	.word	0xe000e100
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f1c3 0307 	rsb	r3, r3, #7
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf28      	it	cs
 8003e02:	2304      	movcs	r3, #4
 8003e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d902      	bls.n	8003e14 <NVIC_EncodePriority+0x30>
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3b03      	subs	r3, #3
 8003e12:	e000      	b.n	8003e16 <NVIC_EncodePriority+0x32>
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	401a      	ands	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	43d9      	mvns	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	4313      	orrs	r3, r2
         );
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e5c:	d301      	bcc.n	8003e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00f      	b.n	8003e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e62:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <SysTick_Config+0x40>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6a:	210f      	movs	r1, #15
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e70:	f7ff ff8e 	bl	8003d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <SysTick_Config+0x40>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <SysTick_Config+0x40>)
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	e000e010 	.word	0xe000e010

08003e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff29 	bl	8003cf0 <__NVIC_SetPriorityGrouping>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb8:	f7ff ff3e 	bl	8003d38 <__NVIC_GetPriorityGrouping>
 8003ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	6978      	ldr	r0, [r7, #20]
 8003ec4:	f7ff ff8e 	bl	8003de4 <NVIC_EncodePriority>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff5d 	bl	8003d90 <__NVIC_SetPriority>
}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff31 	bl	8003d54 <__NVIC_EnableIRQ>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ffa2 	bl	8003e4c <SysTick_Config>
 8003f08:	4603      	mov	r3, r0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d008      	beq.n	8003f3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e022      	b.n	8003f82 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020e 	bic.w	r2, r2, #14
 8003f4a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f003 021c 	and.w	r2, r3, #28
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2101      	movs	r1, #1
 8003f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9e:	e17f      	b.n	80042a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8171 	beq.w	800429a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d005      	beq.n	8003fd0 <HAL_GPIO_Init+0x40>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d130      	bne.n	8004032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004006:	2201      	movs	r2, #1
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 0201 	and.w	r2, r3, #1
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b03      	cmp	r3, #3
 800403c:	d118      	bne.n	8004070 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004044:	2201      	movs	r2, #1
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	08db      	lsrs	r3, r3, #3
 800405a:	f003 0201 	and.w	r2, r3, #1
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b03      	cmp	r3, #3
 800407a:	d017      	beq.n	80040ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80ac 	beq.w	800429a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_GPIO_Init+0x330>)
 8004144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004146:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <HAL_GPIO_Init+0x330>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6613      	str	r3, [r2, #96]	; 0x60
 800414e:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_GPIO_Init+0x330>)
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800415a:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_GPIO_Init+0x334>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004184:	d025      	beq.n	80041d2 <HAL_GPIO_Init+0x242>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_GPIO_Init+0x338>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01f      	beq.n	80041ce <HAL_GPIO_Init+0x23e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_GPIO_Init+0x33c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d019      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_GPIO_Init+0x340>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_GPIO_Init+0x236>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4c      	ldr	r2, [pc, #304]	; (80042d4 <HAL_GPIO_Init+0x344>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00d      	beq.n	80041c2 <HAL_GPIO_Init+0x232>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4b      	ldr	r2, [pc, #300]	; (80042d8 <HAL_GPIO_Init+0x348>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <HAL_GPIO_Init+0x22e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <HAL_GPIO_Init+0x34c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <HAL_GPIO_Init+0x22a>
 80041b6:	2306      	movs	r3, #6
 80041b8:	e00c      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041ba:	2307      	movs	r3, #7
 80041bc:	e00a      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041be:	2305      	movs	r3, #5
 80041c0:	e008      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041c2:	2304      	movs	r3, #4
 80041c4:	e006      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041c6:	2303      	movs	r3, #3
 80041c8:	e004      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e002      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <HAL_GPIO_Init+0x244>
 80041d2:	2300      	movs	r3, #0
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	f002 0203 	and.w	r2, r2, #3
 80041da:	0092      	lsls	r2, r2, #2
 80041dc:	4093      	lsls	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041e4:	4937      	ldr	r1, [pc, #220]	; (80042c4 <HAL_GPIO_Init+0x334>)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	3302      	adds	r3, #2
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_GPIO_Init+0x350>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004216:	4a32      	ldr	r2, [pc, #200]	; (80042e0 <HAL_GPIO_Init+0x350>)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800421c:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <HAL_GPIO_Init+0x350>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <HAL_GPIO_Init+0x350>)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_GPIO_Init+0x350>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800426a:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <HAL_GPIO_Init+0x350>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_GPIO_Init+0x350>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4013      	ands	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004294:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <HAL_GPIO_Init+0x350>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	3301      	adds	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f47f ae78 	bne.w	8003fa0 <HAL_GPIO_Init+0x10>
  }
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40010000 	.word	0x40010000
 80042c8:	48000400 	.word	0x48000400
 80042cc:	48000800 	.word	0x48000800
 80042d0:	48000c00 	.word	0x48000c00
 80042d4:	48001000 	.word	0x48001000
 80042d8:	48001400 	.word	0x48001400
 80042dc:	48001800 	.word	0x48001800
 80042e0:	40010400 	.word	0x40010400

080042e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80042f2:	e0cd      	b.n	8004490 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80042f4:	2201      	movs	r2, #1
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80c0 	beq.w	800448a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800430a:	4a68      	ldr	r2, [pc, #416]	; (80044ac <HAL_GPIO_DeInit+0x1c8>)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004316:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004332:	d025      	beq.n	8004380 <HAL_GPIO_DeInit+0x9c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a5e      	ldr	r2, [pc, #376]	; (80044b0 <HAL_GPIO_DeInit+0x1cc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01f      	beq.n	800437c <HAL_GPIO_DeInit+0x98>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a5d      	ldr	r2, [pc, #372]	; (80044b4 <HAL_GPIO_DeInit+0x1d0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d019      	beq.n	8004378 <HAL_GPIO_DeInit+0x94>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a5c      	ldr	r2, [pc, #368]	; (80044b8 <HAL_GPIO_DeInit+0x1d4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_GPIO_DeInit+0x90>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a5b      	ldr	r2, [pc, #364]	; (80044bc <HAL_GPIO_DeInit+0x1d8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00d      	beq.n	8004370 <HAL_GPIO_DeInit+0x8c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a5a      	ldr	r2, [pc, #360]	; (80044c0 <HAL_GPIO_DeInit+0x1dc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <HAL_GPIO_DeInit+0x88>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a59      	ldr	r2, [pc, #356]	; (80044c4 <HAL_GPIO_DeInit+0x1e0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_GPIO_DeInit+0x84>
 8004364:	2306      	movs	r3, #6
 8004366:	e00c      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 8004368:	2307      	movs	r3, #7
 800436a:	e00a      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 800436c:	2305      	movs	r3, #5
 800436e:	e008      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 8004370:	2304      	movs	r3, #4
 8004372:	e006      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 8004374:	2303      	movs	r3, #3
 8004376:	e004      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 8004378:	2302      	movs	r3, #2
 800437a:	e002      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_GPIO_DeInit+0x9e>
 8004380:	2300      	movs	r3, #0
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	f002 0203 	and.w	r2, r2, #3
 8004388:	0092      	lsls	r2, r2, #2
 800438a:	4093      	lsls	r3, r2
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	429a      	cmp	r2, r3
 8004390:	d132      	bne.n	80043f8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	494b      	ldr	r1, [pc, #300]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 800439c:	4013      	ands	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80043a0:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	4947      	ldr	r1, [pc, #284]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80043ae:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	4944      	ldr	r1, [pc, #272]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	4940      	ldr	r1, [pc, #256]	; (80044c8 <HAL_GPIO_DeInit+0x1e4>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	220f      	movs	r2, #15
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80043da:	4a34      	ldr	r2, [pc, #208]	; (80044ac <HAL_GPIO_DeInit+0x1c8>)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	3302      	adds	r3, #2
 80043e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	4830      	ldr	r0, [pc, #192]	; (80044ac <HAL_GPIO_DeInit+0x1c8>)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	089b      	lsrs	r3, r3, #2
 80043f0:	400a      	ands	r2, r1
 80043f2:	3302      	adds	r3, #2
 80043f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	2103      	movs	r1, #3
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	08da      	lsrs	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3208      	adds	r2, #8
 8004414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	08d2      	lsrs	r2, r2, #3
 800442c:	4019      	ands	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3208      	adds	r2, #8
 8004432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	2103      	movs	r1, #3
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	2101      	movs	r1, #1
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	401a      	ands	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2103      	movs	r1, #3
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	401a      	ands	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	2101      	movs	r1, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	401a      	ands	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	3301      	adds	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f af2b 	bne.w	80042f4 <HAL_GPIO_DeInit+0x10>
  }
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40010000 	.word	0x40010000
 80044b0:	48000400 	.word	0x48000400
 80044b4:	48000800 	.word	0x48000800
 80044b8:	48000c00 	.word	0x48000c00
 80044bc:	48001000 	.word	0x48001000
 80044c0:	48001400 	.word	0x48001400
 80044c4:	48001800 	.word	0x48001800
 80044c8:	40010400 	.word	0x40010400

080044cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
 80044d8:	4613      	mov	r3, r2
 80044da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044dc:	787b      	ldrb	r3, [r7, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4013      	ands	r3, r2
 8004514:	041a      	lsls	r2, r3, #16
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	43d9      	mvns	r1, r3
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	400b      	ands	r3, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	619a      	str	r2, [r3, #24]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004532:	b08f      	sub	sp, #60	; 0x3c
 8004534:	af0a      	add	r7, sp, #40	; 0x28
 8004536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e116      	b.n	8004770 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f007 fbab 	bl	800bcb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2203      	movs	r2, #3
 8004566:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f003 fff0 	bl	8008566 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	687e      	ldr	r6, [r7, #4]
 800458e:	466d      	mov	r5, sp
 8004590:	f106 0410 	add.w	r4, r6, #16
 8004594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800459a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800459c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80045a4:	1d33      	adds	r3, r6, #4
 80045a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045a8:	6838      	ldr	r0, [r7, #0]
 80045aa:	f003 ff03 	bl	80083b4 <USB_CoreInit>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0d7      	b.n	8004770 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 ffde 	bl	8008588 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	e04a      	b.n	8004668 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	333d      	adds	r3, #61	; 0x3d
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	333c      	adds	r3, #60	; 0x3c
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	b298      	uxth	r0, r3
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	3356      	adds	r3, #86	; 0x56
 800460e:	4602      	mov	r2, r0
 8004610:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3340      	adds	r3, #64	; 0x40
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3344      	adds	r3, #68	; 0x44
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3348      	adds	r3, #72	; 0x48
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	334c      	adds	r3, #76	; 0x4c
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	3301      	adds	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	429a      	cmp	r2, r3
 8004670:	d3af      	bcc.n	80045d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e044      	b.n	8004702 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800468e:	7bfa      	ldrb	r2, [r7, #15]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046d0:	7bfa      	ldrb	r2, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	3301      	adds	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3b5      	bcc.n	8004678 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	687e      	ldr	r6, [r7, #4]
 8004714:	466d      	mov	r5, sp
 8004716:	f106 0410 	add.w	r4, r6, #16
 800471a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004726:	e885 0003 	stmia.w	r5, {r0, r1}
 800472a:	1d33      	adds	r3, r6, #4
 800472c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800472e:	6838      	ldr	r0, [r7, #0]
 8004730:	f003 ff76 	bl	8008620 <USB_DevInit>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e014      	b.n	8004770 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b01      	cmp	r3, #1
 800475c:	d102      	bne.n	8004764 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 f86a 	bl	8005838 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f004 ff24 	bl	80095b6 <USB_DevDisconnect>

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004778 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_PCD_Start+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e01c      	b.n	80047ce <HAL_PCD_Start+0x56>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f003 fec5 	bl	8008544 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f004 fed8 	bl	8009574 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047d6:	b590      	push	{r4, r7, lr}
 80047d8:	b08d      	sub	sp, #52	; 0x34
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 ff96 	bl	800971e <USB_GetMode>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 847e 	bne.w	80050f6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f004 fefa 	bl	80095f8 <USB_ReadInterrupts>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8474 	beq.w	80050f4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f004 fee7 	bl	80095f8 <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b02      	cmp	r3, #2
 8004832:	d107      	bne.n	8004844 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f002 0202 	and.w	r2, r2, #2
 8004842:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f004 fed5 	bl	80095f8 <USB_ReadInterrupts>
 800484e:	4603      	mov	r3, r0
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b10      	cmp	r3, #16
 8004856:	d161      	bne.n	800491c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0210 	bic.w	r2, r2, #16
 8004866:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f003 020f 	and.w	r2, r3, #15
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	0c5b      	lsrs	r3, r3, #17
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	2b02      	cmp	r3, #2
 8004892:	d124      	bne.n	80048de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d035      	beq.n	800490c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	6a38      	ldr	r0, [r7, #32]
 80048b4:	f004 fd0c 	bl	80092d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d6:	441a      	add	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	615a      	str	r2, [r3, #20]
 80048dc:	e016      	b.n	800490c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	0c5b      	lsrs	r3, r3, #17
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d110      	bne.n	800490c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048f0:	2208      	movs	r2, #8
 80048f2:	4619      	mov	r1, r3
 80048f4:	6a38      	ldr	r0, [r7, #32]
 80048f6:	f004 fceb 	bl	80092d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004906:	441a      	add	r2, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0210 	orr.w	r2, r2, #16
 800491a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f004 fe69 	bl	80095f8 <USB_ReadInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004930:	f040 80a7 	bne.w	8004a82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f004 fe6e 	bl	800961e <USB_ReadDevAllOutEpInterrupt>
 8004942:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004944:	e099      	b.n	8004a7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 808e 	beq.w	8004a6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f004 fe92 	bl	8009686 <USB_ReadDevOutEPInterrupt>
 8004962:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	461a      	mov	r2, r3
 800497c:	2301      	movs	r3, #1
 800497e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fe7e 	bl	8005684 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	461a      	mov	r2, r3
 80049a0:	2308      	movs	r3, #8
 80049a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 feba 	bl	8005720 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	461a      	mov	r2, r3
 80049c4:	2310      	movs	r3, #16
 80049c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d030      	beq.n	8004a34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d109      	bne.n	80049f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	3304      	adds	r3, #4
 8004a06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	78db      	ldrb	r3, [r3, #3]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f007 fa9f 	bl	800bf60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2302      	movs	r3, #2
 8004a32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	461a      	mov	r2, r3
 8004a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	3301      	adds	r3, #1
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f47f af62 	bne.w	8004946 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f004 fdb6 	bl	80095f8 <USB_ReadInterrupts>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a96:	f040 80a4 	bne.w	8004be2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f004 fdd7 	bl	8009652 <USB_ReadDevAllInEpInterrupt>
 8004aa4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004aaa:	e096      	b.n	8004bda <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 808b 	beq.w	8004bce <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f004 fdfd 	bl	80096c2 <USB_ReadDevInEPInterrupt>
 8004ac8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	2201      	movs	r2, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af4:	4013      	ands	r3, r2
 8004af6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	2301      	movs	r3, #1
 8004b08:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f007 f990 	bl	800be36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2308      	movs	r3, #8
 8004b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2310      	movs	r3, #16
 8004b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	461a      	mov	r2, r3
 8004b66:	2340      	movs	r3, #64	; 0x40
 8004b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d023      	beq.n	8004bbc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b76:	6a38      	ldr	r0, [r7, #32]
 8004b78:	f003 fe94 	bl	80088a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3338      	adds	r3, #56	; 0x38
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	78db      	ldrb	r3, [r3, #3]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d108      	bne.n	8004baa <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f007 f9ed 	bl	800bf84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2302      	movs	r3, #2
 8004bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fcd2 	bl	8005572 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f47f af65 	bne.w	8004aac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fd06 	bl	80095f8 <USB_ReadInterrupts>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf6:	d122      	bne.n	8004c3e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d108      	bne.n	8004c28 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f007 fc21 	bl	800c468 <HAL_PCDEx_LPM_Callback>
 8004c26:	e002      	b.n	8004c2e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f007 f971 	bl	800bf10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f004 fcd8 	bl	80095f8 <USB_ReadInterrupts>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c52:	d112      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d102      	bne.n	8004c6a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f007 f92d 	bl	800bec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f004 fcba 	bl	80095f8 <USB_ReadInterrupts>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8e:	d121      	bne.n	8004cd4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004c9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d111      	bne.n	8004cce <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	f003 020f 	and.w	r2, r3, #15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f007 fbce 	bl	800c468 <HAL_PCDEx_LPM_Callback>
 8004ccc:	e002      	b.n	8004cd4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f007 f8f8 	bl	800bec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f004 fc8d 	bl	80095f8 <USB_ReadInterrupts>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	f040 80b5 	bne.w	8004e56 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2110      	movs	r1, #16
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 fdcc 	bl	80088a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d10:	e046      	b.n	8004da0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	461a      	mov	r2, r3
 8004d54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3b3      	bcc.n	8004d12 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004dbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd6:	f043 030b 	orr.w	r3, r3, #11
 8004dda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dec:	f043 030b 	orr.w	r3, r3, #11
 8004df0:	6453      	str	r3, [r2, #68]	; 0x44
 8004df2:	e015      	b.n	8004e20 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1a:	f043 030b 	orr.w	r3, r3, #11
 8004e1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f004 fc9d 	bl	8009780 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 fbcc 	bl	80095f8 <USB_ReadInterrupts>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6a:	d124      	bne.n	8004eb6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 fc62 	bl	800973a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f003 fd8f 	bl	800899e <USB_GetDevSpeed>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681c      	ldr	r4, [r3, #0]
 8004e8c:	f001 ffbe 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8004e90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f003 fab6 	bl	800840c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f006 fff0 	bl	800be86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f004 fb9c 	bl	80095f8 <USB_ReadInterrupts>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f006 ffcd 	bl	800be6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695a      	ldr	r2, [r3, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f002 0208 	and.w	r2, r2, #8
 8004ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f004 fb87 	bl	80095f8 <USB_ReadInterrupts>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b80      	cmp	r3, #128	; 0x80
 8004ef2:	d122      	bne.n	8004f3a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f00:	2301      	movs	r3, #1
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	e014      	b.n	8004f30 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 faf3 	bl	8005510 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3e5      	bcc.n	8004f06 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f004 fb5a 	bl	80095f8 <USB_ReadInterrupts>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d13b      	bne.n	8004fc8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f50:	2301      	movs	r3, #1
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	e02b      	b.n	8004fae <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3340      	adds	r3, #64	; 0x40
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d115      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da12      	bge.n	8004fa8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	333f      	adds	r3, #63	; 0x3f
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fab4 	bl	8005510 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	3301      	adds	r3, #1
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3ce      	bcc.n	8004f56 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f004 fb13 	bl	80095f8 <USB_ReadInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fdc:	d155      	bne.n	800508a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fde:	2301      	movs	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	e045      	b.n	8005070 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d12e      	bne.n	800506a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800500c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	da2b      	bge.n	800506a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800501e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005022:	429a      	cmp	r2, r3
 8005024:	d121      	bne.n	800506a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005066:	6053      	str	r3, [r2, #4]
            break;
 8005068:	e007      	b.n	800507a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	3301      	adds	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	429a      	cmp	r2, r3
 8005078:	d3b4      	bcc.n	8004fe4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f004 fab2 	bl	80095f8 <USB_ReadInterrupts>
 8005094:	4603      	mov	r3, r0
 8005096:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d10a      	bne.n	80050b6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f006 ff81 	bl	800bfa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f004 fa9c 	bl	80095f8 <USB_ReadInterrupts>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d115      	bne.n	80050f6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f006 ff71 	bl	800bfc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6859      	ldr	r1, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e000      	b.n	80050f6 <HAL_PCD_IRQHandler+0x920>
      return;
 80050f4:	bf00      	nop
    }
  }
}
 80050f6:	3734      	adds	r7, #52	; 0x34
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd90      	pop	{r4, r7, pc}

080050fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_PCD_SetAddress+0x1a>
 8005112:	2302      	movs	r3, #2
 8005114:	e013      	b.n	800513e <HAL_PCD_SetAddress+0x42>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f004 f9fa 	bl	8009528 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	4608      	mov	r0, r1
 8005150:	4611      	mov	r1, r2
 8005152:	461a      	mov	r2, r3
 8005154:	4603      	mov	r3, r0
 8005156:	70fb      	strb	r3, [r7, #3]
 8005158:	460b      	mov	r3, r1
 800515a:	803b      	strh	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	da0f      	bge.n	800518c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	3338      	adds	r3, #56	; 0x38
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	3304      	adds	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	705a      	strb	r2, [r3, #1]
 800518a:	e00f      	b.n	80051ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	3304      	adds	r3, #4
 80051a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051b8:	883a      	ldrh	r2, [r7, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	78ba      	ldrb	r2, [r7, #2]
 80051c2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051d6:	78bb      	ldrb	r3, [r7, #2]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d102      	bne.n	80051e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_PCD_EP_Open+0xaa>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e00e      	b.n	800520e <HAL_PCD_EP_Open+0xc8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	4618      	mov	r0, r3
 8005200:	f003 fbec 	bl	80089dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800520c:	7afb      	ldrb	r3, [r7, #11]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005226:	2b00      	cmp	r3, #0
 8005228:	da0f      	bge.n	800524a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	f003 020f 	and.w	r2, r3, #15
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	3338      	adds	r3, #56	; 0x38
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	705a      	strb	r2, [r3, #1]
 8005248:	e00f      	b.n	800526a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	f003 020f 	and.w	r2, r3, #15
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	3304      	adds	r3, #4
 8005262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_PCD_EP_Close+0x6e>
 8005280:	2302      	movs	r3, #2
 8005282:	e00e      	b.n	80052a2 <HAL_PCD_EP_Close+0x8c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	4618      	mov	r0, r3
 8005294:	f003 fc2a 	bl	8008aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	460b      	mov	r3, r1
 80052b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	3304      	adds	r3, #4
 80052d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2200      	movs	r2, #0
 80052e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	4618      	mov	r0, r3
 8005300:	f003 fcd0 	bl	8008ca4 <USB_EPStartXfer>

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005330:	681b      	ldr	r3, [r3, #0]
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	460b      	mov	r3, r1
 800534c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	3338      	adds	r3, #56	; 0x38
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	3304      	adds	r3, #4
 8005364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2201      	movs	r2, #1
 800537c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	b2da      	uxtb	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	4618      	mov	r0, r3
 8005392:	f003 fc87 	bl	8008ca4 <USB_EPStartXfer>

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	f003 020f 	and.w	r2, r3, #15
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d901      	bls.n	80053be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e04e      	b.n	800545c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da0f      	bge.n	80053e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	3338      	adds	r3, #56	; 0x38
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	705a      	strb	r2, [r3, #1]
 80053e4:	e00d      	b.n	8005402 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4413      	add	r3, r2
 80053f8:	3304      	adds	r3, #4
 80053fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	b2da      	uxtb	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_PCD_EP_SetStall+0x82>
 800541e:	2302      	movs	r3, #2
 8005420:	e01c      	b.n	800545c <HAL_PCD_EP_SetStall+0xbc>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	4618      	mov	r0, r3
 8005432:	f003 ffa5 	bl	8009380 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f004 f997 	bl	8009780 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d901      	bls.n	8005482 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e042      	b.n	8005508 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da0f      	bge.n	80054aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	3338      	adds	r3, #56	; 0x38
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	3304      	adds	r3, #4
 80054a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	705a      	strb	r2, [r3, #1]
 80054a8:	e00f      	b.n	80054ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	f003 020f 	and.w	r2, r3, #15
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4413      	add	r3, r2
 80054c0:	3304      	adds	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_PCD_EP_ClrStall+0x86>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e00e      	b.n	8005508 <HAL_PCD_EP_ClrStall+0xa4>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f003 ffaf 	bl	800945c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800551c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005520:	2b00      	cmp	r3, #0
 8005522:	da0c      	bge.n	800553e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	f003 020f 	and.w	r2, r3, #15
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	3338      	adds	r3, #56	; 0x38
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	3304      	adds	r3, #4
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	e00c      	b.n	8005558 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	f003 020f 	and.w	r2, r3, #15
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	3304      	adds	r3, #4
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68f9      	ldr	r1, [r7, #12]
 800555e:	4618      	mov	r0, r3
 8005560:	f003 fdd2 	bl	8009108 <USB_EPStopXfer>
 8005564:	4603      	mov	r3, r0
 8005566:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005568:	7afb      	ldrb	r3, [r7, #11]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b088      	sub	sp, #32
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	3338      	adds	r3, #56	; 0x38
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	3304      	adds	r3, #4
 8005598:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d901      	bls.n	80055aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e067      	b.n	800567a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d902      	bls.n	80055c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3303      	adds	r3, #3
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055ce:	e026      	b.n	800561e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d902      	bls.n	80055ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3303      	adds	r3, #3
 80055f0:	089b      	lsrs	r3, r3, #2
 80055f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68d9      	ldr	r1, [r3, #12]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	6978      	ldr	r0, [r7, #20]
 8005602:	f003 fe2b 	bl	800925c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	441a      	add	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	441a      	add	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	d809      	bhi.n	8005648 <PCD_WriteEmptyTxFifo+0xd6>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800563c:	429a      	cmp	r2, r3
 800563e:	d203      	bcs.n	8005648 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1c3      	bne.n	80055d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	429a      	cmp	r2, r3
 8005652:	d811      	bhi.n	8005678 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	2201      	movs	r2, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	43db      	mvns	r3, r3
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005674:	4013      	ands	r3, r2
 8005676:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	333c      	adds	r3, #60	; 0x3c
 800569c:	3304      	adds	r3, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a19      	ldr	r2, [pc, #100]	; (800571c <PCD_EP_OutXfrComplete_int+0x98>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d124      	bne.n	8005704 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d6:	6093      	str	r3, [r2, #8]
 80056d8:	e01a      	b.n	8005710 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	461a      	mov	r2, r3
 80056f2:	2320      	movs	r3, #32
 80056f4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f006 fb7f 	bl	800be00 <HAL_PCD_DataOutStageCallback>
 8005702:	e005      	b.n	8005710 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f006 fb78 	bl	800be00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	4f54310a 	.word	0x4f54310a

08005720 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	333c      	adds	r3, #60	; 0x3c
 8005738:	3304      	adds	r3, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <PCD_EP_OutSetupPacket_int+0x64>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d90e      	bls.n	8005774 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	461a      	mov	r2, r3
 800576e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005772:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f006 fb31 	bl	800bddc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	4f54300a 	.word	0x4f54300a

08005788 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
 8005794:	4613      	mov	r3, r2
 8005796:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80057a6:	883b      	ldrh	r3, [r7, #0]
 80057a8:	0419      	lsls	r1, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
 80057b4:	e028      	b.n	8005808 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	e00d      	b.n	80057e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	3340      	adds	r3, #64	; 0x40
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4413      	add	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	3301      	adds	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	7bfa      	ldrb	r2, [r7, #15]
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d3ec      	bcc.n	80057ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80057f0:	883b      	ldrh	r3, [r7, #0]
 80057f2:	0418      	lsls	r0, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	4302      	orrs	r2, r0
 8005800:	3340      	adds	r3, #64	; 0x40
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586a:	f043 0303 	orr.w	r3, r3, #3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <HAL_PWREx_GetVoltageRange+0x18>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40007000 	.word	0x40007000

0800589c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058aa:	d130      	bne.n	800590e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80058ac:	4b23      	ldr	r3, [pc, #140]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d038      	beq.n	800592c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058ba:	4b20      	ldr	r3, [pc, #128]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058c2:	4a1e      	ldr	r2, [pc, #120]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2232      	movs	r2, #50	; 0x32
 80058d0:	fb02 f303 	mul.w	r3, r2, r3
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	0c9b      	lsrs	r3, r3, #18
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e0:	e002      	b.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f4:	d102      	bne.n	80058fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f2      	bne.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005908:	d110      	bne.n	800592c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e00f      	b.n	800592e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d007      	beq.n	800592c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005924:	4a05      	ldr	r2, [pc, #20]	; (800593c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800592a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40007000 	.word	0x40007000
 8005940:	20000000 	.word	0x20000000
 8005944:	431bde83 	.word	0x431bde83

08005948 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_PWREx_EnableVddUSB+0x1c>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005956:	6053      	str	r3, [r2, #4]
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40007000 	.word	0x40007000

08005968 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005970:	f7fe f98e 	bl	8003c90 <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e063      	b.n	8005a48 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fd fa8d 	bl	8002eb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800599a:	f241 3188 	movw	r1, #5000	; 0x1388
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fb03 	bl	8005faa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	2120      	movs	r1, #32
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fafb 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d131      	bne.n	8005a3e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	0611      	lsls	r1, r2, #24
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <HAL_QSPI_Init+0xe8>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6912      	ldr	r2, [r2, #16]
 8005a0a:	0411      	lsls	r1, r2, #16
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6952      	ldr	r2, [r2, #20]
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6992      	ldr	r2, [r2, #24]
 8005a16:	4311      	orrs	r1, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005a46:	7afb      	ldrb	r3, [r7, #11]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	ffe0f8fe 	.word	0xffe0f8fe

08005a54 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e016      	b.n	8005a94 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fd fa9c 	bl	8002fb4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005aa8:	f7fe f8f2 	bl	8003c90 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_QSPI_Command+0x22>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e048      	b.n	8005b50 <HAL_QSPI_Command+0xb4>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d137      	bne.n	8005b42 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2120      	movs	r1, #32
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fa6b 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d125      	bne.n	8005b46 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005afa:	2200      	movs	r2, #0
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa98 	bl	8006034 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d115      	bne.n	8005b38 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2201      	movs	r2, #1
 8005b14:	2102      	movs	r1, #2
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa55 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10f      	bne.n	8005b46 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005b36:	e006      	b.n	8005b46 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005b40:	e001      	b.n	8005b46 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
 8005b44:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005b68:	f7fe f892 	bl	8003c90 <HAL_GetTick>
 8005b6c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3320      	adds	r3, #32
 8005b74:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_QSPI_Transmit+0x2e>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e07b      	b.n	8005c7e <HAL_QSPI_Transmit+0x126>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d16a      	bne.n	8005c70 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d05b      	beq.n	8005c5e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2212      	movs	r2, #18
 8005baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005bda:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005bdc:	e01b      	b.n	8005c16 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2201      	movs	r2, #1
 8005be6:	2104      	movs	r1, #4
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f9ec 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005bf2:	7ffb      	ldrb	r3, [r7, #31]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d113      	bne.n	8005c20 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	1e5a      	subs	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1df      	bne.n	8005bde <HAL_QSPI_Transmit+0x86>
 8005c1e:	e000      	b.n	8005c22 <HAL_QSPI_Transmit+0xca>
          break;
 8005c20:	bf00      	nop
      }

      if (status == HAL_OK)
 8005c22:	7ffb      	ldrb	r3, [r7, #31]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d115      	bne.n	8005c54 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	2102      	movs	r1, #2
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f9c7 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005c3c:	7ffb      	ldrb	r3, [r7, #31]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d108      	bne.n	8005c54 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2202      	movs	r2, #2
 8005c48:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f934 	bl	8005eb8 <HAL_QSPI_Abort>
 8005c50:	4603      	mov	r3, r0
 8005c52:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005c5c:	e00a      	b.n	8005c74 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e001      	b.n	8005c74 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
 8005c72:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08a      	sub	sp, #40	; 0x28
 8005c8a:	af02      	add	r7, sp, #8
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005c96:	f7fd fffb 	bl	8003c90 <HAL_GetTick>
 8005c9a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3320      	adds	r3, #32
 8005caa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_QSPI_Receive+0x36>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e082      	b.n	8005dc2 <HAL_QSPI_Receive+0x13c>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d171      	bne.n	8005db4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d062      	beq.n	8005da2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2222      	movs	r2, #34	; 0x22
 8005ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d14:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005d1e:	e01c      	b.n	8005d5a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2201      	movs	r2, #1
 8005d28:	2106      	movs	r1, #6
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f94b 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005d34:	7ffb      	ldrb	r3, [r7, #31]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d114      	bne.n	8005d64 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1de      	bne.n	8005d20 <HAL_QSPI_Receive+0x9a>
 8005d62:	e000      	b.n	8005d66 <HAL_QSPI_Receive+0xe0>
          break;
 8005d64:	bf00      	nop
      }

      if (status == HAL_OK)
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d115      	bne.n	8005d98 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2201      	movs	r2, #1
 8005d74:	2102      	movs	r1, #2
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f925 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005d80:	7ffb      	ldrb	r3, [r7, #31]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d108      	bne.n	8005d98 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f892 	bl	8005eb8 <HAL_QSPI_Abort>
 8005d94:	4603      	mov	r3, r0
 8005d96:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005da0:	e00a      	b.n	8005db8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	f043 0208 	orr.w	r2, r3, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e001      	b.n	8005db8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
 8005db6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af02      	add	r7, sp, #8
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005dd8:	f7fd ff5a 	bl	8003c90 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_QSPI_AutoPolling+0x24>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e060      	b.n	8005eb0 <HAL_QSPI_AutoPolling+0xe6>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d14f      	bne.n	8005ea2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2242      	movs	r2, #66	; 0x42
 8005e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2120      	movs	r1, #32
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f8d3 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13d      	bne.n	8005ea6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6852      	ldr	r2, [r2, #4]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e60:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f8df 	bl	8006034 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	2108      	movs	r1, #8
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f8a0 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2208      	movs	r2, #8
 8005e96:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005ea0:	e001      	b.n	8005ea6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7fd fee4 	bl	8003c90 <HAL_GetTick>
 8005ec8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d062      	beq.n	8005fa0 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d017      	beq.n	8005f20 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe f804 	bl	8003f12 <HAL_DMA_Abort>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d034      	beq.n	8005f98 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0202 	orr.w	r2, r2, #2
 8005f3c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2201      	movs	r2, #1
 8005f48:	2102      	movs	r1, #2
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f83b 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10e      	bne.n	8005f78 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2120      	movs	r1, #32
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f829 	bl	8005fc6 <QSPI_WaitFlagStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d110      	bne.n	8005fa0 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005f8c:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005f96:	e003      	b.n	8005fa0 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005fd6:	e01a      	b.n	800600e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fde:	d016      	beq.n	800600e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe0:	f7fd fe56 	bl	8003c90 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e00e      	b.n	800602c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	429a      	cmp	r2, r3
 8006028:	d1d6      	bne.n	8005fd8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d009      	beq.n	800605c <QSPI_Config+0x28>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800604e:	d005      	beq.n	800605c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3a01      	subs	r2, #1
 800605a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80b9 	beq.w	80061d8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d05f      	beq.n	800612e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	6892      	ldr	r2, [r2, #8]
 8006076:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d031      	beq.n	80060e4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	431a      	orrs	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	431a      	orrs	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	431a      	orrs	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	049b      	lsls	r3, r3, #18
 800609c:	431a      	orrs	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	ea42 0103 	orr.w	r1, r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060d4:	f000 812e 	beq.w	8006334 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	6852      	ldr	r2, [r2, #4]
 80060e0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80060e2:	e127      	b.n	8006334 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	049b      	lsls	r3, r3, #18
 8006100:	431a      	orrs	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	431a      	orrs	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	431a      	orrs	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	431a      	orrs	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	431a      	orrs	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	ea42 0103 	orr.w	r1, r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	430a      	orrs	r2, r1
 800612a:	615a      	str	r2, [r3, #20]
}
 800612c:	e102      	b.n	8006334 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02e      	beq.n	8006194 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	431a      	orrs	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	431a      	orrs	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	431a      	orrs	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	049b      	lsls	r3, r3, #18
 8006152:	431a      	orrs	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	431a      	orrs	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	431a      	orrs	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	431a      	orrs	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	431a      	orrs	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	ea42 0103 	orr.w	r1, r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	430a      	orrs	r2, r1
 800617c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006184:	f000 80d6 	beq.w	8006334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	619a      	str	r2, [r3, #24]
}
 8006192:	e0cf      	b.n	8006334 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	431a      	orrs	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	431a      	orrs	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	049b      	lsls	r3, r3, #18
 80061b0:	431a      	orrs	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	431a      	orrs	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	ea42 0103 	orr.w	r1, r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	e0ad      	b.n	8006334 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d058      	beq.n	8006292 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	6892      	ldr	r2, [r2, #8]
 80061e8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d02d      	beq.n	800624e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006200:	431a      	orrs	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	431a      	orrs	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	049b      	lsls	r3, r3, #18
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	431a      	orrs	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	431a      	orrs	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	431a      	orrs	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	431a      	orrs	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	ea42 0103 	orr.w	r1, r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	430a      	orrs	r2, r1
 8006238:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006240:	d078      	beq.n	8006334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	6852      	ldr	r2, [r2, #4]
 800624a:	619a      	str	r2, [r3, #24]
}
 800624c:	e072      	b.n	8006334 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	431a      	orrs	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	431a      	orrs	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	431a      	orrs	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	049b      	lsls	r3, r3, #18
 800626a:	431a      	orrs	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	431a      	orrs	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	431a      	orrs	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	431a      	orrs	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	ea42 0103 	orr.w	r1, r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	430a      	orrs	r2, r1
 800628e:	615a      	str	r2, [r3, #20]
}
 8006290:	e050      	b.n	8006334 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02a      	beq.n	80062f0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	049b      	lsls	r3, r3, #18
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	431a      	orrs	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	ea42 0103 	orr.w	r1, r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	430a      	orrs	r2, r1
 80062da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062e2:	d027      	beq.n	8006334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	6852      	ldr	r2, [r2, #4]
 80062ec:	619a      	str	r2, [r3, #24]
}
 80062ee:	e021      	b.n	8006334 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01d      	beq.n	8006334 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	431a      	orrs	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	431a      	orrs	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	431a      	orrs	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	049b      	lsls	r3, r3, #18
 8006314:	431a      	orrs	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	431a      	orrs	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	431a      	orrs	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	ea42 0103 	orr.w	r1, r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	430a      	orrs	r2, r1
 8006332:	615a      	str	r2, [r3, #20]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e3ca      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006352:	4b97      	ldr	r3, [pc, #604]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800635c:	4b94      	ldr	r3, [pc, #592]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 80e4 	beq.w	800653c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <HAL_RCC_OscConfig+0x4a>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b0c      	cmp	r3, #12
 800637e:	f040 808b 	bne.w	8006498 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b01      	cmp	r3, #1
 8006386:	f040 8087 	bne.w	8006498 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800638a:	4b89      	ldr	r3, [pc, #548]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_RCC_OscConfig+0x62>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e3a2      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	4b82      	ldr	r3, [pc, #520]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_RCC_OscConfig+0x7c>
 80063b2:	4b7f      	ldr	r3, [pc, #508]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ba:	e005      	b.n	80063c8 <HAL_RCC_OscConfig+0x88>
 80063bc:	4b7c      	ldr	r3, [pc, #496]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c2:	091b      	lsrs	r3, r3, #4
 80063c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d223      	bcs.n	8006414 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd27 	bl	8006e24 <RCC_SetFlashLatencyFromMSIRange>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e383      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063e0:	4b73      	ldr	r3, [pc, #460]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a72      	ldr	r2, [pc, #456]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063e6:	f043 0308 	orr.w	r3, r3, #8
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b70      	ldr	r3, [pc, #448]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	496d      	ldr	r1, [pc, #436]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063fe:	4b6c      	ldr	r3, [pc, #432]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	4968      	ldr	r1, [pc, #416]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800640e:	4313      	orrs	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
 8006412:	e025      	b.n	8006460 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006414:	4b66      	ldr	r3, [pc, #408]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800641a:	f043 0308 	orr.w	r3, r3, #8
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	4b63      	ldr	r3, [pc, #396]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4960      	ldr	r1, [pc, #384]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800642e:	4313      	orrs	r3, r2
 8006430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006432:	4b5f      	ldr	r3, [pc, #380]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	495b      	ldr	r1, [pc, #364]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006442:	4313      	orrs	r3, r2
 8006444:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d109      	bne.n	8006460 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fce7 	bl	8006e24 <RCC_SetFlashLatencyFromMSIRange>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e343      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006460:	f000 fc4a 	bl	8006cf8 <HAL_RCC_GetSysClockFreq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	4950      	ldr	r1, [pc, #320]	; (80065b4 <HAL_RCC_OscConfig+0x274>)
 8006472:	5ccb      	ldrb	r3, [r1, r3]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	4a4e      	ldr	r2, [pc, #312]	; (80065b8 <HAL_RCC_OscConfig+0x278>)
 800647e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006480:	4b4e      	ldr	r3, [pc, #312]	; (80065bc <HAL_RCC_OscConfig+0x27c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f7fd fbb3 	bl	8003bf0 <HAL_InitTick>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d052      	beq.n	800653a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	e327      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d032      	beq.n	8006506 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064a0:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a42      	ldr	r2, [pc, #264]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064ac:	f7fd fbf0 	bl	8003c90 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064b4:	f7fd fbec 	bl	8003c90 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e310      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064c6:	4b3a      	ldr	r3, [pc, #232]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a36      	ldr	r2, [pc, #216]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064d8:	f043 0308 	orr.w	r3, r3, #8
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4b34      	ldr	r3, [pc, #208]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4931      	ldr	r1, [pc, #196]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064f0:	4b2f      	ldr	r3, [pc, #188]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	492c      	ldr	r1, [pc, #176]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006500:	4313      	orrs	r3, r2
 8006502:	604b      	str	r3, [r1, #4]
 8006504:	e01a      	b.n	800653c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006506:	4b2a      	ldr	r3, [pc, #168]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a29      	ldr	r2, [pc, #164]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006512:	f7fd fbbd 	bl	8003c90 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800651a:	f7fd fbb9 	bl	8003c90 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e2dd      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800652c:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f0      	bne.n	800651a <HAL_RCC_OscConfig+0x1da>
 8006538:	e000      	b.n	800653c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800653a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d074      	beq.n	8006632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d005      	beq.n	800655a <HAL_RCC_OscConfig+0x21a>
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d10e      	bne.n	8006572 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d10b      	bne.n	8006572 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d064      	beq.n	8006630 <HAL_RCC_OscConfig+0x2f0>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d160      	bne.n	8006630 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e2ba      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657a:	d106      	bne.n	800658a <HAL_RCC_OscConfig+0x24a>
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0b      	ldr	r2, [pc, #44]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e026      	b.n	80065d8 <HAL_RCC_OscConfig+0x298>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006592:	d115      	bne.n	80065c0 <HAL_RCC_OscConfig+0x280>
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 800659a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a02      	ldr	r2, [pc, #8]	; (80065b0 <HAL_RCC_OscConfig+0x270>)
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e014      	b.n	80065d8 <HAL_RCC_OscConfig+0x298>
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	0800fa2c 	.word	0x0800fa2c
 80065b8:	20000000 	.word	0x20000000
 80065bc:	20000004 	.word	0x20000004
 80065c0:	4ba0      	ldr	r3, [pc, #640]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a9f      	ldr	r2, [pc, #636]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b9d      	ldr	r3, [pc, #628]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a9c      	ldr	r2, [pc, #624]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80065d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fd fb56 	bl	8003c90 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065e8:	f7fd fb52 	bl	8003c90 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	; 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e276      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065fa:	4b92      	ldr	r3, [pc, #584]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2a8>
 8006606:	e014      	b.n	8006632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fd fb42 	bl	8003c90 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006610:	f7fd fb3e 	bl	8003c90 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	; 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e262      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006622:	4b88      	ldr	r3, [pc, #544]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0x2d0>
 800662e:	e000      	b.n	8006632 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d060      	beq.n	8006700 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b04      	cmp	r3, #4
 8006642:	d005      	beq.n	8006650 <HAL_RCC_OscConfig+0x310>
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b0c      	cmp	r3, #12
 8006648:	d119      	bne.n	800667e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d116      	bne.n	800667e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006650:	4b7c      	ldr	r3, [pc, #496]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_RCC_OscConfig+0x328>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e23f      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006668:	4b76      	ldr	r3, [pc, #472]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	061b      	lsls	r3, r3, #24
 8006676:	4973      	ldr	r1, [pc, #460]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006678:	4313      	orrs	r3, r2
 800667a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800667c:	e040      	b.n	8006700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d023      	beq.n	80066ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006686:	4b6f      	ldr	r3, [pc, #444]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a6e      	ldr	r2, [pc, #440]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 800668c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fd fafd 	bl	8003c90 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800669a:	f7fd faf9 	bl	8003c90 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e21d      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066ac:	4b65      	ldr	r3, [pc, #404]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b8:	4b62      	ldr	r3, [pc, #392]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	495f      	ldr	r1, [pc, #380]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	e018      	b.n	8006700 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ce:	4b5d      	ldr	r3, [pc, #372]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a5c      	ldr	r2, [pc, #368]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80066d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fd fad9 	bl	8003c90 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e2:	f7fd fad5 	bl	8003c90 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e1f9      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066f4:	4b53      	ldr	r3, [pc, #332]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f0      	bne.n	80066e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d03c      	beq.n	8006786 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01c      	beq.n	800674e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006714:	4b4b      	ldr	r3, [pc, #300]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800671a:	4a4a      	ldr	r2, [pc, #296]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fd fab4 	bl	8003c90 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800672c:	f7fd fab0 	bl	8003c90 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e1d4      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800673e:	4b41      	ldr	r3, [pc, #260]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0ef      	beq.n	800672c <HAL_RCC_OscConfig+0x3ec>
 800674c:	e01b      	b.n	8006786 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800674e:	4b3d      	ldr	r3, [pc, #244]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006754:	4a3b      	ldr	r2, [pc, #236]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675e:	f7fd fa97 	bl	8003c90 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006766:	f7fd fa93 	bl	8003c90 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e1b7      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006778:	4b32      	ldr	r3, [pc, #200]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 800677a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1ef      	bne.n	8006766 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80a6 	beq.w	80068e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006794:	2300      	movs	r3, #0
 8006796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006798:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 800679a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10d      	bne.n	80067c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067a4:	4b27      	ldr	r3, [pc, #156]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a8:	4a26      	ldr	r2, [pc, #152]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80067aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ae:	6593      	str	r3, [r2, #88]	; 0x58
 80067b0:	4b24      	ldr	r3, [pc, #144]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 80067b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c0:	4b21      	ldr	r3, [pc, #132]	; (8006848 <HAL_RCC_OscConfig+0x508>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d118      	bne.n	80067fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_RCC_OscConfig+0x508>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_RCC_OscConfig+0x508>)
 80067d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067d8:	f7fd fa5a 	bl	8003c90 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e0:	f7fd fa56 	bl	8003c90 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e17a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <HAL_RCC_OscConfig+0x508>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d108      	bne.n	8006818 <HAL_RCC_OscConfig+0x4d8>
 8006806:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	4a0d      	ldr	r2, [pc, #52]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006816:	e029      	b.n	800686c <HAL_RCC_OscConfig+0x52c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b05      	cmp	r3, #5
 800681e:	d115      	bne.n	800684c <HAL_RCC_OscConfig+0x50c>
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	4a07      	ldr	r2, [pc, #28]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006828:	f043 0304 	orr.w	r3, r3, #4
 800682c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006836:	4a03      	ldr	r2, [pc, #12]	; (8006844 <HAL_RCC_OscConfig+0x504>)
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006840:	e014      	b.n	800686c <HAL_RCC_OscConfig+0x52c>
 8006842:	bf00      	nop
 8006844:	40021000 	.word	0x40021000
 8006848:	40007000 	.word	0x40007000
 800684c:	4b9c      	ldr	r3, [pc, #624]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	4a9b      	ldr	r2, [pc, #620]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800685c:	4b98      	ldr	r3, [pc, #608]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	4a97      	ldr	r2, [pc, #604]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006864:	f023 0304 	bic.w	r3, r3, #4
 8006868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d016      	beq.n	80068a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fd fa0c 	bl	8003c90 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800687a:	e00a      	b.n	8006892 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800687c:	f7fd fa08 	bl	8003c90 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f241 3288 	movw	r2, #5000	; 0x1388
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e12a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006892:	4b8b      	ldr	r3, [pc, #556]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ed      	beq.n	800687c <HAL_RCC_OscConfig+0x53c>
 80068a0:	e015      	b.n	80068ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a2:	f7fd f9f5 	bl	8003c90 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068a8:	e00a      	b.n	80068c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fd f9f1 	bl	8003c90 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e113      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068c0:	4b7f      	ldr	r3, [pc, #508]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1ed      	bne.n	80068aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068ce:	7ffb      	ldrb	r3, [r7, #31]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d105      	bne.n	80068e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d4:	4b7a      	ldr	r3, [pc, #488]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 80068d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d8:	4a79      	ldr	r2, [pc, #484]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 80068da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80fe 	beq.w	8006ae6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	f040 80d0 	bne.w	8006a94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068f4:	4b72      	ldr	r3, [pc, #456]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f003 0203 	and.w	r2, r3, #3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	429a      	cmp	r2, r3
 8006906:	d130      	bne.n	800696a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	3b01      	subs	r3, #1
 8006914:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d127      	bne.n	800696a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d11f      	bne.n	800696a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006934:	2a07      	cmp	r2, #7
 8006936:	bf14      	ite	ne
 8006938:	2201      	movne	r2, #1
 800693a:	2200      	moveq	r2, #0
 800693c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800693e:	4293      	cmp	r3, r2
 8006940:	d113      	bne.n	800696a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	3b01      	subs	r3, #1
 8006950:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d109      	bne.n	800696a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	3b01      	subs	r3, #1
 8006964:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d06e      	beq.n	8006a48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d069      	beq.n	8006a44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006970:	4b53      	ldr	r3, [pc, #332]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800697c:	4b50      	ldr	r3, [pc, #320]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0ad      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800698c:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a4b      	ldr	r2, [pc, #300]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006996:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006998:	f7fd f97a 	bl	8003c90 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a0:	f7fd f976 	bl	8003c90 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e09a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069b2:	4b43      	ldr	r3, [pc, #268]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069be:	4b40      	ldr	r3, [pc, #256]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	4b40      	ldr	r3, [pc, #256]	; (8006ac4 <HAL_RCC_OscConfig+0x784>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069ce:	3a01      	subs	r2, #1
 80069d0:	0112      	lsls	r2, r2, #4
 80069d2:	4311      	orrs	r1, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069d8:	0212      	lsls	r2, r2, #8
 80069da:	4311      	orrs	r1, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069e0:	0852      	lsrs	r2, r2, #1
 80069e2:	3a01      	subs	r2, #1
 80069e4:	0552      	lsls	r2, r2, #21
 80069e6:	4311      	orrs	r1, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069ec:	0852      	lsrs	r2, r2, #1
 80069ee:	3a01      	subs	r2, #1
 80069f0:	0652      	lsls	r2, r2, #25
 80069f2:	4311      	orrs	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069f8:	0912      	lsrs	r2, r2, #4
 80069fa:	0452      	lsls	r2, r2, #17
 80069fc:	430a      	orrs	r2, r1
 80069fe:	4930      	ldr	r1, [pc, #192]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a04:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2d      	ldr	r2, [pc, #180]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a10:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a1c:	f7fd f938 	bl	8003c90 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a24:	f7fd f934 	bl	8003c90 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e058      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a42:	e050      	b.n	8006ae6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e04f      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a48:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d148      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a54:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a19      	ldr	r2, [pc, #100]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a6c:	f7fd f910 	bl	8003c90 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a74:	f7fd f90c 	bl	8003c90 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e030      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0f0      	beq.n	8006a74 <HAL_RCC_OscConfig+0x734>
 8006a92:	e028      	b.n	8006ae6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b0c      	cmp	r3, #12
 8006a98:	d023      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9a:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <HAL_RCC_OscConfig+0x780>)
 8006aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fd f8f3 	bl	8003c90 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aac:	e00c      	b.n	8006ac8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fd f8ef 	bl	8003c90 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d905      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e013      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac8:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_RCC_OscConfig+0x7b0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ec      	bne.n	8006aae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <HAL_RCC_OscConfig+0x7b0>)
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	4905      	ldr	r1, [pc, #20]	; (8006af0 <HAL_RCC_OscConfig+0x7b0>)
 8006ada:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <HAL_RCC_OscConfig+0x7b4>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	60cb      	str	r3, [r1, #12]
 8006ae0:	e001      	b.n	8006ae6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40021000 	.word	0x40021000
 8006af4:	feeefffc 	.word	0xfeeefffc

08006af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0e7      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b75      	ldr	r3, [pc, #468]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d910      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b72      	ldr	r3, [pc, #456]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 0207 	bic.w	r2, r3, #7
 8006b22:	4970      	ldr	r1, [pc, #448]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b6e      	ldr	r3, [pc, #440]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0cf      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	4b66      	ldr	r3, [pc, #408]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d908      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b58:	4b63      	ldr	r3, [pc, #396]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4960      	ldr	r1, [pc, #384]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d04c      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b7e:	4b5a      	ldr	r3, [pc, #360]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d121      	bne.n	8006bce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0a6      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b96:	4b54      	ldr	r3, [pc, #336]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d115      	bne.n	8006bce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e09a      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d107      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bae:	4b4e      	ldr	r3, [pc, #312]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e08e      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e086      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bce:	4b46      	ldr	r3, [pc, #280]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f023 0203 	bic.w	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	4943      	ldr	r1, [pc, #268]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fd f856 	bl	8003c90 <HAL_GetTick>
 8006be4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	e00a      	b.n	8006bfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be8:	f7fd f852 	bl	8003c90 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e06e      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfe:	4b3a      	ldr	r3, [pc, #232]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 020c 	and.w	r2, r3, #12
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d1eb      	bne.n	8006be8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d208      	bcs.n	8006c3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c2c:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	492b      	ldr	r1, [pc, #172]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c3e:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d210      	bcs.n	8006c6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4c:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f023 0207 	bic.w	r2, r3, #7
 8006c54:	4923      	ldr	r1, [pc, #140]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5c:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d001      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e036      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	4918      	ldr	r1, [pc, #96]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	4910      	ldr	r1, [pc, #64]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cac:	f000 f824 	bl	8006cf8 <HAL_RCC_GetSysClockFreq>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	490b      	ldr	r1, [pc, #44]	; (8006cec <HAL_RCC_ClockConfig+0x1f4>)
 8006cbe:	5ccb      	ldrb	r3, [r1, r3]
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc8:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <HAL_RCC_ClockConfig+0x1f8>)
 8006cca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <HAL_RCC_ClockConfig+0x1fc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fc ff8d 	bl	8003bf0 <HAL_InitTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cda:	7afb      	ldrb	r3, [r7, #11]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40022000 	.word	0x40022000
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	0800fa2c 	.word	0x0800fa2c
 8006cf0:	20000000 	.word	0x20000000
 8006cf4:	20000004 	.word	0x20000004

08006cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d06:	4b3e      	ldr	r3, [pc, #248]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d10:	4b3b      	ldr	r3, [pc, #236]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RCC_GetSysClockFreq+0x34>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b0c      	cmp	r3, #12
 8006d24:	d121      	bne.n	8006d6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11e      	bne.n	8006d6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d2c:	4b34      	ldr	r3, [pc, #208]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d107      	bne.n	8006d48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d38:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e005      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d48:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	091b      	lsrs	r3, r3, #4
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d54:	4a2b      	ldr	r2, [pc, #172]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10d      	bne.n	8006d80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d68:	e00a      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d70:	4b25      	ldr	r3, [pc, #148]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	e004      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d101      	bne.n	8006d80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d7c:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b0c      	cmp	r3, #12
 8006d84:	d134      	bne.n	8006df0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d86:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d003      	beq.n	8006d9e <HAL_RCC_GetSysClockFreq+0xa6>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d003      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0xac>
 8006d9c:	e005      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006da0:	617b      	str	r3, [r7, #20]
      break;
 8006da2:	e005      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006da6:	617b      	str	r3, [r7, #20]
      break;
 8006da8:	e002      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	617b      	str	r3, [r7, #20]
      break;
 8006dae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006db0:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	3301      	adds	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006dbe:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	fb03 f202 	mul.w	r2, r3, r2
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	0e5b      	lsrs	r3, r3, #25
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	3301      	adds	r3, #1
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006df0:	69bb      	ldr	r3, [r7, #24]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3724      	adds	r7, #36	; 0x24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40021000 	.word	0x40021000
 8006e04:	0800fa3c 	.word	0x0800fa3c
 8006e08:	00f42400 	.word	0x00f42400

08006e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e10:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e12:	681b      	ldr	r3, [r3, #0]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000000 	.word	0x20000000

08006e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e30:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e3c:	f7fe fd20 	bl	8005880 <HAL_PWREx_GetVoltageRange>
 8006e40:	6178      	str	r0, [r7, #20]
 8006e42:	e014      	b.n	8006e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	4a24      	ldr	r2, [pc, #144]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e5c:	f7fe fd10 	bl	8005880 <HAL_PWREx_GetVoltageRange>
 8006e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e62:	4b1e      	ldr	r3, [pc, #120]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d10b      	bne.n	8006e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d919      	bls.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2ba0      	cmp	r3, #160	; 0xa0
 8006e80:	d902      	bls.n	8006e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e82:	2302      	movs	r3, #2
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e013      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e010      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d902      	bls.n	8006e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e94:	2303      	movs	r3, #3
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	e00a      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d102      	bne.n	8006ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	e004      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b70      	cmp	r3, #112	; 0x70
 8006eaa:	d101      	bne.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006eac:	2301      	movs	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f023 0207 	bic.w	r2, r3, #7
 8006eb8:	4909      	ldr	r1, [pc, #36]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40022000 	.word	0x40022000

08006ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006eec:	2300      	movs	r3, #0
 8006eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d041      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f08:	d02a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f0e:	d824      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f14:	d008      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f1a:	d81e      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f24:	d010      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f26:	e018      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f28:	4b86      	ldr	r3, [pc, #536]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4a85      	ldr	r2, [pc, #532]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f34:	e015      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fabb 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f46:	e00c      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3320      	adds	r3, #32
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fba6 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f58:	e003      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f68:	4b76      	ldr	r3, [pc, #472]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f76:	4973      	ldr	r1, [pc, #460]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f7e:	e001      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	7cfb      	ldrb	r3, [r7, #19]
 8006f82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d041      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f98:	d02a      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f9e:	d824      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa4:	d008      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006faa:	d81e      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fb4:	d010      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006fb6:	e018      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fb8:	4b62      	ldr	r3, [pc, #392]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a61      	ldr	r2, [pc, #388]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fc4:	e015      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fa73 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fd6:	e00c      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3320      	adds	r3, #32
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fb5e 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fe8:	e003      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	74fb      	strb	r3, [r7, #19]
      break;
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff2:	7cfb      	ldrb	r3, [r7, #19]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ff8:	4b52      	ldr	r3, [pc, #328]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007006:	494f      	ldr	r1, [pc, #316]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800700e:	e001      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	7cfb      	ldrb	r3, [r7, #19]
 8007012:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a0 	beq.w	8007162 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007022:	2300      	movs	r3, #0
 8007024:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007026:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00d      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703c:	4b41      	ldr	r3, [pc, #260]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800703e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007040:	4a40      	ldr	r2, [pc, #256]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	6593      	str	r3, [r2, #88]	; 0x58
 8007048:	4b3e      	ldr	r3, [pc, #248]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007054:	2301      	movs	r3, #1
 8007056:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007058:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a3a      	ldr	r2, [pc, #232]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800705e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007064:	f7fc fe14 	bl	8003c90 <HAL_GetTick>
 8007068:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800706a:	e009      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706c:	f7fc fe10 	bl	8003c90 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d902      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	74fb      	strb	r3, [r7, #19]
        break;
 800707e:	e005      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007080:	4b31      	ldr	r3, [pc, #196]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0ef      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800708c:	7cfb      	ldrb	r3, [r7, #19]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d15c      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007092:	4b2c      	ldr	r3, [pc, #176]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01f      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d019      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070b0:	4b24      	ldr	r3, [pc, #144]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070bc:	4b21      	ldr	r3, [pc, #132]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	4a20      	ldr	r2, [pc, #128]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070cc:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d2:	4a1c      	ldr	r2, [pc, #112]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d016      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ee:	f7fc fdcf 	bl	8003c90 <HAL_GetTick>
 80070f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070f4:	e00b      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f6:	f7fc fdcb 	bl	8003c90 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	4293      	cmp	r3, r2
 8007106:	d902      	bls.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	74fb      	strb	r3, [r7, #19]
            break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800710e:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0ec      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800711c:	7cfb      	ldrb	r3, [r7, #19]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10c      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007132:	4904      	ldr	r1, [pc, #16]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800713a:	e009      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800713c:	7cfb      	ldrb	r3, [r7, #19]
 800713e:	74bb      	strb	r3, [r7, #18]
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007142:	bf00      	nop
 8007144:	40021000 	.word	0x40021000
 8007148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007150:	7c7b      	ldrb	r3, [r7, #17]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d105      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007156:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	4a9d      	ldr	r2, [pc, #628]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800715c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007160:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800716e:	4b98      	ldr	r3, [pc, #608]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f023 0203 	bic.w	r2, r3, #3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	4994      	ldr	r1, [pc, #592]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007190:	4b8f      	ldr	r3, [pc, #572]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	f023 020c 	bic.w	r2, r3, #12
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	498c      	ldr	r1, [pc, #560]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071b2:	4b87      	ldr	r3, [pc, #540]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	4983      	ldr	r1, [pc, #524]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071d4:	4b7e      	ldr	r3, [pc, #504]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	497b      	ldr	r1, [pc, #492]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071f6:	4b76      	ldr	r3, [pc, #472]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007204:	4972      	ldr	r1, [pc, #456]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007218:	4b6d      	ldr	r3, [pc, #436]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800721a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	496a      	ldr	r1, [pc, #424]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007228:	4313      	orrs	r3, r2
 800722a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800723a:	4b65      	ldr	r3, [pc, #404]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	4961      	ldr	r1, [pc, #388]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800725c:	4b5c      	ldr	r3, [pc, #368]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726a:	4959      	ldr	r1, [pc, #356]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800727e:	4b54      	ldr	r3, [pc, #336]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728c:	4950      	ldr	r1, [pc, #320]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072a0:	4b4b      	ldr	r3, [pc, #300]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	4948      	ldr	r1, [pc, #288]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072c2:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	493f      	ldr	r1, [pc, #252]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d028      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072e4:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	4937      	ldr	r1, [pc, #220]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007302:	d106      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730e:	60d3      	str	r3, [r2, #12]
 8007310:	e011      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800731a:	d10c      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3304      	adds	r3, #4
 8007320:	2101      	movs	r1, #1
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f8c8 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800732c:	7cfb      	ldrb	r3, [r7, #19]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007332:	7cfb      	ldrb	r3, [r7, #19]
 8007334:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d028      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007342:	4b23      	ldr	r3, [pc, #140]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	491f      	ldr	r1, [pc, #124]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007360:	d106      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007362:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800736c:	60d3      	str	r3, [r2, #12]
 800736e:	e011      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	2101      	movs	r1, #1
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f899 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d02b      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	4908      	ldr	r1, [pc, #32]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073be:	d109      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4a02      	ldr	r2, [pc, #8]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ca:	60d3      	str	r3, [r2, #12]
 80073cc:	e014      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80073ce:	bf00      	nop
 80073d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f867 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02f      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007404:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007412:	4928      	ldr	r1, [pc, #160]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007422:	d10d      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	2102      	movs	r1, #2
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f844 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d014      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800743a:	7cfb      	ldrb	r3, [r7, #19]
 800743c:	74bb      	strb	r3, [r7, #18]
 800743e:	e011      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007448:	d10c      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3320      	adds	r3, #32
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f925 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800745a:	7cfb      	ldrb	r3, [r7, #19]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007460:	7cfb      	ldrb	r3, [r7, #19]
 8007462:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007470:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747e:	490d      	ldr	r1, [pc, #52]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074a2:	4904      	ldr	r1, [pc, #16]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80074aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40021000 	.word	0x40021000

080074b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074c6:	4b75      	ldr	r3, [pc, #468]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074d2:	4b72      	ldr	r3, [pc, #456]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0203 	and.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d10d      	bne.n	80074fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
       ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074ea:	4b6c      	ldr	r3, [pc, #432]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
       ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d047      	beq.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e044      	b.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d018      	beq.n	800753e <RCCEx_PLLSAI1_Config+0x86>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d825      	bhi.n	800755c <RCCEx_PLLSAI1_Config+0xa4>
 8007510:	2b01      	cmp	r3, #1
 8007512:	d002      	beq.n	800751a <RCCEx_PLLSAI1_Config+0x62>
 8007514:	2b02      	cmp	r3, #2
 8007516:	d009      	beq.n	800752c <RCCEx_PLLSAI1_Config+0x74>
 8007518:	e020      	b.n	800755c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800751a:	4b60      	ldr	r3, [pc, #384]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11d      	bne.n	8007562 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800752a:	e01a      	b.n	8007562 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800752c:	4b5b      	ldr	r3, [pc, #364]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	2b00      	cmp	r3, #0
 8007536:	d116      	bne.n	8007566 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800753c:	e013      	b.n	8007566 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800753e:	4b57      	ldr	r3, [pc, #348]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800754a:	4b54      	ldr	r3, [pc, #336]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800755a:	e006      	b.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
      break;
 8007560:	e004      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800756a:	bf00      	nop
    }

    if(status == HAL_OK)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10d      	bne.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007572:	4b4a      	ldr	r3, [pc, #296]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6819      	ldr	r1, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	3b01      	subs	r3, #1
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	430b      	orrs	r3, r1
 8007588:	4944      	ldr	r1, [pc, #272]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800758a:	4313      	orrs	r3, r2
 800758c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d17d      	bne.n	8007690 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007594:	4b41      	ldr	r3, [pc, #260]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a40      	ldr	r2, [pc, #256]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800759a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800759e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a0:	f7fc fb76 	bl	8003c90 <HAL_GetTick>
 80075a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075a6:	e009      	b.n	80075bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075a8:	f7fc fb72 	bl	8003c90 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d902      	bls.n	80075bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	73fb      	strb	r3, [r7, #15]
        break;
 80075ba:	e005      	b.n	80075c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075bc:	4b37      	ldr	r3, [pc, #220]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ef      	bne.n	80075a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d160      	bne.n	8007690 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d111      	bne.n	80075f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075d4:	4b31      	ldr	r3, [pc, #196]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80075dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6892      	ldr	r2, [r2, #8]
 80075e4:	0211      	lsls	r1, r2, #8
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68d2      	ldr	r2, [r2, #12]
 80075ea:	0912      	lsrs	r2, r2, #4
 80075ec:	0452      	lsls	r2, r2, #17
 80075ee:	430a      	orrs	r2, r1
 80075f0:	492a      	ldr	r1, [pc, #168]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	610b      	str	r3, [r1, #16]
 80075f6:	e027      	b.n	8007648 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d112      	bne.n	8007624 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075fe:	4b27      	ldr	r3, [pc, #156]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007606:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6892      	ldr	r2, [r2, #8]
 800760e:	0211      	lsls	r1, r2, #8
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6912      	ldr	r2, [r2, #16]
 8007614:	0852      	lsrs	r2, r2, #1
 8007616:	3a01      	subs	r2, #1
 8007618:	0552      	lsls	r2, r2, #21
 800761a:	430a      	orrs	r2, r1
 800761c:	491f      	ldr	r1, [pc, #124]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]
 8007622:	e011      	b.n	8007648 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800762c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6892      	ldr	r2, [r2, #8]
 8007634:	0211      	lsls	r1, r2, #8
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6952      	ldr	r2, [r2, #20]
 800763a:	0852      	lsrs	r2, r2, #1
 800763c:	3a01      	subs	r2, #1
 800763e:	0652      	lsls	r2, r2, #25
 8007640:	430a      	orrs	r2, r1
 8007642:	4916      	ldr	r1, [pc, #88]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007644:	4313      	orrs	r3, r2
 8007646:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007648:	4b14      	ldr	r3, [pc, #80]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a13      	ldr	r2, [pc, #76]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800764e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007654:	f7fc fb1c 	bl	8003c90 <HAL_GetTick>
 8007658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800765a:	e009      	b.n	8007670 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800765c:	f7fc fb18 	bl	8003c90 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d902      	bls.n	8007670 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	73fb      	strb	r3, [r7, #15]
          break;
 800766e:	e005      	b.n	800767c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0ef      	beq.n	800765c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	4904      	ldr	r1, [pc, #16]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800768c:	4313      	orrs	r3, r2
 800768e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000

080076a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076ae:	4b6a      	ldr	r3, [pc, #424]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d018      	beq.n	80076ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80076ba:	4b67      	ldr	r3, [pc, #412]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 0203 	and.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d10d      	bne.n	80076e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
       ||
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80076d2:	4b61      	ldr	r3, [pc, #388]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	091b      	lsrs	r3, r3, #4
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
       ||
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d047      	beq.n	8007776 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]
 80076ea:	e044      	b.n	8007776 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d018      	beq.n	8007726 <RCCEx_PLLSAI2_Config+0x86>
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d825      	bhi.n	8007744 <RCCEx_PLLSAI2_Config+0xa4>
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d002      	beq.n	8007702 <RCCEx_PLLSAI2_Config+0x62>
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d009      	beq.n	8007714 <RCCEx_PLLSAI2_Config+0x74>
 8007700:	e020      	b.n	8007744 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007702:	4b55      	ldr	r3, [pc, #340]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d11d      	bne.n	800774a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007712:	e01a      	b.n	800774a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007714:	4b50      	ldr	r3, [pc, #320]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771c:	2b00      	cmp	r3, #0
 800771e:	d116      	bne.n	800774e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007724:	e013      	b.n	800774e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007726:	4b4c      	ldr	r3, [pc, #304]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007732:	4b49      	ldr	r3, [pc, #292]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d109      	bne.n	8007752 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007742:	e006      	b.n	8007752 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e004      	b.n	8007754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800774a:	bf00      	nop
 800774c:	e002      	b.n	8007754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007752:	bf00      	nop
    }

    if(status == HAL_OK)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10d      	bne.n	8007776 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800775a:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	3b01      	subs	r3, #1
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	430b      	orrs	r3, r1
 8007770:	4939      	ldr	r1, [pc, #228]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007772:	4313      	orrs	r3, r2
 8007774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d167      	bne.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800777c:	4b36      	ldr	r3, [pc, #216]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a35      	ldr	r2, [pc, #212]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007788:	f7fc fa82 	bl	8003c90 <HAL_GetTick>
 800778c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800778e:	e009      	b.n	80077a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007790:	f7fc fa7e 	bl	8003c90 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d902      	bls.n	80077a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	73fb      	strb	r3, [r7, #15]
        break;
 80077a2:	e005      	b.n	80077b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077a4:	4b2c      	ldr	r3, [pc, #176]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1ef      	bne.n	8007790 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d14a      	bne.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d111      	bne.n	80077e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077bc:	4b26      	ldr	r3, [pc, #152]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80077c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6892      	ldr	r2, [r2, #8]
 80077cc:	0211      	lsls	r1, r2, #8
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68d2      	ldr	r2, [r2, #12]
 80077d2:	0912      	lsrs	r2, r2, #4
 80077d4:	0452      	lsls	r2, r2, #17
 80077d6:	430a      	orrs	r2, r1
 80077d8:	491f      	ldr	r1, [pc, #124]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	614b      	str	r3, [r1, #20]
 80077de:	e011      	b.n	8007804 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80077e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6892      	ldr	r2, [r2, #8]
 80077f0:	0211      	lsls	r1, r2, #8
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6912      	ldr	r2, [r2, #16]
 80077f6:	0852      	lsrs	r2, r2, #1
 80077f8:	3a01      	subs	r2, #1
 80077fa:	0652      	lsls	r2, r2, #25
 80077fc:	430a      	orrs	r2, r1
 80077fe:	4916      	ldr	r1, [pc, #88]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007800:	4313      	orrs	r3, r2
 8007802:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007804:	4b14      	ldr	r3, [pc, #80]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a13      	ldr	r2, [pc, #76]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800780a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007810:	f7fc fa3e 	bl	8003c90 <HAL_GetTick>
 8007814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007816:	e009      	b.n	800782c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007818:	f7fc fa3a 	bl	8003c90 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d902      	bls.n	800782c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
          break;
 800782a:	e005      	b.n	8007838 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0ef      	beq.n	8007818 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	4904      	ldr	r1, [pc, #16]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007848:	4313      	orrs	r3, r2
 800784a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40021000 	.word	0x40021000

0800785c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e095      	b.n	800799a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800787e:	d009      	beq.n	8007894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	61da      	str	r2, [r3, #28]
 8007886:	e005      	b.n	8007894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fb ffb6 	bl	8003820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078d4:	d902      	bls.n	80078dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e002      	b.n	80078e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80078ea:	d007      	beq.n	80078fc <HAL_SPI_Init+0xa0>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	ea42 0103 	orr.w	r1, r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	f003 0204 	and.w	r2, r3, #4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007978:	ea42 0103 	orr.w	r1, r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b088      	sub	sp, #32
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_SPI_Transmit+0x22>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e15f      	b.n	8007c84 <HAL_SPI_Transmit+0x2e2>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079cc:	f7fc f960 	bl	8003c90 <HAL_GetTick>
 80079d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d002      	beq.n	80079e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80079e2:	2302      	movs	r3, #2
 80079e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079e6:	e148      	b.n	8007c7a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_SPI_Transmit+0x52>
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079f8:	e13f      	b.n	8007c7a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2203      	movs	r2, #3
 80079fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a44:	d10f      	bne.n	8007a66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d007      	beq.n	8007a84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a8c:	d94f      	bls.n	8007b2e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_Transmit+0xfa>
 8007a96:	8afb      	ldrh	r3, [r7, #22]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d142      	bne.n	8007b22 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ac0:	e02f      	b.n	8007b22 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d112      	bne.n	8007af6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	1c9a      	adds	r2, r3, #2
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007af4:	e015      	b.n	8007b22 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af6:	f7fc f8cb 	bl	8003c90 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d803      	bhi.n	8007b0e <HAL_SPI_Transmit+0x16c>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0c:	d102      	bne.n	8007b14 <HAL_SPI_Transmit+0x172>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007b20:	e0ab      	b.n	8007c7a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ca      	bne.n	8007ac2 <HAL_SPI_Transmit+0x120>
 8007b2c:	e080      	b.n	8007c30 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <HAL_SPI_Transmit+0x19a>
 8007b36:	8afb      	ldrh	r3, [r7, #22]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d174      	bne.n	8007c26 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d912      	bls.n	8007b6c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	881a      	ldrh	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b02      	subs	r3, #2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b6a:	e05c      	b.n	8007c26 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b92:	e048      	b.n	8007c26 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d12b      	bne.n	8007bfa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d912      	bls.n	8007bd2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	881a      	ldrh	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	1c9a      	adds	r2, r3, #2
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b02      	subs	r3, #2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bd0:	e029      	b.n	8007c26 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	7812      	ldrb	r2, [r2, #0]
 8007bde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bf8:	e015      	b.n	8007c26 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bfa:	f7fc f849 	bl	8003c90 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d803      	bhi.n	8007c12 <HAL_SPI_Transmit+0x270>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c10:	d102      	bne.n	8007c18 <HAL_SPI_Transmit+0x276>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007c24:	e029      	b.n	8007c7a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1b1      	bne.n	8007b94 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fb77 	bl	8008328 <SPI_EndRxTxTransaction>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e003      	b.n	8007c7a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08a      	sub	sp, #40	; 0x28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x26>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e20a      	b.n	80080c8 <HAL_SPI_TransmitReceive+0x43c>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cba:	f7fb ffe9 	bl	8003c90 <HAL_GetTick>
 8007cbe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cc6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007cce:	887b      	ldrh	r3, [r7, #2]
 8007cd0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007cd2:	887b      	ldrh	r3, [r7, #2]
 8007cd4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cd6:	7efb      	ldrb	r3, [r7, #27]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d00e      	beq.n	8007cfa <HAL_SPI_TransmitReceive+0x6e>
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ce2:	d106      	bne.n	8007cf2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <HAL_SPI_TransmitReceive+0x66>
 8007cec:	7efb      	ldrb	r3, [r7, #27]
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d003      	beq.n	8007cfa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cf8:	e1e0      	b.n	80080bc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x80>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x80>
 8007d06:	887b      	ldrh	r3, [r7, #2]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d12:	e1d3      	b.n	80080bc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d003      	beq.n	8007d28 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2205      	movs	r2, #5
 8007d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	887a      	ldrh	r2, [r7, #2]
 8007d38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	887a      	ldrh	r2, [r7, #2]
 8007d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	887a      	ldrh	r2, [r7, #2]
 8007d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	887a      	ldrh	r2, [r7, #2]
 8007d54:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d6a:	d802      	bhi.n	8007d72 <HAL_SPI_TransmitReceive+0xe6>
 8007d6c:	8a3b      	ldrh	r3, [r7, #16]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d908      	bls.n	8007d84 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d80:	605a      	str	r2, [r3, #4]
 8007d82:	e007      	b.n	8007d94 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d92:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d007      	beq.n	8007db2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dba:	f240 8081 	bls.w	8007ec0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x140>
 8007dc6:	8a7b      	ldrh	r3, [r7, #18]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d16d      	bne.n	8007ea8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd0:	881a      	ldrh	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	1c9a      	adds	r2, r3, #2
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007df0:	e05a      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d11b      	bne.n	8007e38 <HAL_SPI_TransmitReceive+0x1ac>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d016      	beq.n	8007e38 <HAL_SPI_TransmitReceive+0x1ac>
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d113      	bne.n	8007e38 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	881a      	ldrh	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	1c9a      	adds	r2, r3, #2
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d11c      	bne.n	8007e80 <HAL_SPI_TransmitReceive+0x1f4>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	b292      	uxth	r2, r2
 8007e5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e80:	f7fb ff06 	bl	8003c90 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d80b      	bhi.n	8007ea8 <HAL_SPI_TransmitReceive+0x21c>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e96:	d007      	beq.n	8007ea8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007ea6:	e109      	b.n	80080bc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d19f      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x166>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d199      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x166>
 8007ebe:	e0e3      	b.n	8008088 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x244>
 8007ec8:	8a7b      	ldrh	r3, [r7, #18]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	f040 80cf 	bne.w	800806e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d912      	bls.n	8007f00 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	881a      	ldrh	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b02      	subs	r3, #2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007efe:	e0b6      	b.n	800806e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f26:	e0a2      	b.n	800806e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d134      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x314>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d02f      	beq.n	8007fa0 <HAL_SPI_TransmitReceive+0x314>
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d12c      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d912      	bls.n	8007f76 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	881a      	ldrh	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	1c9a      	adds	r2, r3, #2
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b02      	subs	r3, #2
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f74:	e012      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d148      	bne.n	8008040 <HAL_SPI_TransmitReceive+0x3b4>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d042      	beq.n	8008040 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d923      	bls.n	800800e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	b292      	uxth	r2, r2
 8007fd2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	1c9a      	adds	r2, r3, #2
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b02      	subs	r3, #2
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d81f      	bhi.n	800803c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	e016      	b.n	800803c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f103 020c 	add.w	r2, r3, #12
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800803c:	2301      	movs	r3, #1
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008040:	f7fb fe26 	bl	8003c90 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804c:	429a      	cmp	r2, r3
 800804e:	d803      	bhi.n	8008058 <HAL_SPI_TransmitReceive+0x3cc>
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008056:	d102      	bne.n	800805e <HAL_SPI_TransmitReceive+0x3d2>
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	2b00      	cmp	r3, #0
 800805c:	d107      	bne.n	800806e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800806c:	e026      	b.n	80080bc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	f47f af57 	bne.w	8007f28 <HAL_SPI_TransmitReceive+0x29c>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	f47f af50 	bne.w	8007f28 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f94b 	bl	8008328 <SPI_EndRxTxTransaction>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d005      	beq.n	80080a4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2220      	movs	r2, #32
 80080a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080b2:	e003      	b.n	80080bc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80080c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080de:	b2db      	uxtb	r3, r3
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080fc:	f7fb fdc8 	bl	8003c90 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4413      	add	r3, r2
 800810a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800810c:	f7fb fdc0 	bl	8003c90 <HAL_GetTick>
 8008110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008112:	4b39      	ldr	r3, [pc, #228]	; (80081f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	015b      	lsls	r3, r3, #5
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	fb02 f303 	mul.w	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008122:	e054      	b.n	80081ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800812a:	d050      	beq.n	80081ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800812c:	f7fb fdb0 	bl	8003c90 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	429a      	cmp	r2, r3
 800813a:	d902      	bls.n	8008142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d13d      	bne.n	80081be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800815a:	d111      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008164:	d004      	beq.n	8008170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816e:	d107      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800817e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008188:	d10f      	bne.n	80081aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e017      	b.n	80081ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	bf0c      	ite	eq
 80081de:	2301      	moveq	r3, #1
 80081e0:	2300      	movne	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d19b      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3720      	adds	r7, #32
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000000 	.word	0x20000000

080081fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	; 0x28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800820e:	f7fb fd3f 	bl	8003c90 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	4413      	add	r3, r2
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800821e:	f7fb fd37 	bl	8003c90 <HAL_GetTick>
 8008222:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800822c:	4b3d      	ldr	r3, [pc, #244]	; (8008324 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	00da      	lsls	r2, r3, #3
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	0d1b      	lsrs	r3, r3, #20
 800823c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823e:	fb02 f303 	mul.w	r3, r2, r3
 8008242:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008244:	e060      	b.n	8008308 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800824c:	d107      	bne.n	800825e <SPI_WaitFifoStateUntilTimeout+0x62>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800825c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008264:	d050      	beq.n	8008308 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008266:	f7fb fd13 	bl	8003c90 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008272:	429a      	cmp	r2, r3
 8008274:	d902      	bls.n	800827c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	d13d      	bne.n	80082f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800828a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008294:	d111      	bne.n	80082ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800829e:	d004      	beq.n	80082aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a8:	d107      	bne.n	80082ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	d10f      	bne.n	80082e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e010      	b.n	800831a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	3b01      	subs	r3, #1
 8008306:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4013      	ands	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d196      	bne.n	8008246 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3728      	adds	r7, #40	; 0x28
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000000 	.word	0x20000000

08008328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2200      	movs	r2, #0
 800833c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff ff5b 	bl	80081fc <SPI_WaitFifoStateUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008350:	f043 0220 	orr.w	r2, r3, #32
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e027      	b.n	80083ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2200      	movs	r2, #0
 8008364:	2180      	movs	r1, #128	; 0x80
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff fec0 	bl	80080ec <SPI_WaitFlagStateUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008376:	f043 0220 	orr.w	r2, r3, #32
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e014      	b.n	80083ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff ff34 	bl	80081fc <SPI_WaitFifoStateUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	f043 0220 	orr.w	r2, r3, #32
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e000      	b.n	80083ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083b4:	b084      	sub	sp, #16
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	f107 001c 	add.w	r0, r7, #28
 80083c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fa1c 	bl	8009810 <USB_CoreReset>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80083dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
 80083ee:	e005      	b.n	80083fc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008408:	b004      	add	sp, #16
 800840a:	4770      	bx	lr

0800840c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d165      	bne.n	80084ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a3e      	ldr	r2, [pc, #248]	; (800851c <USB_SetTurnaroundTime+0x110>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d906      	bls.n	8008436 <USB_SetTurnaroundTime+0x2a>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4a3d      	ldr	r2, [pc, #244]	; (8008520 <USB_SetTurnaroundTime+0x114>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d202      	bcs.n	8008436 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008430:	230f      	movs	r3, #15
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	e05c      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	4a39      	ldr	r2, [pc, #228]	; (8008520 <USB_SetTurnaroundTime+0x114>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d306      	bcc.n	800844c <USB_SetTurnaroundTime+0x40>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4a38      	ldr	r2, [pc, #224]	; (8008524 <USB_SetTurnaroundTime+0x118>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d202      	bcs.n	800844c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008446:	230e      	movs	r3, #14
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e051      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4a35      	ldr	r2, [pc, #212]	; (8008524 <USB_SetTurnaroundTime+0x118>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d306      	bcc.n	8008462 <USB_SetTurnaroundTime+0x56>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4a34      	ldr	r2, [pc, #208]	; (8008528 <USB_SetTurnaroundTime+0x11c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d202      	bcs.n	8008462 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800845c:	230d      	movs	r3, #13
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e046      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4a30      	ldr	r2, [pc, #192]	; (8008528 <USB_SetTurnaroundTime+0x11c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d306      	bcc.n	8008478 <USB_SetTurnaroundTime+0x6c>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4a2f      	ldr	r2, [pc, #188]	; (800852c <USB_SetTurnaroundTime+0x120>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d802      	bhi.n	8008478 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008472:	230c      	movs	r3, #12
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e03b      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4a2c      	ldr	r2, [pc, #176]	; (800852c <USB_SetTurnaroundTime+0x120>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d906      	bls.n	800848e <USB_SetTurnaroundTime+0x82>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <USB_SetTurnaroundTime+0x124>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d802      	bhi.n	800848e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008488:	230b      	movs	r3, #11
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	e030      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4a27      	ldr	r2, [pc, #156]	; (8008530 <USB_SetTurnaroundTime+0x124>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d906      	bls.n	80084a4 <USB_SetTurnaroundTime+0x98>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a26      	ldr	r2, [pc, #152]	; (8008534 <USB_SetTurnaroundTime+0x128>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d802      	bhi.n	80084a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800849e:	230a      	movs	r3, #10
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e025      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4a23      	ldr	r2, [pc, #140]	; (8008534 <USB_SetTurnaroundTime+0x128>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d906      	bls.n	80084ba <USB_SetTurnaroundTime+0xae>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4a22      	ldr	r2, [pc, #136]	; (8008538 <USB_SetTurnaroundTime+0x12c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d202      	bcs.n	80084ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80084b4:	2309      	movs	r3, #9
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e01a      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <USB_SetTurnaroundTime+0x12c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d306      	bcc.n	80084d0 <USB_SetTurnaroundTime+0xc4>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4a1d      	ldr	r2, [pc, #116]	; (800853c <USB_SetTurnaroundTime+0x130>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d802      	bhi.n	80084d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80084ca:	2308      	movs	r3, #8
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e00f      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4a1a      	ldr	r2, [pc, #104]	; (800853c <USB_SetTurnaroundTime+0x130>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d906      	bls.n	80084e6 <USB_SetTurnaroundTime+0xda>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4a19      	ldr	r2, [pc, #100]	; (8008540 <USB_SetTurnaroundTime+0x134>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d202      	bcs.n	80084e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80084e0:	2307      	movs	r3, #7
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e004      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80084e6:	2306      	movs	r3, #6
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	e001      	b.n	80084f0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80084ec:	2309      	movs	r3, #9
 80084ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	029b      	lsls	r3, r3, #10
 8008504:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008508:	431a      	orrs	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	00d8acbf 	.word	0x00d8acbf
 8008520:	00e4e1c0 	.word	0x00e4e1c0
 8008524:	00f42400 	.word	0x00f42400
 8008528:	01067380 	.word	0x01067380
 800852c:	011a499f 	.word	0x011a499f
 8008530:	01312cff 	.word	0x01312cff
 8008534:	014ca43f 	.word	0x014ca43f
 8008538:	016e3600 	.word	0x016e3600
 800853c:	01a6ab1f 	.word	0x01a6ab1f
 8008540:	01e84800 	.word	0x01e84800

08008544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f043 0201 	orr.w	r2, r3, #1
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 0201 	bic.w	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d115      	bne.n	80085d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085b6:	2001      	movs	r0, #1
 80085b8:	f7fb fb76 	bl	8003ca8 <HAL_Delay>
      ms++;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 f8ab 	bl	800971e <USB_GetMode>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d01e      	beq.n	800860c <USB_SetCurrentMode+0x84>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b31      	cmp	r3, #49	; 0x31
 80085d2:	d9f0      	bls.n	80085b6 <USB_SetCurrentMode+0x2e>
 80085d4:	e01a      	b.n	800860c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d115      	bne.n	8008608 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085e8:	2001      	movs	r0, #1
 80085ea:	f7fb fb5d 	bl	8003ca8 <HAL_Delay>
      ms++;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 f892 	bl	800971e <USB_GetMode>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <USB_SetCurrentMode+0x84>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b31      	cmp	r3, #49	; 0x31
 8008604:	d9f0      	bls.n	80085e8 <USB_SetCurrentMode+0x60>
 8008606:	e001      	b.n	800860c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e005      	b.n	8008618 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b32      	cmp	r3, #50	; 0x32
 8008610:	d101      	bne.n	8008616 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008620:	b084      	sub	sp, #16
 8008622:	b580      	push	{r7, lr}
 8008624:	b086      	sub	sp, #24
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800862e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e009      	b.n	8008654 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3340      	adds	r3, #64	; 0x40
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	3301      	adds	r3, #1
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b0e      	cmp	r3, #14
 8008658:	d9f2      	bls.n	8008640 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800865a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11c      	bne.n	800869a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800866e:	f043 0302 	orr.w	r3, r3, #2
 8008672:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e005      	b.n	80086a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086ac:	461a      	mov	r2, r3
 80086ae:	2300      	movs	r3, #0
 80086b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80086b2:	2103      	movs	r1, #3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f959 	bl	800896c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086ba:	2110      	movs	r1, #16
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f8f1 	bl	80088a4 <USB_FlushTxFifo>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f91d 	bl	800890c <USB_FlushRxFifo>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	461a      	mov	r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fa:	461a      	mov	r2, r3
 80086fc:	2300      	movs	r3, #0
 80086fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008700:	2300      	movs	r3, #0
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	e043      	b.n	800878e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800871c:	d118      	bne.n	8008750 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008730:	461a      	mov	r2, r3
 8008732:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	e013      	b.n	8008762 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008746:	461a      	mov	r2, r3
 8008748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	e008      	b.n	8008762 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	461a      	mov	r2, r3
 800875e:	2300      	movs	r3, #0
 8008760:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876e:	461a      	mov	r2, r3
 8008770:	2300      	movs	r3, #0
 8008772:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008780:	461a      	mov	r2, r3
 8008782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008786:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	3301      	adds	r3, #1
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	429a      	cmp	r2, r3
 8008794:	d3b7      	bcc.n	8008706 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	e043      	b.n	8008824 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b2:	d118      	bne.n	80087e6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	461a      	mov	r2, r3
 80087c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e013      	b.n	80087f8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	461a      	mov	r2, r3
 80087de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	e008      	b.n	80087f8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008804:	461a      	mov	r2, r3
 8008806:	2300      	movs	r3, #0
 8008808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008816:	461a      	mov	r2, r3
 8008818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800881c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3301      	adds	r3, #1
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	d3b7      	bcc.n	800879c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800883a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800883e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800884c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f043 0210 	orr.w	r2, r3, #16
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <USB_DevInit+0x280>)
 8008860:	4313      	orrs	r3, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	f043 0208 	orr.w	r2, r3, #8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887a:	2b01      	cmp	r3, #1
 800887c:	d107      	bne.n	800888e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008886:	f043 0304 	orr.w	r3, r3, #4
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800889a:	b004      	add	sp, #16
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	803c3800 	.word	0x803c3800

080088a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4a13      	ldr	r2, [pc, #76]	; (8008908 <USB_FlushTxFifo+0x64>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d901      	bls.n	80088c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e01b      	b.n	80088fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	daf2      	bge.n	80088b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	019b      	lsls	r3, r3, #6
 80088d4:	f043 0220 	orr.w	r2, r3, #32
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <USB_FlushTxFifo+0x64>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d901      	bls.n	80088ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e006      	b.n	80088fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d0f0      	beq.n	80088dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	00030d40 	.word	0x00030d40

0800890c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4a11      	ldr	r2, [pc, #68]	; (8008968 <USB_FlushRxFifo+0x5c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d901      	bls.n	800892a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e018      	b.n	800895c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	daf2      	bge.n	8008918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2210      	movs	r2, #16
 800893a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4a08      	ldr	r2, [pc, #32]	; (8008968 <USB_FlushRxFifo+0x5c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d901      	bls.n	800894e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e006      	b.n	800895c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0310 	and.w	r3, r3, #16
 8008956:	2b10      	cmp	r3, #16
 8008958:	d0f0      	beq.n	800893c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	00030d40 	.word	0x00030d40

0800896c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	68f9      	ldr	r1, [r7, #12]
 8008988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800898c:	4313      	orrs	r3, r2
 800898e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800899e:	b480      	push	{r7}
 80089a0:	b087      	sub	sp, #28
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 0306 	and.w	r3, r3, #6
 80089b6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d002      	beq.n	80089c4 <USB_GetDevSpeed+0x26>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b06      	cmp	r3, #6
 80089c2:	d102      	bne.n	80089ca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80089c4:	2302      	movs	r3, #2
 80089c6:	75fb      	strb	r3, [r7, #23]
 80089c8:	e001      	b.n	80089ce <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80089ca:	230f      	movs	r3, #15
 80089cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	785b      	ldrb	r3, [r3, #1]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d13a      	bne.n	8008a6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	2101      	movs	r1, #1
 8008a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a16:	4313      	orrs	r3, r2
 8008a18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d155      	bne.n	8008adc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	791b      	ldrb	r3, [r3, #4]
 8008a4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	059b      	lsls	r3, r3, #22
 8008a52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a54:	4313      	orrs	r3, r2
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	e036      	b.n	8008adc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a74:	69da      	ldr	r2, [r3, #28]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	2101      	movs	r1, #1
 8008a80:	fa01 f303 	lsl.w	r3, r1, r3
 8008a84:	041b      	lsls	r3, r3, #16
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d11a      	bne.n	8008adc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ada:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
	...

08008aec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	785b      	ldrb	r3, [r3, #1]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d161      	bne.n	8008bcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b1e:	d11f      	bne.n	8008b60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	2101      	movs	r1, #1
 8008b72:	fa01 f303 	lsl.w	r3, r1, r3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	68f9      	ldr	r1, [r7, #12]
 8008b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b80:	4013      	ands	r3, r2
 8008b82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	0159      	lsls	r1, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	440b      	add	r3, r1
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <USB_DeactivateEndpoint+0x1b0>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]
 8008bca:	e060      	b.n	8008c8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be2:	d11f      	bne.n	8008c24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	2101      	movs	r1, #1
 8008c36:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3a:	041b      	lsls	r3, r3, #16
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	68f9      	ldr	r1, [r7, #12]
 8008c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c44:	4013      	ands	r3, r2
 8008c46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	2101      	movs	r1, #1
 8008c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5e:	041b      	lsls	r3, r3, #16
 8008c60:	43db      	mvns	r3, r3
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4013      	ands	r3, r2
 8008c6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	0159      	lsls	r1, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	440b      	add	r3, r1
 8008c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c86:	4619      	mov	r1, r3
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <USB_DeactivateEndpoint+0x1b4>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	ec337800 	.word	0xec337800
 8008ca0:	eff37800 	.word	0xeff37800

08008ca4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	f040 8128 	bne.w	8008f12 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d132      	bne.n	8008d30 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	0151      	lsls	r1, r2, #5
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	440a      	add	r2, r1
 8008d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d28:	0cdb      	lsrs	r3, r3, #19
 8008d2a:	04db      	lsls	r3, r3, #19
 8008d2c:	6113      	str	r3, [r2, #16]
 8008d2e:	e092      	b.n	8008e56 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4a:	0cdb      	lsrs	r3, r3, #19
 8008d4c:	04db      	lsls	r3, r3, #19
 8008d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d72:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d11a      	bne.n	8008db0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	691a      	ldr	r2, [r3, #16]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d903      	bls.n	8008d8e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dac:	6113      	str	r3, [r2, #16]
 8008dae:	e01b      	b.n	8008de8 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	6919      	ldr	r1, [r3, #16]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	440b      	add	r3, r1
 8008dc8:	1e59      	subs	r1, r3, #1
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	fbb1 f3f3 	udiv	r3, r1, r3
 8008dd2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008dd4:	4b8d      	ldr	r3, [pc, #564]	; (800900c <USB_EPStartXfer+0x368>)
 8008dd6:	400b      	ands	r3, r1
 8008dd8:	6939      	ldr	r1, [r7, #16]
 8008dda:	0148      	lsls	r0, r1, #5
 8008ddc:	6979      	ldr	r1, [r7, #20]
 8008dde:	4401      	add	r1, r0
 8008de0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008de4:	4313      	orrs	r3, r2
 8008de6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df4:	691a      	ldr	r2, [r3, #16]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dfe:	6939      	ldr	r1, [r7, #16]
 8008e00:	0148      	lsls	r0, r1, #5
 8008e02:	6979      	ldr	r1, [r7, #20]
 8008e04:	4401      	add	r1, r0
 8008e06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	791b      	ldrb	r3, [r3, #4]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d11f      	bne.n	8008e56 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008e34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e54:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e74:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	791b      	ldrb	r3, [r3, #4]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d015      	beq.n	8008eaa <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8139 	beq.w	80090fa <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	2101      	movs	r1, #1
 8008e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9e:	6979      	ldr	r1, [r7, #20]
 8008ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	634b      	str	r3, [r1, #52]	; 0x34
 8008ea8:	e127      	b.n	80090fa <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d110      	bne.n	8008edc <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e00f      	b.n	8008efc <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008efa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	68d9      	ldr	r1, [r3, #12]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781a      	ldrb	r2, [r3, #0]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9a6 	bl	800925c <USB_WritePacket>
 8008f10:	e0f3      	b.n	80090fa <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	0151      	lsls	r1, r2, #5
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	440a      	add	r2, r1
 8008f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f2c:	0cdb      	lsrs	r3, r3, #19
 8008f2e:	04db      	lsls	r3, r3, #19
 8008f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f54:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d12f      	bne.n	8008fbc <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f80:	691a      	ldr	r2, [r3, #16]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f8a:	6939      	ldr	r1, [r7, #16]
 8008f8c:	0148      	lsls	r0, r1, #5
 8008f8e:	6979      	ldr	r1, [r7, #20]
 8008f90:	4401      	add	r1, r0
 8008f92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f96:	4313      	orrs	r3, r2
 8008f98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fb8:	6113      	str	r3, [r2, #16]
 8008fba:	e061      	b.n	8009080 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d125      	bne.n	8009010 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fda:	6939      	ldr	r1, [r7, #16]
 8008fdc:	0148      	lsls	r0, r1, #5
 8008fde:	6979      	ldr	r1, [r7, #20]
 8008fe0:	4401      	add	r1, r0
 8008fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009008:	6113      	str	r3, [r2, #16]
 800900a:	e039      	b.n	8009080 <USB_EPStartXfer+0x3dc>
 800900c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	691a      	ldr	r2, [r3, #16]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4413      	add	r3, r2
 800901a:	1e5a      	subs	r2, r3, #1
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	fbb2 f3f3 	udiv	r3, r2, r3
 8009024:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	89fa      	ldrh	r2, [r7, #14]
 800902c:	fb03 f202 	mul.w	r2, r3, r2
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	691a      	ldr	r2, [r3, #16]
 8009042:	89fb      	ldrh	r3, [r7, #14]
 8009044:	04d9      	lsls	r1, r3, #19
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <USB_EPStartXfer+0x460>)
 8009048:	400b      	ands	r3, r1
 800904a:	6939      	ldr	r1, [r7, #16]
 800904c:	0148      	lsls	r0, r1, #5
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	4401      	add	r1, r0
 8009052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009056:	4313      	orrs	r3, r2
 8009058:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	691a      	ldr	r2, [r3, #16]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009070:	6939      	ldr	r1, [r7, #16]
 8009072:	0148      	lsls	r0, r1, #5
 8009074:	6979      	ldr	r1, [r7, #20]
 8009076:	4401      	add	r1, r0
 8009078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800907c:	4313      	orrs	r3, r2
 800907e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	791b      	ldrb	r3, [r3, #4]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d128      	bne.n	80090da <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009094:	2b00      	cmp	r3, #0
 8009096:	d110      	bne.n	80090ba <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	e00f      	b.n	80090da <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	0151      	lsls	r1, r2, #5
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	1ff80000 	.word	0x1ff80000

08009108 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	785b      	ldrb	r3, [r3, #1]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d14a      	bne.n	80091bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800913a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800913e:	f040 8086 	bne.w	800924e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	7812      	ldrb	r2, [r2, #0]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	440a      	add	r2, r1
 800915c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009164:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	7812      	ldrb	r2, [r2, #0]
 800917a:	0151      	lsls	r1, r2, #5
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	440a      	add	r2, r1
 8009180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009188:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f242 7210 	movw	r2, #10000	; 0x2710
 8009196:	4293      	cmp	r3, r2
 8009198:	d902      	bls.n	80091a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	75fb      	strb	r3, [r7, #23]
          break;
 800919e:	e056      	b.n	800924e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b8:	d0e7      	beq.n	800918a <USB_EPStopXfer+0x82>
 80091ba:	e048      	b.n	800924e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d4:	d13b      	bne.n	800924e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	7812      	ldrb	r2, [r2, #0]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800921c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3301      	adds	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f242 7210 	movw	r2, #10000	; 0x2710
 800922a:	4293      	cmp	r3, r2
 800922c:	d902      	bls.n	8009234 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]
          break;
 8009232:	e00c      	b.n	800924e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924c:	d0e7      	beq.n	800921e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	4611      	mov	r1, r2
 8009268:	461a      	mov	r2, r3
 800926a:	460b      	mov	r3, r1
 800926c:	71fb      	strb	r3, [r7, #7]
 800926e:	4613      	mov	r3, r2
 8009270:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800927a:	88bb      	ldrh	r3, [r7, #4]
 800927c:	3303      	adds	r3, #3
 800927e:	089b      	lsrs	r3, r3, #2
 8009280:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	e018      	b.n	80092ba <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	031a      	lsls	r2, r3, #12
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4413      	add	r3, r2
 8009290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009294:	461a      	mov	r2, r3
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	3301      	adds	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	3301      	adds	r3, #1
 80092a6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	3301      	adds	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3301      	adds	r3, #1
 80092b2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	3301      	adds	r3, #1
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d3e2      	bcc.n	8009288 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3724      	adds	r7, #36	; 0x24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b08b      	sub	sp, #44	; 0x2c
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	089b      	lsrs	r3, r3, #2
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	f003 0303 	and.w	r3, r3, #3
 80092f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092f6:	2300      	movs	r3, #0
 80092f8:	623b      	str	r3, [r7, #32]
 80092fa:	e014      	b.n	8009326 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	601a      	str	r2, [r3, #0]
    pDest++;
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	3301      	adds	r3, #1
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	3301      	adds	r3, #1
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	3301      	adds	r3, #1
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	3301      	adds	r3, #1
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	3301      	adds	r3, #1
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	429a      	cmp	r2, r3
 800932c:	d3e6      	bcc.n	80092fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800932e:	8bfb      	ldrh	r3, [r7, #30]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01e      	beq.n	8009372 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933e:	461a      	mov	r2, r3
 8009340:	f107 0310 	add.w	r3, r7, #16
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	b2db      	uxtb	r3, r3
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	fa22 f303 	lsr.w	r3, r2, r3
 8009354:	b2da      	uxtb	r2, r3
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	701a      	strb	r2, [r3, #0]
      i++;
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	3301      	adds	r3, #1
 800935e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	3301      	adds	r3, #1
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009366:	8bfb      	ldrh	r3, [r7, #30]
 8009368:	3b01      	subs	r3, #1
 800936a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800936c:	8bfb      	ldrh	r3, [r7, #30]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1ea      	bne.n	8009348 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009374:	4618      	mov	r0, r3
 8009376:	372c      	adds	r7, #44	; 0x2c
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d12c      	bne.n	80093f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	db12      	blt.n	80093d4 <USB_EPSetStall+0x54>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	0151      	lsls	r1, r2, #5
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	440a      	add	r2, r1
 80093ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	e02b      	b.n	800944e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	db12      	blt.n	800942e <USB_EPSetStall+0xae>
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00f      	beq.n	800942e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	440a      	add	r2, r1
 8009424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800942c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800944c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	785b      	ldrb	r3, [r3, #1]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d128      	bne.n	80094ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	0151      	lsls	r1, r2, #5
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	440a      	add	r2, r1
 800948e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009496:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	791b      	ldrb	r3, [r3, #4]
 800949c:	2b03      	cmp	r3, #3
 800949e:	d003      	beq.n	80094a8 <USB_EPClearStall+0x4c>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	791b      	ldrb	r3, [r3, #4]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d138      	bne.n	800951a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	0151      	lsls	r1, r2, #5
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	440a      	add	r2, r1
 80094be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	e027      	b.n	800951a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	0151      	lsls	r1, r2, #5
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	440a      	add	r2, r1
 80094e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	791b      	ldrb	r3, [r3, #4]
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d003      	beq.n	80094fa <USB_EPClearStall+0x9e>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	791b      	ldrb	r3, [r3, #4]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d10f      	bne.n	800951a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	0151      	lsls	r1, r2, #5
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	440a      	add	r2, r1
 8009510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009518:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009546:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800954a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	011b      	lsls	r3, r3, #4
 8009558:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800955c:	68f9      	ldr	r1, [r7, #12]
 800955e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009562:	4313      	orrs	r3, r2
 8009564:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800958e:	f023 0303 	bic.w	r3, r3, #3
 8009592:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a2:	f023 0302 	bic.w	r3, r3, #2
 80095a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e4:	f043 0302 	orr.w	r3, r3, #2
 80095e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4013      	ands	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009610:	68fb      	ldr	r3, [r7, #12]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	4013      	ands	r3, r2
 8009640:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	0c1b      	lsrs	r3, r3, #16
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009652:	b480      	push	{r7}
 8009654:	b085      	sub	sp, #20
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	4013      	ands	r3, r2
 8009674:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	b29b      	uxth	r3, r3
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	4013      	ands	r3, r2
 80096b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096b4:	68bb      	ldr	r3, [r7, #8]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b087      	sub	sp, #28
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	fa22 f303 	lsr.w	r3, r2, r3
 80096f2:	01db      	lsls	r3, r3, #7
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4013      	ands	r3, r2
 800970e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009710:	68bb      	ldr	r3, [r7, #8]
}
 8009712:	4618      	mov	r0, r3
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 0301 	and.w	r3, r3, #1
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009754:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800976c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	333c      	adds	r3, #60	; 0x3c
 8009792:	3304      	adds	r3, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4a1c      	ldr	r2, [pc, #112]	; (800980c <USB_EP0_OutStart+0x8c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d90a      	bls.n	80097b6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b0:	d101      	bne.n	80097b6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e024      	b.n	8009800 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	461a      	mov	r2, r3
 80097be:	2300      	movs	r3, #0
 80097c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e4:	f043 0318 	orr.w	r3, r3, #24
 80097e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80097fc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	4f54300a 	.word	0x4f54300a

08009810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3301      	adds	r3, #1
 8009820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4a13      	ldr	r2, [pc, #76]	; (8009874 <USB_CoreReset+0x64>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d901      	bls.n	800982e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e01b      	b.n	8009866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	daf2      	bge.n	800981c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f043 0201 	orr.w	r2, r3, #1
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4a09      	ldr	r2, [pc, #36]	; (8009874 <USB_CoreReset+0x64>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d901      	bls.n	8009858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e006      	b.n	8009866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b01      	cmp	r3, #1
 8009862:	d0f0      	beq.n	8009846 <USB_CoreReset+0x36>

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	00030d40 	.word	0x00030d40

08009878 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009884:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009888:	f002 fe3c 	bl	800c504 <USBD_static_malloc>
 800988c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32b0      	adds	r2, #176	; 0xb0
 800989e:	2100      	movs	r1, #0
 80098a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80098a4:	2302      	movs	r3, #2
 80098a6:	e0d4      	b.n	8009a52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80098a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80098ac:	2100      	movs	r1, #0
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f003 fb8e 	bl	800cfd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	32b0      	adds	r2, #176	; 0xb0
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	32b0      	adds	r2, #176	; 0xb0
 80098ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7c1b      	ldrb	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d138      	bne.n	8009952 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098e0:	4b5e      	ldr	r3, [pc, #376]	; (8009a5c <USBD_CDC_Init+0x1e4>)
 80098e2:	7819      	ldrb	r1, [r3, #0]
 80098e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098e8:	2202      	movs	r2, #2
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f002 fbf6 	bl	800c0dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098f0:	4b5a      	ldr	r3, [pc, #360]	; (8009a5c <USBD_CDC_Init+0x1e4>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	3324      	adds	r3, #36	; 0x24
 8009906:	2201      	movs	r2, #1
 8009908:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800990a:	4b55      	ldr	r3, [pc, #340]	; (8009a60 <USBD_CDC_Init+0x1e8>)
 800990c:	7819      	ldrb	r1, [r3, #0]
 800990e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009912:	2202      	movs	r2, #2
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f002 fbe1 	bl	800c0dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800991a:	4b51      	ldr	r3, [pc, #324]	; (8009a60 <USBD_CDC_Init+0x1e8>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f003 020f 	and.w	r2, r3, #15
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009932:	2201      	movs	r2, #1
 8009934:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009936:	4b4b      	ldr	r3, [pc, #300]	; (8009a64 <USBD_CDC_Init+0x1ec>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	440b      	add	r3, r1
 800994a:	3326      	adds	r3, #38	; 0x26
 800994c:	2210      	movs	r2, #16
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	e035      	b.n	80099be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009952:	4b42      	ldr	r3, [pc, #264]	; (8009a5c <USBD_CDC_Init+0x1e4>)
 8009954:	7819      	ldrb	r1, [r3, #0]
 8009956:	2340      	movs	r3, #64	; 0x40
 8009958:	2202      	movs	r2, #2
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f002 fbbe 	bl	800c0dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009960:	4b3e      	ldr	r3, [pc, #248]	; (8009a5c <USBD_CDC_Init+0x1e4>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	f003 020f 	and.w	r2, r3, #15
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	3324      	adds	r3, #36	; 0x24
 8009976:	2201      	movs	r2, #1
 8009978:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800997a:	4b39      	ldr	r3, [pc, #228]	; (8009a60 <USBD_CDC_Init+0x1e8>)
 800997c:	7819      	ldrb	r1, [r3, #0]
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	2202      	movs	r2, #2
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f002 fbaa 	bl	800c0dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009988:	4b35      	ldr	r3, [pc, #212]	; (8009a60 <USBD_CDC_Init+0x1e8>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099a0:	2201      	movs	r2, #1
 80099a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099a4:	4b2f      	ldr	r3, [pc, #188]	; (8009a64 <USBD_CDC_Init+0x1ec>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	f003 020f 	and.w	r2, r3, #15
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3326      	adds	r3, #38	; 0x26
 80099ba:	2210      	movs	r2, #16
 80099bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099be:	4b29      	ldr	r3, [pc, #164]	; (8009a64 <USBD_CDC_Init+0x1ec>)
 80099c0:	7819      	ldrb	r1, [r3, #0]
 80099c2:	2308      	movs	r3, #8
 80099c4:	2203      	movs	r2, #3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f002 fb88 	bl	800c0dc <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099cc:	4b25      	ldr	r3, [pc, #148]	; (8009a64 <USBD_CDC_Init+0x1ec>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 020f 	and.w	r2, r3, #15
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	3324      	adds	r3, #36	; 0x24
 80099e2:	2201      	movs	r2, #1
 80099e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	33b0      	adds	r3, #176	; 0xb0
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e018      	b.n	8009a52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7c1b      	ldrb	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a28:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <USBD_CDC_Init+0x1e8>)
 8009a2a:	7819      	ldrb	r1, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f002 fcca 	bl	800c3d0 <USBD_LL_PrepareReceive>
 8009a3c:	e008      	b.n	8009a50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a3e:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <USBD_CDC_Init+0x1e8>)
 8009a40:	7819      	ldrb	r1, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a48:	2340      	movs	r3, #64	; 0x40
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f002 fcc0 	bl	800c3d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000093 	.word	0x20000093
 8009a60:	20000094 	.word	0x20000094
 8009a64:	20000095 	.word	0x20000095

08009a68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a74:	4b3a      	ldr	r3, [pc, #232]	; (8009b60 <USBD_CDC_DeInit+0xf8>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f002 fb6c 	bl	800c158 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a80:	4b37      	ldr	r3, [pc, #220]	; (8009b60 <USBD_CDC_DeInit+0xf8>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	f003 020f 	and.w	r2, r3, #15
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	440b      	add	r3, r1
 8009a94:	3324      	adds	r3, #36	; 0x24
 8009a96:	2200      	movs	r2, #0
 8009a98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a9a:	4b32      	ldr	r3, [pc, #200]	; (8009b64 <USBD_CDC_DeInit+0xfc>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f002 fb59 	bl	800c158 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009aa6:	4b2f      	ldr	r3, [pc, #188]	; (8009b64 <USBD_CDC_DeInit+0xfc>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	f003 020f 	and.w	r2, r3, #15
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009abe:	2200      	movs	r2, #0
 8009ac0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009ac2:	4b29      	ldr	r3, [pc, #164]	; (8009b68 <USBD_CDC_DeInit+0x100>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f002 fb45 	bl	800c158 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ace:	4b26      	ldr	r3, [pc, #152]	; (8009b68 <USBD_CDC_DeInit+0x100>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	f003 020f 	and.w	r2, r3, #15
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3324      	adds	r3, #36	; 0x24
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ae8:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <USBD_CDC_DeInit+0x100>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f003 020f 	and.w	r2, r3, #15
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	440b      	add	r3, r1
 8009afc:	3326      	adds	r3, #38	; 0x26
 8009afe:	2200      	movs	r2, #0
 8009b00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	32b0      	adds	r2, #176	; 0xb0
 8009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01f      	beq.n	8009b54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	33b0      	adds	r3, #176	; 0xb0
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	32b0      	adds	r2, #176	; 0xb0
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f002 fcf2 	bl	800c520 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	32b0      	adds	r2, #176	; 0xb0
 8009b46:	2100      	movs	r1, #0
 8009b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000093 	.word	0x20000093
 8009b64:	20000094 	.word	0x20000094
 8009b68:	20000095 	.word	0x20000095

08009b6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	32b0      	adds	r2, #176	; 0xb0
 8009b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e0bf      	b.n	8009d1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d050      	beq.n	8009c4a <USBD_CDC_Setup+0xde>
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	f040 80af 	bne.w	8009d0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d03a      	beq.n	8009c2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	b25b      	sxtb	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da1b      	bge.n	8009bf8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	33b0      	adds	r3, #176	; 0xb0
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	88d2      	ldrh	r2, [r2, #6]
 8009bdc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	88db      	ldrh	r3, [r3, #6]
 8009be2:	2b07      	cmp	r3, #7
 8009be4:	bf28      	it	cs
 8009be6:	2307      	movcs	r3, #7
 8009be8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	89fa      	ldrh	r2, [r7, #14]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f001 fdb3 	bl	800b75c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bf6:	e090      	b.n	8009d1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	785a      	ldrb	r2, [r3, #1]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	2b3f      	cmp	r3, #63	; 0x3f
 8009c08:	d803      	bhi.n	8009c12 <USBD_CDC_Setup+0xa6>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	88db      	ldrh	r3, [r3, #6]
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	e000      	b.n	8009c14 <USBD_CDC_Setup+0xa8>
 8009c12:	2240      	movs	r2, #64	; 0x40
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c1a:	6939      	ldr	r1, [r7, #16]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009c22:	461a      	mov	r2, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 fdc5 	bl	800b7b4 <USBD_CtlPrepareRx>
      break;
 8009c2a:	e076      	b.n	8009d1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	33b0      	adds	r3, #176	; 0xb0
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	7850      	ldrb	r0, [r2, #1]
 8009c42:	2200      	movs	r2, #0
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	4798      	blx	r3
      break;
 8009c48:	e067      	b.n	8009d1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	2b0b      	cmp	r3, #11
 8009c50:	d851      	bhi.n	8009cf6 <USBD_CDC_Setup+0x18a>
 8009c52:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <USBD_CDC_Setup+0xec>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009c89 	.word	0x08009c89
 8009c5c:	08009d05 	.word	0x08009d05
 8009c60:	08009cf7 	.word	0x08009cf7
 8009c64:	08009cf7 	.word	0x08009cf7
 8009c68:	08009cf7 	.word	0x08009cf7
 8009c6c:	08009cf7 	.word	0x08009cf7
 8009c70:	08009cf7 	.word	0x08009cf7
 8009c74:	08009cf7 	.word	0x08009cf7
 8009c78:	08009cf7 	.word	0x08009cf7
 8009c7c:	08009cf7 	.word	0x08009cf7
 8009c80:	08009cb3 	.word	0x08009cb3
 8009c84:	08009cdd 	.word	0x08009cdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d107      	bne.n	8009ca4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c94:	f107 030a 	add.w	r3, r7, #10
 8009c98:	2202      	movs	r2, #2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 fd5d 	bl	800b75c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ca2:	e032      	b.n	8009d0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 fce7 	bl	800b67a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cac:	2303      	movs	r3, #3
 8009cae:	75fb      	strb	r3, [r7, #23]
          break;
 8009cb0:	e02b      	b.n	8009d0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d107      	bne.n	8009cce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cbe:	f107 030d 	add.w	r3, r7, #13
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 fd48 	bl	800b75c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ccc:	e01d      	b.n	8009d0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 fcd2 	bl	800b67a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009cda:	e016      	b.n	8009d0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d00f      	beq.n	8009d08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 fcc5 	bl	800b67a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cf4:	e008      	b.n	8009d08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 fcbe 	bl	800b67a <USBD_CtlError>
          ret = USBD_FAIL;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	75fb      	strb	r3, [r7, #23]
          break;
 8009d02:	e002      	b.n	8009d0a <USBD_CDC_Setup+0x19e>
          break;
 8009d04:	bf00      	nop
 8009d06:	e008      	b.n	8009d1a <USBD_CDC_Setup+0x1ae>
          break;
 8009d08:	bf00      	nop
      }
      break;
 8009d0a:	e006      	b.n	8009d1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 fcb3 	bl	800b67a <USBD_CtlError>
      ret = USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	75fb      	strb	r3, [r7, #23]
      break;
 8009d18:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32b0      	adds	r2, #176	; 0xb0
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e065      	b.n	8009e1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	32b0      	adds	r2, #176	; 0xb0
 8009d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	f003 020f 	and.w	r2, r3, #15
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	440b      	add	r3, r1
 8009d70:	3318      	adds	r3, #24
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d02f      	beq.n	8009dd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	f003 020f 	and.w	r2, r3, #15
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	3318      	adds	r3, #24
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	78fb      	ldrb	r3, [r7, #3]
 8009d90:	f003 010f 	and.w	r1, r3, #15
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	460b      	mov	r3, r1
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	440b      	add	r3, r1
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4403      	add	r3, r0
 8009da0:	3344      	adds	r3, #68	; 0x44
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d112      	bne.n	8009dd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	f003 020f 	and.w	r2, r3, #15
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3318      	adds	r3, #24
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009dca:	78f9      	ldrb	r1, [r7, #3]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	2200      	movs	r2, #0
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f002 fac5 	bl	800c360 <USBD_LL_Transmit>
 8009dd6:	e01f      	b.n	8009e18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	33b0      	adds	r3, #176	; 0xb0
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d010      	beq.n	8009e18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	33b0      	adds	r3, #176	; 0xb0
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009e14:	78fa      	ldrb	r2, [r7, #3]
 8009e16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	32b0      	adds	r2, #176	; 0xb0
 8009e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	32b0      	adds	r2, #176	; 0xb0
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e01a      	b.n	8009e8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f002 faf1 	bl	800c440 <USBD_LL_GetRxDataSize>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	33b0      	adds	r3, #176	; 0xb0
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e84:	4611      	mov	r1, r2
 8009e86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	32b0      	adds	r2, #176	; 0xb0
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e025      	b.n	8009f00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	33b0      	adds	r3, #176	; 0xb0
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01a      	beq.n	8009efe <USBD_CDC_EP0_RxReady+0x6c>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009ece:	2bff      	cmp	r3, #255	; 0xff
 8009ed0:	d015      	beq.n	8009efe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	33b0      	adds	r3, #176	; 0xb0
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009eea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ef2:	b292      	uxth	r2, r2
 8009ef4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	22ff      	movs	r2, #255	; 0xff
 8009efa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f10:	2182      	movs	r1, #130	; 0x82
 8009f12:	4818      	ldr	r0, [pc, #96]	; (8009f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f14:	f000 fd4f 	bl	800a9b6 <USBD_GetEpDesc>
 8009f18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	4815      	ldr	r0, [pc, #84]	; (8009f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f1e:	f000 fd4a 	bl	800a9b6 <USBD_GetEpDesc>
 8009f22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f24:	2181      	movs	r1, #129	; 0x81
 8009f26:	4813      	ldr	r0, [pc, #76]	; (8009f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f28:	f000 fd45 	bl	800a9b6 <USBD_GetEpDesc>
 8009f2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2210      	movs	r2, #16
 8009f38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f48:	711a      	strb	r2, [r3, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d006      	beq.n	8009f62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f5c:	711a      	strb	r2, [r3, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2243      	movs	r2, #67	; 0x43
 8009f66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f68:	4b02      	ldr	r3, [pc, #8]	; (8009f74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000050 	.word	0x20000050

08009f78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f80:	2182      	movs	r1, #130	; 0x82
 8009f82:	4818      	ldr	r0, [pc, #96]	; (8009fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f84:	f000 fd17 	bl	800a9b6 <USBD_GetEpDesc>
 8009f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	4815      	ldr	r0, [pc, #84]	; (8009fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f8e:	f000 fd12 	bl	800a9b6 <USBD_GetEpDesc>
 8009f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f94:	2181      	movs	r1, #129	; 0x81
 8009f96:	4813      	ldr	r0, [pc, #76]	; (8009fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f98:	f000 fd0d 	bl	800a9b6 <USBD_GetEpDesc>
 8009f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2210      	movs	r2, #16
 8009fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d006      	beq.n	8009fbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	711a      	strb	r2, [r3, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f042 0202 	orr.w	r2, r2, #2
 8009fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d006      	beq.n	8009fd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	711a      	strb	r2, [r3, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f042 0202 	orr.w	r2, r2, #2
 8009fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2243      	movs	r2, #67	; 0x43
 8009fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fd8:	4b02      	ldr	r3, [pc, #8]	; (8009fe4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000050 	.word	0x20000050

08009fe8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ff0:	2182      	movs	r1, #130	; 0x82
 8009ff2:	4818      	ldr	r0, [pc, #96]	; (800a054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ff4:	f000 fcdf 	bl	800a9b6 <USBD_GetEpDesc>
 8009ff8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4815      	ldr	r0, [pc, #84]	; (800a054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ffe:	f000 fcda 	bl	800a9b6 <USBD_GetEpDesc>
 800a002:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a004:	2181      	movs	r1, #129	; 0x81
 800a006:	4813      	ldr	r0, [pc, #76]	; (800a054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a008:	f000 fcd5 	bl	800a9b6 <USBD_GetEpDesc>
 800a00c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2210      	movs	r2, #16
 800a018:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2200      	movs	r2, #0
 800a024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a028:	711a      	strb	r2, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d006      	beq.n	800a042 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a03c:	711a      	strb	r2, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2243      	movs	r2, #67	; 0x43
 800a046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a048:	4b02      	ldr	r3, [pc, #8]	; (800a054 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000050 	.word	0x20000050

0800a058 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	220a      	movs	r2, #10
 800a064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a066:	4b03      	ldr	r3, [pc, #12]	; (800a074 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	2000000c 	.word	0x2000000c

0800a078 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a088:	2303      	movs	r3, #3
 800a08a:	e009      	b.n	800a0a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	33b0      	adds	r3, #176	; 0xb0
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	32b0      	adds	r2, #176	; 0xb0
 800a0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e008      	b.n	800a0e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32b0      	adds	r2, #176	; 0xb0
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a110:	2303      	movs	r3, #3
 800a112:	e004      	b.n	800a11e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
	...

0800a12c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32b0      	adds	r2, #176	; 0xb0
 800a13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a142:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a144:	2301      	movs	r3, #1
 800a146:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	e025      	b.n	800a19e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d11f      	bne.n	800a19c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2201      	movs	r2, #1
 800a160:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a164:	4b10      	ldr	r3, [pc, #64]	; (800a1a8 <USBD_CDC_TransmitPacket+0x7c>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f003 020f 	and.w	r2, r3, #15
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4613      	mov	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4403      	add	r3, r0
 800a17e:	3318      	adds	r3, #24
 800a180:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <USBD_CDC_TransmitPacket+0x7c>)
 800a184:	7819      	ldrb	r1, [r3, #0]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f002 f8e4 	bl	800c360 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000093 	.word	0x20000093

0800a1ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	32b0      	adds	r2, #176	; 0xb0
 800a1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	32b0      	adds	r2, #176	; 0xb0
 800a1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e018      	b.n	800a20c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	7c1b      	ldrb	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10a      	bne.n	800a1f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1e2:	4b0c      	ldr	r3, [pc, #48]	; (800a214 <USBD_CDC_ReceivePacket+0x68>)
 800a1e4:	7819      	ldrb	r1, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f002 f8ed 	bl	800c3d0 <USBD_LL_PrepareReceive>
 800a1f6:	e008      	b.n	800a20a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <USBD_CDC_ReceivePacket+0x68>)
 800a1fa:	7819      	ldrb	r1, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a202:	2340      	movs	r3, #64	; 0x40
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f002 f8e3 	bl	800c3d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20000094 	.word	0x20000094

0800a218 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e01f      	b.n	800a270 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	79fa      	ldrb	r2, [r7, #7]
 800a262:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f001 febb 	bl	800bfe0 <USBD_LL_Init>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e025      	b.n	800a2dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	32ae      	adds	r2, #174	; 0xae
 800a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00f      	beq.n	800a2cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	32ae      	adds	r2, #174	; 0xae
 800a2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	f107 020e 	add.w	r2, r7, #14
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 fec3 	bl	800c078 <USBD_LL_Start>
 800a2f2:	4603      	mov	r3, r0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a304:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a306:	4618      	mov	r0, r3
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d009      	beq.n	800a340 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	78fa      	ldrb	r2, [r7, #3]
 800a336:	4611      	mov	r1, r2
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	4798      	blx	r3
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	78fa      	ldrb	r2, [r7, #3]
 800a364:	4611      	mov	r1, r2
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	4798      	blx	r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a370:	2303      	movs	r3, #3
 800a372:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f001 f938 	bl	800b606 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3b2:	f003 031f 	and.w	r3, r3, #31
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d01a      	beq.n	800a3f0 <USBD_LL_SetupStage+0x72>
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d822      	bhi.n	800a404 <USBD_LL_SetupStage+0x86>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <USBD_LL_SetupStage+0x4a>
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d00a      	beq.n	800a3dc <USBD_LL_SetupStage+0x5e>
 800a3c6:	e01d      	b.n	800a404 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fb65 	bl	800aaa0 <USBD_StdDevReq>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3da:	e020      	b.n	800a41e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fbcd 	bl	800ab84 <USBD_StdItfReq>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ee:	e016      	b.n	800a41e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fc2f 	bl	800ac5c <USBD_StdEPReq>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]
      break;
 800a402:	e00c      	b.n	800a41e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a40a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	4619      	mov	r1, r3
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fed6 	bl	800c1c4 <USBD_LL_StallEP>
 800a418:	4603      	mov	r3, r0
 800a41a:	73fb      	strb	r3, [r7, #15]
      break;
 800a41c:	bf00      	nop
  }

  return ret;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	460b      	mov	r3, r1
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a43a:	7afb      	ldrb	r3, [r7, #11]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d16e      	bne.n	800a51e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a446:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a44e:	2b03      	cmp	r3, #3
 800a450:	f040 8098 	bne.w	800a584 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d913      	bls.n	800a488 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	1ad2      	subs	r2, r2, r3
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	4293      	cmp	r3, r2
 800a478:	bf28      	it	cs
 800a47a:	4613      	movcs	r3, r2
 800a47c:	461a      	mov	r2, r3
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f001 f9b4 	bl	800b7ee <USBD_CtlContinueRx>
 800a486:	e07d      	b.n	800a584 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	2b02      	cmp	r3, #2
 800a494:	d014      	beq.n	800a4c0 <USBD_LL_DataOutStage+0x98>
 800a496:	2b02      	cmp	r3, #2
 800a498:	d81d      	bhi.n	800a4d6 <USBD_LL_DataOutStage+0xae>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <USBD_LL_DataOutStage+0x7c>
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d003      	beq.n	800a4aa <USBD_LL_DataOutStage+0x82>
 800a4a2:	e018      	b.n	800a4d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	75bb      	strb	r3, [r7, #22]
            break;
 800a4a8:	e018      	b.n	800a4dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fa64 	bl	800a982 <USBD_CoreFindIF>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75bb      	strb	r3, [r7, #22]
            break;
 800a4be:	e00d      	b.n	800a4dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fa66 	bl	800a99c <USBD_CoreFindEP>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a4d4:	e002      	b.n	800a4dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	75bb      	strb	r3, [r7, #22]
            break;
 800a4da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a4dc:	7dbb      	ldrb	r3, [r7, #22]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d119      	bne.n	800a516 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d113      	bne.n	800a516 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a4ee:	7dba      	ldrb	r2, [r7, #22]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	32ae      	adds	r2, #174	; 0xae
 800a4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00b      	beq.n	800a516 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a4fe:	7dba      	ldrb	r2, [r7, #22]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a506:	7dba      	ldrb	r2, [r7, #22]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	32ae      	adds	r2, #174	; 0xae
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f001 f97a 	bl	800b810 <USBD_CtlSendStatus>
 800a51c:	e032      	b.n	800a584 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a524:	b2db      	uxtb	r3, r3
 800a526:	4619      	mov	r1, r3
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 fa37 	bl	800a99c <USBD_CoreFindEP>
 800a52e:	4603      	mov	r3, r0
 800a530:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a532:	7dbb      	ldrb	r3, [r7, #22]
 800a534:	2bff      	cmp	r3, #255	; 0xff
 800a536:	d025      	beq.n	800a584 <USBD_LL_DataOutStage+0x15c>
 800a538:	7dbb      	ldrb	r3, [r7, #22]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d122      	bne.n	800a584 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b03      	cmp	r3, #3
 800a548:	d117      	bne.n	800a57a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a54a:	7dba      	ldrb	r2, [r7, #22]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	32ae      	adds	r2, #174	; 0xae
 800a550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00f      	beq.n	800a57a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a55a:	7dba      	ldrb	r2, [r7, #22]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a562:	7dba      	ldrb	r2, [r7, #22]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	32ae      	adds	r2, #174	; 0xae
 800a568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	7afa      	ldrb	r2, [r7, #11]
 800a570:	4611      	mov	r1, r2
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	4798      	blx	r3
 800a576:	4603      	mov	r3, r0
 800a578:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	e000      	b.n	800a586 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	460b      	mov	r3, r1
 800a598:	607a      	str	r2, [r7, #4]
 800a59a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d16f      	bne.n	800a682 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d15a      	bne.n	800a668 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d914      	bls.n	800a5e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f001 f8dc 	bl	800b792 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2100      	movs	r1, #0
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f001 fef5 	bl	800c3d0 <USBD_LL_PrepareReceive>
 800a5e6:	e03f      	b.n	800a668 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d11c      	bne.n	800a62e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d316      	bcc.n	800a62e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d20f      	bcs.n	800a62e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f001 f8bd 	bl	800b792 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a620:	2300      	movs	r3, #0
 800a622:	2200      	movs	r2, #0
 800a624:	2100      	movs	r1, #0
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f001 fed2 	bl	800c3d0 <USBD_LL_PrepareReceive>
 800a62c:	e01c      	b.n	800a668 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b03      	cmp	r3, #3
 800a638:	d10f      	bne.n	800a65a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d009      	beq.n	800a65a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a65a:	2180      	movs	r1, #128	; 0x80
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f001 fdb1 	bl	800c1c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f001 f8e7 	bl	800b836 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d03a      	beq.n	800a6e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff fe42 	bl	800a2fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a680:	e032      	b.n	800a6e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	4619      	mov	r1, r3
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 f985 	bl	800a99c <USBD_CoreFindEP>
 800a692:	4603      	mov	r3, r0
 800a694:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	2bff      	cmp	r3, #255	; 0xff
 800a69a:	d025      	beq.n	800a6e8 <USBD_LL_DataInStage+0x15a>
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d122      	bne.n	800a6e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d11c      	bne.n	800a6e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a6ae:	7dfa      	ldrb	r2, [r7, #23]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	32ae      	adds	r2, #174	; 0xae
 800a6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d014      	beq.n	800a6e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6be:	7dfa      	ldrb	r2, [r7, #23]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6c6:	7dfa      	ldrb	r2, [r7, #23]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	32ae      	adds	r2, #174	; 0xae
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	7afa      	ldrb	r2, [r7, #11]
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	4798      	blx	r3
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a6de:	7dbb      	ldrb	r3, [r7, #22]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6e4:	7dbb      	ldrb	r3, [r7, #22]
 800a6e6:	e000      	b.n	800a6ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d014      	beq.n	800a758 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00e      	beq.n	800a758 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6852      	ldr	r2, [r2, #4]
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	4611      	mov	r1, r2
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a754:	2303      	movs	r3, #3
 800a756:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a758:	2340      	movs	r3, #64	; 0x40
 800a75a:	2200      	movs	r2, #0
 800a75c:	2100      	movs	r1, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f001 fcbc 	bl	800c0dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2240      	movs	r2, #64	; 0x40
 800a770:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a774:	2340      	movs	r3, #64	; 0x40
 800a776:	2200      	movs	r2, #0
 800a778:	2180      	movs	r1, #128	; 0x80
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 fcae 	bl	800c0dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2240      	movs	r2, #64	; 0x40
 800a78a:	621a      	str	r2, [r3, #32]

  return ret;
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	460b      	mov	r3, r1
 800a7a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d006      	beq.n	800a7d8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2204      	movs	r2, #4
 800a7dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d106      	bne.n	800a810 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d110      	bne.n	800a854 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00b      	beq.n	800a854 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	32ae      	adds	r2, #174	; 0xae
 800a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e01c      	b.n	800a8ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d115      	bne.n	800a8b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	32ae      	adds	r2, #174	; 0xae
 800a896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	32ae      	adds	r2, #174	; 0xae
 800a8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	32ae      	adds	r2, #174	; 0xae
 800a8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e01c      	b.n	800a91e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d115      	bne.n	800a91c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32ae      	adds	r2, #174	; 0xae
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32ae      	adds	r2, #174	; 0xae
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	4611      	mov	r1, r2
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	6852      	ldr	r2, [r2, #4]
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	4611      	mov	r1, r2
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	4798      	blx	r3
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a974:	2303      	movs	r3, #3
 800a976:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a98e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b086      	sub	sp, #24
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	460b      	mov	r3, r1
 800a9c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	885b      	ldrh	r3, [r3, #2]
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d920      	bls.n	800aa20 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9e6:	e013      	b.n	800aa10 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a9e8:	f107 030a 	add.w	r3, r7, #10
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6978      	ldr	r0, [r7, #20]
 800a9f0:	f000 f81b 	bl	800aa2a <USBD_GetNextDesc>
 800a9f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	785b      	ldrb	r3, [r3, #1]
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d108      	bne.n	800aa10 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	789b      	ldrb	r3, [r3, #2]
 800aa06:	78fa      	ldrb	r2, [r7, #3]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d008      	beq.n	800aa1e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	885b      	ldrh	r3, [r3, #2]
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	897b      	ldrh	r3, [r7, #10]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d8e5      	bhi.n	800a9e8 <USBD_GetEpDesc+0x32>
 800aa1c:	e000      	b.n	800aa20 <USBD_GetEpDesc+0x6a>
          break;
 800aa1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa20:	693b      	ldr	r3, [r7, #16]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	881a      	ldrh	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4413      	add	r3, r2
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4413      	add	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa56:	68fb      	ldr	r3, [r7, #12]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa82:	8a3b      	ldrh	r3, [r7, #16]
 800aa84:	021b      	lsls	r3, r3, #8
 800aa86:	b21a      	sxth	r2, r3
 800aa88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	b21b      	sxth	r3, r3
 800aa90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa92:	89fb      	ldrh	r3, [r7, #14]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	371c      	adds	r7, #28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d005      	beq.n	800aac6 <USBD_StdDevReq+0x26>
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	d857      	bhi.n	800ab6e <USBD_StdDevReq+0xce>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00f      	beq.n	800aae2 <USBD_StdDevReq+0x42>
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d153      	bne.n	800ab6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	32ae      	adds	r2, #174	; 0xae
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4798      	blx	r3
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]
      break;
 800aae0:	e04a      	b.n	800ab78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	2b09      	cmp	r3, #9
 800aae8:	d83b      	bhi.n	800ab62 <USBD_StdDevReq+0xc2>
 800aaea:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <USBD_StdDevReq+0x50>)
 800aaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf0:	0800ab45 	.word	0x0800ab45
 800aaf4:	0800ab59 	.word	0x0800ab59
 800aaf8:	0800ab63 	.word	0x0800ab63
 800aafc:	0800ab4f 	.word	0x0800ab4f
 800ab00:	0800ab63 	.word	0x0800ab63
 800ab04:	0800ab23 	.word	0x0800ab23
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab63 	.word	0x0800ab63
 800ab10:	0800ab3b 	.word	0x0800ab3b
 800ab14:	0800ab2d 	.word	0x0800ab2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fa3c 	bl	800af98 <USBD_GetDescriptor>
          break;
 800ab20:	e024      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fbcb 	bl	800b2c0 <USBD_SetAddress>
          break;
 800ab2a:	e01f      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fc0a 	bl	800b348 <USBD_SetConfig>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
          break;
 800ab38:	e018      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fcad 	bl	800b49c <USBD_GetConfig>
          break;
 800ab42:	e013      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fcde 	bl	800b508 <USBD_GetStatus>
          break;
 800ab4c:	e00e      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fd0d 	bl	800b570 <USBD_SetFeature>
          break;
 800ab56:	e009      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fd31 	bl	800b5c2 <USBD_ClrFeature>
          break;
 800ab60:	e004      	b.n	800ab6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fd88 	bl	800b67a <USBD_CtlError>
          break;
 800ab6a:	bf00      	nop
      }
      break;
 800ab6c:	e004      	b.n	800ab78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fd82 	bl	800b67a <USBD_CtlError>
      break;
 800ab76:	bf00      	nop
  }

  return ret;
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop

0800ab84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab9a:	2b40      	cmp	r3, #64	; 0x40
 800ab9c:	d005      	beq.n	800abaa <USBD_StdItfReq+0x26>
 800ab9e:	2b40      	cmp	r3, #64	; 0x40
 800aba0:	d852      	bhi.n	800ac48 <USBD_StdItfReq+0xc4>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <USBD_StdItfReq+0x26>
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	d14e      	bne.n	800ac48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	3b01      	subs	r3, #1
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d840      	bhi.n	800ac3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	889b      	ldrh	r3, [r3, #4]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d836      	bhi.n	800ac30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	889b      	ldrh	r3, [r3, #4]
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff fed9 	bl	800a982 <USBD_CoreFindIF>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	2bff      	cmp	r3, #255	; 0xff
 800abd8:	d01d      	beq.n	800ac16 <USBD_StdItfReq+0x92>
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11a      	bne.n	800ac16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800abe0:	7bba      	ldrb	r2, [r7, #14]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	32ae      	adds	r2, #174	; 0xae
 800abe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00f      	beq.n	800ac10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800abf0:	7bba      	ldrb	r2, [r7, #14]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abf8:	7bba      	ldrb	r2, [r7, #14]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	32ae      	adds	r2, #174	; 0xae
 800abfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	4798      	blx	r3
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac0e:	e004      	b.n	800ac1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac14:	e001      	b.n	800ac1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac16:	2303      	movs	r3, #3
 800ac18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	88db      	ldrh	r3, [r3, #6]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d110      	bne.n	800ac44 <USBD_StdItfReq+0xc0>
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10d      	bne.n	800ac44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fdf1 	bl	800b810 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac2e:	e009      	b.n	800ac44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fd21 	bl	800b67a <USBD_CtlError>
          break;
 800ac38:	e004      	b.n	800ac44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fd1c 	bl	800b67a <USBD_CtlError>
          break;
 800ac42:	e000      	b.n	800ac46 <USBD_StdItfReq+0xc2>
          break;
 800ac44:	bf00      	nop
      }
      break;
 800ac46:	e004      	b.n	800ac52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fd15 	bl	800b67a <USBD_CtlError>
      break;
 800ac50:	bf00      	nop
  }

  return ret;
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	889b      	ldrh	r3, [r3, #4]
 800ac6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac78:	2b40      	cmp	r3, #64	; 0x40
 800ac7a:	d007      	beq.n	800ac8c <USBD_StdEPReq+0x30>
 800ac7c:	2b40      	cmp	r3, #64	; 0x40
 800ac7e:	f200 817f 	bhi.w	800af80 <USBD_StdEPReq+0x324>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d02a      	beq.n	800acdc <USBD_StdEPReq+0x80>
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	f040 817a 	bne.w	800af80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fe83 	bl	800a99c <USBD_CoreFindEP>
 800ac96:	4603      	mov	r3, r0
 800ac98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac9a:	7b7b      	ldrb	r3, [r7, #13]
 800ac9c:	2bff      	cmp	r3, #255	; 0xff
 800ac9e:	f000 8174 	beq.w	800af8a <USBD_StdEPReq+0x32e>
 800aca2:	7b7b      	ldrb	r3, [r7, #13]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f040 8170 	bne.w	800af8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800acaa:	7b7a      	ldrb	r2, [r7, #13]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800acb2:	7b7a      	ldrb	r2, [r7, #13]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	32ae      	adds	r2, #174	; 0xae
 800acb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 8163 	beq.w	800af8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acc4:	7b7a      	ldrb	r2, [r7, #13]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	32ae      	adds	r2, #174	; 0xae
 800acca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800acda:	e156      	b.n	800af8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d008      	beq.n	800acf6 <USBD_StdEPReq+0x9a>
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	f300 8145 	bgt.w	800af74 <USBD_StdEPReq+0x318>
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 809b 	beq.w	800ae26 <USBD_StdEPReq+0x1ca>
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d03c      	beq.n	800ad6e <USBD_StdEPReq+0x112>
 800acf4:	e13e      	b.n	800af74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d002      	beq.n	800ad08 <USBD_StdEPReq+0xac>
 800ad02:	2b03      	cmp	r3, #3
 800ad04:	d016      	beq.n	800ad34 <USBD_StdEPReq+0xd8>
 800ad06:	e02c      	b.n	800ad62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00d      	beq.n	800ad2a <USBD_StdEPReq+0xce>
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	2b80      	cmp	r3, #128	; 0x80
 800ad12:	d00a      	beq.n	800ad2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f001 fa53 	bl	800c1c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad1e:	2180      	movs	r1, #128	; 0x80
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f001 fa4f 	bl	800c1c4 <USBD_LL_StallEP>
 800ad26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad28:	e020      	b.n	800ad6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fca4 	bl	800b67a <USBD_CtlError>
              break;
 800ad32:	e01b      	b.n	800ad6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	885b      	ldrh	r3, [r3, #2]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10e      	bne.n	800ad5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00b      	beq.n	800ad5a <USBD_StdEPReq+0xfe>
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
 800ad44:	2b80      	cmp	r3, #128	; 0x80
 800ad46:	d008      	beq.n	800ad5a <USBD_StdEPReq+0xfe>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	88db      	ldrh	r3, [r3, #6]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f001 fa35 	bl	800c1c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fd58 	bl	800b810 <USBD_CtlSendStatus>

              break;
 800ad60:	e004      	b.n	800ad6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fc88 	bl	800b67a <USBD_CtlError>
              break;
 800ad6a:	bf00      	nop
          }
          break;
 800ad6c:	e107      	b.n	800af7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d002      	beq.n	800ad80 <USBD_StdEPReq+0x124>
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d016      	beq.n	800adac <USBD_StdEPReq+0x150>
 800ad7e:	e04b      	b.n	800ae18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00d      	beq.n	800ada2 <USBD_StdEPReq+0x146>
 800ad86:	7bbb      	ldrb	r3, [r7, #14]
 800ad88:	2b80      	cmp	r3, #128	; 0x80
 800ad8a:	d00a      	beq.n	800ada2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 fa17 	bl	800c1c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad96:	2180      	movs	r1, #128	; 0x80
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f001 fa13 	bl	800c1c4 <USBD_LL_StallEP>
 800ad9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ada0:	e040      	b.n	800ae24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fc68 	bl	800b67a <USBD_CtlError>
              break;
 800adaa:	e03b      	b.n	800ae24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	885b      	ldrh	r3, [r3, #2]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d136      	bne.n	800ae22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 fa34 	bl	800c230 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fd21 	bl	800b810 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800adce:	7bbb      	ldrb	r3, [r7, #14]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff fde2 	bl	800a99c <USBD_CoreFindEP>
 800add8:	4603      	mov	r3, r0
 800adda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800addc:	7b7b      	ldrb	r3, [r7, #13]
 800adde:	2bff      	cmp	r3, #255	; 0xff
 800ade0:	d01f      	beq.n	800ae22 <USBD_StdEPReq+0x1c6>
 800ade2:	7b7b      	ldrb	r3, [r7, #13]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d11c      	bne.n	800ae22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ade8:	7b7a      	ldrb	r2, [r7, #13]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800adf0:	7b7a      	ldrb	r2, [r7, #13]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	32ae      	adds	r2, #174	; 0xae
 800adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d010      	beq.n	800ae22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae00:	7b7a      	ldrb	r2, [r7, #13]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	32ae      	adds	r2, #174	; 0xae
 800ae06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae16:	e004      	b.n	800ae22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fc2d 	bl	800b67a <USBD_CtlError>
              break;
 800ae20:	e000      	b.n	800ae24 <USBD_StdEPReq+0x1c8>
              break;
 800ae22:	bf00      	nop
          }
          break;
 800ae24:	e0ab      	b.n	800af7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d002      	beq.n	800ae38 <USBD_StdEPReq+0x1dc>
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d032      	beq.n	800ae9c <USBD_StdEPReq+0x240>
 800ae36:	e097      	b.n	800af68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d007      	beq.n	800ae4e <USBD_StdEPReq+0x1f2>
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	2b80      	cmp	r3, #128	; 0x80
 800ae42:	d004      	beq.n	800ae4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fc17 	bl	800b67a <USBD_CtlError>
                break;
 800ae4c:	e091      	b.n	800af72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da0b      	bge.n	800ae6e <USBD_StdEPReq+0x212>
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	3310      	adds	r3, #16
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	4413      	add	r3, r2
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	e00b      	b.n	800ae86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	4413      	add	r3, r2
 800ae84:	3304      	adds	r3, #4
 800ae86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2202      	movs	r2, #2
 800ae92:	4619      	mov	r1, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fc61 	bl	800b75c <USBD_CtlSendData>
              break;
 800ae9a:	e06a      	b.n	800af72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	da11      	bge.n	800aec8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	f003 020f 	and.w	r2, r3, #15
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	440b      	add	r3, r1
 800aeb6:	3324      	adds	r3, #36	; 0x24
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d117      	bne.n	800aeee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fbda 	bl	800b67a <USBD_CtlError>
                  break;
 800aec6:	e054      	b.n	800af72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	f003 020f 	and.w	r2, r3, #15
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	440b      	add	r3, r1
 800aeda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d104      	bne.n	800aeee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fbc7 	bl	800b67a <USBD_CtlError>
                  break;
 800aeec:	e041      	b.n	800af72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	da0b      	bge.n	800af0e <USBD_StdEPReq+0x2b2>
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	3310      	adds	r3, #16
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	4413      	add	r3, r2
 800af0a:	3304      	adds	r3, #4
 800af0c:	e00b      	b.n	800af26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	4413      	add	r3, r2
 800af24:	3304      	adds	r3, #4
 800af26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <USBD_StdEPReq+0x2d8>
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b80      	cmp	r3, #128	; 0x80
 800af32:	d103      	bne.n	800af3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	e00e      	b.n	800af5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f001 f9ab 	bl	800c29c <USBD_LL_IsStallEP>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e002      	b.n	800af5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2202      	movs	r2, #2
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fbfb 	bl	800b75c <USBD_CtlSendData>
              break;
 800af66:	e004      	b.n	800af72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fb85 	bl	800b67a <USBD_CtlError>
              break;
 800af70:	bf00      	nop
          }
          break;
 800af72:	e004      	b.n	800af7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fb7f 	bl	800b67a <USBD_CtlError>
          break;
 800af7c:	bf00      	nop
      }
      break;
 800af7e:	e005      	b.n	800af8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fb79 	bl	800b67a <USBD_CtlError>
      break;
 800af88:	e000      	b.n	800af8c <USBD_StdEPReq+0x330>
      break;
 800af8a:	bf00      	nop
  }

  return ret;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	0a1b      	lsrs	r3, r3, #8
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	3b01      	subs	r3, #1
 800afb8:	2b0e      	cmp	r3, #14
 800afba:	f200 8152 	bhi.w	800b262 <USBD_GetDescriptor+0x2ca>
 800afbe:	a201      	add	r2, pc, #4	; (adr r2, 800afc4 <USBD_GetDescriptor+0x2c>)
 800afc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc4:	0800b035 	.word	0x0800b035
 800afc8:	0800b04d 	.word	0x0800b04d
 800afcc:	0800b08d 	.word	0x0800b08d
 800afd0:	0800b263 	.word	0x0800b263
 800afd4:	0800b263 	.word	0x0800b263
 800afd8:	0800b203 	.word	0x0800b203
 800afdc:	0800b22f 	.word	0x0800b22f
 800afe0:	0800b263 	.word	0x0800b263
 800afe4:	0800b263 	.word	0x0800b263
 800afe8:	0800b263 	.word	0x0800b263
 800afec:	0800b263 	.word	0x0800b263
 800aff0:	0800b263 	.word	0x0800b263
 800aff4:	0800b263 	.word	0x0800b263
 800aff8:	0800b263 	.word	0x0800b263
 800affc:	0800b001 	.word	0x0800b001
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	7c12      	ldrb	r2, [r2, #16]
 800b018:	f107 0108 	add.w	r1, r7, #8
 800b01c:	4610      	mov	r0, r2
 800b01e:	4798      	blx	r3
 800b020:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b022:	e126      	b.n	800b272 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb27 	bl	800b67a <USBD_CtlError>
        err++;
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	3301      	adds	r3, #1
 800b030:	72fb      	strb	r3, [r7, #11]
      break;
 800b032:	e11e      	b.n	800b272 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	7c12      	ldrb	r2, [r2, #16]
 800b040:	f107 0108 	add.w	r1, r7, #8
 800b044:	4610      	mov	r0, r2
 800b046:	4798      	blx	r3
 800b048:	60f8      	str	r0, [r7, #12]
      break;
 800b04a:	e112      	b.n	800b272 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	7c1b      	ldrb	r3, [r3, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10d      	bne.n	800b070 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05c:	f107 0208 	add.w	r2, r7, #8
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	3301      	adds	r3, #1
 800b06a:	2202      	movs	r2, #2
 800b06c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b06e:	e100      	b.n	800b272 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	f107 0208 	add.w	r2, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	3301      	adds	r3, #1
 800b086:	2202      	movs	r2, #2
 800b088:	701a      	strb	r2, [r3, #0]
      break;
 800b08a:	e0f2      	b.n	800b272 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	885b      	ldrh	r3, [r3, #2]
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b05      	cmp	r3, #5
 800b094:	f200 80ac 	bhi.w	800b1f0 <USBD_GetDescriptor+0x258>
 800b098:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <USBD_GetDescriptor+0x108>)
 800b09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09e:	bf00      	nop
 800b0a0:	0800b0b9 	.word	0x0800b0b9
 800b0a4:	0800b0ed 	.word	0x0800b0ed
 800b0a8:	0800b121 	.word	0x0800b121
 800b0ac:	0800b155 	.word	0x0800b155
 800b0b0:	0800b189 	.word	0x0800b189
 800b0b4:	0800b1bd 	.word	0x0800b1bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	7c12      	ldrb	r2, [r2, #16]
 800b0d0:	f107 0108 	add.w	r1, r7, #8
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4798      	blx	r3
 800b0d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0da:	e091      	b.n	800b200 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 facb 	bl	800b67a <USBD_CtlError>
            err++;
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ea:	e089      	b.n	800b200 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00b      	beq.n	800b110 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	7c12      	ldrb	r2, [r2, #16]
 800b104:	f107 0108 	add.w	r1, r7, #8
 800b108:	4610      	mov	r0, r2
 800b10a:	4798      	blx	r3
 800b10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b10e:	e077      	b.n	800b200 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fab1 	bl	800b67a <USBD_CtlError>
            err++;
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	3301      	adds	r3, #1
 800b11c:	72fb      	strb	r3, [r7, #11]
          break;
 800b11e:	e06f      	b.n	800b200 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00b      	beq.n	800b144 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	7c12      	ldrb	r2, [r2, #16]
 800b138:	f107 0108 	add.w	r1, r7, #8
 800b13c:	4610      	mov	r0, r2
 800b13e:	4798      	blx	r3
 800b140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b142:	e05d      	b.n	800b200 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa97 	bl	800b67a <USBD_CtlError>
            err++;
 800b14c:	7afb      	ldrb	r3, [r7, #11]
 800b14e:	3301      	adds	r3, #1
 800b150:	72fb      	strb	r3, [r7, #11]
          break;
 800b152:	e055      	b.n	800b200 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	7c12      	ldrb	r2, [r2, #16]
 800b16c:	f107 0108 	add.w	r1, r7, #8
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
 800b174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b176:	e043      	b.n	800b200 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fa7d 	bl	800b67a <USBD_CtlError>
            err++;
 800b180:	7afb      	ldrb	r3, [r7, #11]
 800b182:	3301      	adds	r3, #1
 800b184:	72fb      	strb	r3, [r7, #11]
          break;
 800b186:	e03b      	b.n	800b200 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00b      	beq.n	800b1ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	7c12      	ldrb	r2, [r2, #16]
 800b1a0:	f107 0108 	add.w	r1, r7, #8
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4798      	blx	r3
 800b1a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1aa:	e029      	b.n	800b200 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fa63 	bl	800b67a <USBD_CtlError>
            err++;
 800b1b4:	7afb      	ldrb	r3, [r7, #11]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ba:	e021      	b.n	800b200 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	7c12      	ldrb	r2, [r2, #16]
 800b1d4:	f107 0108 	add.w	r1, r7, #8
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1de:	e00f      	b.n	800b200 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fa49 	bl	800b67a <USBD_CtlError>
            err++;
 800b1e8:	7afb      	ldrb	r3, [r7, #11]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ee:	e007      	b.n	800b200 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fa41 	bl	800b67a <USBD_CtlError>
          err++;
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b1fe:	bf00      	nop
      }
      break;
 800b200:	e037      	b.n	800b272 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	7c1b      	ldrb	r3, [r3, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d109      	bne.n	800b21e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b212:	f107 0208 	add.w	r2, r7, #8
 800b216:	4610      	mov	r0, r2
 800b218:	4798      	blx	r3
 800b21a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b21c:	e029      	b.n	800b272 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa2a 	bl	800b67a <USBD_CtlError>
        err++;
 800b226:	7afb      	ldrb	r3, [r7, #11]
 800b228:	3301      	adds	r3, #1
 800b22a:	72fb      	strb	r3, [r7, #11]
      break;
 800b22c:	e021      	b.n	800b272 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7c1b      	ldrb	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10d      	bne.n	800b252 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23e:	f107 0208 	add.w	r2, r7, #8
 800b242:	4610      	mov	r0, r2
 800b244:	4798      	blx	r3
 800b246:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	3301      	adds	r3, #1
 800b24c:	2207      	movs	r2, #7
 800b24e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b250:	e00f      	b.n	800b272 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fa10 	bl	800b67a <USBD_CtlError>
        err++;
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	3301      	adds	r3, #1
 800b25e:	72fb      	strb	r3, [r7, #11]
      break;
 800b260:	e007      	b.n	800b272 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fa08 	bl	800b67a <USBD_CtlError>
      err++;
 800b26a:	7afb      	ldrb	r3, [r7, #11]
 800b26c:	3301      	adds	r3, #1
 800b26e:	72fb      	strb	r3, [r7, #11]
      break;
 800b270:	bf00      	nop
  }

  if (err != 0U)
 800b272:	7afb      	ldrb	r3, [r7, #11]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d11e      	bne.n	800b2b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	88db      	ldrh	r3, [r3, #6]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d016      	beq.n	800b2ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b280:	893b      	ldrh	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00e      	beq.n	800b2a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	88da      	ldrh	r2, [r3, #6]
 800b28a:	893b      	ldrh	r3, [r7, #8]
 800b28c:	4293      	cmp	r3, r2
 800b28e:	bf28      	it	cs
 800b290:	4613      	movcs	r3, r2
 800b292:	b29b      	uxth	r3, r3
 800b294:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b296:	893b      	ldrh	r3, [r7, #8]
 800b298:	461a      	mov	r2, r3
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fa5d 	bl	800b75c <USBD_CtlSendData>
 800b2a2:	e009      	b.n	800b2b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9e7 	bl	800b67a <USBD_CtlError>
 800b2ac:	e004      	b.n	800b2b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 faae 	bl	800b810 <USBD_CtlSendStatus>
 800b2b4:	e000      	b.n	800b2b8 <USBD_GetDescriptor+0x320>
    return;
 800b2b6:	bf00      	nop
  }
}
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop

0800b2c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	889b      	ldrh	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d131      	bne.n	800b336 <USBD_SetAddress+0x76>
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	88db      	ldrh	r3, [r3, #6]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d12d      	bne.n	800b336 <USBD_SetAddress+0x76>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	2b7f      	cmp	r3, #127	; 0x7f
 800b2e0:	d829      	bhi.n	800b336 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	885b      	ldrh	r3, [r3, #2]
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d104      	bne.n	800b304 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f9bc 	bl	800b67a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b302:	e01d      	b.n	800b340 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7bfa      	ldrb	r2, [r7, #15]
 800b308:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 ffef 	bl	800c2f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fa7a 	bl	800b810 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d004      	beq.n	800b32c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32a:	e009      	b.n	800b340 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b334:	e004      	b.n	800b340 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f99e 	bl	800b67a <USBD_CtlError>
  }
}
 800b33e:	bf00      	nop
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	885b      	ldrh	r3, [r3, #2]
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	4b4e      	ldr	r3, [pc, #312]	; (800b498 <USBD_SetConfig+0x150>)
 800b35e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b360:	4b4d      	ldr	r3, [pc, #308]	; (800b498 <USBD_SetConfig+0x150>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d905      	bls.n	800b374 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f985 	bl	800b67a <USBD_CtlError>
    return USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	e08c      	b.n	800b48e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d002      	beq.n	800b386 <USBD_SetConfig+0x3e>
 800b380:	2b03      	cmp	r3, #3
 800b382:	d029      	beq.n	800b3d8 <USBD_SetConfig+0x90>
 800b384:	e075      	b.n	800b472 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b386:	4b44      	ldr	r3, [pc, #272]	; (800b498 <USBD_SetConfig+0x150>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d020      	beq.n	800b3d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b38e:	4b42      	ldr	r3, [pc, #264]	; (800b498 <USBD_SetConfig+0x150>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b398:	4b3f      	ldr	r3, [pc, #252]	; (800b498 <USBD_SetConfig+0x150>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7fe ffb7 	bl	800a312 <USBD_SetClassConfig>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d008      	beq.n	800b3c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f962 	bl	800b67a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3be:	e065      	b.n	800b48c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fa25 	bl	800b810 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3ce:	e05d      	b.n	800b48c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fa1d 	bl	800b810 <USBD_CtlSendStatus>
      break;
 800b3d6:	e059      	b.n	800b48c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3d8:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <USBD_SetConfig+0x150>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d112      	bne.n	800b406 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b3e8:	4b2b      	ldr	r3, [pc, #172]	; (800b498 <USBD_SetConfig+0x150>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3f2:	4b29      	ldr	r3, [pc, #164]	; (800b498 <USBD_SetConfig+0x150>)
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7fe ffa6 	bl	800a34a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa06 	bl	800b810 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b404:	e042      	b.n	800b48c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <USBD_SetConfig+0x150>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d02a      	beq.n	800b46a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fe ff94 	bl	800a34a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b422:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <USBD_SetConfig+0x150>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b42c:	4b1a      	ldr	r3, [pc, #104]	; (800b498 <USBD_SetConfig+0x150>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7fe ff6d 	bl	800a312 <USBD_SetClassConfig>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00f      	beq.n	800b462 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f918 	bl	800b67a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7fe ff79 	bl	800a34a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b460:	e014      	b.n	800b48c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f9d4 	bl	800b810 <USBD_CtlSendStatus>
      break;
 800b468:	e010      	b.n	800b48c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f9d0 	bl	800b810 <USBD_CtlSendStatus>
      break;
 800b470:	e00c      	b.n	800b48c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f900 	bl	800b67a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <USBD_SetConfig+0x150>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7fe ff62 	bl	800a34a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b486:	2303      	movs	r3, #3
 800b488:	73fb      	strb	r3, [r7, #15]
      break;
 800b48a:	bf00      	nop
  }

  return ret;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	200006e4 	.word	0x200006e4

0800b49c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	88db      	ldrh	r3, [r3, #6]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d004      	beq.n	800b4b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f8e2 	bl	800b67a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4b6:	e023      	b.n	800b500 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	dc02      	bgt.n	800b4ca <USBD_GetConfig+0x2e>
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	dc03      	bgt.n	800b4d0 <USBD_GetConfig+0x34>
 800b4c8:	e015      	b.n	800b4f6 <USBD_GetConfig+0x5a>
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d00b      	beq.n	800b4e6 <USBD_GetConfig+0x4a>
 800b4ce:	e012      	b.n	800b4f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3308      	adds	r3, #8
 800b4da:	2201      	movs	r2, #1
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f93c 	bl	800b75c <USBD_CtlSendData>
        break;
 800b4e4:	e00c      	b.n	800b500 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f934 	bl	800b75c <USBD_CtlSendData>
        break;
 800b4f4:	e004      	b.n	800b500 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f8be 	bl	800b67a <USBD_CtlError>
        break;
 800b4fe:	bf00      	nop
}
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	3b01      	subs	r3, #1
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d81e      	bhi.n	800b55e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	88db      	ldrh	r3, [r3, #6]
 800b524:	2b02      	cmp	r3, #2
 800b526:	d004      	beq.n	800b532 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f8a5 	bl	800b67a <USBD_CtlError>
        break;
 800b530:	e01a      	b.n	800b568 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f043 0202 	orr.w	r2, r3, #2
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	330c      	adds	r3, #12
 800b552:	2202      	movs	r2, #2
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f900 	bl	800b75c <USBD_CtlSendData>
      break;
 800b55c:	e004      	b.n	800b568 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f88a 	bl	800b67a <USBD_CtlError>
      break;
 800b566:	bf00      	nop
  }
}
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	885b      	ldrh	r3, [r3, #2]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d107      	bne.n	800b592 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f940 	bl	800b810 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b590:	e013      	b.n	800b5ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	885b      	ldrh	r3, [r3, #2]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d10b      	bne.n	800b5b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	889b      	ldrh	r3, [r3, #4]
 800b59e:	0a1b      	lsrs	r3, r3, #8
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f930 	bl	800b810 <USBD_CtlSendStatus>
}
 800b5b0:	e003      	b.n	800b5ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f860 	bl	800b67a <USBD_CtlError>
}
 800b5ba:	bf00      	nop
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d80b      	bhi.n	800b5f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d10c      	bne.n	800b5fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f910 	bl	800b810 <USBD_CtlSendStatus>
      }
      break;
 800b5f0:	e004      	b.n	800b5fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f840 	bl	800b67a <USBD_CtlError>
      break;
 800b5fa:	e000      	b.n	800b5fe <USBD_ClrFeature+0x3c>
      break;
 800b5fc:	bf00      	nop
  }
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	781a      	ldrb	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3301      	adds	r3, #1
 800b620:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	781a      	ldrb	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3301      	adds	r3, #1
 800b62e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff fa17 	bl	800aa64 <SWAPBYTE>
 800b636:	4603      	mov	r3, r0
 800b638:	461a      	mov	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3301      	adds	r3, #1
 800b648:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff fa0a 	bl	800aa64 <SWAPBYTE>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	3301      	adds	r3, #1
 800b65c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3301      	adds	r3, #1
 800b662:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff f9fd 	bl	800aa64 <SWAPBYTE>
 800b66a:	4603      	mov	r3, r0
 800b66c:	461a      	mov	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	80da      	strh	r2, [r3, #6]
}
 800b672:	bf00      	nop
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b684:	2180      	movs	r1, #128	; 0x80
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fd9c 	bl	800c1c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fd98 	bl	800c1c4 <USBD_LL_StallEP>
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d036      	beq.n	800b720 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6b6:	6938      	ldr	r0, [r7, #16]
 800b6b8:	f000 f836 	bl	800b728 <USBD_GetLen>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	3301      	adds	r3, #1
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	7812      	ldrb	r2, [r2, #0]
 800b6d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6ec:	e013      	b.n	800b716 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	7812      	ldrb	r2, [r2, #0]
 800b6f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	613b      	str	r3, [r7, #16]
    idx++;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	3301      	adds	r3, #1
 800b704:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	4413      	add	r3, r2
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	3301      	adds	r3, #1
 800b714:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1e7      	bne.n	800b6ee <USBD_GetString+0x52>
 800b71e:	e000      	b.n	800b722 <USBD_GetString+0x86>
    return;
 800b720:	bf00      	nop
  }
}
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b738:	e005      	b.n	800b746 <USBD_GetLen+0x1e>
  {
    len++;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	3301      	adds	r3, #1
 800b73e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	3301      	adds	r3, #1
 800b744:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1f5      	bne.n	800b73a <USBD_GetLen+0x12>
  }

  return len;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	2100      	movs	r1, #0
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f000 fdec 	bl	800c360 <USBD_LL_Transmit>

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	60f8      	str	r0, [r7, #12]
 800b79a:	60b9      	str	r1, [r7, #8]
 800b79c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 fddb 	bl	800c360 <USBD_LL_Transmit>

  return USBD_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2203      	movs	r2, #3
 800b7c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	2100      	movs	r1, #0
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 fdf6 	bl	800c3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	2100      	movs	r1, #0
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 fde5 	bl	800c3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2204      	movs	r2, #4
 800b81c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b820:	2300      	movs	r3, #0
 800b822:	2200      	movs	r2, #0
 800b824:	2100      	movs	r1, #0
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fd9a 	bl	800c360 <USBD_LL_Transmit>

  return USBD_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2205      	movs	r2, #5
 800b842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b846:	2300      	movs	r3, #0
 800b848:	2200      	movs	r2, #0
 800b84a:	2100      	movs	r1, #0
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fdbf 	bl	800c3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b860:	2200      	movs	r2, #0
 800b862:	4912      	ldr	r1, [pc, #72]	; (800b8ac <MX_USB_DEVICE_Init+0x50>)
 800b864:	4812      	ldr	r0, [pc, #72]	; (800b8b0 <MX_USB_DEVICE_Init+0x54>)
 800b866:	f7fe fcd7 	bl	800a218 <USBD_Init>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b870:	f7f7 fae4 	bl	8002e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b874:	490f      	ldr	r1, [pc, #60]	; (800b8b4 <MX_USB_DEVICE_Init+0x58>)
 800b876:	480e      	ldr	r0, [pc, #56]	; (800b8b0 <MX_USB_DEVICE_Init+0x54>)
 800b878:	f7fe fcfe 	bl	800a278 <USBD_RegisterClass>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b882:	f7f7 fadb 	bl	8002e3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b886:	490c      	ldr	r1, [pc, #48]	; (800b8b8 <MX_USB_DEVICE_Init+0x5c>)
 800b888:	4809      	ldr	r0, [pc, #36]	; (800b8b0 <MX_USB_DEVICE_Init+0x54>)
 800b88a:	f7fe fbf5 	bl	800a078 <USBD_CDC_RegisterInterface>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b894:	f7f7 fad2 	bl	8002e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b898:	4805      	ldr	r0, [pc, #20]	; (800b8b0 <MX_USB_DEVICE_Init+0x54>)
 800b89a:	f7fe fd23 	bl	800a2e4 <USBD_Start>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b8a4:	f7f7 faca 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8a8:	bf00      	nop
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	200000ac 	.word	0x200000ac
 800b8b0:	200006e8 	.word	0x200006e8
 800b8b4:	20000018 	.word	0x20000018
 800b8b8:	20000098 	.word	0x20000098

0800b8bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4905      	ldr	r1, [pc, #20]	; (800b8d8 <CDC_Init_FS+0x1c>)
 800b8c4:	4805      	ldr	r0, [pc, #20]	; (800b8dc <CDC_Init_FS+0x20>)
 800b8c6:	f7fe fbf1 	bl	800a0ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b8ca:	4905      	ldr	r1, [pc, #20]	; (800b8e0 <CDC_Init_FS+0x24>)
 800b8cc:	4803      	ldr	r0, [pc, #12]	; (800b8dc <CDC_Init_FS+0x20>)
 800b8ce:	f7fe fc0f 	bl	800a0f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b8d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	200011c4 	.word	0x200011c4
 800b8dc:	200006e8 	.word	0x200006e8
 800b8e0:	200009c4 	.word	0x200009c4

0800b8e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b8e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	71fb      	strb	r3, [r7, #7]
 800b900:	4613      	mov	r3, r2
 800b902:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	2b23      	cmp	r3, #35	; 0x23
 800b908:	d84a      	bhi.n	800b9a0 <CDC_Control_FS+0xac>
 800b90a:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <CDC_Control_FS+0x1c>)
 800b90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b910:	0800b9a1 	.word	0x0800b9a1
 800b914:	0800b9a1 	.word	0x0800b9a1
 800b918:	0800b9a1 	.word	0x0800b9a1
 800b91c:	0800b9a1 	.word	0x0800b9a1
 800b920:	0800b9a1 	.word	0x0800b9a1
 800b924:	0800b9a1 	.word	0x0800b9a1
 800b928:	0800b9a1 	.word	0x0800b9a1
 800b92c:	0800b9a1 	.word	0x0800b9a1
 800b930:	0800b9a1 	.word	0x0800b9a1
 800b934:	0800b9a1 	.word	0x0800b9a1
 800b938:	0800b9a1 	.word	0x0800b9a1
 800b93c:	0800b9a1 	.word	0x0800b9a1
 800b940:	0800b9a1 	.word	0x0800b9a1
 800b944:	0800b9a1 	.word	0x0800b9a1
 800b948:	0800b9a1 	.word	0x0800b9a1
 800b94c:	0800b9a1 	.word	0x0800b9a1
 800b950:	0800b9a1 	.word	0x0800b9a1
 800b954:	0800b9a1 	.word	0x0800b9a1
 800b958:	0800b9a1 	.word	0x0800b9a1
 800b95c:	0800b9a1 	.word	0x0800b9a1
 800b960:	0800b9a1 	.word	0x0800b9a1
 800b964:	0800b9a1 	.word	0x0800b9a1
 800b968:	0800b9a1 	.word	0x0800b9a1
 800b96c:	0800b9a1 	.word	0x0800b9a1
 800b970:	0800b9a1 	.word	0x0800b9a1
 800b974:	0800b9a1 	.word	0x0800b9a1
 800b978:	0800b9a1 	.word	0x0800b9a1
 800b97c:	0800b9a1 	.word	0x0800b9a1
 800b980:	0800b9a1 	.word	0x0800b9a1
 800b984:	0800b9a1 	.word	0x0800b9a1
 800b988:	0800b9a1 	.word	0x0800b9a1
 800b98c:	0800b9a1 	.word	0x0800b9a1
 800b990:	0800b9a1 	.word	0x0800b9a1
 800b994:	0800b9a1 	.word	0x0800b9a1
 800b998:	0800b9a1 	.word	0x0800b9a1
 800b99c:	0800b9a1 	.word	0x0800b9a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b9a0:	bf00      	nop
  }

  return (USBD_OK);
 800b9a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b9ba:	6879      	ldr	r1, [r7, #4]
 800b9bc:	480f      	ldr	r0, [pc, #60]	; (800b9fc <CDC_Receive_FS+0x4c>)
 800b9be:	f7fe fb97 	bl	800a0f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b9c2:	480e      	ldr	r0, [pc, #56]	; (800b9fc <CDC_Receive_FS+0x4c>)
 800b9c4:	f7fe fbf2 	bl	800a1ac <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	73fb      	strb	r3, [r7, #15]
  memset (rxBuffer, '\0', 64);
 800b9ce:	2240      	movs	r2, #64	; 0x40
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	480b      	ldr	r0, [pc, #44]	; (800ba00 <CDC_Receive_FS+0x50>)
 800b9d4:	f001 fafc 	bl	800cfd0 <memset>
  memcpy (rxBuffer, Buf, len);
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6879      	ldr	r1, [r7, #4]
 800b9de:	4808      	ldr	r0, [pc, #32]	; (800ba00 <CDC_Receive_FS+0x50>)
 800b9e0:	f001 fb2f 	bl	800d042 <memcpy>
  memset (Buf, '\0', len);
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 faf0 	bl	800cfd0 <memset>
  return (USBD_OK);
 800b9f0:	2300      	movs	r3, #0

  //if we're still using this shit after 2024 is over.....
  //				-Max

  /* USER CODE END 6 */
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	200006e8 	.word	0x200006e8
 800ba00:	20000330 	.word	0x20000330

0800ba04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <CDC_Transmit_FS+0x48>)
 800ba16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e00b      	b.n	800ba42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba2a:	887b      	ldrh	r3, [r7, #2]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	4806      	ldr	r0, [pc, #24]	; (800ba4c <CDC_Transmit_FS+0x48>)
 800ba32:	f7fe fb3b 	bl	800a0ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba36:	4805      	ldr	r0, [pc, #20]	; (800ba4c <CDC_Transmit_FS+0x48>)
 800ba38:	f7fe fb78 	bl	800a12c <USBD_CDC_TransmitPacket>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	200006e8 	.word	0x200006e8

0800ba50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ba62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2212      	movs	r2, #18
 800ba84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba86:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	200000cc 	.word	0x200000cc

0800ba98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2204      	movs	r2, #4
 800baa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800baaa:	4b03      	ldr	r3, [pc, #12]	; (800bab8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	200000ec 	.word	0x200000ec

0800babc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	6039      	str	r1, [r7, #0]
 800bac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d105      	bne.n	800bada <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4907      	ldr	r1, [pc, #28]	; (800baf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bad2:	4808      	ldr	r0, [pc, #32]	; (800baf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bad4:	f7ff fde2 	bl	800b69c <USBD_GetString>
 800bad8:	e004      	b.n	800bae4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	4904      	ldr	r1, [pc, #16]	; (800baf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bade:	4805      	ldr	r0, [pc, #20]	; (800baf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bae0:	f7ff fddc 	bl	800b69c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bae4:	4b02      	ldr	r3, [pc, #8]	; (800baf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	200019c4 	.word	0x200019c4
 800baf4:	0800f9e4 	.word	0x0800f9e4

0800baf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	4904      	ldr	r1, [pc, #16]	; (800bb18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb08:	4804      	ldr	r0, [pc, #16]	; (800bb1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb0a:	f7ff fdc7 	bl	800b69c <USBD_GetString>
  return USBD_StrDesc;
 800bb0e:	4b02      	ldr	r3, [pc, #8]	; (800bb18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	200019c4 	.word	0x200019c4
 800bb1c:	0800f9fc 	.word	0x0800f9fc

0800bb20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	221a      	movs	r2, #26
 800bb30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb32:	f000 f855 	bl	800bbe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb36:	4b02      	ldr	r3, [pc, #8]	; (800bb40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	200000f0 	.word	0x200000f0

0800bb44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d105      	bne.n	800bb62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	4907      	ldr	r1, [pc, #28]	; (800bb78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb5a:	4808      	ldr	r0, [pc, #32]	; (800bb7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb5c:	f7ff fd9e 	bl	800b69c <USBD_GetString>
 800bb60:	e004      	b.n	800bb6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	4904      	ldr	r1, [pc, #16]	; (800bb78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb66:	4805      	ldr	r0, [pc, #20]	; (800bb7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb68:	f7ff fd98 	bl	800b69c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb6c:	4b02      	ldr	r3, [pc, #8]	; (800bb78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	200019c4 	.word	0x200019c4
 800bb7c:	0800fa10 	.word	0x0800fa10

0800bb80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	4907      	ldr	r1, [pc, #28]	; (800bbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb96:	4808      	ldr	r0, [pc, #32]	; (800bbb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb98:	f7ff fd80 	bl	800b69c <USBD_GetString>
 800bb9c:	e004      	b.n	800bba8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4904      	ldr	r1, [pc, #16]	; (800bbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bba2:	4805      	ldr	r0, [pc, #20]	; (800bbb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bba4:	f7ff fd7a 	bl	800b69c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bba8:	4b02      	ldr	r3, [pc, #8]	; (800bbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	200019c4 	.word	0x200019c4
 800bbb8:	0800fa1c 	.word	0x0800fa1c

0800bbbc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	220c      	movs	r2, #12
 800bbcc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bbce:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	200000e0 	.word	0x200000e0

0800bbe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbe6:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <Get_SerialNum+0x44>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bbec:	4b0e      	ldr	r3, [pc, #56]	; (800bc28 <Get_SerialNum+0x48>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bbf2:	4b0e      	ldr	r3, [pc, #56]	; (800bc2c <Get_SerialNum+0x4c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d009      	beq.n	800bc1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc06:	2208      	movs	r2, #8
 800bc08:	4909      	ldr	r1, [pc, #36]	; (800bc30 <Get_SerialNum+0x50>)
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 f814 	bl	800bc38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc10:	2204      	movs	r2, #4
 800bc12:	4908      	ldr	r1, [pc, #32]	; (800bc34 <Get_SerialNum+0x54>)
 800bc14:	68b8      	ldr	r0, [r7, #8]
 800bc16:	f000 f80f 	bl	800bc38 <IntToUnicode>
  }
}
 800bc1a:	bf00      	nop
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	1fff7590 	.word	0x1fff7590
 800bc28:	1fff7594 	.word	0x1fff7594
 800bc2c:	1fff7598 	.word	0x1fff7598
 800bc30:	200000f2 	.word	0x200000f2
 800bc34:	20000102 	.word	0x20000102

0800bc38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	75fb      	strb	r3, [r7, #23]
 800bc4e:	e027      	b.n	800bca0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	0f1b      	lsrs	r3, r3, #28
 800bc54:	2b09      	cmp	r3, #9
 800bc56:	d80b      	bhi.n	800bc70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	0f1b      	lsrs	r3, r3, #28
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	4619      	mov	r1, r3
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	440b      	add	r3, r1
 800bc68:	3230      	adds	r2, #48	; 0x30
 800bc6a:	b2d2      	uxtb	r2, r2
 800bc6c:	701a      	strb	r2, [r3, #0]
 800bc6e:	e00a      	b.n	800bc86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	0f1b      	lsrs	r3, r3, #28
 800bc74:	b2da      	uxtb	r2, r3
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	440b      	add	r3, r1
 800bc80:	3237      	adds	r2, #55	; 0x37
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	011b      	lsls	r3, r3, #4
 800bc8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	3301      	adds	r3, #1
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	2200      	movs	r2, #0
 800bc98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	75fb      	strb	r3, [r7, #23]
 800bca0:	7dfa      	ldrb	r2, [r7, #23]
 800bca2:	79fb      	ldrb	r3, [r7, #7]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d3d3      	bcc.n	800bc50 <IntToUnicode+0x18>
  }
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
	...

0800bcb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b0ac      	sub	sp, #176	; 0xb0
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	605a      	str	r2, [r3, #4]
 800bcca:	609a      	str	r2, [r3, #8]
 800bccc:	60da      	str	r2, [r3, #12]
 800bcce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bcd0:	f107 0314 	add.w	r3, r7, #20
 800bcd4:	2288      	movs	r2, #136	; 0x88
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f001 f979 	bl	800cfd0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bce6:	d173      	bne.n	800bdd0 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800bcee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bcf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800bcfe:	230c      	movs	r3, #12
 800bd00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800bd02:	2307      	movs	r3, #7
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800bd06:	2304      	movs	r3, #4
 800bd08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800bd0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd12:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd14:	f107 0314 	add.w	r3, r7, #20
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fb f8e3 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800bd24:	f7f7 f88a 	bl	8002e3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd28:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2c:	4a2a      	ldr	r2, [pc, #168]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd34:	4b28      	ldr	r3, [pc, #160]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bd40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd54:	2303      	movs	r3, #3
 800bd56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd5a:	230a      	movs	r3, #10
 800bd5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800bd64:	4619      	mov	r1, r3
 800bd66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bd6a:	f7f8 f911 	bl	8003f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd6e:	4b1a      	ldr	r3, [pc, #104]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd72:	4a19      	ldr	r2, [pc, #100]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bd78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd7a:	4b17      	ldr	r3, [pc, #92]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd86:	4b14      	ldr	r3, [pc, #80]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d114      	bne.n	800bdbc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd92:	4b11      	ldr	r3, [pc, #68]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd96:	4a10      	ldr	r2, [pc, #64]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bd98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd9c:	6593      	str	r3, [r2, #88]	; 0x58
 800bd9e:	4b0e      	ldr	r3, [pc, #56]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bda6:	60bb      	str	r3, [r7, #8]
 800bda8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800bdaa:	f7f9 fdcd 	bl	8005948 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdae:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bdb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb2:	4a09      	ldr	r2, [pc, #36]	; (800bdd8 <HAL_PCD_MspInit+0x120>)
 800bdb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdb8:	6593      	str	r3, [r2, #88]	; 0x58
 800bdba:	e001      	b.n	800bdc0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800bdbc:	f7f9 fdc4 	bl	8005948 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	2043      	movs	r0, #67	; 0x43
 800bdc6:	f7f8 f86e 	bl	8003ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bdca:	2043      	movs	r0, #67	; 0x43
 800bdcc:	f7f8 f887 	bl	8003ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bdd0:	bf00      	nop
 800bdd2:	37b0      	adds	r7, #176	; 0xb0
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	40021000 	.word	0x40021000

0800bddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe fac3 	bl	800a37e <USBD_LL_SetupStage>
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	6879      	ldr	r1, [r7, #4]
 800be16:	4613      	mov	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	4413      	add	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	440b      	add	r3, r1
 800be20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	78fb      	ldrb	r3, [r7, #3]
 800be28:	4619      	mov	r1, r3
 800be2a:	f7fe fafd 	bl	800a428 <USBD_LL_DataOutStage>
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	460b      	mov	r3, r1
 800be40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	3348      	adds	r3, #72	; 0x48
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	4619      	mov	r1, r3
 800be5e:	f7fe fb96 	bl	800a58e <USBD_LL_DataInStage>
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe fcd0 	bl	800a81e <USBD_LL_SOF>
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be8e:	2301      	movs	r3, #1
 800be90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d001      	beq.n	800be9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be9a:	f7f6 ffcf 	bl	8002e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bea4:	7bfa      	ldrb	r2, [r7, #15]
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe fc74 	bl	800a796 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fe fc1c 	bl	800a6f2 <USBD_LL_Reset>
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6812      	ldr	r2, [r2, #0]
 800beda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fc63 	bl	800a7b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a1b      	ldr	r3, [r3, #32]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bef8:	4b04      	ldr	r3, [pc, #16]	; (800bf0c <HAL_PCD_SuspendCallback+0x48>)
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	4a03      	ldr	r2, [pc, #12]	; (800bf0c <HAL_PCD_SuspendCallback+0x48>)
 800befe:	f043 0306 	orr.w	r3, r3, #6
 800bf02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	e000ed00 	.word	0xe000ed00

0800bf10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	6812      	ldr	r2, [r2, #0]
 800bf26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf2a:	f023 0301 	bic.w	r3, r3, #1
 800bf2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf38:	4b08      	ldr	r3, [pc, #32]	; (800bf5c <HAL_PCD_ResumeCallback+0x4c>)
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	4a07      	ldr	r2, [pc, #28]	; (800bf5c <HAL_PCD_ResumeCallback+0x4c>)
 800bf3e:	f023 0306 	bic.w	r3, r3, #6
 800bf42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf44:	f000 faf6 	bl	800c534 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fc4d 	bl	800a7ee <USBD_LL_Resume>
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	e000ed00 	.word	0xe000ed00

0800bf60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf72:	78fa      	ldrb	r2, [r7, #3]
 800bf74:	4611      	mov	r1, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fca3 	bl	800a8c2 <USBD_LL_IsoOUTIncomplete>
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf96:	78fa      	ldrb	r2, [r7, #3]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fc5f 	bl	800a85e <USBD_LL_IsoINIncomplete>
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe fcb5 	bl	800a926 <USBD_LL_DevConnected>
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fcb2 	bl	800a93c <USBD_LL_DevDisconnected>
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d13c      	bne.n	800c06a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bff0:	4a20      	ldr	r2, [pc, #128]	; (800c074 <USBD_LL_Init+0x94>)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a1e      	ldr	r2, [pc, #120]	; (800c074 <USBD_LL_Init+0x94>)
 800bffc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c000:	4b1c      	ldr	r3, [pc, #112]	; (800c074 <USBD_LL_Init+0x94>)
 800c002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c006:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c008:	4b1a      	ldr	r3, [pc, #104]	; (800c074 <USBD_LL_Init+0x94>)
 800c00a:	2206      	movs	r2, #6
 800c00c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c00e:	4b19      	ldr	r3, [pc, #100]	; (800c074 <USBD_LL_Init+0x94>)
 800c010:	2202      	movs	r2, #2
 800c012:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c014:	4b17      	ldr	r3, [pc, #92]	; (800c074 <USBD_LL_Init+0x94>)
 800c016:	2202      	movs	r2, #2
 800c018:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c01a:	4b16      	ldr	r3, [pc, #88]	; (800c074 <USBD_LL_Init+0x94>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c020:	4b14      	ldr	r3, [pc, #80]	; (800c074 <USBD_LL_Init+0x94>)
 800c022:	2200      	movs	r2, #0
 800c024:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c026:	4b13      	ldr	r3, [pc, #76]	; (800c074 <USBD_LL_Init+0x94>)
 800c028:	2200      	movs	r2, #0
 800c02a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c02c:	4b11      	ldr	r3, [pc, #68]	; (800c074 <USBD_LL_Init+0x94>)
 800c02e:	2200      	movs	r2, #0
 800c030:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c032:	4b10      	ldr	r3, [pc, #64]	; (800c074 <USBD_LL_Init+0x94>)
 800c034:	2200      	movs	r2, #0
 800c036:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c038:	4b0e      	ldr	r3, [pc, #56]	; (800c074 <USBD_LL_Init+0x94>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c03e:	480d      	ldr	r0, [pc, #52]	; (800c074 <USBD_LL_Init+0x94>)
 800c040:	f7f8 fa76 	bl	8004530 <HAL_PCD_Init>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c04a:	f7f6 fef7 	bl	8002e3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c04e:	2180      	movs	r1, #128	; 0x80
 800c050:	4808      	ldr	r0, [pc, #32]	; (800c074 <USBD_LL_Init+0x94>)
 800c052:	f7f9 fbe0 	bl	8005816 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c056:	2240      	movs	r2, #64	; 0x40
 800c058:	2100      	movs	r1, #0
 800c05a:	4806      	ldr	r0, [pc, #24]	; (800c074 <USBD_LL_Init+0x94>)
 800c05c:	f7f9 fb94 	bl	8005788 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c060:	2280      	movs	r2, #128	; 0x80
 800c062:	2101      	movs	r1, #1
 800c064:	4803      	ldr	r0, [pc, #12]	; (800c074 <USBD_LL_Init+0x94>)
 800c066:	f7f9 fb8f 	bl	8005788 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	20001bc4 	.word	0x20001bc4

0800c078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f8 fb72 	bl	8004778 <HAL_PCD_Start>
 800c094:	4603      	mov	r3, r0
 800c096:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d816      	bhi.n	800c0cc <USBD_LL_Start+0x54>
 800c09e:	a201      	add	r2, pc, #4	; (adr r2, 800c0a4 <USBD_LL_Start+0x2c>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0b5 	.word	0x0800c0b5
 800c0a8:	0800c0bb 	.word	0x0800c0bb
 800c0ac:	0800c0c1 	.word	0x0800c0c1
 800c0b0:	0800c0c7 	.word	0x0800c0c7
    case HAL_OK :
      usb_status = USBD_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0b8:	e00b      	b.n	800c0d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c0be:	e008      	b.n	800c0d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c4:	e005      	b.n	800c0d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ca:	e002      	b.n	800c0d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d0:	bf00      	nop
  }
  return usb_status;
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	70fb      	strb	r3, [r7, #3]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	70bb      	strb	r3, [r7, #2]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c104:	78bb      	ldrb	r3, [r7, #2]
 800c106:	883a      	ldrh	r2, [r7, #0]
 800c108:	78f9      	ldrb	r1, [r7, #3]
 800c10a:	f7f9 f81c 	bl	8005146 <HAL_PCD_EP_Open>
 800c10e:	4603      	mov	r3, r0
 800c110:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	2b03      	cmp	r3, #3
 800c116:	d817      	bhi.n	800c148 <USBD_LL_OpenEP+0x6c>
 800c118:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <USBD_LL_OpenEP+0x44>)
 800c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11e:	bf00      	nop
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c137 	.word	0x0800c137
 800c128:	0800c13d 	.word	0x0800c13d
 800c12c:	0800c143 	.word	0x0800c143
    case HAL_OK :
      usb_status = USBD_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73fb      	strb	r3, [r7, #15]
    break;
 800c134:	e00b      	b.n	800c14e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c136:	2303      	movs	r3, #3
 800c138:	73fb      	strb	r3, [r7, #15]
    break;
 800c13a:	e008      	b.n	800c14e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c13c:	2301      	movs	r3, #1
 800c13e:	73fb      	strb	r3, [r7, #15]
    break;
 800c140:	e005      	b.n	800c14e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c142:	2303      	movs	r3, #3
 800c144:	73fb      	strb	r3, [r7, #15]
    break;
 800c146:	e002      	b.n	800c14e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	73fb      	strb	r3, [r7, #15]
    break;
 800c14c:	bf00      	nop
  }
  return usb_status;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c172:	78fa      	ldrb	r2, [r7, #3]
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7f9 f84d 	bl	8005216 <HAL_PCD_EP_Close>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d816      	bhi.n	800c1b4 <USBD_LL_CloseEP+0x5c>
 800c186:	a201      	add	r2, pc, #4	; (adr r2, 800c18c <USBD_LL_CloseEP+0x34>)
 800c188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18c:	0800c19d 	.word	0x0800c19d
 800c190:	0800c1a3 	.word	0x0800c1a3
 800c194:	0800c1a9 	.word	0x0800c1a9
 800c198:	0800c1af 	.word	0x0800c1af
    case HAL_OK :
      usb_status = USBD_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a0:	e00b      	b.n	800c1ba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a6:	e008      	b.n	800c1ba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ac:	e005      	b.n	800c1ba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b2:	e002      	b.n	800c1ba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b8:	bf00      	nop
  }
  return usb_status;
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1de:	78fa      	ldrb	r2, [r7, #3]
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f9 f8dc 	bl	80053a0 <HAL_PCD_EP_SetStall>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	d816      	bhi.n	800c220 <USBD_LL_StallEP+0x5c>
 800c1f2:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <USBD_LL_StallEP+0x34>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c209 	.word	0x0800c209
 800c1fc:	0800c20f 	.word	0x0800c20f
 800c200:	0800c215 	.word	0x0800c215
 800c204:	0800c21b 	.word	0x0800c21b
    case HAL_OK :
      usb_status = USBD_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
    break;
 800c20c:	e00b      	b.n	800c226 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c20e:	2303      	movs	r3, #3
 800c210:	73fb      	strb	r3, [r7, #15]
    break;
 800c212:	e008      	b.n	800c226 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c214:	2301      	movs	r3, #1
 800c216:	73fb      	strb	r3, [r7, #15]
    break;
 800c218:	e005      	b.n	800c226 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c21a:	2303      	movs	r3, #3
 800c21c:	73fb      	strb	r3, [r7, #15]
    break;
 800c21e:	e002      	b.n	800c226 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c220:	2303      	movs	r3, #3
 800c222:	73fb      	strb	r3, [r7, #15]
    break;
 800c224:	bf00      	nop
  }
  return usb_status;
 800c226:	7bfb      	ldrb	r3, [r7, #15]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c24a:	78fa      	ldrb	r2, [r7, #3]
 800c24c:	4611      	mov	r1, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f9 f908 	bl	8005464 <HAL_PCD_EP_ClrStall>
 800c254:	4603      	mov	r3, r0
 800c256:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d816      	bhi.n	800c28c <USBD_LL_ClearStallEP+0x5c>
 800c25e:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <USBD_LL_ClearStallEP+0x34>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c275 	.word	0x0800c275
 800c268:	0800c27b 	.word	0x0800c27b
 800c26c:	0800c281 	.word	0x0800c281
 800c270:	0800c287 	.word	0x0800c287
    case HAL_OK :
      usb_status = USBD_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	73fb      	strb	r3, [r7, #15]
    break;
 800c278:	e00b      	b.n	800c292 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c27a:	2303      	movs	r3, #3
 800c27c:	73fb      	strb	r3, [r7, #15]
    break;
 800c27e:	e008      	b.n	800c292 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c280:	2301      	movs	r3, #1
 800c282:	73fb      	strb	r3, [r7, #15]
    break;
 800c284:	e005      	b.n	800c292 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	73fb      	strb	r3, [r7, #15]
    break;
 800c28a:	e002      	b.n	800c292 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c28c:	2303      	movs	r3, #3
 800c28e:	73fb      	strb	r3, [r7, #15]
    break;
 800c290:	bf00      	nop
  }
  return usb_status;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da0b      	bge.n	800c2d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2be:	68f9      	ldr	r1, [r7, #12]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	4413      	add	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	440b      	add	r3, r1
 800c2ca:	333e      	adds	r3, #62	; 0x3e
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	e00b      	b.n	800c2e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	4413      	add	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c2e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c30e:	78fa      	ldrb	r2, [r7, #3]
 800c310:	4611      	mov	r1, r2
 800c312:	4618      	mov	r0, r3
 800c314:	f7f8 fef2 	bl	80050fc <HAL_PCD_SetAddress>
 800c318:	4603      	mov	r3, r0
 800c31a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c31c:	7bbb      	ldrb	r3, [r7, #14]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d816      	bhi.n	800c350 <USBD_LL_SetUSBAddress+0x5c>
 800c322:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <USBD_LL_SetUSBAddress+0x34>)
 800c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c328:	0800c339 	.word	0x0800c339
 800c32c:	0800c33f 	.word	0x0800c33f
 800c330:	0800c345 	.word	0x0800c345
 800c334:	0800c34b 	.word	0x0800c34b
    case HAL_OK :
      usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73fb      	strb	r3, [r7, #15]
    break;
 800c33c:	e00b      	b.n	800c356 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c33e:	2303      	movs	r3, #3
 800c340:	73fb      	strb	r3, [r7, #15]
    break;
 800c342:	e008      	b.n	800c356 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c344:	2301      	movs	r3, #1
 800c346:	73fb      	strb	r3, [r7, #15]
    break;
 800c348:	e005      	b.n	800c356 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c34a:	2303      	movs	r3, #3
 800c34c:	73fb      	strb	r3, [r7, #15]
    break;
 800c34e:	e002      	b.n	800c356 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c350:	2303      	movs	r3, #3
 800c352:	73fb      	strb	r3, [r7, #15]
    break;
 800c354:	bf00      	nop
  }
  return usb_status;
 800c356:	7bfb      	ldrb	r3, [r7, #15]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	607a      	str	r2, [r7, #4]
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	460b      	mov	r3, r1
 800c36e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c37e:	7af9      	ldrb	r1, [r7, #11]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	f7f8 ffdb 	bl	800533e <HAL_PCD_EP_Transmit>
 800c388:	4603      	mov	r3, r0
 800c38a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c38c:	7dbb      	ldrb	r3, [r7, #22]
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d816      	bhi.n	800c3c0 <USBD_LL_Transmit+0x60>
 800c392:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <USBD_LL_Transmit+0x38>)
 800c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3af 	.word	0x0800c3af
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c3bb 	.word	0x0800c3bb
    case HAL_OK :
      usb_status = USBD_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	75fb      	strb	r3, [r7, #23]
    break;
 800c3ac:	e00b      	b.n	800c3c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	75fb      	strb	r3, [r7, #23]
    break;
 800c3b2:	e008      	b.n	800c3c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	75fb      	strb	r3, [r7, #23]
    break;
 800c3b8:	e005      	b.n	800c3c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	75fb      	strb	r3, [r7, #23]
    break;
 800c3be:	e002      	b.n	800c3c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	75fb      	strb	r3, [r7, #23]
    break;
 800c3c4:	bf00      	nop
  }
  return usb_status;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	603b      	str	r3, [r7, #0]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3ee:	7af9      	ldrb	r1, [r7, #11]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	f7f8 ff59 	bl	80052aa <HAL_PCD_EP_Receive>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c3fc:	7dbb      	ldrb	r3, [r7, #22]
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d816      	bhi.n	800c430 <USBD_LL_PrepareReceive+0x60>
 800c402:	a201      	add	r2, pc, #4	; (adr r2, 800c408 <USBD_LL_PrepareReceive+0x38>)
 800c404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c408:	0800c419 	.word	0x0800c419
 800c40c:	0800c41f 	.word	0x0800c41f
 800c410:	0800c425 	.word	0x0800c425
 800c414:	0800c42b 	.word	0x0800c42b
    case HAL_OK :
      usb_status = USBD_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	75fb      	strb	r3, [r7, #23]
    break;
 800c41c:	e00b      	b.n	800c436 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c41e:	2303      	movs	r3, #3
 800c420:	75fb      	strb	r3, [r7, #23]
    break;
 800c422:	e008      	b.n	800c436 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c424:	2301      	movs	r3, #1
 800c426:	75fb      	strb	r3, [r7, #23]
    break;
 800c428:	e005      	b.n	800c436 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c42a:	2303      	movs	r3, #3
 800c42c:	75fb      	strb	r3, [r7, #23]
    break;
 800c42e:	e002      	b.n	800c436 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c430:	2303      	movs	r3, #3
 800c432:	75fb      	strb	r3, [r7, #23]
    break;
 800c434:	bf00      	nop
  }
  return usb_status;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c452:	78fa      	ldrb	r2, [r7, #3]
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f7f8 ff59 	bl	800530e <HAL_PCD_EP_GetRxCount>
 800c45c:	4603      	mov	r3, r0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
	...

0800c468 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <HAL_PCDEx_LPM_Callback+0x18>
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d01f      	beq.n	800c4be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c47e:	e03b      	b.n	800c4f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a1b      	ldr	r3, [r3, #32]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d007      	beq.n	800c498 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c488:	f000 f854 	bl	800c534 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c48c:	4b1c      	ldr	r3, [pc, #112]	; (800c500 <HAL_PCDEx_LPM_Callback+0x98>)
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	4a1b      	ldr	r2, [pc, #108]	; (800c500 <HAL_PCDEx_LPM_Callback+0x98>)
 800c492:	f023 0306 	bic.w	r3, r3, #6
 800c496:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	6812      	ldr	r2, [r2, #0]
 800c4a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4aa:	f023 0301 	bic.w	r3, r3, #1
 800c4ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fe f999 	bl	800a7ee <USBD_LL_Resume>
    break;
 800c4bc:	e01c      	b.n	800c4f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	6812      	ldr	r2, [r2, #0]
 800c4cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4d0:	f043 0301 	orr.w	r3, r3, #1
 800c4d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe f96a 	bl	800a7b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d005      	beq.n	800c4f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4ea:	4b05      	ldr	r3, [pc, #20]	; (800c500 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	4a04      	ldr	r2, [pc, #16]	; (800c500 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4f0:	f043 0306 	orr.w	r3, r3, #6
 800c4f4:	6113      	str	r3, [r2, #16]
    break;
 800c4f6:	bf00      	nop
}
 800c4f8:	bf00      	nop
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	e000ed00 	.word	0xe000ed00

0800c504 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c50c:	4b03      	ldr	r3, [pc, #12]	; (800c51c <USBD_static_malloc+0x18>)
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	200020d0 	.word	0x200020d0

0800c520 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]

}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c538:	f7f6 fc30 	bl	8002d9c <SystemClock_Config>
}
 800c53c:	bf00      	nop
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <__cvt>:
 800c540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	ec55 4b10 	vmov	r4, r5, d0
 800c548:	2d00      	cmp	r5, #0
 800c54a:	460e      	mov	r6, r1
 800c54c:	4619      	mov	r1, r3
 800c54e:	462b      	mov	r3, r5
 800c550:	bfbb      	ittet	lt
 800c552:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c556:	461d      	movlt	r5, r3
 800c558:	2300      	movge	r3, #0
 800c55a:	232d      	movlt	r3, #45	; 0x2d
 800c55c:	700b      	strb	r3, [r1, #0]
 800c55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c560:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c564:	4691      	mov	r9, r2
 800c566:	f023 0820 	bic.w	r8, r3, #32
 800c56a:	bfbc      	itt	lt
 800c56c:	4622      	movlt	r2, r4
 800c56e:	4614      	movlt	r4, r2
 800c570:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c574:	d005      	beq.n	800c582 <__cvt+0x42>
 800c576:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c57a:	d100      	bne.n	800c57e <__cvt+0x3e>
 800c57c:	3601      	adds	r6, #1
 800c57e:	2102      	movs	r1, #2
 800c580:	e000      	b.n	800c584 <__cvt+0x44>
 800c582:	2103      	movs	r1, #3
 800c584:	ab03      	add	r3, sp, #12
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	ab02      	add	r3, sp, #8
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	ec45 4b10 	vmov	d0, r4, r5
 800c590:	4653      	mov	r3, sl
 800c592:	4632      	mov	r2, r6
 800c594:	f000 fdec 	bl	800d170 <_dtoa_r>
 800c598:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c59c:	4607      	mov	r7, r0
 800c59e:	d102      	bne.n	800c5a6 <__cvt+0x66>
 800c5a0:	f019 0f01 	tst.w	r9, #1
 800c5a4:	d022      	beq.n	800c5ec <__cvt+0xac>
 800c5a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5aa:	eb07 0906 	add.w	r9, r7, r6
 800c5ae:	d110      	bne.n	800c5d2 <__cvt+0x92>
 800c5b0:	783b      	ldrb	r3, [r7, #0]
 800c5b2:	2b30      	cmp	r3, #48	; 0x30
 800c5b4:	d10a      	bne.n	800c5cc <__cvt+0x8c>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	4629      	mov	r1, r5
 800c5be:	f7f4 fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5c2:	b918      	cbnz	r0, 800c5cc <__cvt+0x8c>
 800c5c4:	f1c6 0601 	rsb	r6, r6, #1
 800c5c8:	f8ca 6000 	str.w	r6, [sl]
 800c5cc:	f8da 3000 	ldr.w	r3, [sl]
 800c5d0:	4499      	add	r9, r3
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	4629      	mov	r1, r5
 800c5da:	f7f4 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5de:	b108      	cbz	r0, 800c5e4 <__cvt+0xa4>
 800c5e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5e4:	2230      	movs	r2, #48	; 0x30
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	454b      	cmp	r3, r9
 800c5ea:	d307      	bcc.n	800c5fc <__cvt+0xbc>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5f0:	1bdb      	subs	r3, r3, r7
 800c5f2:	4638      	mov	r0, r7
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	b004      	add	sp, #16
 800c5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fc:	1c59      	adds	r1, r3, #1
 800c5fe:	9103      	str	r1, [sp, #12]
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	e7f0      	b.n	800c5e6 <__cvt+0xa6>

0800c604 <__exponent>:
 800c604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c606:	4603      	mov	r3, r0
 800c608:	2900      	cmp	r1, #0
 800c60a:	bfb8      	it	lt
 800c60c:	4249      	neglt	r1, r1
 800c60e:	f803 2b02 	strb.w	r2, [r3], #2
 800c612:	bfb4      	ite	lt
 800c614:	222d      	movlt	r2, #45	; 0x2d
 800c616:	222b      	movge	r2, #43	; 0x2b
 800c618:	2909      	cmp	r1, #9
 800c61a:	7042      	strb	r2, [r0, #1]
 800c61c:	dd2a      	ble.n	800c674 <__exponent+0x70>
 800c61e:	f10d 0207 	add.w	r2, sp, #7
 800c622:	4617      	mov	r7, r2
 800c624:	260a      	movs	r6, #10
 800c626:	4694      	mov	ip, r2
 800c628:	fb91 f5f6 	sdiv	r5, r1, r6
 800c62c:	fb06 1415 	mls	r4, r6, r5, r1
 800c630:	3430      	adds	r4, #48	; 0x30
 800c632:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c636:	460c      	mov	r4, r1
 800c638:	2c63      	cmp	r4, #99	; 0x63
 800c63a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c63e:	4629      	mov	r1, r5
 800c640:	dcf1      	bgt.n	800c626 <__exponent+0x22>
 800c642:	3130      	adds	r1, #48	; 0x30
 800c644:	f1ac 0402 	sub.w	r4, ip, #2
 800c648:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c64c:	1c41      	adds	r1, r0, #1
 800c64e:	4622      	mov	r2, r4
 800c650:	42ba      	cmp	r2, r7
 800c652:	d30a      	bcc.n	800c66a <__exponent+0x66>
 800c654:	f10d 0209 	add.w	r2, sp, #9
 800c658:	eba2 020c 	sub.w	r2, r2, ip
 800c65c:	42bc      	cmp	r4, r7
 800c65e:	bf88      	it	hi
 800c660:	2200      	movhi	r2, #0
 800c662:	4413      	add	r3, r2
 800c664:	1a18      	subs	r0, r3, r0
 800c666:	b003      	add	sp, #12
 800c668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c66a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c66e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c672:	e7ed      	b.n	800c650 <__exponent+0x4c>
 800c674:	2330      	movs	r3, #48	; 0x30
 800c676:	3130      	adds	r1, #48	; 0x30
 800c678:	7083      	strb	r3, [r0, #2]
 800c67a:	70c1      	strb	r1, [r0, #3]
 800c67c:	1d03      	adds	r3, r0, #4
 800c67e:	e7f1      	b.n	800c664 <__exponent+0x60>

0800c680 <_printf_float>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	ed2d 8b02 	vpush	{d8}
 800c688:	b08d      	sub	sp, #52	; 0x34
 800c68a:	460c      	mov	r4, r1
 800c68c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c690:	4616      	mov	r6, r2
 800c692:	461f      	mov	r7, r3
 800c694:	4605      	mov	r5, r0
 800c696:	f000 fca3 	bl	800cfe0 <_localeconv_r>
 800c69a:	f8d0 a000 	ldr.w	sl, [r0]
 800c69e:	4650      	mov	r0, sl
 800c6a0:	f7f3 fde6 	bl	8000270 <strlen>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	9305      	str	r3, [sp, #20]
 800c6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c6b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c6b4:	3307      	adds	r3, #7
 800c6b6:	f023 0307 	bic.w	r3, r3, #7
 800c6ba:	f103 0208 	add.w	r2, r3, #8
 800c6be:	f8c8 2000 	str.w	r2, [r8]
 800c6c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6ca:	9307      	str	r3, [sp, #28]
 800c6cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6d0:	ee08 0a10 	vmov	s16, r0
 800c6d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c6d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6dc:	4b9e      	ldr	r3, [pc, #632]	; (800c958 <_printf_float+0x2d8>)
 800c6de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6e2:	f7f4 fa23 	bl	8000b2c <__aeabi_dcmpun>
 800c6e6:	bb88      	cbnz	r0, 800c74c <_printf_float+0xcc>
 800c6e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6ec:	4b9a      	ldr	r3, [pc, #616]	; (800c958 <_printf_float+0x2d8>)
 800c6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6f2:	f7f4 f9fd 	bl	8000af0 <__aeabi_dcmple>
 800c6f6:	bb48      	cbnz	r0, 800c74c <_printf_float+0xcc>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	4649      	mov	r1, r9
 800c700:	f7f4 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800c704:	b110      	cbz	r0, 800c70c <_printf_float+0x8c>
 800c706:	232d      	movs	r3, #45	; 0x2d
 800c708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c70c:	4a93      	ldr	r2, [pc, #588]	; (800c95c <_printf_float+0x2dc>)
 800c70e:	4b94      	ldr	r3, [pc, #592]	; (800c960 <_printf_float+0x2e0>)
 800c710:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c714:	bf94      	ite	ls
 800c716:	4690      	movls	r8, r2
 800c718:	4698      	movhi	r8, r3
 800c71a:	2303      	movs	r3, #3
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	9b05      	ldr	r3, [sp, #20]
 800c720:	f023 0304 	bic.w	r3, r3, #4
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	f04f 0900 	mov.w	r9, #0
 800c72a:	9700      	str	r7, [sp, #0]
 800c72c:	4633      	mov	r3, r6
 800c72e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c730:	4621      	mov	r1, r4
 800c732:	4628      	mov	r0, r5
 800c734:	f000 f9da 	bl	800caec <_printf_common>
 800c738:	3001      	adds	r0, #1
 800c73a:	f040 8090 	bne.w	800c85e <_printf_float+0x1de>
 800c73e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c742:	b00d      	add	sp, #52	; 0x34
 800c744:	ecbd 8b02 	vpop	{d8}
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	4642      	mov	r2, r8
 800c74e:	464b      	mov	r3, r9
 800c750:	4640      	mov	r0, r8
 800c752:	4649      	mov	r1, r9
 800c754:	f7f4 f9ea 	bl	8000b2c <__aeabi_dcmpun>
 800c758:	b140      	cbz	r0, 800c76c <_printf_float+0xec>
 800c75a:	464b      	mov	r3, r9
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	bfbc      	itt	lt
 800c760:	232d      	movlt	r3, #45	; 0x2d
 800c762:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c766:	4a7f      	ldr	r2, [pc, #508]	; (800c964 <_printf_float+0x2e4>)
 800c768:	4b7f      	ldr	r3, [pc, #508]	; (800c968 <_printf_float+0x2e8>)
 800c76a:	e7d1      	b.n	800c710 <_printf_float+0x90>
 800c76c:	6863      	ldr	r3, [r4, #4]
 800c76e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c772:	9206      	str	r2, [sp, #24]
 800c774:	1c5a      	adds	r2, r3, #1
 800c776:	d13f      	bne.n	800c7f8 <_printf_float+0x178>
 800c778:	2306      	movs	r3, #6
 800c77a:	6063      	str	r3, [r4, #4]
 800c77c:	9b05      	ldr	r3, [sp, #20]
 800c77e:	6861      	ldr	r1, [r4, #4]
 800c780:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c784:	2300      	movs	r3, #0
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	ab0a      	add	r3, sp, #40	; 0x28
 800c78a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c78e:	ab09      	add	r3, sp, #36	; 0x24
 800c790:	ec49 8b10 	vmov	d0, r8, r9
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c79c:	4628      	mov	r0, r5
 800c79e:	f7ff fecf 	bl	800c540 <__cvt>
 800c7a2:	9b06      	ldr	r3, [sp, #24]
 800c7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7a6:	2b47      	cmp	r3, #71	; 0x47
 800c7a8:	4680      	mov	r8, r0
 800c7aa:	d108      	bne.n	800c7be <_printf_float+0x13e>
 800c7ac:	1cc8      	adds	r0, r1, #3
 800c7ae:	db02      	blt.n	800c7b6 <_printf_float+0x136>
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	4299      	cmp	r1, r3
 800c7b4:	dd41      	ble.n	800c83a <_printf_float+0x1ba>
 800c7b6:	f1ab 0302 	sub.w	r3, fp, #2
 800c7ba:	fa5f fb83 	uxtb.w	fp, r3
 800c7be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7c2:	d820      	bhi.n	800c806 <_printf_float+0x186>
 800c7c4:	3901      	subs	r1, #1
 800c7c6:	465a      	mov	r2, fp
 800c7c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7cc:	9109      	str	r1, [sp, #36]	; 0x24
 800c7ce:	f7ff ff19 	bl	800c604 <__exponent>
 800c7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7d4:	1813      	adds	r3, r2, r0
 800c7d6:	2a01      	cmp	r2, #1
 800c7d8:	4681      	mov	r9, r0
 800c7da:	6123      	str	r3, [r4, #16]
 800c7dc:	dc02      	bgt.n	800c7e4 <_printf_float+0x164>
 800c7de:	6822      	ldr	r2, [r4, #0]
 800c7e0:	07d2      	lsls	r2, r2, #31
 800c7e2:	d501      	bpl.n	800c7e8 <_printf_float+0x168>
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	6123      	str	r3, [r4, #16]
 800c7e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d09c      	beq.n	800c72a <_printf_float+0xaa>
 800c7f0:	232d      	movs	r3, #45	; 0x2d
 800c7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7f6:	e798      	b.n	800c72a <_printf_float+0xaa>
 800c7f8:	9a06      	ldr	r2, [sp, #24]
 800c7fa:	2a47      	cmp	r2, #71	; 0x47
 800c7fc:	d1be      	bne.n	800c77c <_printf_float+0xfc>
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1bc      	bne.n	800c77c <_printf_float+0xfc>
 800c802:	2301      	movs	r3, #1
 800c804:	e7b9      	b.n	800c77a <_printf_float+0xfa>
 800c806:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c80a:	d118      	bne.n	800c83e <_printf_float+0x1be>
 800c80c:	2900      	cmp	r1, #0
 800c80e:	6863      	ldr	r3, [r4, #4]
 800c810:	dd0b      	ble.n	800c82a <_printf_float+0x1aa>
 800c812:	6121      	str	r1, [r4, #16]
 800c814:	b913      	cbnz	r3, 800c81c <_printf_float+0x19c>
 800c816:	6822      	ldr	r2, [r4, #0]
 800c818:	07d0      	lsls	r0, r2, #31
 800c81a:	d502      	bpl.n	800c822 <_printf_float+0x1a2>
 800c81c:	3301      	adds	r3, #1
 800c81e:	440b      	add	r3, r1
 800c820:	6123      	str	r3, [r4, #16]
 800c822:	65a1      	str	r1, [r4, #88]	; 0x58
 800c824:	f04f 0900 	mov.w	r9, #0
 800c828:	e7de      	b.n	800c7e8 <_printf_float+0x168>
 800c82a:	b913      	cbnz	r3, 800c832 <_printf_float+0x1b2>
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	07d2      	lsls	r2, r2, #31
 800c830:	d501      	bpl.n	800c836 <_printf_float+0x1b6>
 800c832:	3302      	adds	r3, #2
 800c834:	e7f4      	b.n	800c820 <_printf_float+0x1a0>
 800c836:	2301      	movs	r3, #1
 800c838:	e7f2      	b.n	800c820 <_printf_float+0x1a0>
 800c83a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c840:	4299      	cmp	r1, r3
 800c842:	db05      	blt.n	800c850 <_printf_float+0x1d0>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	6121      	str	r1, [r4, #16]
 800c848:	07d8      	lsls	r0, r3, #31
 800c84a:	d5ea      	bpl.n	800c822 <_printf_float+0x1a2>
 800c84c:	1c4b      	adds	r3, r1, #1
 800c84e:	e7e7      	b.n	800c820 <_printf_float+0x1a0>
 800c850:	2900      	cmp	r1, #0
 800c852:	bfd4      	ite	le
 800c854:	f1c1 0202 	rsble	r2, r1, #2
 800c858:	2201      	movgt	r2, #1
 800c85a:	4413      	add	r3, r2
 800c85c:	e7e0      	b.n	800c820 <_printf_float+0x1a0>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	055a      	lsls	r2, r3, #21
 800c862:	d407      	bmi.n	800c874 <_printf_float+0x1f4>
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	4642      	mov	r2, r8
 800c868:	4631      	mov	r1, r6
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b8      	blx	r7
 800c86e:	3001      	adds	r0, #1
 800c870:	d12c      	bne.n	800c8cc <_printf_float+0x24c>
 800c872:	e764      	b.n	800c73e <_printf_float+0xbe>
 800c874:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c878:	f240 80e0 	bls.w	800ca3c <_printf_float+0x3bc>
 800c87c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c880:	2200      	movs	r2, #0
 800c882:	2300      	movs	r3, #0
 800c884:	f7f4 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d034      	beq.n	800c8f6 <_printf_float+0x276>
 800c88c:	4a37      	ldr	r2, [pc, #220]	; (800c96c <_printf_float+0x2ec>)
 800c88e:	2301      	movs	r3, #1
 800c890:	4631      	mov	r1, r6
 800c892:	4628      	mov	r0, r5
 800c894:	47b8      	blx	r7
 800c896:	3001      	adds	r0, #1
 800c898:	f43f af51 	beq.w	800c73e <_printf_float+0xbe>
 800c89c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	db02      	blt.n	800c8aa <_printf_float+0x22a>
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	07d8      	lsls	r0, r3, #31
 800c8a8:	d510      	bpl.n	800c8cc <_printf_float+0x24c>
 800c8aa:	ee18 3a10 	vmov	r3, s16
 800c8ae:	4652      	mov	r2, sl
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	f43f af41 	beq.w	800c73e <_printf_float+0xbe>
 800c8bc:	f04f 0800 	mov.w	r8, #0
 800c8c0:	f104 091a 	add.w	r9, r4, #26
 800c8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	4543      	cmp	r3, r8
 800c8ca:	dc09      	bgt.n	800c8e0 <_printf_float+0x260>
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	079b      	lsls	r3, r3, #30
 800c8d0:	f100 8107 	bmi.w	800cae2 <_printf_float+0x462>
 800c8d4:	68e0      	ldr	r0, [r4, #12]
 800c8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d8:	4298      	cmp	r0, r3
 800c8da:	bfb8      	it	lt
 800c8dc:	4618      	movlt	r0, r3
 800c8de:	e730      	b.n	800c742 <_printf_float+0xc2>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	464a      	mov	r2, r9
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b8      	blx	r7
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	f43f af27 	beq.w	800c73e <_printf_float+0xbe>
 800c8f0:	f108 0801 	add.w	r8, r8, #1
 800c8f4:	e7e6      	b.n	800c8c4 <_printf_float+0x244>
 800c8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	dc39      	bgt.n	800c970 <_printf_float+0x2f0>
 800c8fc:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <_printf_float+0x2ec>)
 800c8fe:	2301      	movs	r3, #1
 800c900:	4631      	mov	r1, r6
 800c902:	4628      	mov	r0, r5
 800c904:	47b8      	blx	r7
 800c906:	3001      	adds	r0, #1
 800c908:	f43f af19 	beq.w	800c73e <_printf_float+0xbe>
 800c90c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c910:	4313      	orrs	r3, r2
 800c912:	d102      	bne.n	800c91a <_printf_float+0x29a>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	07d9      	lsls	r1, r3, #31
 800c918:	d5d8      	bpl.n	800c8cc <_printf_float+0x24c>
 800c91a:	ee18 3a10 	vmov	r3, s16
 800c91e:	4652      	mov	r2, sl
 800c920:	4631      	mov	r1, r6
 800c922:	4628      	mov	r0, r5
 800c924:	47b8      	blx	r7
 800c926:	3001      	adds	r0, #1
 800c928:	f43f af09 	beq.w	800c73e <_printf_float+0xbe>
 800c92c:	f04f 0900 	mov.w	r9, #0
 800c930:	f104 0a1a 	add.w	sl, r4, #26
 800c934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c936:	425b      	negs	r3, r3
 800c938:	454b      	cmp	r3, r9
 800c93a:	dc01      	bgt.n	800c940 <_printf_float+0x2c0>
 800c93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c93e:	e792      	b.n	800c866 <_printf_float+0x1e6>
 800c940:	2301      	movs	r3, #1
 800c942:	4652      	mov	r2, sl
 800c944:	4631      	mov	r1, r6
 800c946:	4628      	mov	r0, r5
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	f43f aef7 	beq.w	800c73e <_printf_float+0xbe>
 800c950:	f109 0901 	add.w	r9, r9, #1
 800c954:	e7ee      	b.n	800c934 <_printf_float+0x2b4>
 800c956:	bf00      	nop
 800c958:	7fefffff 	.word	0x7fefffff
 800c95c:	0800fa6c 	.word	0x0800fa6c
 800c960:	0800fa70 	.word	0x0800fa70
 800c964:	0800fa74 	.word	0x0800fa74
 800c968:	0800fa78 	.word	0x0800fa78
 800c96c:	0800fa7c 	.word	0x0800fa7c
 800c970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c974:	429a      	cmp	r2, r3
 800c976:	bfa8      	it	ge
 800c978:	461a      	movge	r2, r3
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	4691      	mov	r9, r2
 800c97e:	dc37      	bgt.n	800c9f0 <_printf_float+0x370>
 800c980:	f04f 0b00 	mov.w	fp, #0
 800c984:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c988:	f104 021a 	add.w	r2, r4, #26
 800c98c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c98e:	9305      	str	r3, [sp, #20]
 800c990:	eba3 0309 	sub.w	r3, r3, r9
 800c994:	455b      	cmp	r3, fp
 800c996:	dc33      	bgt.n	800ca00 <_printf_float+0x380>
 800c998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c99c:	429a      	cmp	r2, r3
 800c99e:	db3b      	blt.n	800ca18 <_printf_float+0x398>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	07da      	lsls	r2, r3, #31
 800c9a4:	d438      	bmi.n	800ca18 <_printf_float+0x398>
 800c9a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c9aa:	eba2 0903 	sub.w	r9, r2, r3
 800c9ae:	9b05      	ldr	r3, [sp, #20]
 800c9b0:	1ad2      	subs	r2, r2, r3
 800c9b2:	4591      	cmp	r9, r2
 800c9b4:	bfa8      	it	ge
 800c9b6:	4691      	movge	r9, r2
 800c9b8:	f1b9 0f00 	cmp.w	r9, #0
 800c9bc:	dc35      	bgt.n	800ca2a <_printf_float+0x3aa>
 800c9be:	f04f 0800 	mov.w	r8, #0
 800c9c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9c6:	f104 0a1a 	add.w	sl, r4, #26
 800c9ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9ce:	1a9b      	subs	r3, r3, r2
 800c9d0:	eba3 0309 	sub.w	r3, r3, r9
 800c9d4:	4543      	cmp	r3, r8
 800c9d6:	f77f af79 	ble.w	800c8cc <_printf_float+0x24c>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	4652      	mov	r2, sl
 800c9de:	4631      	mov	r1, r6
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	47b8      	blx	r7
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	f43f aeaa 	beq.w	800c73e <_printf_float+0xbe>
 800c9ea:	f108 0801 	add.w	r8, r8, #1
 800c9ee:	e7ec      	b.n	800c9ca <_printf_float+0x34a>
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4642      	mov	r2, r8
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	47b8      	blx	r7
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d1c0      	bne.n	800c980 <_printf_float+0x300>
 800c9fe:	e69e      	b.n	800c73e <_printf_float+0xbe>
 800ca00:	2301      	movs	r3, #1
 800ca02:	4631      	mov	r1, r6
 800ca04:	4628      	mov	r0, r5
 800ca06:	9205      	str	r2, [sp, #20]
 800ca08:	47b8      	blx	r7
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	f43f ae97 	beq.w	800c73e <_printf_float+0xbe>
 800ca10:	9a05      	ldr	r2, [sp, #20]
 800ca12:	f10b 0b01 	add.w	fp, fp, #1
 800ca16:	e7b9      	b.n	800c98c <_printf_float+0x30c>
 800ca18:	ee18 3a10 	vmov	r3, s16
 800ca1c:	4652      	mov	r2, sl
 800ca1e:	4631      	mov	r1, r6
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b8      	blx	r7
 800ca24:	3001      	adds	r0, #1
 800ca26:	d1be      	bne.n	800c9a6 <_printf_float+0x326>
 800ca28:	e689      	b.n	800c73e <_printf_float+0xbe>
 800ca2a:	9a05      	ldr	r2, [sp, #20]
 800ca2c:	464b      	mov	r3, r9
 800ca2e:	4442      	add	r2, r8
 800ca30:	4631      	mov	r1, r6
 800ca32:	4628      	mov	r0, r5
 800ca34:	47b8      	blx	r7
 800ca36:	3001      	adds	r0, #1
 800ca38:	d1c1      	bne.n	800c9be <_printf_float+0x33e>
 800ca3a:	e680      	b.n	800c73e <_printf_float+0xbe>
 800ca3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca3e:	2a01      	cmp	r2, #1
 800ca40:	dc01      	bgt.n	800ca46 <_printf_float+0x3c6>
 800ca42:	07db      	lsls	r3, r3, #31
 800ca44:	d53a      	bpl.n	800cabc <_printf_float+0x43c>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4642      	mov	r2, r8
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	47b8      	blx	r7
 800ca50:	3001      	adds	r0, #1
 800ca52:	f43f ae74 	beq.w	800c73e <_printf_float+0xbe>
 800ca56:	ee18 3a10 	vmov	r3, s16
 800ca5a:	4652      	mov	r2, sl
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	4628      	mov	r0, r5
 800ca60:	47b8      	blx	r7
 800ca62:	3001      	adds	r0, #1
 800ca64:	f43f ae6b 	beq.w	800c73e <_printf_float+0xbe>
 800ca68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ca74:	f7f4 f828 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca78:	b9d8      	cbnz	r0, 800cab2 <_printf_float+0x432>
 800ca7a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ca7e:	f108 0201 	add.w	r2, r8, #1
 800ca82:	4631      	mov	r1, r6
 800ca84:	4628      	mov	r0, r5
 800ca86:	47b8      	blx	r7
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d10e      	bne.n	800caaa <_printf_float+0x42a>
 800ca8c:	e657      	b.n	800c73e <_printf_float+0xbe>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4652      	mov	r2, sl
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f ae50 	beq.w	800c73e <_printf_float+0xbe>
 800ca9e:	f108 0801 	add.w	r8, r8, #1
 800caa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa4:	3b01      	subs	r3, #1
 800caa6:	4543      	cmp	r3, r8
 800caa8:	dcf1      	bgt.n	800ca8e <_printf_float+0x40e>
 800caaa:	464b      	mov	r3, r9
 800caac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cab0:	e6da      	b.n	800c868 <_printf_float+0x1e8>
 800cab2:	f04f 0800 	mov.w	r8, #0
 800cab6:	f104 0a1a 	add.w	sl, r4, #26
 800caba:	e7f2      	b.n	800caa2 <_printf_float+0x422>
 800cabc:	2301      	movs	r3, #1
 800cabe:	4642      	mov	r2, r8
 800cac0:	e7df      	b.n	800ca82 <_printf_float+0x402>
 800cac2:	2301      	movs	r3, #1
 800cac4:	464a      	mov	r2, r9
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	f43f ae36 	beq.w	800c73e <_printf_float+0xbe>
 800cad2:	f108 0801 	add.w	r8, r8, #1
 800cad6:	68e3      	ldr	r3, [r4, #12]
 800cad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cada:	1a5b      	subs	r3, r3, r1
 800cadc:	4543      	cmp	r3, r8
 800cade:	dcf0      	bgt.n	800cac2 <_printf_float+0x442>
 800cae0:	e6f8      	b.n	800c8d4 <_printf_float+0x254>
 800cae2:	f04f 0800 	mov.w	r8, #0
 800cae6:	f104 0919 	add.w	r9, r4, #25
 800caea:	e7f4      	b.n	800cad6 <_printf_float+0x456>

0800caec <_printf_common>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	4616      	mov	r6, r2
 800caf2:	4699      	mov	r9, r3
 800caf4:	688a      	ldr	r2, [r1, #8]
 800caf6:	690b      	ldr	r3, [r1, #16]
 800caf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cafc:	4293      	cmp	r3, r2
 800cafe:	bfb8      	it	lt
 800cb00:	4613      	movlt	r3, r2
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb08:	4607      	mov	r7, r0
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	b10a      	cbz	r2, 800cb12 <_printf_common+0x26>
 800cb0e:	3301      	adds	r3, #1
 800cb10:	6033      	str	r3, [r6, #0]
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	0699      	lsls	r1, r3, #26
 800cb16:	bf42      	ittt	mi
 800cb18:	6833      	ldrmi	r3, [r6, #0]
 800cb1a:	3302      	addmi	r3, #2
 800cb1c:	6033      	strmi	r3, [r6, #0]
 800cb1e:	6825      	ldr	r5, [r4, #0]
 800cb20:	f015 0506 	ands.w	r5, r5, #6
 800cb24:	d106      	bne.n	800cb34 <_printf_common+0x48>
 800cb26:	f104 0a19 	add.w	sl, r4, #25
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	6832      	ldr	r2, [r6, #0]
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dc26      	bgt.n	800cb82 <_printf_common+0x96>
 800cb34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb38:	1e13      	subs	r3, r2, #0
 800cb3a:	6822      	ldr	r2, [r4, #0]
 800cb3c:	bf18      	it	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	0692      	lsls	r2, r2, #26
 800cb42:	d42b      	bmi.n	800cb9c <_printf_common+0xb0>
 800cb44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb48:	4649      	mov	r1, r9
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	47c0      	blx	r8
 800cb4e:	3001      	adds	r0, #1
 800cb50:	d01e      	beq.n	800cb90 <_printf_common+0xa4>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	6922      	ldr	r2, [r4, #16]
 800cb56:	f003 0306 	and.w	r3, r3, #6
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	bf02      	ittt	eq
 800cb5e:	68e5      	ldreq	r5, [r4, #12]
 800cb60:	6833      	ldreq	r3, [r6, #0]
 800cb62:	1aed      	subeq	r5, r5, r3
 800cb64:	68a3      	ldr	r3, [r4, #8]
 800cb66:	bf0c      	ite	eq
 800cb68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb6c:	2500      	movne	r5, #0
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	bfc4      	itt	gt
 800cb72:	1a9b      	subgt	r3, r3, r2
 800cb74:	18ed      	addgt	r5, r5, r3
 800cb76:	2600      	movs	r6, #0
 800cb78:	341a      	adds	r4, #26
 800cb7a:	42b5      	cmp	r5, r6
 800cb7c:	d11a      	bne.n	800cbb4 <_printf_common+0xc8>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e008      	b.n	800cb94 <_printf_common+0xa8>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4652      	mov	r2, sl
 800cb86:	4649      	mov	r1, r9
 800cb88:	4638      	mov	r0, r7
 800cb8a:	47c0      	blx	r8
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d103      	bne.n	800cb98 <_printf_common+0xac>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb98:	3501      	adds	r5, #1
 800cb9a:	e7c6      	b.n	800cb2a <_printf_common+0x3e>
 800cb9c:	18e1      	adds	r1, r4, r3
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	2030      	movs	r0, #48	; 0x30
 800cba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cba6:	4422      	add	r2, r4
 800cba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	e7c7      	b.n	800cb44 <_printf_common+0x58>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4649      	mov	r1, r9
 800cbba:	4638      	mov	r0, r7
 800cbbc:	47c0      	blx	r8
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d0e6      	beq.n	800cb90 <_printf_common+0xa4>
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	e7d9      	b.n	800cb7a <_printf_common+0x8e>
	...

0800cbc8 <_printf_i>:
 800cbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	7e0f      	ldrb	r7, [r1, #24]
 800cbce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbd0:	2f78      	cmp	r7, #120	; 0x78
 800cbd2:	4691      	mov	r9, r2
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	469a      	mov	sl, r3
 800cbda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cbde:	d807      	bhi.n	800cbf0 <_printf_i+0x28>
 800cbe0:	2f62      	cmp	r7, #98	; 0x62
 800cbe2:	d80a      	bhi.n	800cbfa <_printf_i+0x32>
 800cbe4:	2f00      	cmp	r7, #0
 800cbe6:	f000 80d4 	beq.w	800cd92 <_printf_i+0x1ca>
 800cbea:	2f58      	cmp	r7, #88	; 0x58
 800cbec:	f000 80c0 	beq.w	800cd70 <_printf_i+0x1a8>
 800cbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbf8:	e03a      	b.n	800cc70 <_printf_i+0xa8>
 800cbfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbfe:	2b15      	cmp	r3, #21
 800cc00:	d8f6      	bhi.n	800cbf0 <_printf_i+0x28>
 800cc02:	a101      	add	r1, pc, #4	; (adr r1, 800cc08 <_printf_i+0x40>)
 800cc04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc75 	.word	0x0800cc75
 800cc10:	0800cbf1 	.word	0x0800cbf1
 800cc14:	0800cbf1 	.word	0x0800cbf1
 800cc18:	0800cbf1 	.word	0x0800cbf1
 800cc1c:	0800cbf1 	.word	0x0800cbf1
 800cc20:	0800cc75 	.word	0x0800cc75
 800cc24:	0800cbf1 	.word	0x0800cbf1
 800cc28:	0800cbf1 	.word	0x0800cbf1
 800cc2c:	0800cbf1 	.word	0x0800cbf1
 800cc30:	0800cbf1 	.word	0x0800cbf1
 800cc34:	0800cd79 	.word	0x0800cd79
 800cc38:	0800cca1 	.word	0x0800cca1
 800cc3c:	0800cd33 	.word	0x0800cd33
 800cc40:	0800cbf1 	.word	0x0800cbf1
 800cc44:	0800cbf1 	.word	0x0800cbf1
 800cc48:	0800cd9b 	.word	0x0800cd9b
 800cc4c:	0800cbf1 	.word	0x0800cbf1
 800cc50:	0800cca1 	.word	0x0800cca1
 800cc54:	0800cbf1 	.word	0x0800cbf1
 800cc58:	0800cbf1 	.word	0x0800cbf1
 800cc5c:	0800cd3b 	.word	0x0800cd3b
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	1d1a      	adds	r2, r3, #4
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	602a      	str	r2, [r5, #0]
 800cc68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc70:	2301      	movs	r3, #1
 800cc72:	e09f      	b.n	800cdb4 <_printf_i+0x1ec>
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	682b      	ldr	r3, [r5, #0]
 800cc78:	0607      	lsls	r7, r0, #24
 800cc7a:	f103 0104 	add.w	r1, r3, #4
 800cc7e:	6029      	str	r1, [r5, #0]
 800cc80:	d501      	bpl.n	800cc86 <_printf_i+0xbe>
 800cc82:	681e      	ldr	r6, [r3, #0]
 800cc84:	e003      	b.n	800cc8e <_printf_i+0xc6>
 800cc86:	0646      	lsls	r6, r0, #25
 800cc88:	d5fb      	bpl.n	800cc82 <_printf_i+0xba>
 800cc8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc8e:	2e00      	cmp	r6, #0
 800cc90:	da03      	bge.n	800cc9a <_printf_i+0xd2>
 800cc92:	232d      	movs	r3, #45	; 0x2d
 800cc94:	4276      	negs	r6, r6
 800cc96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc9a:	485a      	ldr	r0, [pc, #360]	; (800ce04 <_printf_i+0x23c>)
 800cc9c:	230a      	movs	r3, #10
 800cc9e:	e012      	b.n	800ccc6 <_printf_i+0xfe>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	6820      	ldr	r0, [r4, #0]
 800cca4:	1d19      	adds	r1, r3, #4
 800cca6:	6029      	str	r1, [r5, #0]
 800cca8:	0605      	lsls	r5, r0, #24
 800ccaa:	d501      	bpl.n	800ccb0 <_printf_i+0xe8>
 800ccac:	681e      	ldr	r6, [r3, #0]
 800ccae:	e002      	b.n	800ccb6 <_printf_i+0xee>
 800ccb0:	0641      	lsls	r1, r0, #25
 800ccb2:	d5fb      	bpl.n	800ccac <_printf_i+0xe4>
 800ccb4:	881e      	ldrh	r6, [r3, #0]
 800ccb6:	4853      	ldr	r0, [pc, #332]	; (800ce04 <_printf_i+0x23c>)
 800ccb8:	2f6f      	cmp	r7, #111	; 0x6f
 800ccba:	bf0c      	ite	eq
 800ccbc:	2308      	moveq	r3, #8
 800ccbe:	230a      	movne	r3, #10
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccc6:	6865      	ldr	r5, [r4, #4]
 800ccc8:	60a5      	str	r5, [r4, #8]
 800ccca:	2d00      	cmp	r5, #0
 800cccc:	bfa2      	ittt	ge
 800ccce:	6821      	ldrge	r1, [r4, #0]
 800ccd0:	f021 0104 	bicge.w	r1, r1, #4
 800ccd4:	6021      	strge	r1, [r4, #0]
 800ccd6:	b90e      	cbnz	r6, 800ccdc <_printf_i+0x114>
 800ccd8:	2d00      	cmp	r5, #0
 800ccda:	d04b      	beq.n	800cd74 <_printf_i+0x1ac>
 800ccdc:	4615      	mov	r5, r2
 800ccde:	fbb6 f1f3 	udiv	r1, r6, r3
 800cce2:	fb03 6711 	mls	r7, r3, r1, r6
 800cce6:	5dc7      	ldrb	r7, [r0, r7]
 800cce8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ccec:	4637      	mov	r7, r6
 800ccee:	42bb      	cmp	r3, r7
 800ccf0:	460e      	mov	r6, r1
 800ccf2:	d9f4      	bls.n	800ccde <_printf_i+0x116>
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d10b      	bne.n	800cd10 <_printf_i+0x148>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	07de      	lsls	r6, r3, #31
 800ccfc:	d508      	bpl.n	800cd10 <_printf_i+0x148>
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	6861      	ldr	r1, [r4, #4]
 800cd02:	4299      	cmp	r1, r3
 800cd04:	bfde      	ittt	le
 800cd06:	2330      	movle	r3, #48	; 0x30
 800cd08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd10:	1b52      	subs	r2, r2, r5
 800cd12:	6122      	str	r2, [r4, #16]
 800cd14:	f8cd a000 	str.w	sl, [sp]
 800cd18:	464b      	mov	r3, r9
 800cd1a:	aa03      	add	r2, sp, #12
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4640      	mov	r0, r8
 800cd20:	f7ff fee4 	bl	800caec <_printf_common>
 800cd24:	3001      	adds	r0, #1
 800cd26:	d14a      	bne.n	800cdbe <_printf_i+0x1f6>
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd2c:	b004      	add	sp, #16
 800cd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	f043 0320 	orr.w	r3, r3, #32
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	4833      	ldr	r0, [pc, #204]	; (800ce08 <_printf_i+0x240>)
 800cd3c:	2778      	movs	r7, #120	; 0x78
 800cd3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	6829      	ldr	r1, [r5, #0]
 800cd46:	061f      	lsls	r7, r3, #24
 800cd48:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd4c:	d402      	bmi.n	800cd54 <_printf_i+0x18c>
 800cd4e:	065f      	lsls	r7, r3, #25
 800cd50:	bf48      	it	mi
 800cd52:	b2b6      	uxthmi	r6, r6
 800cd54:	07df      	lsls	r7, r3, #31
 800cd56:	bf48      	it	mi
 800cd58:	f043 0320 	orrmi.w	r3, r3, #32
 800cd5c:	6029      	str	r1, [r5, #0]
 800cd5e:	bf48      	it	mi
 800cd60:	6023      	strmi	r3, [r4, #0]
 800cd62:	b91e      	cbnz	r6, 800cd6c <_printf_i+0x1a4>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	f023 0320 	bic.w	r3, r3, #32
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	2310      	movs	r3, #16
 800cd6e:	e7a7      	b.n	800ccc0 <_printf_i+0xf8>
 800cd70:	4824      	ldr	r0, [pc, #144]	; (800ce04 <_printf_i+0x23c>)
 800cd72:	e7e4      	b.n	800cd3e <_printf_i+0x176>
 800cd74:	4615      	mov	r5, r2
 800cd76:	e7bd      	b.n	800ccf4 <_printf_i+0x12c>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	6826      	ldr	r6, [r4, #0]
 800cd7c:	6961      	ldr	r1, [r4, #20]
 800cd7e:	1d18      	adds	r0, r3, #4
 800cd80:	6028      	str	r0, [r5, #0]
 800cd82:	0635      	lsls	r5, r6, #24
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	d501      	bpl.n	800cd8c <_printf_i+0x1c4>
 800cd88:	6019      	str	r1, [r3, #0]
 800cd8a:	e002      	b.n	800cd92 <_printf_i+0x1ca>
 800cd8c:	0670      	lsls	r0, r6, #25
 800cd8e:	d5fb      	bpl.n	800cd88 <_printf_i+0x1c0>
 800cd90:	8019      	strh	r1, [r3, #0]
 800cd92:	2300      	movs	r3, #0
 800cd94:	6123      	str	r3, [r4, #16]
 800cd96:	4615      	mov	r5, r2
 800cd98:	e7bc      	b.n	800cd14 <_printf_i+0x14c>
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	602a      	str	r2, [r5, #0]
 800cda0:	681d      	ldr	r5, [r3, #0]
 800cda2:	6862      	ldr	r2, [r4, #4]
 800cda4:	2100      	movs	r1, #0
 800cda6:	4628      	mov	r0, r5
 800cda8:	f7f3 fa12 	bl	80001d0 <memchr>
 800cdac:	b108      	cbz	r0, 800cdb2 <_printf_i+0x1ea>
 800cdae:	1b40      	subs	r0, r0, r5
 800cdb0:	6060      	str	r0, [r4, #4]
 800cdb2:	6863      	ldr	r3, [r4, #4]
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdbc:	e7aa      	b.n	800cd14 <_printf_i+0x14c>
 800cdbe:	6923      	ldr	r3, [r4, #16]
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4649      	mov	r1, r9
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	47d0      	blx	sl
 800cdc8:	3001      	adds	r0, #1
 800cdca:	d0ad      	beq.n	800cd28 <_printf_i+0x160>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	079b      	lsls	r3, r3, #30
 800cdd0:	d413      	bmi.n	800cdfa <_printf_i+0x232>
 800cdd2:	68e0      	ldr	r0, [r4, #12]
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	4298      	cmp	r0, r3
 800cdd8:	bfb8      	it	lt
 800cdda:	4618      	movlt	r0, r3
 800cddc:	e7a6      	b.n	800cd2c <_printf_i+0x164>
 800cdde:	2301      	movs	r3, #1
 800cde0:	4632      	mov	r2, r6
 800cde2:	4649      	mov	r1, r9
 800cde4:	4640      	mov	r0, r8
 800cde6:	47d0      	blx	sl
 800cde8:	3001      	adds	r0, #1
 800cdea:	d09d      	beq.n	800cd28 <_printf_i+0x160>
 800cdec:	3501      	adds	r5, #1
 800cdee:	68e3      	ldr	r3, [r4, #12]
 800cdf0:	9903      	ldr	r1, [sp, #12]
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	42ab      	cmp	r3, r5
 800cdf6:	dcf2      	bgt.n	800cdde <_printf_i+0x216>
 800cdf8:	e7eb      	b.n	800cdd2 <_printf_i+0x20a>
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	f104 0619 	add.w	r6, r4, #25
 800ce00:	e7f5      	b.n	800cdee <_printf_i+0x226>
 800ce02:	bf00      	nop
 800ce04:	0800fa7e 	.word	0x0800fa7e
 800ce08:	0800fa8f 	.word	0x0800fa8f

0800ce0c <siprintf>:
 800ce0c:	b40e      	push	{r1, r2, r3}
 800ce0e:	b500      	push	{lr}
 800ce10:	b09c      	sub	sp, #112	; 0x70
 800ce12:	ab1d      	add	r3, sp, #116	; 0x74
 800ce14:	9002      	str	r0, [sp, #8]
 800ce16:	9006      	str	r0, [sp, #24]
 800ce18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce1c:	4809      	ldr	r0, [pc, #36]	; (800ce44 <siprintf+0x38>)
 800ce1e:	9107      	str	r1, [sp, #28]
 800ce20:	9104      	str	r1, [sp, #16]
 800ce22:	4909      	ldr	r1, [pc, #36]	; (800ce48 <siprintf+0x3c>)
 800ce24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce28:	9105      	str	r1, [sp, #20]
 800ce2a:	6800      	ldr	r0, [r0, #0]
 800ce2c:	9301      	str	r3, [sp, #4]
 800ce2e:	a902      	add	r1, sp, #8
 800ce30:	f000 ffea 	bl	800de08 <_svfiprintf_r>
 800ce34:	9b02      	ldr	r3, [sp, #8]
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	b01c      	add	sp, #112	; 0x70
 800ce3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce40:	b003      	add	sp, #12
 800ce42:	4770      	bx	lr
 800ce44:	20000164 	.word	0x20000164
 800ce48:	ffff0208 	.word	0xffff0208

0800ce4c <std>:
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	b510      	push	{r4, lr}
 800ce50:	4604      	mov	r4, r0
 800ce52:	e9c0 3300 	strd	r3, r3, [r0]
 800ce56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce5a:	6083      	str	r3, [r0, #8]
 800ce5c:	8181      	strh	r1, [r0, #12]
 800ce5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce60:	81c2      	strh	r2, [r0, #14]
 800ce62:	6183      	str	r3, [r0, #24]
 800ce64:	4619      	mov	r1, r3
 800ce66:	2208      	movs	r2, #8
 800ce68:	305c      	adds	r0, #92	; 0x5c
 800ce6a:	f000 f8b1 	bl	800cfd0 <memset>
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	; (800cea4 <std+0x58>)
 800ce70:	6263      	str	r3, [r4, #36]	; 0x24
 800ce72:	4b0d      	ldr	r3, [pc, #52]	; (800cea8 <std+0x5c>)
 800ce74:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce76:	4b0d      	ldr	r3, [pc, #52]	; (800ceac <std+0x60>)
 800ce78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <std+0x64>)
 800ce7c:	6323      	str	r3, [r4, #48]	; 0x30
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <std+0x68>)
 800ce80:	6224      	str	r4, [r4, #32]
 800ce82:	429c      	cmp	r4, r3
 800ce84:	d006      	beq.n	800ce94 <std+0x48>
 800ce86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ce8a:	4294      	cmp	r4, r2
 800ce8c:	d002      	beq.n	800ce94 <std+0x48>
 800ce8e:	33d0      	adds	r3, #208	; 0xd0
 800ce90:	429c      	cmp	r4, r3
 800ce92:	d105      	bne.n	800cea0 <std+0x54>
 800ce94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce9c:	f000 b8ce 	b.w	800d03c <__retarget_lock_init_recursive>
 800cea0:	bd10      	pop	{r4, pc}
 800cea2:	bf00      	nop
 800cea4:	0800e9c1 	.word	0x0800e9c1
 800cea8:	0800e9e3 	.word	0x0800e9e3
 800ceac:	0800ea1b 	.word	0x0800ea1b
 800ceb0:	0800ea3f 	.word	0x0800ea3f
 800ceb4:	200022f0 	.word	0x200022f0

0800ceb8 <stdio_exit_handler>:
 800ceb8:	4a02      	ldr	r2, [pc, #8]	; (800cec4 <stdio_exit_handler+0xc>)
 800ceba:	4903      	ldr	r1, [pc, #12]	; (800cec8 <stdio_exit_handler+0x10>)
 800cebc:	4803      	ldr	r0, [pc, #12]	; (800cecc <stdio_exit_handler+0x14>)
 800cebe:	f000 b869 	b.w	800cf94 <_fwalk_sglue>
 800cec2:	bf00      	nop
 800cec4:	2000010c 	.word	0x2000010c
 800cec8:	0800e261 	.word	0x0800e261
 800cecc:	20000118 	.word	0x20000118

0800ced0 <cleanup_stdio>:
 800ced0:	6841      	ldr	r1, [r0, #4]
 800ced2:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <cleanup_stdio+0x34>)
 800ced4:	4299      	cmp	r1, r3
 800ced6:	b510      	push	{r4, lr}
 800ced8:	4604      	mov	r4, r0
 800ceda:	d001      	beq.n	800cee0 <cleanup_stdio+0x10>
 800cedc:	f001 f9c0 	bl	800e260 <_fflush_r>
 800cee0:	68a1      	ldr	r1, [r4, #8]
 800cee2:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <cleanup_stdio+0x38>)
 800cee4:	4299      	cmp	r1, r3
 800cee6:	d002      	beq.n	800ceee <cleanup_stdio+0x1e>
 800cee8:	4620      	mov	r0, r4
 800ceea:	f001 f9b9 	bl	800e260 <_fflush_r>
 800ceee:	68e1      	ldr	r1, [r4, #12]
 800cef0:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <cleanup_stdio+0x3c>)
 800cef2:	4299      	cmp	r1, r3
 800cef4:	d004      	beq.n	800cf00 <cleanup_stdio+0x30>
 800cef6:	4620      	mov	r0, r4
 800cef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cefc:	f001 b9b0 	b.w	800e260 <_fflush_r>
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	bf00      	nop
 800cf04:	200022f0 	.word	0x200022f0
 800cf08:	20002358 	.word	0x20002358
 800cf0c:	200023c0 	.word	0x200023c0

0800cf10 <global_stdio_init.part.0>:
 800cf10:	b510      	push	{r4, lr}
 800cf12:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <global_stdio_init.part.0+0x30>)
 800cf14:	4c0b      	ldr	r4, [pc, #44]	; (800cf44 <global_stdio_init.part.0+0x34>)
 800cf16:	4a0c      	ldr	r2, [pc, #48]	; (800cf48 <global_stdio_init.part.0+0x38>)
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2104      	movs	r1, #4
 800cf20:	f7ff ff94 	bl	800ce4c <std>
 800cf24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cf28:	2201      	movs	r2, #1
 800cf2a:	2109      	movs	r1, #9
 800cf2c:	f7ff ff8e 	bl	800ce4c <std>
 800cf30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cf34:	2202      	movs	r2, #2
 800cf36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3a:	2112      	movs	r1, #18
 800cf3c:	f7ff bf86 	b.w	800ce4c <std>
 800cf40:	20002428 	.word	0x20002428
 800cf44:	200022f0 	.word	0x200022f0
 800cf48:	0800ceb9 	.word	0x0800ceb9

0800cf4c <__sfp_lock_acquire>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	; (800cf54 <__sfp_lock_acquire+0x8>)
 800cf4e:	f000 b876 	b.w	800d03e <__retarget_lock_acquire_recursive>
 800cf52:	bf00      	nop
 800cf54:	2000242d 	.word	0x2000242d

0800cf58 <__sfp_lock_release>:
 800cf58:	4801      	ldr	r0, [pc, #4]	; (800cf60 <__sfp_lock_release+0x8>)
 800cf5a:	f000 b871 	b.w	800d040 <__retarget_lock_release_recursive>
 800cf5e:	bf00      	nop
 800cf60:	2000242d 	.word	0x2000242d

0800cf64 <__sinit>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4604      	mov	r4, r0
 800cf68:	f7ff fff0 	bl	800cf4c <__sfp_lock_acquire>
 800cf6c:	6a23      	ldr	r3, [r4, #32]
 800cf6e:	b11b      	cbz	r3, 800cf78 <__sinit+0x14>
 800cf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf74:	f7ff bff0 	b.w	800cf58 <__sfp_lock_release>
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <__sinit+0x28>)
 800cf7a:	6223      	str	r3, [r4, #32]
 800cf7c:	4b04      	ldr	r3, [pc, #16]	; (800cf90 <__sinit+0x2c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f5      	bne.n	800cf70 <__sinit+0xc>
 800cf84:	f7ff ffc4 	bl	800cf10 <global_stdio_init.part.0>
 800cf88:	e7f2      	b.n	800cf70 <__sinit+0xc>
 800cf8a:	bf00      	nop
 800cf8c:	0800ced1 	.word	0x0800ced1
 800cf90:	20002428 	.word	0x20002428

0800cf94 <_fwalk_sglue>:
 800cf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf98:	4607      	mov	r7, r0
 800cf9a:	4688      	mov	r8, r1
 800cf9c:	4614      	mov	r4, r2
 800cf9e:	2600      	movs	r6, #0
 800cfa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfa4:	f1b9 0901 	subs.w	r9, r9, #1
 800cfa8:	d505      	bpl.n	800cfb6 <_fwalk_sglue+0x22>
 800cfaa:	6824      	ldr	r4, [r4, #0]
 800cfac:	2c00      	cmp	r4, #0
 800cfae:	d1f7      	bne.n	800cfa0 <_fwalk_sglue+0xc>
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d907      	bls.n	800cfcc <_fwalk_sglue+0x38>
 800cfbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	d003      	beq.n	800cfcc <_fwalk_sglue+0x38>
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	47c0      	blx	r8
 800cfca:	4306      	orrs	r6, r0
 800cfcc:	3568      	adds	r5, #104	; 0x68
 800cfce:	e7e9      	b.n	800cfa4 <_fwalk_sglue+0x10>

0800cfd0 <memset>:
 800cfd0:	4402      	add	r2, r0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d100      	bne.n	800cfda <memset+0xa>
 800cfd8:	4770      	bx	lr
 800cfda:	f803 1b01 	strb.w	r1, [r3], #1
 800cfde:	e7f9      	b.n	800cfd4 <memset+0x4>

0800cfe0 <_localeconv_r>:
 800cfe0:	4800      	ldr	r0, [pc, #0]	; (800cfe4 <_localeconv_r+0x4>)
 800cfe2:	4770      	bx	lr
 800cfe4:	20000258 	.word	0x20000258

0800cfe8 <__errno>:
 800cfe8:	4b01      	ldr	r3, [pc, #4]	; (800cff0 <__errno+0x8>)
 800cfea:	6818      	ldr	r0, [r3, #0]
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	20000164 	.word	0x20000164

0800cff4 <__libc_init_array>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	4d0d      	ldr	r5, [pc, #52]	; (800d02c <__libc_init_array+0x38>)
 800cff8:	4c0d      	ldr	r4, [pc, #52]	; (800d030 <__libc_init_array+0x3c>)
 800cffa:	1b64      	subs	r4, r4, r5
 800cffc:	10a4      	asrs	r4, r4, #2
 800cffe:	2600      	movs	r6, #0
 800d000:	42a6      	cmp	r6, r4
 800d002:	d109      	bne.n	800d018 <__libc_init_array+0x24>
 800d004:	4d0b      	ldr	r5, [pc, #44]	; (800d034 <__libc_init_array+0x40>)
 800d006:	4c0c      	ldr	r4, [pc, #48]	; (800d038 <__libc_init_array+0x44>)
 800d008:	f002 f91e 	bl	800f248 <_init>
 800d00c:	1b64      	subs	r4, r4, r5
 800d00e:	10a4      	asrs	r4, r4, #2
 800d010:	2600      	movs	r6, #0
 800d012:	42a6      	cmp	r6, r4
 800d014:	d105      	bne.n	800d022 <__libc_init_array+0x2e>
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	f855 3b04 	ldr.w	r3, [r5], #4
 800d01c:	4798      	blx	r3
 800d01e:	3601      	adds	r6, #1
 800d020:	e7ee      	b.n	800d000 <__libc_init_array+0xc>
 800d022:	f855 3b04 	ldr.w	r3, [r5], #4
 800d026:	4798      	blx	r3
 800d028:	3601      	adds	r6, #1
 800d02a:	e7f2      	b.n	800d012 <__libc_init_array+0x1e>
 800d02c:	0800fddc 	.word	0x0800fddc
 800d030:	0800fddc 	.word	0x0800fddc
 800d034:	0800fddc 	.word	0x0800fddc
 800d038:	0800fde0 	.word	0x0800fde0

0800d03c <__retarget_lock_init_recursive>:
 800d03c:	4770      	bx	lr

0800d03e <__retarget_lock_acquire_recursive>:
 800d03e:	4770      	bx	lr

0800d040 <__retarget_lock_release_recursive>:
 800d040:	4770      	bx	lr

0800d042 <memcpy>:
 800d042:	440a      	add	r2, r1
 800d044:	4291      	cmp	r1, r2
 800d046:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d04a:	d100      	bne.n	800d04e <memcpy+0xc>
 800d04c:	4770      	bx	lr
 800d04e:	b510      	push	{r4, lr}
 800d050:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d054:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d058:	4291      	cmp	r1, r2
 800d05a:	d1f9      	bne.n	800d050 <memcpy+0xe>
 800d05c:	bd10      	pop	{r4, pc}

0800d05e <quorem>:
 800d05e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d062:	6903      	ldr	r3, [r0, #16]
 800d064:	690c      	ldr	r4, [r1, #16]
 800d066:	42a3      	cmp	r3, r4
 800d068:	4607      	mov	r7, r0
 800d06a:	db7e      	blt.n	800d16a <quorem+0x10c>
 800d06c:	3c01      	subs	r4, #1
 800d06e:	f101 0814 	add.w	r8, r1, #20
 800d072:	f100 0514 	add.w	r5, r0, #20
 800d076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d084:	3301      	adds	r3, #1
 800d086:	429a      	cmp	r2, r3
 800d088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d08c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d090:	fbb2 f6f3 	udiv	r6, r2, r3
 800d094:	d331      	bcc.n	800d0fa <quorem+0x9c>
 800d096:	f04f 0e00 	mov.w	lr, #0
 800d09a:	4640      	mov	r0, r8
 800d09c:	46ac      	mov	ip, r5
 800d09e:	46f2      	mov	sl, lr
 800d0a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0a4:	b293      	uxth	r3, r2
 800d0a6:	fb06 e303 	mla	r3, r6, r3, lr
 800d0aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0ae:	0c1a      	lsrs	r2, r3, #16
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	ebaa 0303 	sub.w	r3, sl, r3
 800d0b6:	f8dc a000 	ldr.w	sl, [ip]
 800d0ba:	fa13 f38a 	uxtah	r3, r3, sl
 800d0be:	fb06 220e 	mla	r2, r6, lr, r2
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	9b00      	ldr	r3, [sp, #0]
 800d0c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0ca:	b292      	uxth	r2, r2
 800d0cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d0d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d0d8:	4581      	cmp	r9, r0
 800d0da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0de:	f84c 3b04 	str.w	r3, [ip], #4
 800d0e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d0e6:	d2db      	bcs.n	800d0a0 <quorem+0x42>
 800d0e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d0ec:	b92b      	cbnz	r3, 800d0fa <quorem+0x9c>
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	3b04      	subs	r3, #4
 800d0f2:	429d      	cmp	r5, r3
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	d32c      	bcc.n	800d152 <quorem+0xf4>
 800d0f8:	613c      	str	r4, [r7, #16]
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	f001 fb60 	bl	800e7c0 <__mcmp>
 800d100:	2800      	cmp	r0, #0
 800d102:	db22      	blt.n	800d14a <quorem+0xec>
 800d104:	3601      	adds	r6, #1
 800d106:	4629      	mov	r1, r5
 800d108:	2000      	movs	r0, #0
 800d10a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d10e:	f8d1 c000 	ldr.w	ip, [r1]
 800d112:	b293      	uxth	r3, r2
 800d114:	1ac3      	subs	r3, r0, r3
 800d116:	0c12      	lsrs	r2, r2, #16
 800d118:	fa13 f38c 	uxtah	r3, r3, ip
 800d11c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d124:	b29b      	uxth	r3, r3
 800d126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d12a:	45c1      	cmp	r9, r8
 800d12c:	f841 3b04 	str.w	r3, [r1], #4
 800d130:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d134:	d2e9      	bcs.n	800d10a <quorem+0xac>
 800d136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d13a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d13e:	b922      	cbnz	r2, 800d14a <quorem+0xec>
 800d140:	3b04      	subs	r3, #4
 800d142:	429d      	cmp	r5, r3
 800d144:	461a      	mov	r2, r3
 800d146:	d30a      	bcc.n	800d15e <quorem+0x100>
 800d148:	613c      	str	r4, [r7, #16]
 800d14a:	4630      	mov	r0, r6
 800d14c:	b003      	add	sp, #12
 800d14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d152:	6812      	ldr	r2, [r2, #0]
 800d154:	3b04      	subs	r3, #4
 800d156:	2a00      	cmp	r2, #0
 800d158:	d1ce      	bne.n	800d0f8 <quorem+0x9a>
 800d15a:	3c01      	subs	r4, #1
 800d15c:	e7c9      	b.n	800d0f2 <quorem+0x94>
 800d15e:	6812      	ldr	r2, [r2, #0]
 800d160:	3b04      	subs	r3, #4
 800d162:	2a00      	cmp	r2, #0
 800d164:	d1f0      	bne.n	800d148 <quorem+0xea>
 800d166:	3c01      	subs	r4, #1
 800d168:	e7eb      	b.n	800d142 <quorem+0xe4>
 800d16a:	2000      	movs	r0, #0
 800d16c:	e7ee      	b.n	800d14c <quorem+0xee>
	...

0800d170 <_dtoa_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	ed2d 8b04 	vpush	{d8-d9}
 800d178:	69c5      	ldr	r5, [r0, #28]
 800d17a:	b093      	sub	sp, #76	; 0x4c
 800d17c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d180:	ec57 6b10 	vmov	r6, r7, d0
 800d184:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d188:	9107      	str	r1, [sp, #28]
 800d18a:	4604      	mov	r4, r0
 800d18c:	920a      	str	r2, [sp, #40]	; 0x28
 800d18e:	930d      	str	r3, [sp, #52]	; 0x34
 800d190:	b975      	cbnz	r5, 800d1b0 <_dtoa_r+0x40>
 800d192:	2010      	movs	r0, #16
 800d194:	f000 ff36 	bl	800e004 <malloc>
 800d198:	4602      	mov	r2, r0
 800d19a:	61e0      	str	r0, [r4, #28]
 800d19c:	b920      	cbnz	r0, 800d1a8 <_dtoa_r+0x38>
 800d19e:	4bae      	ldr	r3, [pc, #696]	; (800d458 <_dtoa_r+0x2e8>)
 800d1a0:	21ef      	movs	r1, #239	; 0xef
 800d1a2:	48ae      	ldr	r0, [pc, #696]	; (800d45c <_dtoa_r+0x2ec>)
 800d1a4:	f001 fcee 	bl	800eb84 <__assert_func>
 800d1a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1ac:	6005      	str	r5, [r0, #0]
 800d1ae:	60c5      	str	r5, [r0, #12]
 800d1b0:	69e3      	ldr	r3, [r4, #28]
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	b151      	cbz	r1, 800d1cc <_dtoa_r+0x5c>
 800d1b6:	685a      	ldr	r2, [r3, #4]
 800d1b8:	604a      	str	r2, [r1, #4]
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	4093      	lsls	r3, r2
 800d1be:	608b      	str	r3, [r1, #8]
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f001 f8c1 	bl	800e348 <_Bfree>
 800d1c6:	69e3      	ldr	r3, [r4, #28]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	1e3b      	subs	r3, r7, #0
 800d1ce:	bfbb      	ittet	lt
 800d1d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d1d4:	9303      	strlt	r3, [sp, #12]
 800d1d6:	2300      	movge	r3, #0
 800d1d8:	2201      	movlt	r2, #1
 800d1da:	bfac      	ite	ge
 800d1dc:	f8c8 3000 	strge.w	r3, [r8]
 800d1e0:	f8c8 2000 	strlt.w	r2, [r8]
 800d1e4:	4b9e      	ldr	r3, [pc, #632]	; (800d460 <_dtoa_r+0x2f0>)
 800d1e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d1ea:	ea33 0308 	bics.w	r3, r3, r8
 800d1ee:	d11b      	bne.n	800d228 <_dtoa_r+0xb8>
 800d1f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d1f6:	6013      	str	r3, [r2, #0]
 800d1f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d1fc:	4333      	orrs	r3, r6
 800d1fe:	f000 8593 	beq.w	800dd28 <_dtoa_r+0xbb8>
 800d202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d204:	b963      	cbnz	r3, 800d220 <_dtoa_r+0xb0>
 800d206:	4b97      	ldr	r3, [pc, #604]	; (800d464 <_dtoa_r+0x2f4>)
 800d208:	e027      	b.n	800d25a <_dtoa_r+0xea>
 800d20a:	4b97      	ldr	r3, [pc, #604]	; (800d468 <_dtoa_r+0x2f8>)
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	3308      	adds	r3, #8
 800d210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	9800      	ldr	r0, [sp, #0]
 800d216:	b013      	add	sp, #76	; 0x4c
 800d218:	ecbd 8b04 	vpop	{d8-d9}
 800d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d220:	4b90      	ldr	r3, [pc, #576]	; (800d464 <_dtoa_r+0x2f4>)
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	3303      	adds	r3, #3
 800d226:	e7f3      	b.n	800d210 <_dtoa_r+0xa0>
 800d228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d22c:	2200      	movs	r2, #0
 800d22e:	ec51 0b17 	vmov	r0, r1, d7
 800d232:	eeb0 8a47 	vmov.f32	s16, s14
 800d236:	eef0 8a67 	vmov.f32	s17, s15
 800d23a:	2300      	movs	r3, #0
 800d23c:	f7f3 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 800d240:	4681      	mov	r9, r0
 800d242:	b160      	cbz	r0, 800d25e <_dtoa_r+0xee>
 800d244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d246:	2301      	movs	r3, #1
 800d248:	6013      	str	r3, [r2, #0]
 800d24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f000 8568 	beq.w	800dd22 <_dtoa_r+0xbb2>
 800d252:	4b86      	ldr	r3, [pc, #536]	; (800d46c <_dtoa_r+0x2fc>)
 800d254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	3b01      	subs	r3, #1
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	e7da      	b.n	800d214 <_dtoa_r+0xa4>
 800d25e:	aa10      	add	r2, sp, #64	; 0x40
 800d260:	a911      	add	r1, sp, #68	; 0x44
 800d262:	4620      	mov	r0, r4
 800d264:	eeb0 0a48 	vmov.f32	s0, s16
 800d268:	eef0 0a68 	vmov.f32	s1, s17
 800d26c:	f001 fb4e 	bl	800e90c <__d2b>
 800d270:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d274:	4682      	mov	sl, r0
 800d276:	2d00      	cmp	r5, #0
 800d278:	d07f      	beq.n	800d37a <_dtoa_r+0x20a>
 800d27a:	ee18 3a90 	vmov	r3, s17
 800d27e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d282:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d286:	ec51 0b18 	vmov	r0, r1, d8
 800d28a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d28e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d292:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d296:	4619      	mov	r1, r3
 800d298:	2200      	movs	r2, #0
 800d29a:	4b75      	ldr	r3, [pc, #468]	; (800d470 <_dtoa_r+0x300>)
 800d29c:	f7f2 fff4 	bl	8000288 <__aeabi_dsub>
 800d2a0:	a367      	add	r3, pc, #412	; (adr r3, 800d440 <_dtoa_r+0x2d0>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f3 f9a7 	bl	80005f8 <__aeabi_dmul>
 800d2aa:	a367      	add	r3, pc, #412	; (adr r3, 800d448 <_dtoa_r+0x2d8>)
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f7f2 ffec 	bl	800028c <__adddf3>
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	f7f3 f933 	bl	8000524 <__aeabi_i2d>
 800d2be:	a364      	add	r3, pc, #400	; (adr r3, 800d450 <_dtoa_r+0x2e0>)
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	f7f3 f998 	bl	80005f8 <__aeabi_dmul>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	f7f2 ffdc 	bl	800028c <__adddf3>
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	460f      	mov	r7, r1
 800d2d8:	f7f3 fc3e 	bl	8000b58 <__aeabi_d2iz>
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4683      	mov	fp, r0
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f3 fbf9 	bl	8000adc <__aeabi_dcmplt>
 800d2ea:	b148      	cbz	r0, 800d300 <_dtoa_r+0x190>
 800d2ec:	4658      	mov	r0, fp
 800d2ee:	f7f3 f919 	bl	8000524 <__aeabi_i2d>
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	f7f3 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2fa:	b908      	cbnz	r0, 800d300 <_dtoa_r+0x190>
 800d2fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d300:	f1bb 0f16 	cmp.w	fp, #22
 800d304:	d857      	bhi.n	800d3b6 <_dtoa_r+0x246>
 800d306:	4b5b      	ldr	r3, [pc, #364]	; (800d474 <_dtoa_r+0x304>)
 800d308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	ec51 0b18 	vmov	r0, r1, d8
 800d314:	f7f3 fbe2 	bl	8000adc <__aeabi_dcmplt>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d04e      	beq.n	800d3ba <_dtoa_r+0x24a>
 800d31c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d320:	2300      	movs	r3, #0
 800d322:	930c      	str	r3, [sp, #48]	; 0x30
 800d324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d326:	1b5b      	subs	r3, r3, r5
 800d328:	1e5a      	subs	r2, r3, #1
 800d32a:	bf45      	ittet	mi
 800d32c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d330:	9305      	strmi	r3, [sp, #20]
 800d332:	2300      	movpl	r3, #0
 800d334:	2300      	movmi	r3, #0
 800d336:	9206      	str	r2, [sp, #24]
 800d338:	bf54      	ite	pl
 800d33a:	9305      	strpl	r3, [sp, #20]
 800d33c:	9306      	strmi	r3, [sp, #24]
 800d33e:	f1bb 0f00 	cmp.w	fp, #0
 800d342:	db3c      	blt.n	800d3be <_dtoa_r+0x24e>
 800d344:	9b06      	ldr	r3, [sp, #24]
 800d346:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d34a:	445b      	add	r3, fp
 800d34c:	9306      	str	r3, [sp, #24]
 800d34e:	2300      	movs	r3, #0
 800d350:	9308      	str	r3, [sp, #32]
 800d352:	9b07      	ldr	r3, [sp, #28]
 800d354:	2b09      	cmp	r3, #9
 800d356:	d868      	bhi.n	800d42a <_dtoa_r+0x2ba>
 800d358:	2b05      	cmp	r3, #5
 800d35a:	bfc4      	itt	gt
 800d35c:	3b04      	subgt	r3, #4
 800d35e:	9307      	strgt	r3, [sp, #28]
 800d360:	9b07      	ldr	r3, [sp, #28]
 800d362:	f1a3 0302 	sub.w	r3, r3, #2
 800d366:	bfcc      	ite	gt
 800d368:	2500      	movgt	r5, #0
 800d36a:	2501      	movle	r5, #1
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	f200 8085 	bhi.w	800d47c <_dtoa_r+0x30c>
 800d372:	e8df f003 	tbb	[pc, r3]
 800d376:	3b2e      	.short	0x3b2e
 800d378:	5839      	.short	0x5839
 800d37a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d37e:	441d      	add	r5, r3
 800d380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d384:	2b20      	cmp	r3, #32
 800d386:	bfc1      	itttt	gt
 800d388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d38c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d390:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d394:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d398:	bfd6      	itet	le
 800d39a:	f1c3 0320 	rsble	r3, r3, #32
 800d39e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d3a2:	fa06 f003 	lslle.w	r0, r6, r3
 800d3a6:	f7f3 f8ad 	bl	8000504 <__aeabi_ui2d>
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d3b0:	3d01      	subs	r5, #1
 800d3b2:	920e      	str	r2, [sp, #56]	; 0x38
 800d3b4:	e76f      	b.n	800d296 <_dtoa_r+0x126>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e7b3      	b.n	800d322 <_dtoa_r+0x1b2>
 800d3ba:	900c      	str	r0, [sp, #48]	; 0x30
 800d3bc:	e7b2      	b.n	800d324 <_dtoa_r+0x1b4>
 800d3be:	9b05      	ldr	r3, [sp, #20]
 800d3c0:	eba3 030b 	sub.w	r3, r3, fp
 800d3c4:	9305      	str	r3, [sp, #20]
 800d3c6:	f1cb 0300 	rsb	r3, fp, #0
 800d3ca:	9308      	str	r3, [sp, #32]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3d0:	e7bf      	b.n	800d352 <_dtoa_r+0x1e2>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	dc52      	bgt.n	800d482 <_dtoa_r+0x312>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	9304      	str	r3, [sp, #16]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800d3e6:	e00b      	b.n	800d400 <_dtoa_r+0x290>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e7f3      	b.n	800d3d4 <_dtoa_r+0x264>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3f2:	445b      	add	r3, fp
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	bfb8      	it	lt
 800d3fe:	2301      	movlt	r3, #1
 800d400:	69e0      	ldr	r0, [r4, #28]
 800d402:	2100      	movs	r1, #0
 800d404:	2204      	movs	r2, #4
 800d406:	f102 0614 	add.w	r6, r2, #20
 800d40a:	429e      	cmp	r6, r3
 800d40c:	d93d      	bls.n	800d48a <_dtoa_r+0x31a>
 800d40e:	6041      	str	r1, [r0, #4]
 800d410:	4620      	mov	r0, r4
 800d412:	f000 ff59 	bl	800e2c8 <_Balloc>
 800d416:	9000      	str	r0, [sp, #0]
 800d418:	2800      	cmp	r0, #0
 800d41a:	d139      	bne.n	800d490 <_dtoa_r+0x320>
 800d41c:	4b16      	ldr	r3, [pc, #88]	; (800d478 <_dtoa_r+0x308>)
 800d41e:	4602      	mov	r2, r0
 800d420:	f240 11af 	movw	r1, #431	; 0x1af
 800d424:	e6bd      	b.n	800d1a2 <_dtoa_r+0x32>
 800d426:	2301      	movs	r3, #1
 800d428:	e7e1      	b.n	800d3ee <_dtoa_r+0x27e>
 800d42a:	2501      	movs	r5, #1
 800d42c:	2300      	movs	r3, #0
 800d42e:	9307      	str	r3, [sp, #28]
 800d430:	9509      	str	r5, [sp, #36]	; 0x24
 800d432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	9304      	str	r3, [sp, #16]
 800d43a:	2200      	movs	r2, #0
 800d43c:	2312      	movs	r3, #18
 800d43e:	e7d1      	b.n	800d3e4 <_dtoa_r+0x274>
 800d440:	636f4361 	.word	0x636f4361
 800d444:	3fd287a7 	.word	0x3fd287a7
 800d448:	8b60c8b3 	.word	0x8b60c8b3
 800d44c:	3fc68a28 	.word	0x3fc68a28
 800d450:	509f79fb 	.word	0x509f79fb
 800d454:	3fd34413 	.word	0x3fd34413
 800d458:	0800faad 	.word	0x0800faad
 800d45c:	0800fac4 	.word	0x0800fac4
 800d460:	7ff00000 	.word	0x7ff00000
 800d464:	0800faa9 	.word	0x0800faa9
 800d468:	0800faa0 	.word	0x0800faa0
 800d46c:	0800fa7d 	.word	0x0800fa7d
 800d470:	3ff80000 	.word	0x3ff80000
 800d474:	0800fbc0 	.word	0x0800fbc0
 800d478:	0800fb1c 	.word	0x0800fb1c
 800d47c:	2301      	movs	r3, #1
 800d47e:	9309      	str	r3, [sp, #36]	; 0x24
 800d480:	e7d7      	b.n	800d432 <_dtoa_r+0x2c2>
 800d482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	9304      	str	r3, [sp, #16]
 800d488:	e7ba      	b.n	800d400 <_dtoa_r+0x290>
 800d48a:	3101      	adds	r1, #1
 800d48c:	0052      	lsls	r2, r2, #1
 800d48e:	e7ba      	b.n	800d406 <_dtoa_r+0x296>
 800d490:	69e3      	ldr	r3, [r4, #28]
 800d492:	9a00      	ldr	r2, [sp, #0]
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	9b04      	ldr	r3, [sp, #16]
 800d498:	2b0e      	cmp	r3, #14
 800d49a:	f200 80a8 	bhi.w	800d5ee <_dtoa_r+0x47e>
 800d49e:	2d00      	cmp	r5, #0
 800d4a0:	f000 80a5 	beq.w	800d5ee <_dtoa_r+0x47e>
 800d4a4:	f1bb 0f00 	cmp.w	fp, #0
 800d4a8:	dd38      	ble.n	800d51c <_dtoa_r+0x3ac>
 800d4aa:	4bc0      	ldr	r3, [pc, #768]	; (800d7ac <_dtoa_r+0x63c>)
 800d4ac:	f00b 020f 	and.w	r2, fp, #15
 800d4b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d4b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d4bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d4c0:	d019      	beq.n	800d4f6 <_dtoa_r+0x386>
 800d4c2:	4bbb      	ldr	r3, [pc, #748]	; (800d7b0 <_dtoa_r+0x640>)
 800d4c4:	ec51 0b18 	vmov	r0, r1, d8
 800d4c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4cc:	f7f3 f9be 	bl	800084c <__aeabi_ddiv>
 800d4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d4:	f008 080f 	and.w	r8, r8, #15
 800d4d8:	2503      	movs	r5, #3
 800d4da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d7b0 <_dtoa_r+0x640>
 800d4de:	f1b8 0f00 	cmp.w	r8, #0
 800d4e2:	d10a      	bne.n	800d4fa <_dtoa_r+0x38a>
 800d4e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4e8:	4632      	mov	r2, r6
 800d4ea:	463b      	mov	r3, r7
 800d4ec:	f7f3 f9ae 	bl	800084c <__aeabi_ddiv>
 800d4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4f4:	e02b      	b.n	800d54e <_dtoa_r+0x3de>
 800d4f6:	2502      	movs	r5, #2
 800d4f8:	e7ef      	b.n	800d4da <_dtoa_r+0x36a>
 800d4fa:	f018 0f01 	tst.w	r8, #1
 800d4fe:	d008      	beq.n	800d512 <_dtoa_r+0x3a2>
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d508:	f7f3 f876 	bl	80005f8 <__aeabi_dmul>
 800d50c:	3501      	adds	r5, #1
 800d50e:	4606      	mov	r6, r0
 800d510:	460f      	mov	r7, r1
 800d512:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d516:	f109 0908 	add.w	r9, r9, #8
 800d51a:	e7e0      	b.n	800d4de <_dtoa_r+0x36e>
 800d51c:	f000 809f 	beq.w	800d65e <_dtoa_r+0x4ee>
 800d520:	f1cb 0600 	rsb	r6, fp, #0
 800d524:	4ba1      	ldr	r3, [pc, #644]	; (800d7ac <_dtoa_r+0x63c>)
 800d526:	4fa2      	ldr	r7, [pc, #648]	; (800d7b0 <_dtoa_r+0x640>)
 800d528:	f006 020f 	and.w	r2, r6, #15
 800d52c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	ec51 0b18 	vmov	r0, r1, d8
 800d538:	f7f3 f85e 	bl	80005f8 <__aeabi_dmul>
 800d53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d540:	1136      	asrs	r6, r6, #4
 800d542:	2300      	movs	r3, #0
 800d544:	2502      	movs	r5, #2
 800d546:	2e00      	cmp	r6, #0
 800d548:	d17e      	bne.n	800d648 <_dtoa_r+0x4d8>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1d0      	bne.n	800d4f0 <_dtoa_r+0x380>
 800d54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d550:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 8084 	beq.w	800d662 <_dtoa_r+0x4f2>
 800d55a:	4b96      	ldr	r3, [pc, #600]	; (800d7b4 <_dtoa_r+0x644>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	4640      	mov	r0, r8
 800d560:	4649      	mov	r1, r9
 800d562:	f7f3 fabb 	bl	8000adc <__aeabi_dcmplt>
 800d566:	2800      	cmp	r0, #0
 800d568:	d07b      	beq.n	800d662 <_dtoa_r+0x4f2>
 800d56a:	9b04      	ldr	r3, [sp, #16]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d078      	beq.n	800d662 <_dtoa_r+0x4f2>
 800d570:	9b01      	ldr	r3, [sp, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	dd39      	ble.n	800d5ea <_dtoa_r+0x47a>
 800d576:	4b90      	ldr	r3, [pc, #576]	; (800d7b8 <_dtoa_r+0x648>)
 800d578:	2200      	movs	r2, #0
 800d57a:	4640      	mov	r0, r8
 800d57c:	4649      	mov	r1, r9
 800d57e:	f7f3 f83b 	bl	80005f8 <__aeabi_dmul>
 800d582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d586:	9e01      	ldr	r6, [sp, #4]
 800d588:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d58c:	3501      	adds	r5, #1
 800d58e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d592:	4628      	mov	r0, r5
 800d594:	f7f2 ffc6 	bl	8000524 <__aeabi_i2d>
 800d598:	4642      	mov	r2, r8
 800d59a:	464b      	mov	r3, r9
 800d59c:	f7f3 f82c 	bl	80005f8 <__aeabi_dmul>
 800d5a0:	4b86      	ldr	r3, [pc, #536]	; (800d7bc <_dtoa_r+0x64c>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f7f2 fe72 	bl	800028c <__adddf3>
 800d5a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5b0:	9303      	str	r3, [sp, #12]
 800d5b2:	2e00      	cmp	r6, #0
 800d5b4:	d158      	bne.n	800d668 <_dtoa_r+0x4f8>
 800d5b6:	4b82      	ldr	r3, [pc, #520]	; (800d7c0 <_dtoa_r+0x650>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f2 fe63 	bl	8000288 <__aeabi_dsub>
 800d5c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	4689      	mov	r9, r1
 800d5ca:	f7f3 faa5 	bl	8000b18 <__aeabi_dcmpgt>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	f040 8296 	bne.w	800db00 <_dtoa_r+0x990>
 800d5d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d5d8:	4640      	mov	r0, r8
 800d5da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5de:	4649      	mov	r1, r9
 800d5e0:	f7f3 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	f040 8289 	bne.w	800dafc <_dtoa_r+0x98c>
 800d5ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d5ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f2c0 814e 	blt.w	800d892 <_dtoa_r+0x722>
 800d5f6:	f1bb 0f0e 	cmp.w	fp, #14
 800d5fa:	f300 814a 	bgt.w	800d892 <_dtoa_r+0x722>
 800d5fe:	4b6b      	ldr	r3, [pc, #428]	; (800d7ac <_dtoa_r+0x63c>)
 800d600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d604:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f280 80dc 	bge.w	800d7c8 <_dtoa_r+0x658>
 800d610:	9b04      	ldr	r3, [sp, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	f300 80d8 	bgt.w	800d7c8 <_dtoa_r+0x658>
 800d618:	f040 826f 	bne.w	800dafa <_dtoa_r+0x98a>
 800d61c:	4b68      	ldr	r3, [pc, #416]	; (800d7c0 <_dtoa_r+0x650>)
 800d61e:	2200      	movs	r2, #0
 800d620:	4640      	mov	r0, r8
 800d622:	4649      	mov	r1, r9
 800d624:	f7f2 ffe8 	bl	80005f8 <__aeabi_dmul>
 800d628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d62c:	f7f3 fa6a 	bl	8000b04 <__aeabi_dcmpge>
 800d630:	9e04      	ldr	r6, [sp, #16]
 800d632:	4637      	mov	r7, r6
 800d634:	2800      	cmp	r0, #0
 800d636:	f040 8245 	bne.w	800dac4 <_dtoa_r+0x954>
 800d63a:	9d00      	ldr	r5, [sp, #0]
 800d63c:	2331      	movs	r3, #49	; 0x31
 800d63e:	f805 3b01 	strb.w	r3, [r5], #1
 800d642:	f10b 0b01 	add.w	fp, fp, #1
 800d646:	e241      	b.n	800dacc <_dtoa_r+0x95c>
 800d648:	07f2      	lsls	r2, r6, #31
 800d64a:	d505      	bpl.n	800d658 <_dtoa_r+0x4e8>
 800d64c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	3501      	adds	r5, #1
 800d656:	2301      	movs	r3, #1
 800d658:	1076      	asrs	r6, r6, #1
 800d65a:	3708      	adds	r7, #8
 800d65c:	e773      	b.n	800d546 <_dtoa_r+0x3d6>
 800d65e:	2502      	movs	r5, #2
 800d660:	e775      	b.n	800d54e <_dtoa_r+0x3de>
 800d662:	9e04      	ldr	r6, [sp, #16]
 800d664:	465f      	mov	r7, fp
 800d666:	e792      	b.n	800d58e <_dtoa_r+0x41e>
 800d668:	9900      	ldr	r1, [sp, #0]
 800d66a:	4b50      	ldr	r3, [pc, #320]	; (800d7ac <_dtoa_r+0x63c>)
 800d66c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d670:	4431      	add	r1, r6
 800d672:	9102      	str	r1, [sp, #8]
 800d674:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d676:	eeb0 9a47 	vmov.f32	s18, s14
 800d67a:	eef0 9a67 	vmov.f32	s19, s15
 800d67e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d686:	2900      	cmp	r1, #0
 800d688:	d044      	beq.n	800d714 <_dtoa_r+0x5a4>
 800d68a:	494e      	ldr	r1, [pc, #312]	; (800d7c4 <_dtoa_r+0x654>)
 800d68c:	2000      	movs	r0, #0
 800d68e:	f7f3 f8dd 	bl	800084c <__aeabi_ddiv>
 800d692:	ec53 2b19 	vmov	r2, r3, d9
 800d696:	f7f2 fdf7 	bl	8000288 <__aeabi_dsub>
 800d69a:	9d00      	ldr	r5, [sp, #0]
 800d69c:	ec41 0b19 	vmov	d9, r0, r1
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	4640      	mov	r0, r8
 800d6a4:	f7f3 fa58 	bl	8000b58 <__aeabi_d2iz>
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	f7f2 ff3b 	bl	8000524 <__aeabi_i2d>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	4649      	mov	r1, r9
 800d6b6:	f7f2 fde7 	bl	8000288 <__aeabi_dsub>
 800d6ba:	3630      	adds	r6, #48	; 0x30
 800d6bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d6c0:	ec53 2b19 	vmov	r2, r3, d9
 800d6c4:	4680      	mov	r8, r0
 800d6c6:	4689      	mov	r9, r1
 800d6c8:	f7f3 fa08 	bl	8000adc <__aeabi_dcmplt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d164      	bne.n	800d79a <_dtoa_r+0x62a>
 800d6d0:	4642      	mov	r2, r8
 800d6d2:	464b      	mov	r3, r9
 800d6d4:	4937      	ldr	r1, [pc, #220]	; (800d7b4 <_dtoa_r+0x644>)
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	f7f2 fdd6 	bl	8000288 <__aeabi_dsub>
 800d6dc:	ec53 2b19 	vmov	r2, r3, d9
 800d6e0:	f7f3 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	f040 80b6 	bne.w	800d856 <_dtoa_r+0x6e6>
 800d6ea:	9b02      	ldr	r3, [sp, #8]
 800d6ec:	429d      	cmp	r5, r3
 800d6ee:	f43f af7c 	beq.w	800d5ea <_dtoa_r+0x47a>
 800d6f2:	4b31      	ldr	r3, [pc, #196]	; (800d7b8 <_dtoa_r+0x648>)
 800d6f4:	ec51 0b19 	vmov	r0, r1, d9
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f7f2 ff7d 	bl	80005f8 <__aeabi_dmul>
 800d6fe:	4b2e      	ldr	r3, [pc, #184]	; (800d7b8 <_dtoa_r+0x648>)
 800d700:	ec41 0b19 	vmov	d9, r0, r1
 800d704:	2200      	movs	r2, #0
 800d706:	4640      	mov	r0, r8
 800d708:	4649      	mov	r1, r9
 800d70a:	f7f2 ff75 	bl	80005f8 <__aeabi_dmul>
 800d70e:	4680      	mov	r8, r0
 800d710:	4689      	mov	r9, r1
 800d712:	e7c5      	b.n	800d6a0 <_dtoa_r+0x530>
 800d714:	ec51 0b17 	vmov	r0, r1, d7
 800d718:	f7f2 ff6e 	bl	80005f8 <__aeabi_dmul>
 800d71c:	9b02      	ldr	r3, [sp, #8]
 800d71e:	9d00      	ldr	r5, [sp, #0]
 800d720:	930f      	str	r3, [sp, #60]	; 0x3c
 800d722:	ec41 0b19 	vmov	d9, r0, r1
 800d726:	4649      	mov	r1, r9
 800d728:	4640      	mov	r0, r8
 800d72a:	f7f3 fa15 	bl	8000b58 <__aeabi_d2iz>
 800d72e:	4606      	mov	r6, r0
 800d730:	f7f2 fef8 	bl	8000524 <__aeabi_i2d>
 800d734:	3630      	adds	r6, #48	; 0x30
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4640      	mov	r0, r8
 800d73c:	4649      	mov	r1, r9
 800d73e:	f7f2 fda3 	bl	8000288 <__aeabi_dsub>
 800d742:	f805 6b01 	strb.w	r6, [r5], #1
 800d746:	9b02      	ldr	r3, [sp, #8]
 800d748:	429d      	cmp	r5, r3
 800d74a:	4680      	mov	r8, r0
 800d74c:	4689      	mov	r9, r1
 800d74e:	f04f 0200 	mov.w	r2, #0
 800d752:	d124      	bne.n	800d79e <_dtoa_r+0x62e>
 800d754:	4b1b      	ldr	r3, [pc, #108]	; (800d7c4 <_dtoa_r+0x654>)
 800d756:	ec51 0b19 	vmov	r0, r1, d9
 800d75a:	f7f2 fd97 	bl	800028c <__adddf3>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	4640      	mov	r0, r8
 800d764:	4649      	mov	r1, r9
 800d766:	f7f3 f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d173      	bne.n	800d856 <_dtoa_r+0x6e6>
 800d76e:	ec53 2b19 	vmov	r2, r3, d9
 800d772:	4914      	ldr	r1, [pc, #80]	; (800d7c4 <_dtoa_r+0x654>)
 800d774:	2000      	movs	r0, #0
 800d776:	f7f2 fd87 	bl	8000288 <__aeabi_dsub>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4640      	mov	r0, r8
 800d780:	4649      	mov	r1, r9
 800d782:	f7f3 f9ab 	bl	8000adc <__aeabi_dcmplt>
 800d786:	2800      	cmp	r0, #0
 800d788:	f43f af2f 	beq.w	800d5ea <_dtoa_r+0x47a>
 800d78c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d78e:	1e6b      	subs	r3, r5, #1
 800d790:	930f      	str	r3, [sp, #60]	; 0x3c
 800d792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d796:	2b30      	cmp	r3, #48	; 0x30
 800d798:	d0f8      	beq.n	800d78c <_dtoa_r+0x61c>
 800d79a:	46bb      	mov	fp, r7
 800d79c:	e04a      	b.n	800d834 <_dtoa_r+0x6c4>
 800d79e:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <_dtoa_r+0x648>)
 800d7a0:	f7f2 ff2a 	bl	80005f8 <__aeabi_dmul>
 800d7a4:	4680      	mov	r8, r0
 800d7a6:	4689      	mov	r9, r1
 800d7a8:	e7bd      	b.n	800d726 <_dtoa_r+0x5b6>
 800d7aa:	bf00      	nop
 800d7ac:	0800fbc0 	.word	0x0800fbc0
 800d7b0:	0800fb98 	.word	0x0800fb98
 800d7b4:	3ff00000 	.word	0x3ff00000
 800d7b8:	40240000 	.word	0x40240000
 800d7bc:	401c0000 	.word	0x401c0000
 800d7c0:	40140000 	.word	0x40140000
 800d7c4:	3fe00000 	.word	0x3fe00000
 800d7c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d7cc:	9d00      	ldr	r5, [sp, #0]
 800d7ce:	4642      	mov	r2, r8
 800d7d0:	464b      	mov	r3, r9
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f3 f839 	bl	800084c <__aeabi_ddiv>
 800d7da:	f7f3 f9bd 	bl	8000b58 <__aeabi_d2iz>
 800d7de:	9001      	str	r0, [sp, #4]
 800d7e0:	f7f2 fea0 	bl	8000524 <__aeabi_i2d>
 800d7e4:	4642      	mov	r2, r8
 800d7e6:	464b      	mov	r3, r9
 800d7e8:	f7f2 ff06 	bl	80005f8 <__aeabi_dmul>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	f7f2 fd48 	bl	8000288 <__aeabi_dsub>
 800d7f8:	9e01      	ldr	r6, [sp, #4]
 800d7fa:	9f04      	ldr	r7, [sp, #16]
 800d7fc:	3630      	adds	r6, #48	; 0x30
 800d7fe:	f805 6b01 	strb.w	r6, [r5], #1
 800d802:	9e00      	ldr	r6, [sp, #0]
 800d804:	1bae      	subs	r6, r5, r6
 800d806:	42b7      	cmp	r7, r6
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	d134      	bne.n	800d878 <_dtoa_r+0x708>
 800d80e:	f7f2 fd3d 	bl	800028c <__adddf3>
 800d812:	4642      	mov	r2, r8
 800d814:	464b      	mov	r3, r9
 800d816:	4606      	mov	r6, r0
 800d818:	460f      	mov	r7, r1
 800d81a:	f7f3 f97d 	bl	8000b18 <__aeabi_dcmpgt>
 800d81e:	b9c8      	cbnz	r0, 800d854 <_dtoa_r+0x6e4>
 800d820:	4642      	mov	r2, r8
 800d822:	464b      	mov	r3, r9
 800d824:	4630      	mov	r0, r6
 800d826:	4639      	mov	r1, r7
 800d828:	f7f3 f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d82c:	b110      	cbz	r0, 800d834 <_dtoa_r+0x6c4>
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	07db      	lsls	r3, r3, #31
 800d832:	d40f      	bmi.n	800d854 <_dtoa_r+0x6e4>
 800d834:	4651      	mov	r1, sl
 800d836:	4620      	mov	r0, r4
 800d838:	f000 fd86 	bl	800e348 <_Bfree>
 800d83c:	2300      	movs	r3, #0
 800d83e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d840:	702b      	strb	r3, [r5, #0]
 800d842:	f10b 0301 	add.w	r3, fp, #1
 800d846:	6013      	str	r3, [r2, #0]
 800d848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f43f ace2 	beq.w	800d214 <_dtoa_r+0xa4>
 800d850:	601d      	str	r5, [r3, #0]
 800d852:	e4df      	b.n	800d214 <_dtoa_r+0xa4>
 800d854:	465f      	mov	r7, fp
 800d856:	462b      	mov	r3, r5
 800d858:	461d      	mov	r5, r3
 800d85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d85e:	2a39      	cmp	r2, #57	; 0x39
 800d860:	d106      	bne.n	800d870 <_dtoa_r+0x700>
 800d862:	9a00      	ldr	r2, [sp, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	d1f7      	bne.n	800d858 <_dtoa_r+0x6e8>
 800d868:	9900      	ldr	r1, [sp, #0]
 800d86a:	2230      	movs	r2, #48	; 0x30
 800d86c:	3701      	adds	r7, #1
 800d86e:	700a      	strb	r2, [r1, #0]
 800d870:	781a      	ldrb	r2, [r3, #0]
 800d872:	3201      	adds	r2, #1
 800d874:	701a      	strb	r2, [r3, #0]
 800d876:	e790      	b.n	800d79a <_dtoa_r+0x62a>
 800d878:	4ba3      	ldr	r3, [pc, #652]	; (800db08 <_dtoa_r+0x998>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	f7f2 febc 	bl	80005f8 <__aeabi_dmul>
 800d880:	2200      	movs	r2, #0
 800d882:	2300      	movs	r3, #0
 800d884:	4606      	mov	r6, r0
 800d886:	460f      	mov	r7, r1
 800d888:	f7f3 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d09e      	beq.n	800d7ce <_dtoa_r+0x65e>
 800d890:	e7d0      	b.n	800d834 <_dtoa_r+0x6c4>
 800d892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d894:	2a00      	cmp	r2, #0
 800d896:	f000 80ca 	beq.w	800da2e <_dtoa_r+0x8be>
 800d89a:	9a07      	ldr	r2, [sp, #28]
 800d89c:	2a01      	cmp	r2, #1
 800d89e:	f300 80ad 	bgt.w	800d9fc <_dtoa_r+0x88c>
 800d8a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8a4:	2a00      	cmp	r2, #0
 800d8a6:	f000 80a5 	beq.w	800d9f4 <_dtoa_r+0x884>
 800d8aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8ae:	9e08      	ldr	r6, [sp, #32]
 800d8b0:	9d05      	ldr	r5, [sp, #20]
 800d8b2:	9a05      	ldr	r2, [sp, #20]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	9205      	str	r2, [sp, #20]
 800d8b8:	9a06      	ldr	r2, [sp, #24]
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	441a      	add	r2, r3
 800d8be:	4620      	mov	r0, r4
 800d8c0:	9206      	str	r2, [sp, #24]
 800d8c2:	f000 fdf7 	bl	800e4b4 <__i2b>
 800d8c6:	4607      	mov	r7, r0
 800d8c8:	b165      	cbz	r5, 800d8e4 <_dtoa_r+0x774>
 800d8ca:	9b06      	ldr	r3, [sp, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	dd09      	ble.n	800d8e4 <_dtoa_r+0x774>
 800d8d0:	42ab      	cmp	r3, r5
 800d8d2:	9a05      	ldr	r2, [sp, #20]
 800d8d4:	bfa8      	it	ge
 800d8d6:	462b      	movge	r3, r5
 800d8d8:	1ad2      	subs	r2, r2, r3
 800d8da:	9205      	str	r2, [sp, #20]
 800d8dc:	9a06      	ldr	r2, [sp, #24]
 800d8de:	1aed      	subs	r5, r5, r3
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	9306      	str	r3, [sp, #24]
 800d8e4:	9b08      	ldr	r3, [sp, #32]
 800d8e6:	b1f3      	cbz	r3, 800d926 <_dtoa_r+0x7b6>
 800d8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 80a3 	beq.w	800da36 <_dtoa_r+0x8c6>
 800d8f0:	2e00      	cmp	r6, #0
 800d8f2:	dd10      	ble.n	800d916 <_dtoa_r+0x7a6>
 800d8f4:	4639      	mov	r1, r7
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f000 fe9b 	bl	800e634 <__pow5mult>
 800d8fe:	4652      	mov	r2, sl
 800d900:	4601      	mov	r1, r0
 800d902:	4607      	mov	r7, r0
 800d904:	4620      	mov	r0, r4
 800d906:	f000 fdeb 	bl	800e4e0 <__multiply>
 800d90a:	4651      	mov	r1, sl
 800d90c:	4680      	mov	r8, r0
 800d90e:	4620      	mov	r0, r4
 800d910:	f000 fd1a 	bl	800e348 <_Bfree>
 800d914:	46c2      	mov	sl, r8
 800d916:	9b08      	ldr	r3, [sp, #32]
 800d918:	1b9a      	subs	r2, r3, r6
 800d91a:	d004      	beq.n	800d926 <_dtoa_r+0x7b6>
 800d91c:	4651      	mov	r1, sl
 800d91e:	4620      	mov	r0, r4
 800d920:	f000 fe88 	bl	800e634 <__pow5mult>
 800d924:	4682      	mov	sl, r0
 800d926:	2101      	movs	r1, #1
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 fdc3 	bl	800e4b4 <__i2b>
 800d92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d930:	2b00      	cmp	r3, #0
 800d932:	4606      	mov	r6, r0
 800d934:	f340 8081 	ble.w	800da3a <_dtoa_r+0x8ca>
 800d938:	461a      	mov	r2, r3
 800d93a:	4601      	mov	r1, r0
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 fe79 	bl	800e634 <__pow5mult>
 800d942:	9b07      	ldr	r3, [sp, #28]
 800d944:	2b01      	cmp	r3, #1
 800d946:	4606      	mov	r6, r0
 800d948:	dd7a      	ble.n	800da40 <_dtoa_r+0x8d0>
 800d94a:	f04f 0800 	mov.w	r8, #0
 800d94e:	6933      	ldr	r3, [r6, #16]
 800d950:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d954:	6918      	ldr	r0, [r3, #16]
 800d956:	f000 fd5f 	bl	800e418 <__hi0bits>
 800d95a:	f1c0 0020 	rsb	r0, r0, #32
 800d95e:	9b06      	ldr	r3, [sp, #24]
 800d960:	4418      	add	r0, r3
 800d962:	f010 001f 	ands.w	r0, r0, #31
 800d966:	f000 8094 	beq.w	800da92 <_dtoa_r+0x922>
 800d96a:	f1c0 0320 	rsb	r3, r0, #32
 800d96e:	2b04      	cmp	r3, #4
 800d970:	f340 8085 	ble.w	800da7e <_dtoa_r+0x90e>
 800d974:	9b05      	ldr	r3, [sp, #20]
 800d976:	f1c0 001c 	rsb	r0, r0, #28
 800d97a:	4403      	add	r3, r0
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	9b06      	ldr	r3, [sp, #24]
 800d980:	4403      	add	r3, r0
 800d982:	4405      	add	r5, r0
 800d984:	9306      	str	r3, [sp, #24]
 800d986:	9b05      	ldr	r3, [sp, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dd05      	ble.n	800d998 <_dtoa_r+0x828>
 800d98c:	4651      	mov	r1, sl
 800d98e:	461a      	mov	r2, r3
 800d990:	4620      	mov	r0, r4
 800d992:	f000 fea9 	bl	800e6e8 <__lshift>
 800d996:	4682      	mov	sl, r0
 800d998:	9b06      	ldr	r3, [sp, #24]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	dd05      	ble.n	800d9aa <_dtoa_r+0x83a>
 800d99e:	4631      	mov	r1, r6
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 fea0 	bl	800e6e8 <__lshift>
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d072      	beq.n	800da96 <_dtoa_r+0x926>
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4650      	mov	r0, sl
 800d9b4:	f000 ff04 	bl	800e7c0 <__mcmp>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	da6c      	bge.n	800da96 <_dtoa_r+0x926>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4651      	mov	r1, sl
 800d9c0:	220a      	movs	r2, #10
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f000 fce2 	bl	800e38c <__multadd>
 800d9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 81b0 	beq.w	800dd36 <_dtoa_r+0xbc6>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	4639      	mov	r1, r7
 800d9da:	220a      	movs	r2, #10
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 fcd5 	bl	800e38c <__multadd>
 800d9e2:	9b01      	ldr	r3, [sp, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	4607      	mov	r7, r0
 800d9e8:	f300 8096 	bgt.w	800db18 <_dtoa_r+0x9a8>
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	dc59      	bgt.n	800daa6 <_dtoa_r+0x936>
 800d9f2:	e091      	b.n	800db18 <_dtoa_r+0x9a8>
 800d9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9fa:	e758      	b.n	800d8ae <_dtoa_r+0x73e>
 800d9fc:	9b04      	ldr	r3, [sp, #16]
 800d9fe:	1e5e      	subs	r6, r3, #1
 800da00:	9b08      	ldr	r3, [sp, #32]
 800da02:	42b3      	cmp	r3, r6
 800da04:	bfbf      	itttt	lt
 800da06:	9b08      	ldrlt	r3, [sp, #32]
 800da08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800da0a:	9608      	strlt	r6, [sp, #32]
 800da0c:	1af3      	sublt	r3, r6, r3
 800da0e:	bfb4      	ite	lt
 800da10:	18d2      	addlt	r2, r2, r3
 800da12:	1b9e      	subge	r6, r3, r6
 800da14:	9b04      	ldr	r3, [sp, #16]
 800da16:	bfbc      	itt	lt
 800da18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800da1a:	2600      	movlt	r6, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	bfb7      	itett	lt
 800da20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800da24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800da28:	1a9d      	sublt	r5, r3, r2
 800da2a:	2300      	movlt	r3, #0
 800da2c:	e741      	b.n	800d8b2 <_dtoa_r+0x742>
 800da2e:	9e08      	ldr	r6, [sp, #32]
 800da30:	9d05      	ldr	r5, [sp, #20]
 800da32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800da34:	e748      	b.n	800d8c8 <_dtoa_r+0x758>
 800da36:	9a08      	ldr	r2, [sp, #32]
 800da38:	e770      	b.n	800d91c <_dtoa_r+0x7ac>
 800da3a:	9b07      	ldr	r3, [sp, #28]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	dc19      	bgt.n	800da74 <_dtoa_r+0x904>
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	b9bb      	cbnz	r3, 800da74 <_dtoa_r+0x904>
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da4a:	b99b      	cbnz	r3, 800da74 <_dtoa_r+0x904>
 800da4c:	9b03      	ldr	r3, [sp, #12]
 800da4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da52:	0d1b      	lsrs	r3, r3, #20
 800da54:	051b      	lsls	r3, r3, #20
 800da56:	b183      	cbz	r3, 800da7a <_dtoa_r+0x90a>
 800da58:	9b05      	ldr	r3, [sp, #20]
 800da5a:	3301      	adds	r3, #1
 800da5c:	9305      	str	r3, [sp, #20]
 800da5e:	9b06      	ldr	r3, [sp, #24]
 800da60:	3301      	adds	r3, #1
 800da62:	9306      	str	r3, [sp, #24]
 800da64:	f04f 0801 	mov.w	r8, #1
 800da68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f47f af6f 	bne.w	800d94e <_dtoa_r+0x7de>
 800da70:	2001      	movs	r0, #1
 800da72:	e774      	b.n	800d95e <_dtoa_r+0x7ee>
 800da74:	f04f 0800 	mov.w	r8, #0
 800da78:	e7f6      	b.n	800da68 <_dtoa_r+0x8f8>
 800da7a:	4698      	mov	r8, r3
 800da7c:	e7f4      	b.n	800da68 <_dtoa_r+0x8f8>
 800da7e:	d082      	beq.n	800d986 <_dtoa_r+0x816>
 800da80:	9a05      	ldr	r2, [sp, #20]
 800da82:	331c      	adds	r3, #28
 800da84:	441a      	add	r2, r3
 800da86:	9205      	str	r2, [sp, #20]
 800da88:	9a06      	ldr	r2, [sp, #24]
 800da8a:	441a      	add	r2, r3
 800da8c:	441d      	add	r5, r3
 800da8e:	9206      	str	r2, [sp, #24]
 800da90:	e779      	b.n	800d986 <_dtoa_r+0x816>
 800da92:	4603      	mov	r3, r0
 800da94:	e7f4      	b.n	800da80 <_dtoa_r+0x910>
 800da96:	9b04      	ldr	r3, [sp, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dc37      	bgt.n	800db0c <_dtoa_r+0x99c>
 800da9c:	9b07      	ldr	r3, [sp, #28]
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	dd34      	ble.n	800db0c <_dtoa_r+0x99c>
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	9301      	str	r3, [sp, #4]
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	b963      	cbnz	r3, 800dac4 <_dtoa_r+0x954>
 800daaa:	4631      	mov	r1, r6
 800daac:	2205      	movs	r2, #5
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 fc6c 	bl	800e38c <__multadd>
 800dab4:	4601      	mov	r1, r0
 800dab6:	4606      	mov	r6, r0
 800dab8:	4650      	mov	r0, sl
 800daba:	f000 fe81 	bl	800e7c0 <__mcmp>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f73f adbb 	bgt.w	800d63a <_dtoa_r+0x4ca>
 800dac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dac6:	9d00      	ldr	r5, [sp, #0]
 800dac8:	ea6f 0b03 	mvn.w	fp, r3
 800dacc:	f04f 0800 	mov.w	r8, #0
 800dad0:	4631      	mov	r1, r6
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 fc38 	bl	800e348 <_Bfree>
 800dad8:	2f00      	cmp	r7, #0
 800dada:	f43f aeab 	beq.w	800d834 <_dtoa_r+0x6c4>
 800dade:	f1b8 0f00 	cmp.w	r8, #0
 800dae2:	d005      	beq.n	800daf0 <_dtoa_r+0x980>
 800dae4:	45b8      	cmp	r8, r7
 800dae6:	d003      	beq.n	800daf0 <_dtoa_r+0x980>
 800dae8:	4641      	mov	r1, r8
 800daea:	4620      	mov	r0, r4
 800daec:	f000 fc2c 	bl	800e348 <_Bfree>
 800daf0:	4639      	mov	r1, r7
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 fc28 	bl	800e348 <_Bfree>
 800daf8:	e69c      	b.n	800d834 <_dtoa_r+0x6c4>
 800dafa:	2600      	movs	r6, #0
 800dafc:	4637      	mov	r7, r6
 800dafe:	e7e1      	b.n	800dac4 <_dtoa_r+0x954>
 800db00:	46bb      	mov	fp, r7
 800db02:	4637      	mov	r7, r6
 800db04:	e599      	b.n	800d63a <_dtoa_r+0x4ca>
 800db06:	bf00      	nop
 800db08:	40240000 	.word	0x40240000
 800db0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f000 80c8 	beq.w	800dca4 <_dtoa_r+0xb34>
 800db14:	9b04      	ldr	r3, [sp, #16]
 800db16:	9301      	str	r3, [sp, #4]
 800db18:	2d00      	cmp	r5, #0
 800db1a:	dd05      	ble.n	800db28 <_dtoa_r+0x9b8>
 800db1c:	4639      	mov	r1, r7
 800db1e:	462a      	mov	r2, r5
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fde1 	bl	800e6e8 <__lshift>
 800db26:	4607      	mov	r7, r0
 800db28:	f1b8 0f00 	cmp.w	r8, #0
 800db2c:	d05b      	beq.n	800dbe6 <_dtoa_r+0xa76>
 800db2e:	6879      	ldr	r1, [r7, #4]
 800db30:	4620      	mov	r0, r4
 800db32:	f000 fbc9 	bl	800e2c8 <_Balloc>
 800db36:	4605      	mov	r5, r0
 800db38:	b928      	cbnz	r0, 800db46 <_dtoa_r+0x9d6>
 800db3a:	4b83      	ldr	r3, [pc, #524]	; (800dd48 <_dtoa_r+0xbd8>)
 800db3c:	4602      	mov	r2, r0
 800db3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800db42:	f7ff bb2e 	b.w	800d1a2 <_dtoa_r+0x32>
 800db46:	693a      	ldr	r2, [r7, #16]
 800db48:	3202      	adds	r2, #2
 800db4a:	0092      	lsls	r2, r2, #2
 800db4c:	f107 010c 	add.w	r1, r7, #12
 800db50:	300c      	adds	r0, #12
 800db52:	f7ff fa76 	bl	800d042 <memcpy>
 800db56:	2201      	movs	r2, #1
 800db58:	4629      	mov	r1, r5
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 fdc4 	bl	800e6e8 <__lshift>
 800db60:	9b00      	ldr	r3, [sp, #0]
 800db62:	3301      	adds	r3, #1
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db6a:	4413      	add	r3, r2
 800db6c:	9308      	str	r3, [sp, #32]
 800db6e:	9b02      	ldr	r3, [sp, #8]
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	46b8      	mov	r8, r7
 800db76:	9306      	str	r3, [sp, #24]
 800db78:	4607      	mov	r7, r0
 800db7a:	9b04      	ldr	r3, [sp, #16]
 800db7c:	4631      	mov	r1, r6
 800db7e:	3b01      	subs	r3, #1
 800db80:	4650      	mov	r0, sl
 800db82:	9301      	str	r3, [sp, #4]
 800db84:	f7ff fa6b 	bl	800d05e <quorem>
 800db88:	4641      	mov	r1, r8
 800db8a:	9002      	str	r0, [sp, #8]
 800db8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800db90:	4650      	mov	r0, sl
 800db92:	f000 fe15 	bl	800e7c0 <__mcmp>
 800db96:	463a      	mov	r2, r7
 800db98:	9005      	str	r0, [sp, #20]
 800db9a:	4631      	mov	r1, r6
 800db9c:	4620      	mov	r0, r4
 800db9e:	f000 fe2b 	bl	800e7f8 <__mdiff>
 800dba2:	68c2      	ldr	r2, [r0, #12]
 800dba4:	4605      	mov	r5, r0
 800dba6:	bb02      	cbnz	r2, 800dbea <_dtoa_r+0xa7a>
 800dba8:	4601      	mov	r1, r0
 800dbaa:	4650      	mov	r0, sl
 800dbac:	f000 fe08 	bl	800e7c0 <__mcmp>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb8:	f000 fbc6 	bl	800e348 <_Bfree>
 800dbbc:	9b07      	ldr	r3, [sp, #28]
 800dbbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbc0:	9d04      	ldr	r5, [sp, #16]
 800dbc2:	ea43 0102 	orr.w	r1, r3, r2
 800dbc6:	9b06      	ldr	r3, [sp, #24]
 800dbc8:	4319      	orrs	r1, r3
 800dbca:	d110      	bne.n	800dbee <_dtoa_r+0xa7e>
 800dbcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dbd0:	d029      	beq.n	800dc26 <_dtoa_r+0xab6>
 800dbd2:	9b05      	ldr	r3, [sp, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd02      	ble.n	800dbde <_dtoa_r+0xa6e>
 800dbd8:	9b02      	ldr	r3, [sp, #8]
 800dbda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dbde:	9b01      	ldr	r3, [sp, #4]
 800dbe0:	f883 9000 	strb.w	r9, [r3]
 800dbe4:	e774      	b.n	800dad0 <_dtoa_r+0x960>
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	e7ba      	b.n	800db60 <_dtoa_r+0x9f0>
 800dbea:	2201      	movs	r2, #1
 800dbec:	e7e1      	b.n	800dbb2 <_dtoa_r+0xa42>
 800dbee:	9b05      	ldr	r3, [sp, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	db04      	blt.n	800dbfe <_dtoa_r+0xa8e>
 800dbf4:	9907      	ldr	r1, [sp, #28]
 800dbf6:	430b      	orrs	r3, r1
 800dbf8:	9906      	ldr	r1, [sp, #24]
 800dbfa:	430b      	orrs	r3, r1
 800dbfc:	d120      	bne.n	800dc40 <_dtoa_r+0xad0>
 800dbfe:	2a00      	cmp	r2, #0
 800dc00:	dded      	ble.n	800dbde <_dtoa_r+0xa6e>
 800dc02:	4651      	mov	r1, sl
 800dc04:	2201      	movs	r2, #1
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 fd6e 	bl	800e6e8 <__lshift>
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4682      	mov	sl, r0
 800dc10:	f000 fdd6 	bl	800e7c0 <__mcmp>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	dc03      	bgt.n	800dc20 <_dtoa_r+0xab0>
 800dc18:	d1e1      	bne.n	800dbde <_dtoa_r+0xa6e>
 800dc1a:	f019 0f01 	tst.w	r9, #1
 800dc1e:	d0de      	beq.n	800dbde <_dtoa_r+0xa6e>
 800dc20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc24:	d1d8      	bne.n	800dbd8 <_dtoa_r+0xa68>
 800dc26:	9a01      	ldr	r2, [sp, #4]
 800dc28:	2339      	movs	r3, #57	; 0x39
 800dc2a:	7013      	strb	r3, [r2, #0]
 800dc2c:	462b      	mov	r3, r5
 800dc2e:	461d      	mov	r5, r3
 800dc30:	3b01      	subs	r3, #1
 800dc32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc36:	2a39      	cmp	r2, #57	; 0x39
 800dc38:	d06c      	beq.n	800dd14 <_dtoa_r+0xba4>
 800dc3a:	3201      	adds	r2, #1
 800dc3c:	701a      	strb	r2, [r3, #0]
 800dc3e:	e747      	b.n	800dad0 <_dtoa_r+0x960>
 800dc40:	2a00      	cmp	r2, #0
 800dc42:	dd07      	ble.n	800dc54 <_dtoa_r+0xae4>
 800dc44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc48:	d0ed      	beq.n	800dc26 <_dtoa_r+0xab6>
 800dc4a:	9a01      	ldr	r2, [sp, #4]
 800dc4c:	f109 0301 	add.w	r3, r9, #1
 800dc50:	7013      	strb	r3, [r2, #0]
 800dc52:	e73d      	b.n	800dad0 <_dtoa_r+0x960>
 800dc54:	9b04      	ldr	r3, [sp, #16]
 800dc56:	9a08      	ldr	r2, [sp, #32]
 800dc58:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d043      	beq.n	800dce8 <_dtoa_r+0xb78>
 800dc60:	4651      	mov	r1, sl
 800dc62:	2300      	movs	r3, #0
 800dc64:	220a      	movs	r2, #10
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 fb90 	bl	800e38c <__multadd>
 800dc6c:	45b8      	cmp	r8, r7
 800dc6e:	4682      	mov	sl, r0
 800dc70:	f04f 0300 	mov.w	r3, #0
 800dc74:	f04f 020a 	mov.w	r2, #10
 800dc78:	4641      	mov	r1, r8
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	d107      	bne.n	800dc8e <_dtoa_r+0xb1e>
 800dc7e:	f000 fb85 	bl	800e38c <__multadd>
 800dc82:	4680      	mov	r8, r0
 800dc84:	4607      	mov	r7, r0
 800dc86:	9b04      	ldr	r3, [sp, #16]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	e775      	b.n	800db7a <_dtoa_r+0xa0a>
 800dc8e:	f000 fb7d 	bl	800e38c <__multadd>
 800dc92:	4639      	mov	r1, r7
 800dc94:	4680      	mov	r8, r0
 800dc96:	2300      	movs	r3, #0
 800dc98:	220a      	movs	r2, #10
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 fb76 	bl	800e38c <__multadd>
 800dca0:	4607      	mov	r7, r0
 800dca2:	e7f0      	b.n	800dc86 <_dtoa_r+0xb16>
 800dca4:	9b04      	ldr	r3, [sp, #16]
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	9d00      	ldr	r5, [sp, #0]
 800dcaa:	4631      	mov	r1, r6
 800dcac:	4650      	mov	r0, sl
 800dcae:	f7ff f9d6 	bl	800d05e <quorem>
 800dcb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dcb6:	9b00      	ldr	r3, [sp, #0]
 800dcb8:	f805 9b01 	strb.w	r9, [r5], #1
 800dcbc:	1aea      	subs	r2, r5, r3
 800dcbe:	9b01      	ldr	r3, [sp, #4]
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	dd07      	ble.n	800dcd4 <_dtoa_r+0xb64>
 800dcc4:	4651      	mov	r1, sl
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	220a      	movs	r2, #10
 800dcca:	4620      	mov	r0, r4
 800dccc:	f000 fb5e 	bl	800e38c <__multadd>
 800dcd0:	4682      	mov	sl, r0
 800dcd2:	e7ea      	b.n	800dcaa <_dtoa_r+0xb3a>
 800dcd4:	9b01      	ldr	r3, [sp, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfc8      	it	gt
 800dcda:	461d      	movgt	r5, r3
 800dcdc:	9b00      	ldr	r3, [sp, #0]
 800dcde:	bfd8      	it	le
 800dce0:	2501      	movle	r5, #1
 800dce2:	441d      	add	r5, r3
 800dce4:	f04f 0800 	mov.w	r8, #0
 800dce8:	4651      	mov	r1, sl
 800dcea:	2201      	movs	r2, #1
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 fcfb 	bl	800e6e8 <__lshift>
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	f000 fd63 	bl	800e7c0 <__mcmp>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	dc96      	bgt.n	800dc2c <_dtoa_r+0xabc>
 800dcfe:	d102      	bne.n	800dd06 <_dtoa_r+0xb96>
 800dd00:	f019 0f01 	tst.w	r9, #1
 800dd04:	d192      	bne.n	800dc2c <_dtoa_r+0xabc>
 800dd06:	462b      	mov	r3, r5
 800dd08:	461d      	mov	r5, r3
 800dd0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd0e:	2a30      	cmp	r2, #48	; 0x30
 800dd10:	d0fa      	beq.n	800dd08 <_dtoa_r+0xb98>
 800dd12:	e6dd      	b.n	800dad0 <_dtoa_r+0x960>
 800dd14:	9a00      	ldr	r2, [sp, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d189      	bne.n	800dc2e <_dtoa_r+0xabe>
 800dd1a:	f10b 0b01 	add.w	fp, fp, #1
 800dd1e:	2331      	movs	r3, #49	; 0x31
 800dd20:	e796      	b.n	800dc50 <_dtoa_r+0xae0>
 800dd22:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <_dtoa_r+0xbdc>)
 800dd24:	f7ff ba99 	b.w	800d25a <_dtoa_r+0xea>
 800dd28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f47f aa6d 	bne.w	800d20a <_dtoa_r+0x9a>
 800dd30:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <_dtoa_r+0xbe0>)
 800dd32:	f7ff ba92 	b.w	800d25a <_dtoa_r+0xea>
 800dd36:	9b01      	ldr	r3, [sp, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	dcb5      	bgt.n	800dca8 <_dtoa_r+0xb38>
 800dd3c:	9b07      	ldr	r3, [sp, #28]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	f73f aeb1 	bgt.w	800daa6 <_dtoa_r+0x936>
 800dd44:	e7b0      	b.n	800dca8 <_dtoa_r+0xb38>
 800dd46:	bf00      	nop
 800dd48:	0800fb1c 	.word	0x0800fb1c
 800dd4c:	0800fa7c 	.word	0x0800fa7c
 800dd50:	0800faa0 	.word	0x0800faa0

0800dd54 <__ssputs_r>:
 800dd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd58:	688e      	ldr	r6, [r1, #8]
 800dd5a:	461f      	mov	r7, r3
 800dd5c:	42be      	cmp	r6, r7
 800dd5e:	680b      	ldr	r3, [r1, #0]
 800dd60:	4682      	mov	sl, r0
 800dd62:	460c      	mov	r4, r1
 800dd64:	4690      	mov	r8, r2
 800dd66:	d82c      	bhi.n	800ddc2 <__ssputs_r+0x6e>
 800dd68:	898a      	ldrh	r2, [r1, #12]
 800dd6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd6e:	d026      	beq.n	800ddbe <__ssputs_r+0x6a>
 800dd70:	6965      	ldr	r5, [r4, #20]
 800dd72:	6909      	ldr	r1, [r1, #16]
 800dd74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd78:	eba3 0901 	sub.w	r9, r3, r1
 800dd7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd80:	1c7b      	adds	r3, r7, #1
 800dd82:	444b      	add	r3, r9
 800dd84:	106d      	asrs	r5, r5, #1
 800dd86:	429d      	cmp	r5, r3
 800dd88:	bf38      	it	cc
 800dd8a:	461d      	movcc	r5, r3
 800dd8c:	0553      	lsls	r3, r2, #21
 800dd8e:	d527      	bpl.n	800dde0 <__ssputs_r+0x8c>
 800dd90:	4629      	mov	r1, r5
 800dd92:	f000 f95f 	bl	800e054 <_malloc_r>
 800dd96:	4606      	mov	r6, r0
 800dd98:	b360      	cbz	r0, 800ddf4 <__ssputs_r+0xa0>
 800dd9a:	6921      	ldr	r1, [r4, #16]
 800dd9c:	464a      	mov	r2, r9
 800dd9e:	f7ff f950 	bl	800d042 <memcpy>
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddac:	81a3      	strh	r3, [r4, #12]
 800ddae:	6126      	str	r6, [r4, #16]
 800ddb0:	6165      	str	r5, [r4, #20]
 800ddb2:	444e      	add	r6, r9
 800ddb4:	eba5 0509 	sub.w	r5, r5, r9
 800ddb8:	6026      	str	r6, [r4, #0]
 800ddba:	60a5      	str	r5, [r4, #8]
 800ddbc:	463e      	mov	r6, r7
 800ddbe:	42be      	cmp	r6, r7
 800ddc0:	d900      	bls.n	800ddc4 <__ssputs_r+0x70>
 800ddc2:	463e      	mov	r6, r7
 800ddc4:	6820      	ldr	r0, [r4, #0]
 800ddc6:	4632      	mov	r2, r6
 800ddc8:	4641      	mov	r1, r8
 800ddca:	f000 fe6b 	bl	800eaa4 <memmove>
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	1b9b      	subs	r3, r3, r6
 800ddd2:	60a3      	str	r3, [r4, #8]
 800ddd4:	6823      	ldr	r3, [r4, #0]
 800ddd6:	4433      	add	r3, r6
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	2000      	movs	r0, #0
 800dddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde0:	462a      	mov	r2, r5
 800dde2:	f000 fe30 	bl	800ea46 <_realloc_r>
 800dde6:	4606      	mov	r6, r0
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d1e0      	bne.n	800ddae <__ssputs_r+0x5a>
 800ddec:	6921      	ldr	r1, [r4, #16]
 800ddee:	4650      	mov	r0, sl
 800ddf0:	f000 fefc 	bl	800ebec <_free_r>
 800ddf4:	230c      	movs	r3, #12
 800ddf6:	f8ca 3000 	str.w	r3, [sl]
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de06:	e7e9      	b.n	800dddc <__ssputs_r+0x88>

0800de08 <_svfiprintf_r>:
 800de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0c:	4698      	mov	r8, r3
 800de0e:	898b      	ldrh	r3, [r1, #12]
 800de10:	061b      	lsls	r3, r3, #24
 800de12:	b09d      	sub	sp, #116	; 0x74
 800de14:	4607      	mov	r7, r0
 800de16:	460d      	mov	r5, r1
 800de18:	4614      	mov	r4, r2
 800de1a:	d50e      	bpl.n	800de3a <_svfiprintf_r+0x32>
 800de1c:	690b      	ldr	r3, [r1, #16]
 800de1e:	b963      	cbnz	r3, 800de3a <_svfiprintf_r+0x32>
 800de20:	2140      	movs	r1, #64	; 0x40
 800de22:	f000 f917 	bl	800e054 <_malloc_r>
 800de26:	6028      	str	r0, [r5, #0]
 800de28:	6128      	str	r0, [r5, #16]
 800de2a:	b920      	cbnz	r0, 800de36 <_svfiprintf_r+0x2e>
 800de2c:	230c      	movs	r3, #12
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de34:	e0d0      	b.n	800dfd8 <_svfiprintf_r+0x1d0>
 800de36:	2340      	movs	r3, #64	; 0x40
 800de38:	616b      	str	r3, [r5, #20]
 800de3a:	2300      	movs	r3, #0
 800de3c:	9309      	str	r3, [sp, #36]	; 0x24
 800de3e:	2320      	movs	r3, #32
 800de40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de44:	f8cd 800c 	str.w	r8, [sp, #12]
 800de48:	2330      	movs	r3, #48	; 0x30
 800de4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dff0 <_svfiprintf_r+0x1e8>
 800de4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de52:	f04f 0901 	mov.w	r9, #1
 800de56:	4623      	mov	r3, r4
 800de58:	469a      	mov	sl, r3
 800de5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de5e:	b10a      	cbz	r2, 800de64 <_svfiprintf_r+0x5c>
 800de60:	2a25      	cmp	r2, #37	; 0x25
 800de62:	d1f9      	bne.n	800de58 <_svfiprintf_r+0x50>
 800de64:	ebba 0b04 	subs.w	fp, sl, r4
 800de68:	d00b      	beq.n	800de82 <_svfiprintf_r+0x7a>
 800de6a:	465b      	mov	r3, fp
 800de6c:	4622      	mov	r2, r4
 800de6e:	4629      	mov	r1, r5
 800de70:	4638      	mov	r0, r7
 800de72:	f7ff ff6f 	bl	800dd54 <__ssputs_r>
 800de76:	3001      	adds	r0, #1
 800de78:	f000 80a9 	beq.w	800dfce <_svfiprintf_r+0x1c6>
 800de7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de7e:	445a      	add	r2, fp
 800de80:	9209      	str	r2, [sp, #36]	; 0x24
 800de82:	f89a 3000 	ldrb.w	r3, [sl]
 800de86:	2b00      	cmp	r3, #0
 800de88:	f000 80a1 	beq.w	800dfce <_svfiprintf_r+0x1c6>
 800de8c:	2300      	movs	r3, #0
 800de8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de96:	f10a 0a01 	add.w	sl, sl, #1
 800de9a:	9304      	str	r3, [sp, #16]
 800de9c:	9307      	str	r3, [sp, #28]
 800de9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dea2:	931a      	str	r3, [sp, #104]	; 0x68
 800dea4:	4654      	mov	r4, sl
 800dea6:	2205      	movs	r2, #5
 800dea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deac:	4850      	ldr	r0, [pc, #320]	; (800dff0 <_svfiprintf_r+0x1e8>)
 800deae:	f7f2 f98f 	bl	80001d0 <memchr>
 800deb2:	9a04      	ldr	r2, [sp, #16]
 800deb4:	b9d8      	cbnz	r0, 800deee <_svfiprintf_r+0xe6>
 800deb6:	06d0      	lsls	r0, r2, #27
 800deb8:	bf44      	itt	mi
 800deba:	2320      	movmi	r3, #32
 800debc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec0:	0711      	lsls	r1, r2, #28
 800dec2:	bf44      	itt	mi
 800dec4:	232b      	movmi	r3, #43	; 0x2b
 800dec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deca:	f89a 3000 	ldrb.w	r3, [sl]
 800dece:	2b2a      	cmp	r3, #42	; 0x2a
 800ded0:	d015      	beq.n	800defe <_svfiprintf_r+0xf6>
 800ded2:	9a07      	ldr	r2, [sp, #28]
 800ded4:	4654      	mov	r4, sl
 800ded6:	2000      	movs	r0, #0
 800ded8:	f04f 0c0a 	mov.w	ip, #10
 800dedc:	4621      	mov	r1, r4
 800dede:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dee2:	3b30      	subs	r3, #48	; 0x30
 800dee4:	2b09      	cmp	r3, #9
 800dee6:	d94d      	bls.n	800df84 <_svfiprintf_r+0x17c>
 800dee8:	b1b0      	cbz	r0, 800df18 <_svfiprintf_r+0x110>
 800deea:	9207      	str	r2, [sp, #28]
 800deec:	e014      	b.n	800df18 <_svfiprintf_r+0x110>
 800deee:	eba0 0308 	sub.w	r3, r0, r8
 800def2:	fa09 f303 	lsl.w	r3, r9, r3
 800def6:	4313      	orrs	r3, r2
 800def8:	9304      	str	r3, [sp, #16]
 800defa:	46a2      	mov	sl, r4
 800defc:	e7d2      	b.n	800dea4 <_svfiprintf_r+0x9c>
 800defe:	9b03      	ldr	r3, [sp, #12]
 800df00:	1d19      	adds	r1, r3, #4
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	9103      	str	r1, [sp, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	bfbb      	ittet	lt
 800df0a:	425b      	neglt	r3, r3
 800df0c:	f042 0202 	orrlt.w	r2, r2, #2
 800df10:	9307      	strge	r3, [sp, #28]
 800df12:	9307      	strlt	r3, [sp, #28]
 800df14:	bfb8      	it	lt
 800df16:	9204      	strlt	r2, [sp, #16]
 800df18:	7823      	ldrb	r3, [r4, #0]
 800df1a:	2b2e      	cmp	r3, #46	; 0x2e
 800df1c:	d10c      	bne.n	800df38 <_svfiprintf_r+0x130>
 800df1e:	7863      	ldrb	r3, [r4, #1]
 800df20:	2b2a      	cmp	r3, #42	; 0x2a
 800df22:	d134      	bne.n	800df8e <_svfiprintf_r+0x186>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	1d1a      	adds	r2, r3, #4
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	9203      	str	r2, [sp, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	bfb8      	it	lt
 800df30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800df34:	3402      	adds	r4, #2
 800df36:	9305      	str	r3, [sp, #20]
 800df38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e000 <_svfiprintf_r+0x1f8>
 800df3c:	7821      	ldrb	r1, [r4, #0]
 800df3e:	2203      	movs	r2, #3
 800df40:	4650      	mov	r0, sl
 800df42:	f7f2 f945 	bl	80001d0 <memchr>
 800df46:	b138      	cbz	r0, 800df58 <_svfiprintf_r+0x150>
 800df48:	9b04      	ldr	r3, [sp, #16]
 800df4a:	eba0 000a 	sub.w	r0, r0, sl
 800df4e:	2240      	movs	r2, #64	; 0x40
 800df50:	4082      	lsls	r2, r0
 800df52:	4313      	orrs	r3, r2
 800df54:	3401      	adds	r4, #1
 800df56:	9304      	str	r3, [sp, #16]
 800df58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df5c:	4825      	ldr	r0, [pc, #148]	; (800dff4 <_svfiprintf_r+0x1ec>)
 800df5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df62:	2206      	movs	r2, #6
 800df64:	f7f2 f934 	bl	80001d0 <memchr>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d038      	beq.n	800dfde <_svfiprintf_r+0x1d6>
 800df6c:	4b22      	ldr	r3, [pc, #136]	; (800dff8 <_svfiprintf_r+0x1f0>)
 800df6e:	bb1b      	cbnz	r3, 800dfb8 <_svfiprintf_r+0x1b0>
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	3307      	adds	r3, #7
 800df74:	f023 0307 	bic.w	r3, r3, #7
 800df78:	3308      	adds	r3, #8
 800df7a:	9303      	str	r3, [sp, #12]
 800df7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df7e:	4433      	add	r3, r6
 800df80:	9309      	str	r3, [sp, #36]	; 0x24
 800df82:	e768      	b.n	800de56 <_svfiprintf_r+0x4e>
 800df84:	fb0c 3202 	mla	r2, ip, r2, r3
 800df88:	460c      	mov	r4, r1
 800df8a:	2001      	movs	r0, #1
 800df8c:	e7a6      	b.n	800dedc <_svfiprintf_r+0xd4>
 800df8e:	2300      	movs	r3, #0
 800df90:	3401      	adds	r4, #1
 800df92:	9305      	str	r3, [sp, #20]
 800df94:	4619      	mov	r1, r3
 800df96:	f04f 0c0a 	mov.w	ip, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfa0:	3a30      	subs	r2, #48	; 0x30
 800dfa2:	2a09      	cmp	r2, #9
 800dfa4:	d903      	bls.n	800dfae <_svfiprintf_r+0x1a6>
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0c6      	beq.n	800df38 <_svfiprintf_r+0x130>
 800dfaa:	9105      	str	r1, [sp, #20]
 800dfac:	e7c4      	b.n	800df38 <_svfiprintf_r+0x130>
 800dfae:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e7f0      	b.n	800df9a <_svfiprintf_r+0x192>
 800dfb8:	ab03      	add	r3, sp, #12
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	462a      	mov	r2, r5
 800dfbe:	4b0f      	ldr	r3, [pc, #60]	; (800dffc <_svfiprintf_r+0x1f4>)
 800dfc0:	a904      	add	r1, sp, #16
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	f7fe fb5c 	bl	800c680 <_printf_float>
 800dfc8:	1c42      	adds	r2, r0, #1
 800dfca:	4606      	mov	r6, r0
 800dfcc:	d1d6      	bne.n	800df7c <_svfiprintf_r+0x174>
 800dfce:	89ab      	ldrh	r3, [r5, #12]
 800dfd0:	065b      	lsls	r3, r3, #25
 800dfd2:	f53f af2d 	bmi.w	800de30 <_svfiprintf_r+0x28>
 800dfd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfd8:	b01d      	add	sp, #116	; 0x74
 800dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfde:	ab03      	add	r3, sp, #12
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	462a      	mov	r2, r5
 800dfe4:	4b05      	ldr	r3, [pc, #20]	; (800dffc <_svfiprintf_r+0x1f4>)
 800dfe6:	a904      	add	r1, sp, #16
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7fe fded 	bl	800cbc8 <_printf_i>
 800dfee:	e7eb      	b.n	800dfc8 <_svfiprintf_r+0x1c0>
 800dff0:	0800fb2d 	.word	0x0800fb2d
 800dff4:	0800fb37 	.word	0x0800fb37
 800dff8:	0800c681 	.word	0x0800c681
 800dffc:	0800dd55 	.word	0x0800dd55
 800e000:	0800fb33 	.word	0x0800fb33

0800e004 <malloc>:
 800e004:	4b02      	ldr	r3, [pc, #8]	; (800e010 <malloc+0xc>)
 800e006:	4601      	mov	r1, r0
 800e008:	6818      	ldr	r0, [r3, #0]
 800e00a:	f000 b823 	b.w	800e054 <_malloc_r>
 800e00e:	bf00      	nop
 800e010:	20000164 	.word	0x20000164

0800e014 <sbrk_aligned>:
 800e014:	b570      	push	{r4, r5, r6, lr}
 800e016:	4e0e      	ldr	r6, [pc, #56]	; (800e050 <sbrk_aligned+0x3c>)
 800e018:	460c      	mov	r4, r1
 800e01a:	6831      	ldr	r1, [r6, #0]
 800e01c:	4605      	mov	r5, r0
 800e01e:	b911      	cbnz	r1, 800e026 <sbrk_aligned+0x12>
 800e020:	f000 fd8e 	bl	800eb40 <_sbrk_r>
 800e024:	6030      	str	r0, [r6, #0]
 800e026:	4621      	mov	r1, r4
 800e028:	4628      	mov	r0, r5
 800e02a:	f000 fd89 	bl	800eb40 <_sbrk_r>
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	d00a      	beq.n	800e048 <sbrk_aligned+0x34>
 800e032:	1cc4      	adds	r4, r0, #3
 800e034:	f024 0403 	bic.w	r4, r4, #3
 800e038:	42a0      	cmp	r0, r4
 800e03a:	d007      	beq.n	800e04c <sbrk_aligned+0x38>
 800e03c:	1a21      	subs	r1, r4, r0
 800e03e:	4628      	mov	r0, r5
 800e040:	f000 fd7e 	bl	800eb40 <_sbrk_r>
 800e044:	3001      	adds	r0, #1
 800e046:	d101      	bne.n	800e04c <sbrk_aligned+0x38>
 800e048:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e04c:	4620      	mov	r0, r4
 800e04e:	bd70      	pop	{r4, r5, r6, pc}
 800e050:	20002434 	.word	0x20002434

0800e054 <_malloc_r>:
 800e054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e058:	1ccd      	adds	r5, r1, #3
 800e05a:	f025 0503 	bic.w	r5, r5, #3
 800e05e:	3508      	adds	r5, #8
 800e060:	2d0c      	cmp	r5, #12
 800e062:	bf38      	it	cc
 800e064:	250c      	movcc	r5, #12
 800e066:	2d00      	cmp	r5, #0
 800e068:	4607      	mov	r7, r0
 800e06a:	db01      	blt.n	800e070 <_malloc_r+0x1c>
 800e06c:	42a9      	cmp	r1, r5
 800e06e:	d905      	bls.n	800e07c <_malloc_r+0x28>
 800e070:	230c      	movs	r3, #12
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	2600      	movs	r6, #0
 800e076:	4630      	mov	r0, r6
 800e078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e150 <_malloc_r+0xfc>
 800e080:	f000 f916 	bl	800e2b0 <__malloc_lock>
 800e084:	f8d8 3000 	ldr.w	r3, [r8]
 800e088:	461c      	mov	r4, r3
 800e08a:	bb5c      	cbnz	r4, 800e0e4 <_malloc_r+0x90>
 800e08c:	4629      	mov	r1, r5
 800e08e:	4638      	mov	r0, r7
 800e090:	f7ff ffc0 	bl	800e014 <sbrk_aligned>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	4604      	mov	r4, r0
 800e098:	d155      	bne.n	800e146 <_malloc_r+0xf2>
 800e09a:	f8d8 4000 	ldr.w	r4, [r8]
 800e09e:	4626      	mov	r6, r4
 800e0a0:	2e00      	cmp	r6, #0
 800e0a2:	d145      	bne.n	800e130 <_malloc_r+0xdc>
 800e0a4:	2c00      	cmp	r4, #0
 800e0a6:	d048      	beq.n	800e13a <_malloc_r+0xe6>
 800e0a8:	6823      	ldr	r3, [r4, #0]
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	eb04 0903 	add.w	r9, r4, r3
 800e0b2:	f000 fd45 	bl	800eb40 <_sbrk_r>
 800e0b6:	4581      	cmp	r9, r0
 800e0b8:	d13f      	bne.n	800e13a <_malloc_r+0xe6>
 800e0ba:	6821      	ldr	r1, [r4, #0]
 800e0bc:	1a6d      	subs	r5, r5, r1
 800e0be:	4629      	mov	r1, r5
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7ff ffa7 	bl	800e014 <sbrk_aligned>
 800e0c6:	3001      	adds	r0, #1
 800e0c8:	d037      	beq.n	800e13a <_malloc_r+0xe6>
 800e0ca:	6823      	ldr	r3, [r4, #0]
 800e0cc:	442b      	add	r3, r5
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d038      	beq.n	800e14a <_malloc_r+0xf6>
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	42a2      	cmp	r2, r4
 800e0dc:	d12b      	bne.n	800e136 <_malloc_r+0xe2>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	605a      	str	r2, [r3, #4]
 800e0e2:	e00f      	b.n	800e104 <_malloc_r+0xb0>
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	1b52      	subs	r2, r2, r5
 800e0e8:	d41f      	bmi.n	800e12a <_malloc_r+0xd6>
 800e0ea:	2a0b      	cmp	r2, #11
 800e0ec:	d917      	bls.n	800e11e <_malloc_r+0xca>
 800e0ee:	1961      	adds	r1, r4, r5
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	6025      	str	r5, [r4, #0]
 800e0f4:	bf18      	it	ne
 800e0f6:	6059      	strne	r1, [r3, #4]
 800e0f8:	6863      	ldr	r3, [r4, #4]
 800e0fa:	bf08      	it	eq
 800e0fc:	f8c8 1000 	streq.w	r1, [r8]
 800e100:	5162      	str	r2, [r4, r5]
 800e102:	604b      	str	r3, [r1, #4]
 800e104:	4638      	mov	r0, r7
 800e106:	f104 060b 	add.w	r6, r4, #11
 800e10a:	f000 f8d7 	bl	800e2bc <__malloc_unlock>
 800e10e:	f026 0607 	bic.w	r6, r6, #7
 800e112:	1d23      	adds	r3, r4, #4
 800e114:	1af2      	subs	r2, r6, r3
 800e116:	d0ae      	beq.n	800e076 <_malloc_r+0x22>
 800e118:	1b9b      	subs	r3, r3, r6
 800e11a:	50a3      	str	r3, [r4, r2]
 800e11c:	e7ab      	b.n	800e076 <_malloc_r+0x22>
 800e11e:	42a3      	cmp	r3, r4
 800e120:	6862      	ldr	r2, [r4, #4]
 800e122:	d1dd      	bne.n	800e0e0 <_malloc_r+0x8c>
 800e124:	f8c8 2000 	str.w	r2, [r8]
 800e128:	e7ec      	b.n	800e104 <_malloc_r+0xb0>
 800e12a:	4623      	mov	r3, r4
 800e12c:	6864      	ldr	r4, [r4, #4]
 800e12e:	e7ac      	b.n	800e08a <_malloc_r+0x36>
 800e130:	4634      	mov	r4, r6
 800e132:	6876      	ldr	r6, [r6, #4]
 800e134:	e7b4      	b.n	800e0a0 <_malloc_r+0x4c>
 800e136:	4613      	mov	r3, r2
 800e138:	e7cc      	b.n	800e0d4 <_malloc_r+0x80>
 800e13a:	230c      	movs	r3, #12
 800e13c:	603b      	str	r3, [r7, #0]
 800e13e:	4638      	mov	r0, r7
 800e140:	f000 f8bc 	bl	800e2bc <__malloc_unlock>
 800e144:	e797      	b.n	800e076 <_malloc_r+0x22>
 800e146:	6025      	str	r5, [r4, #0]
 800e148:	e7dc      	b.n	800e104 <_malloc_r+0xb0>
 800e14a:	605b      	str	r3, [r3, #4]
 800e14c:	deff      	udf	#255	; 0xff
 800e14e:	bf00      	nop
 800e150:	20002430 	.word	0x20002430

0800e154 <__sflush_r>:
 800e154:	898a      	ldrh	r2, [r1, #12]
 800e156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e15a:	4605      	mov	r5, r0
 800e15c:	0710      	lsls	r0, r2, #28
 800e15e:	460c      	mov	r4, r1
 800e160:	d458      	bmi.n	800e214 <__sflush_r+0xc0>
 800e162:	684b      	ldr	r3, [r1, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	dc05      	bgt.n	800e174 <__sflush_r+0x20>
 800e168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	dc02      	bgt.n	800e174 <__sflush_r+0x20>
 800e16e:	2000      	movs	r0, #0
 800e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e176:	2e00      	cmp	r6, #0
 800e178:	d0f9      	beq.n	800e16e <__sflush_r+0x1a>
 800e17a:	2300      	movs	r3, #0
 800e17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e180:	682f      	ldr	r7, [r5, #0]
 800e182:	6a21      	ldr	r1, [r4, #32]
 800e184:	602b      	str	r3, [r5, #0]
 800e186:	d032      	beq.n	800e1ee <__sflush_r+0x9a>
 800e188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	075a      	lsls	r2, r3, #29
 800e18e:	d505      	bpl.n	800e19c <__sflush_r+0x48>
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	1ac0      	subs	r0, r0, r3
 800e194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e196:	b10b      	cbz	r3, 800e19c <__sflush_r+0x48>
 800e198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e19a:	1ac0      	subs	r0, r0, r3
 800e19c:	2300      	movs	r3, #0
 800e19e:	4602      	mov	r2, r0
 800e1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1a2:	6a21      	ldr	r1, [r4, #32]
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	47b0      	blx	r6
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	d106      	bne.n	800e1bc <__sflush_r+0x68>
 800e1ae:	6829      	ldr	r1, [r5, #0]
 800e1b0:	291d      	cmp	r1, #29
 800e1b2:	d82b      	bhi.n	800e20c <__sflush_r+0xb8>
 800e1b4:	4a29      	ldr	r2, [pc, #164]	; (800e25c <__sflush_r+0x108>)
 800e1b6:	410a      	asrs	r2, r1
 800e1b8:	07d6      	lsls	r6, r2, #31
 800e1ba:	d427      	bmi.n	800e20c <__sflush_r+0xb8>
 800e1bc:	2200      	movs	r2, #0
 800e1be:	6062      	str	r2, [r4, #4]
 800e1c0:	04d9      	lsls	r1, r3, #19
 800e1c2:	6922      	ldr	r2, [r4, #16]
 800e1c4:	6022      	str	r2, [r4, #0]
 800e1c6:	d504      	bpl.n	800e1d2 <__sflush_r+0x7e>
 800e1c8:	1c42      	adds	r2, r0, #1
 800e1ca:	d101      	bne.n	800e1d0 <__sflush_r+0x7c>
 800e1cc:	682b      	ldr	r3, [r5, #0]
 800e1ce:	b903      	cbnz	r3, 800e1d2 <__sflush_r+0x7e>
 800e1d0:	6560      	str	r0, [r4, #84]	; 0x54
 800e1d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1d4:	602f      	str	r7, [r5, #0]
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	d0c9      	beq.n	800e16e <__sflush_r+0x1a>
 800e1da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1de:	4299      	cmp	r1, r3
 800e1e0:	d002      	beq.n	800e1e8 <__sflush_r+0x94>
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f000 fd02 	bl	800ebec <_free_r>
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	6360      	str	r0, [r4, #52]	; 0x34
 800e1ec:	e7c0      	b.n	800e170 <__sflush_r+0x1c>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	47b0      	blx	r6
 800e1f4:	1c41      	adds	r1, r0, #1
 800e1f6:	d1c8      	bne.n	800e18a <__sflush_r+0x36>
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0c5      	beq.n	800e18a <__sflush_r+0x36>
 800e1fe:	2b1d      	cmp	r3, #29
 800e200:	d001      	beq.n	800e206 <__sflush_r+0xb2>
 800e202:	2b16      	cmp	r3, #22
 800e204:	d101      	bne.n	800e20a <__sflush_r+0xb6>
 800e206:	602f      	str	r7, [r5, #0]
 800e208:	e7b1      	b.n	800e16e <__sflush_r+0x1a>
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e210:	81a3      	strh	r3, [r4, #12]
 800e212:	e7ad      	b.n	800e170 <__sflush_r+0x1c>
 800e214:	690f      	ldr	r7, [r1, #16]
 800e216:	2f00      	cmp	r7, #0
 800e218:	d0a9      	beq.n	800e16e <__sflush_r+0x1a>
 800e21a:	0793      	lsls	r3, r2, #30
 800e21c:	680e      	ldr	r6, [r1, #0]
 800e21e:	bf08      	it	eq
 800e220:	694b      	ldreq	r3, [r1, #20]
 800e222:	600f      	str	r7, [r1, #0]
 800e224:	bf18      	it	ne
 800e226:	2300      	movne	r3, #0
 800e228:	eba6 0807 	sub.w	r8, r6, r7
 800e22c:	608b      	str	r3, [r1, #8]
 800e22e:	f1b8 0f00 	cmp.w	r8, #0
 800e232:	dd9c      	ble.n	800e16e <__sflush_r+0x1a>
 800e234:	6a21      	ldr	r1, [r4, #32]
 800e236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e238:	4643      	mov	r3, r8
 800e23a:	463a      	mov	r2, r7
 800e23c:	4628      	mov	r0, r5
 800e23e:	47b0      	blx	r6
 800e240:	2800      	cmp	r0, #0
 800e242:	dc06      	bgt.n	800e252 <__sflush_r+0xfe>
 800e244:	89a3      	ldrh	r3, [r4, #12]
 800e246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e24a:	81a3      	strh	r3, [r4, #12]
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e250:	e78e      	b.n	800e170 <__sflush_r+0x1c>
 800e252:	4407      	add	r7, r0
 800e254:	eba8 0800 	sub.w	r8, r8, r0
 800e258:	e7e9      	b.n	800e22e <__sflush_r+0xda>
 800e25a:	bf00      	nop
 800e25c:	dfbffffe 	.word	0xdfbffffe

0800e260 <_fflush_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	690b      	ldr	r3, [r1, #16]
 800e264:	4605      	mov	r5, r0
 800e266:	460c      	mov	r4, r1
 800e268:	b913      	cbnz	r3, 800e270 <_fflush_r+0x10>
 800e26a:	2500      	movs	r5, #0
 800e26c:	4628      	mov	r0, r5
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	b118      	cbz	r0, 800e27a <_fflush_r+0x1a>
 800e272:	6a03      	ldr	r3, [r0, #32]
 800e274:	b90b      	cbnz	r3, 800e27a <_fflush_r+0x1a>
 800e276:	f7fe fe75 	bl	800cf64 <__sinit>
 800e27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d0f3      	beq.n	800e26a <_fflush_r+0xa>
 800e282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e284:	07d0      	lsls	r0, r2, #31
 800e286:	d404      	bmi.n	800e292 <_fflush_r+0x32>
 800e288:	0599      	lsls	r1, r3, #22
 800e28a:	d402      	bmi.n	800e292 <_fflush_r+0x32>
 800e28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e28e:	f7fe fed6 	bl	800d03e <__retarget_lock_acquire_recursive>
 800e292:	4628      	mov	r0, r5
 800e294:	4621      	mov	r1, r4
 800e296:	f7ff ff5d 	bl	800e154 <__sflush_r>
 800e29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e29c:	07da      	lsls	r2, r3, #31
 800e29e:	4605      	mov	r5, r0
 800e2a0:	d4e4      	bmi.n	800e26c <_fflush_r+0xc>
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	059b      	lsls	r3, r3, #22
 800e2a6:	d4e1      	bmi.n	800e26c <_fflush_r+0xc>
 800e2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2aa:	f7fe fec9 	bl	800d040 <__retarget_lock_release_recursive>
 800e2ae:	e7dd      	b.n	800e26c <_fflush_r+0xc>

0800e2b0 <__malloc_lock>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__malloc_lock+0x8>)
 800e2b2:	f7fe bec4 	b.w	800d03e <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	2000242c 	.word	0x2000242c

0800e2bc <__malloc_unlock>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	; (800e2c4 <__malloc_unlock+0x8>)
 800e2be:	f7fe bebf 	b.w	800d040 <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	2000242c 	.word	0x2000242c

0800e2c8 <_Balloc>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	69c6      	ldr	r6, [r0, #28]
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	b976      	cbnz	r6, 800e2f0 <_Balloc+0x28>
 800e2d2:	2010      	movs	r0, #16
 800e2d4:	f7ff fe96 	bl	800e004 <malloc>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	61e0      	str	r0, [r4, #28]
 800e2dc:	b920      	cbnz	r0, 800e2e8 <_Balloc+0x20>
 800e2de:	4b18      	ldr	r3, [pc, #96]	; (800e340 <_Balloc+0x78>)
 800e2e0:	4818      	ldr	r0, [pc, #96]	; (800e344 <_Balloc+0x7c>)
 800e2e2:	216b      	movs	r1, #107	; 0x6b
 800e2e4:	f000 fc4e 	bl	800eb84 <__assert_func>
 800e2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2ec:	6006      	str	r6, [r0, #0]
 800e2ee:	60c6      	str	r6, [r0, #12]
 800e2f0:	69e6      	ldr	r6, [r4, #28]
 800e2f2:	68f3      	ldr	r3, [r6, #12]
 800e2f4:	b183      	cbz	r3, 800e318 <_Balloc+0x50>
 800e2f6:	69e3      	ldr	r3, [r4, #28]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2fe:	b9b8      	cbnz	r0, 800e330 <_Balloc+0x68>
 800e300:	2101      	movs	r1, #1
 800e302:	fa01 f605 	lsl.w	r6, r1, r5
 800e306:	1d72      	adds	r2, r6, #5
 800e308:	0092      	lsls	r2, r2, #2
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 fc58 	bl	800ebc0 <_calloc_r>
 800e310:	b160      	cbz	r0, 800e32c <_Balloc+0x64>
 800e312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e316:	e00e      	b.n	800e336 <_Balloc+0x6e>
 800e318:	2221      	movs	r2, #33	; 0x21
 800e31a:	2104      	movs	r1, #4
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 fc4f 	bl	800ebc0 <_calloc_r>
 800e322:	69e3      	ldr	r3, [r4, #28]
 800e324:	60f0      	str	r0, [r6, #12]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1e4      	bne.n	800e2f6 <_Balloc+0x2e>
 800e32c:	2000      	movs	r0, #0
 800e32e:	bd70      	pop	{r4, r5, r6, pc}
 800e330:	6802      	ldr	r2, [r0, #0]
 800e332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e336:	2300      	movs	r3, #0
 800e338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e33c:	e7f7      	b.n	800e32e <_Balloc+0x66>
 800e33e:	bf00      	nop
 800e340:	0800faad 	.word	0x0800faad
 800e344:	0800fb3e 	.word	0x0800fb3e

0800e348 <_Bfree>:
 800e348:	b570      	push	{r4, r5, r6, lr}
 800e34a:	69c6      	ldr	r6, [r0, #28]
 800e34c:	4605      	mov	r5, r0
 800e34e:	460c      	mov	r4, r1
 800e350:	b976      	cbnz	r6, 800e370 <_Bfree+0x28>
 800e352:	2010      	movs	r0, #16
 800e354:	f7ff fe56 	bl	800e004 <malloc>
 800e358:	4602      	mov	r2, r0
 800e35a:	61e8      	str	r0, [r5, #28]
 800e35c:	b920      	cbnz	r0, 800e368 <_Bfree+0x20>
 800e35e:	4b09      	ldr	r3, [pc, #36]	; (800e384 <_Bfree+0x3c>)
 800e360:	4809      	ldr	r0, [pc, #36]	; (800e388 <_Bfree+0x40>)
 800e362:	218f      	movs	r1, #143	; 0x8f
 800e364:	f000 fc0e 	bl	800eb84 <__assert_func>
 800e368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e36c:	6006      	str	r6, [r0, #0]
 800e36e:	60c6      	str	r6, [r0, #12]
 800e370:	b13c      	cbz	r4, 800e382 <_Bfree+0x3a>
 800e372:	69eb      	ldr	r3, [r5, #28]
 800e374:	6862      	ldr	r2, [r4, #4]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e37c:	6021      	str	r1, [r4, #0]
 800e37e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e382:	bd70      	pop	{r4, r5, r6, pc}
 800e384:	0800faad 	.word	0x0800faad
 800e388:	0800fb3e 	.word	0x0800fb3e

0800e38c <__multadd>:
 800e38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e390:	690d      	ldr	r5, [r1, #16]
 800e392:	4607      	mov	r7, r0
 800e394:	460c      	mov	r4, r1
 800e396:	461e      	mov	r6, r3
 800e398:	f101 0c14 	add.w	ip, r1, #20
 800e39c:	2000      	movs	r0, #0
 800e39e:	f8dc 3000 	ldr.w	r3, [ip]
 800e3a2:	b299      	uxth	r1, r3
 800e3a4:	fb02 6101 	mla	r1, r2, r1, r6
 800e3a8:	0c1e      	lsrs	r6, r3, #16
 800e3aa:	0c0b      	lsrs	r3, r1, #16
 800e3ac:	fb02 3306 	mla	r3, r2, r6, r3
 800e3b0:	b289      	uxth	r1, r1
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3b8:	4285      	cmp	r5, r0
 800e3ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e3be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3c2:	dcec      	bgt.n	800e39e <__multadd+0x12>
 800e3c4:	b30e      	cbz	r6, 800e40a <__multadd+0x7e>
 800e3c6:	68a3      	ldr	r3, [r4, #8]
 800e3c8:	42ab      	cmp	r3, r5
 800e3ca:	dc19      	bgt.n	800e400 <__multadd+0x74>
 800e3cc:	6861      	ldr	r1, [r4, #4]
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	3101      	adds	r1, #1
 800e3d2:	f7ff ff79 	bl	800e2c8 <_Balloc>
 800e3d6:	4680      	mov	r8, r0
 800e3d8:	b928      	cbnz	r0, 800e3e6 <__multadd+0x5a>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <__multadd+0x84>)
 800e3de:	480d      	ldr	r0, [pc, #52]	; (800e414 <__multadd+0x88>)
 800e3e0:	21ba      	movs	r1, #186	; 0xba
 800e3e2:	f000 fbcf 	bl	800eb84 <__assert_func>
 800e3e6:	6922      	ldr	r2, [r4, #16]
 800e3e8:	3202      	adds	r2, #2
 800e3ea:	f104 010c 	add.w	r1, r4, #12
 800e3ee:	0092      	lsls	r2, r2, #2
 800e3f0:	300c      	adds	r0, #12
 800e3f2:	f7fe fe26 	bl	800d042 <memcpy>
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	f7ff ffa5 	bl	800e348 <_Bfree>
 800e3fe:	4644      	mov	r4, r8
 800e400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e404:	3501      	adds	r5, #1
 800e406:	615e      	str	r6, [r3, #20]
 800e408:	6125      	str	r5, [r4, #16]
 800e40a:	4620      	mov	r0, r4
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e410:	0800fb1c 	.word	0x0800fb1c
 800e414:	0800fb3e 	.word	0x0800fb3e

0800e418 <__hi0bits>:
 800e418:	0c03      	lsrs	r3, r0, #16
 800e41a:	041b      	lsls	r3, r3, #16
 800e41c:	b9d3      	cbnz	r3, 800e454 <__hi0bits+0x3c>
 800e41e:	0400      	lsls	r0, r0, #16
 800e420:	2310      	movs	r3, #16
 800e422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e426:	bf04      	itt	eq
 800e428:	0200      	lsleq	r0, r0, #8
 800e42a:	3308      	addeq	r3, #8
 800e42c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e430:	bf04      	itt	eq
 800e432:	0100      	lsleq	r0, r0, #4
 800e434:	3304      	addeq	r3, #4
 800e436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e43a:	bf04      	itt	eq
 800e43c:	0080      	lsleq	r0, r0, #2
 800e43e:	3302      	addeq	r3, #2
 800e440:	2800      	cmp	r0, #0
 800e442:	db05      	blt.n	800e450 <__hi0bits+0x38>
 800e444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e448:	f103 0301 	add.w	r3, r3, #1
 800e44c:	bf08      	it	eq
 800e44e:	2320      	moveq	r3, #32
 800e450:	4618      	mov	r0, r3
 800e452:	4770      	bx	lr
 800e454:	2300      	movs	r3, #0
 800e456:	e7e4      	b.n	800e422 <__hi0bits+0xa>

0800e458 <__lo0bits>:
 800e458:	6803      	ldr	r3, [r0, #0]
 800e45a:	f013 0207 	ands.w	r2, r3, #7
 800e45e:	d00c      	beq.n	800e47a <__lo0bits+0x22>
 800e460:	07d9      	lsls	r1, r3, #31
 800e462:	d422      	bmi.n	800e4aa <__lo0bits+0x52>
 800e464:	079a      	lsls	r2, r3, #30
 800e466:	bf49      	itett	mi
 800e468:	085b      	lsrmi	r3, r3, #1
 800e46a:	089b      	lsrpl	r3, r3, #2
 800e46c:	6003      	strmi	r3, [r0, #0]
 800e46e:	2201      	movmi	r2, #1
 800e470:	bf5c      	itt	pl
 800e472:	6003      	strpl	r3, [r0, #0]
 800e474:	2202      	movpl	r2, #2
 800e476:	4610      	mov	r0, r2
 800e478:	4770      	bx	lr
 800e47a:	b299      	uxth	r1, r3
 800e47c:	b909      	cbnz	r1, 800e482 <__lo0bits+0x2a>
 800e47e:	0c1b      	lsrs	r3, r3, #16
 800e480:	2210      	movs	r2, #16
 800e482:	b2d9      	uxtb	r1, r3
 800e484:	b909      	cbnz	r1, 800e48a <__lo0bits+0x32>
 800e486:	3208      	adds	r2, #8
 800e488:	0a1b      	lsrs	r3, r3, #8
 800e48a:	0719      	lsls	r1, r3, #28
 800e48c:	bf04      	itt	eq
 800e48e:	091b      	lsreq	r3, r3, #4
 800e490:	3204      	addeq	r2, #4
 800e492:	0799      	lsls	r1, r3, #30
 800e494:	bf04      	itt	eq
 800e496:	089b      	lsreq	r3, r3, #2
 800e498:	3202      	addeq	r2, #2
 800e49a:	07d9      	lsls	r1, r3, #31
 800e49c:	d403      	bmi.n	800e4a6 <__lo0bits+0x4e>
 800e49e:	085b      	lsrs	r3, r3, #1
 800e4a0:	f102 0201 	add.w	r2, r2, #1
 800e4a4:	d003      	beq.n	800e4ae <__lo0bits+0x56>
 800e4a6:	6003      	str	r3, [r0, #0]
 800e4a8:	e7e5      	b.n	800e476 <__lo0bits+0x1e>
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	e7e3      	b.n	800e476 <__lo0bits+0x1e>
 800e4ae:	2220      	movs	r2, #32
 800e4b0:	e7e1      	b.n	800e476 <__lo0bits+0x1e>
	...

0800e4b4 <__i2b>:
 800e4b4:	b510      	push	{r4, lr}
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	f7ff ff05 	bl	800e2c8 <_Balloc>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	b928      	cbnz	r0, 800e4ce <__i2b+0x1a>
 800e4c2:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <__i2b+0x24>)
 800e4c4:	4805      	ldr	r0, [pc, #20]	; (800e4dc <__i2b+0x28>)
 800e4c6:	f240 1145 	movw	r1, #325	; 0x145
 800e4ca:	f000 fb5b 	bl	800eb84 <__assert_func>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	6144      	str	r4, [r0, #20]
 800e4d2:	6103      	str	r3, [r0, #16]
 800e4d4:	bd10      	pop	{r4, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800fb1c 	.word	0x0800fb1c
 800e4dc:	0800fb3e 	.word	0x0800fb3e

0800e4e0 <__multiply>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	4691      	mov	r9, r2
 800e4e6:	690a      	ldr	r2, [r1, #16]
 800e4e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	bfb8      	it	lt
 800e4f0:	460b      	movlt	r3, r1
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	bfbc      	itt	lt
 800e4f6:	464c      	movlt	r4, r9
 800e4f8:	4699      	movlt	r9, r3
 800e4fa:	6927      	ldr	r7, [r4, #16]
 800e4fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e500:	68a3      	ldr	r3, [r4, #8]
 800e502:	6861      	ldr	r1, [r4, #4]
 800e504:	eb07 060a 	add.w	r6, r7, sl
 800e508:	42b3      	cmp	r3, r6
 800e50a:	b085      	sub	sp, #20
 800e50c:	bfb8      	it	lt
 800e50e:	3101      	addlt	r1, #1
 800e510:	f7ff feda 	bl	800e2c8 <_Balloc>
 800e514:	b930      	cbnz	r0, 800e524 <__multiply+0x44>
 800e516:	4602      	mov	r2, r0
 800e518:	4b44      	ldr	r3, [pc, #272]	; (800e62c <__multiply+0x14c>)
 800e51a:	4845      	ldr	r0, [pc, #276]	; (800e630 <__multiply+0x150>)
 800e51c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e520:	f000 fb30 	bl	800eb84 <__assert_func>
 800e524:	f100 0514 	add.w	r5, r0, #20
 800e528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e52c:	462b      	mov	r3, r5
 800e52e:	2200      	movs	r2, #0
 800e530:	4543      	cmp	r3, r8
 800e532:	d321      	bcc.n	800e578 <__multiply+0x98>
 800e534:	f104 0314 	add.w	r3, r4, #20
 800e538:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e53c:	f109 0314 	add.w	r3, r9, #20
 800e540:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e544:	9202      	str	r2, [sp, #8]
 800e546:	1b3a      	subs	r2, r7, r4
 800e548:	3a15      	subs	r2, #21
 800e54a:	f022 0203 	bic.w	r2, r2, #3
 800e54e:	3204      	adds	r2, #4
 800e550:	f104 0115 	add.w	r1, r4, #21
 800e554:	428f      	cmp	r7, r1
 800e556:	bf38      	it	cc
 800e558:	2204      	movcc	r2, #4
 800e55a:	9201      	str	r2, [sp, #4]
 800e55c:	9a02      	ldr	r2, [sp, #8]
 800e55e:	9303      	str	r3, [sp, #12]
 800e560:	429a      	cmp	r2, r3
 800e562:	d80c      	bhi.n	800e57e <__multiply+0x9e>
 800e564:	2e00      	cmp	r6, #0
 800e566:	dd03      	ble.n	800e570 <__multiply+0x90>
 800e568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d05b      	beq.n	800e628 <__multiply+0x148>
 800e570:	6106      	str	r6, [r0, #16]
 800e572:	b005      	add	sp, #20
 800e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e578:	f843 2b04 	str.w	r2, [r3], #4
 800e57c:	e7d8      	b.n	800e530 <__multiply+0x50>
 800e57e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e582:	f1ba 0f00 	cmp.w	sl, #0
 800e586:	d024      	beq.n	800e5d2 <__multiply+0xf2>
 800e588:	f104 0e14 	add.w	lr, r4, #20
 800e58c:	46a9      	mov	r9, r5
 800e58e:	f04f 0c00 	mov.w	ip, #0
 800e592:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e596:	f8d9 1000 	ldr.w	r1, [r9]
 800e59a:	fa1f fb82 	uxth.w	fp, r2
 800e59e:	b289      	uxth	r1, r1
 800e5a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e5ac:	4461      	add	r1, ip
 800e5ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5ba:	b289      	uxth	r1, r1
 800e5bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e5c0:	4577      	cmp	r7, lr
 800e5c2:	f849 1b04 	str.w	r1, [r9], #4
 800e5c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5ca:	d8e2      	bhi.n	800e592 <__multiply+0xb2>
 800e5cc:	9a01      	ldr	r2, [sp, #4]
 800e5ce:	f845 c002 	str.w	ip, [r5, r2]
 800e5d2:	9a03      	ldr	r2, [sp, #12]
 800e5d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5d8:	3304      	adds	r3, #4
 800e5da:	f1b9 0f00 	cmp.w	r9, #0
 800e5de:	d021      	beq.n	800e624 <__multiply+0x144>
 800e5e0:	6829      	ldr	r1, [r5, #0]
 800e5e2:	f104 0c14 	add.w	ip, r4, #20
 800e5e6:	46ae      	mov	lr, r5
 800e5e8:	f04f 0a00 	mov.w	sl, #0
 800e5ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e5f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e5f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e5f8:	4452      	add	r2, sl
 800e5fa:	b289      	uxth	r1, r1
 800e5fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e600:	f84e 1b04 	str.w	r1, [lr], #4
 800e604:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e608:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e60c:	f8be 1000 	ldrh.w	r1, [lr]
 800e610:	fb09 110a 	mla	r1, r9, sl, r1
 800e614:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e618:	4567      	cmp	r7, ip
 800e61a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e61e:	d8e5      	bhi.n	800e5ec <__multiply+0x10c>
 800e620:	9a01      	ldr	r2, [sp, #4]
 800e622:	50a9      	str	r1, [r5, r2]
 800e624:	3504      	adds	r5, #4
 800e626:	e799      	b.n	800e55c <__multiply+0x7c>
 800e628:	3e01      	subs	r6, #1
 800e62a:	e79b      	b.n	800e564 <__multiply+0x84>
 800e62c:	0800fb1c 	.word	0x0800fb1c
 800e630:	0800fb3e 	.word	0x0800fb3e

0800e634 <__pow5mult>:
 800e634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e638:	4615      	mov	r5, r2
 800e63a:	f012 0203 	ands.w	r2, r2, #3
 800e63e:	4606      	mov	r6, r0
 800e640:	460f      	mov	r7, r1
 800e642:	d007      	beq.n	800e654 <__pow5mult+0x20>
 800e644:	4c25      	ldr	r4, [pc, #148]	; (800e6dc <__pow5mult+0xa8>)
 800e646:	3a01      	subs	r2, #1
 800e648:	2300      	movs	r3, #0
 800e64a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e64e:	f7ff fe9d 	bl	800e38c <__multadd>
 800e652:	4607      	mov	r7, r0
 800e654:	10ad      	asrs	r5, r5, #2
 800e656:	d03d      	beq.n	800e6d4 <__pow5mult+0xa0>
 800e658:	69f4      	ldr	r4, [r6, #28]
 800e65a:	b97c      	cbnz	r4, 800e67c <__pow5mult+0x48>
 800e65c:	2010      	movs	r0, #16
 800e65e:	f7ff fcd1 	bl	800e004 <malloc>
 800e662:	4602      	mov	r2, r0
 800e664:	61f0      	str	r0, [r6, #28]
 800e666:	b928      	cbnz	r0, 800e674 <__pow5mult+0x40>
 800e668:	4b1d      	ldr	r3, [pc, #116]	; (800e6e0 <__pow5mult+0xac>)
 800e66a:	481e      	ldr	r0, [pc, #120]	; (800e6e4 <__pow5mult+0xb0>)
 800e66c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e670:	f000 fa88 	bl	800eb84 <__assert_func>
 800e674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e678:	6004      	str	r4, [r0, #0]
 800e67a:	60c4      	str	r4, [r0, #12]
 800e67c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e684:	b94c      	cbnz	r4, 800e69a <__pow5mult+0x66>
 800e686:	f240 2171 	movw	r1, #625	; 0x271
 800e68a:	4630      	mov	r0, r6
 800e68c:	f7ff ff12 	bl	800e4b4 <__i2b>
 800e690:	2300      	movs	r3, #0
 800e692:	f8c8 0008 	str.w	r0, [r8, #8]
 800e696:	4604      	mov	r4, r0
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	f04f 0900 	mov.w	r9, #0
 800e69e:	07eb      	lsls	r3, r5, #31
 800e6a0:	d50a      	bpl.n	800e6b8 <__pow5mult+0x84>
 800e6a2:	4639      	mov	r1, r7
 800e6a4:	4622      	mov	r2, r4
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7ff ff1a 	bl	800e4e0 <__multiply>
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	4680      	mov	r8, r0
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f7ff fe49 	bl	800e348 <_Bfree>
 800e6b6:	4647      	mov	r7, r8
 800e6b8:	106d      	asrs	r5, r5, #1
 800e6ba:	d00b      	beq.n	800e6d4 <__pow5mult+0xa0>
 800e6bc:	6820      	ldr	r0, [r4, #0]
 800e6be:	b938      	cbnz	r0, 800e6d0 <__pow5mult+0x9c>
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff ff0b 	bl	800e4e0 <__multiply>
 800e6ca:	6020      	str	r0, [r4, #0]
 800e6cc:	f8c0 9000 	str.w	r9, [r0]
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	e7e4      	b.n	800e69e <__pow5mult+0x6a>
 800e6d4:	4638      	mov	r0, r7
 800e6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6da:	bf00      	nop
 800e6dc:	0800fc88 	.word	0x0800fc88
 800e6e0:	0800faad 	.word	0x0800faad
 800e6e4:	0800fb3e 	.word	0x0800fb3e

0800e6e8 <__lshift>:
 800e6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ec:	460c      	mov	r4, r1
 800e6ee:	6849      	ldr	r1, [r1, #4]
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6f6:	68a3      	ldr	r3, [r4, #8]
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	4691      	mov	r9, r2
 800e6fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e700:	f108 0601 	add.w	r6, r8, #1
 800e704:	42b3      	cmp	r3, r6
 800e706:	db0b      	blt.n	800e720 <__lshift+0x38>
 800e708:	4638      	mov	r0, r7
 800e70a:	f7ff fddd 	bl	800e2c8 <_Balloc>
 800e70e:	4605      	mov	r5, r0
 800e710:	b948      	cbnz	r0, 800e726 <__lshift+0x3e>
 800e712:	4602      	mov	r2, r0
 800e714:	4b28      	ldr	r3, [pc, #160]	; (800e7b8 <__lshift+0xd0>)
 800e716:	4829      	ldr	r0, [pc, #164]	; (800e7bc <__lshift+0xd4>)
 800e718:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e71c:	f000 fa32 	bl	800eb84 <__assert_func>
 800e720:	3101      	adds	r1, #1
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	e7ee      	b.n	800e704 <__lshift+0x1c>
 800e726:	2300      	movs	r3, #0
 800e728:	f100 0114 	add.w	r1, r0, #20
 800e72c:	f100 0210 	add.w	r2, r0, #16
 800e730:	4618      	mov	r0, r3
 800e732:	4553      	cmp	r3, sl
 800e734:	db33      	blt.n	800e79e <__lshift+0xb6>
 800e736:	6920      	ldr	r0, [r4, #16]
 800e738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e73c:	f104 0314 	add.w	r3, r4, #20
 800e740:	f019 091f 	ands.w	r9, r9, #31
 800e744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e74c:	d02b      	beq.n	800e7a6 <__lshift+0xbe>
 800e74e:	f1c9 0e20 	rsb	lr, r9, #32
 800e752:	468a      	mov	sl, r1
 800e754:	2200      	movs	r2, #0
 800e756:	6818      	ldr	r0, [r3, #0]
 800e758:	fa00 f009 	lsl.w	r0, r0, r9
 800e75c:	4310      	orrs	r0, r2
 800e75e:	f84a 0b04 	str.w	r0, [sl], #4
 800e762:	f853 2b04 	ldr.w	r2, [r3], #4
 800e766:	459c      	cmp	ip, r3
 800e768:	fa22 f20e 	lsr.w	r2, r2, lr
 800e76c:	d8f3      	bhi.n	800e756 <__lshift+0x6e>
 800e76e:	ebac 0304 	sub.w	r3, ip, r4
 800e772:	3b15      	subs	r3, #21
 800e774:	f023 0303 	bic.w	r3, r3, #3
 800e778:	3304      	adds	r3, #4
 800e77a:	f104 0015 	add.w	r0, r4, #21
 800e77e:	4584      	cmp	ip, r0
 800e780:	bf38      	it	cc
 800e782:	2304      	movcc	r3, #4
 800e784:	50ca      	str	r2, [r1, r3]
 800e786:	b10a      	cbz	r2, 800e78c <__lshift+0xa4>
 800e788:	f108 0602 	add.w	r6, r8, #2
 800e78c:	3e01      	subs	r6, #1
 800e78e:	4638      	mov	r0, r7
 800e790:	612e      	str	r6, [r5, #16]
 800e792:	4621      	mov	r1, r4
 800e794:	f7ff fdd8 	bl	800e348 <_Bfree>
 800e798:	4628      	mov	r0, r5
 800e79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e79e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	e7c5      	b.n	800e732 <__lshift+0x4a>
 800e7a6:	3904      	subs	r1, #4
 800e7a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7b0:	459c      	cmp	ip, r3
 800e7b2:	d8f9      	bhi.n	800e7a8 <__lshift+0xc0>
 800e7b4:	e7ea      	b.n	800e78c <__lshift+0xa4>
 800e7b6:	bf00      	nop
 800e7b8:	0800fb1c 	.word	0x0800fb1c
 800e7bc:	0800fb3e 	.word	0x0800fb3e

0800e7c0 <__mcmp>:
 800e7c0:	b530      	push	{r4, r5, lr}
 800e7c2:	6902      	ldr	r2, [r0, #16]
 800e7c4:	690c      	ldr	r4, [r1, #16]
 800e7c6:	1b12      	subs	r2, r2, r4
 800e7c8:	d10e      	bne.n	800e7e8 <__mcmp+0x28>
 800e7ca:	f100 0314 	add.w	r3, r0, #20
 800e7ce:	3114      	adds	r1, #20
 800e7d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e7d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e7d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e7dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e7e0:	42a5      	cmp	r5, r4
 800e7e2:	d003      	beq.n	800e7ec <__mcmp+0x2c>
 800e7e4:	d305      	bcc.n	800e7f2 <__mcmp+0x32>
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	bd30      	pop	{r4, r5, pc}
 800e7ec:	4283      	cmp	r3, r0
 800e7ee:	d3f3      	bcc.n	800e7d8 <__mcmp+0x18>
 800e7f0:	e7fa      	b.n	800e7e8 <__mcmp+0x28>
 800e7f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7f6:	e7f7      	b.n	800e7e8 <__mcmp+0x28>

0800e7f8 <__mdiff>:
 800e7f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	4606      	mov	r6, r0
 800e800:	4611      	mov	r1, r2
 800e802:	4620      	mov	r0, r4
 800e804:	4690      	mov	r8, r2
 800e806:	f7ff ffdb 	bl	800e7c0 <__mcmp>
 800e80a:	1e05      	subs	r5, r0, #0
 800e80c:	d110      	bne.n	800e830 <__mdiff+0x38>
 800e80e:	4629      	mov	r1, r5
 800e810:	4630      	mov	r0, r6
 800e812:	f7ff fd59 	bl	800e2c8 <_Balloc>
 800e816:	b930      	cbnz	r0, 800e826 <__mdiff+0x2e>
 800e818:	4b3a      	ldr	r3, [pc, #232]	; (800e904 <__mdiff+0x10c>)
 800e81a:	4602      	mov	r2, r0
 800e81c:	f240 2137 	movw	r1, #567	; 0x237
 800e820:	4839      	ldr	r0, [pc, #228]	; (800e908 <__mdiff+0x110>)
 800e822:	f000 f9af 	bl	800eb84 <__assert_func>
 800e826:	2301      	movs	r3, #1
 800e828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e82c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e830:	bfa4      	itt	ge
 800e832:	4643      	movge	r3, r8
 800e834:	46a0      	movge	r8, r4
 800e836:	4630      	mov	r0, r6
 800e838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e83c:	bfa6      	itte	ge
 800e83e:	461c      	movge	r4, r3
 800e840:	2500      	movge	r5, #0
 800e842:	2501      	movlt	r5, #1
 800e844:	f7ff fd40 	bl	800e2c8 <_Balloc>
 800e848:	b920      	cbnz	r0, 800e854 <__mdiff+0x5c>
 800e84a:	4b2e      	ldr	r3, [pc, #184]	; (800e904 <__mdiff+0x10c>)
 800e84c:	4602      	mov	r2, r0
 800e84e:	f240 2145 	movw	r1, #581	; 0x245
 800e852:	e7e5      	b.n	800e820 <__mdiff+0x28>
 800e854:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e858:	6926      	ldr	r6, [r4, #16]
 800e85a:	60c5      	str	r5, [r0, #12]
 800e85c:	f104 0914 	add.w	r9, r4, #20
 800e860:	f108 0514 	add.w	r5, r8, #20
 800e864:	f100 0e14 	add.w	lr, r0, #20
 800e868:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e86c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e870:	f108 0210 	add.w	r2, r8, #16
 800e874:	46f2      	mov	sl, lr
 800e876:	2100      	movs	r1, #0
 800e878:	f859 3b04 	ldr.w	r3, [r9], #4
 800e87c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e880:	fa11 f88b 	uxtah	r8, r1, fp
 800e884:	b299      	uxth	r1, r3
 800e886:	0c1b      	lsrs	r3, r3, #16
 800e888:	eba8 0801 	sub.w	r8, r8, r1
 800e88c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e890:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e894:	fa1f f888 	uxth.w	r8, r8
 800e898:	1419      	asrs	r1, r3, #16
 800e89a:	454e      	cmp	r6, r9
 800e89c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8a0:	f84a 3b04 	str.w	r3, [sl], #4
 800e8a4:	d8e8      	bhi.n	800e878 <__mdiff+0x80>
 800e8a6:	1b33      	subs	r3, r6, r4
 800e8a8:	3b15      	subs	r3, #21
 800e8aa:	f023 0303 	bic.w	r3, r3, #3
 800e8ae:	3304      	adds	r3, #4
 800e8b0:	3415      	adds	r4, #21
 800e8b2:	42a6      	cmp	r6, r4
 800e8b4:	bf38      	it	cc
 800e8b6:	2304      	movcc	r3, #4
 800e8b8:	441d      	add	r5, r3
 800e8ba:	4473      	add	r3, lr
 800e8bc:	469e      	mov	lr, r3
 800e8be:	462e      	mov	r6, r5
 800e8c0:	4566      	cmp	r6, ip
 800e8c2:	d30e      	bcc.n	800e8e2 <__mdiff+0xea>
 800e8c4:	f10c 0203 	add.w	r2, ip, #3
 800e8c8:	1b52      	subs	r2, r2, r5
 800e8ca:	f022 0203 	bic.w	r2, r2, #3
 800e8ce:	3d03      	subs	r5, #3
 800e8d0:	45ac      	cmp	ip, r5
 800e8d2:	bf38      	it	cc
 800e8d4:	2200      	movcc	r2, #0
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e8dc:	b17a      	cbz	r2, 800e8fe <__mdiff+0x106>
 800e8de:	6107      	str	r7, [r0, #16]
 800e8e0:	e7a4      	b.n	800e82c <__mdiff+0x34>
 800e8e2:	f856 8b04 	ldr.w	r8, [r6], #4
 800e8e6:	fa11 f288 	uxtah	r2, r1, r8
 800e8ea:	1414      	asrs	r4, r2, #16
 800e8ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e8f0:	b292      	uxth	r2, r2
 800e8f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e8f6:	f84e 2b04 	str.w	r2, [lr], #4
 800e8fa:	1421      	asrs	r1, r4, #16
 800e8fc:	e7e0      	b.n	800e8c0 <__mdiff+0xc8>
 800e8fe:	3f01      	subs	r7, #1
 800e900:	e7ea      	b.n	800e8d8 <__mdiff+0xe0>
 800e902:	bf00      	nop
 800e904:	0800fb1c 	.word	0x0800fb1c
 800e908:	0800fb3e 	.word	0x0800fb3e

0800e90c <__d2b>:
 800e90c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e910:	460f      	mov	r7, r1
 800e912:	2101      	movs	r1, #1
 800e914:	ec59 8b10 	vmov	r8, r9, d0
 800e918:	4616      	mov	r6, r2
 800e91a:	f7ff fcd5 	bl	800e2c8 <_Balloc>
 800e91e:	4604      	mov	r4, r0
 800e920:	b930      	cbnz	r0, 800e930 <__d2b+0x24>
 800e922:	4602      	mov	r2, r0
 800e924:	4b24      	ldr	r3, [pc, #144]	; (800e9b8 <__d2b+0xac>)
 800e926:	4825      	ldr	r0, [pc, #148]	; (800e9bc <__d2b+0xb0>)
 800e928:	f240 310f 	movw	r1, #783	; 0x30f
 800e92c:	f000 f92a 	bl	800eb84 <__assert_func>
 800e930:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e934:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e938:	bb2d      	cbnz	r5, 800e986 <__d2b+0x7a>
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	f1b8 0300 	subs.w	r3, r8, #0
 800e940:	d026      	beq.n	800e990 <__d2b+0x84>
 800e942:	4668      	mov	r0, sp
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	f7ff fd87 	bl	800e458 <__lo0bits>
 800e94a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e94e:	b1e8      	cbz	r0, 800e98c <__d2b+0x80>
 800e950:	f1c0 0320 	rsb	r3, r0, #32
 800e954:	fa02 f303 	lsl.w	r3, r2, r3
 800e958:	430b      	orrs	r3, r1
 800e95a:	40c2      	lsrs	r2, r0
 800e95c:	6163      	str	r3, [r4, #20]
 800e95e:	9201      	str	r2, [sp, #4]
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	61a3      	str	r3, [r4, #24]
 800e964:	2b00      	cmp	r3, #0
 800e966:	bf14      	ite	ne
 800e968:	2202      	movne	r2, #2
 800e96a:	2201      	moveq	r2, #1
 800e96c:	6122      	str	r2, [r4, #16]
 800e96e:	b1bd      	cbz	r5, 800e9a0 <__d2b+0x94>
 800e970:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e974:	4405      	add	r5, r0
 800e976:	603d      	str	r5, [r7, #0]
 800e978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e97c:	6030      	str	r0, [r6, #0]
 800e97e:	4620      	mov	r0, r4
 800e980:	b003      	add	sp, #12
 800e982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e98a:	e7d6      	b.n	800e93a <__d2b+0x2e>
 800e98c:	6161      	str	r1, [r4, #20]
 800e98e:	e7e7      	b.n	800e960 <__d2b+0x54>
 800e990:	a801      	add	r0, sp, #4
 800e992:	f7ff fd61 	bl	800e458 <__lo0bits>
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	6163      	str	r3, [r4, #20]
 800e99a:	3020      	adds	r0, #32
 800e99c:	2201      	movs	r2, #1
 800e99e:	e7e5      	b.n	800e96c <__d2b+0x60>
 800e9a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9a8:	6038      	str	r0, [r7, #0]
 800e9aa:	6918      	ldr	r0, [r3, #16]
 800e9ac:	f7ff fd34 	bl	800e418 <__hi0bits>
 800e9b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9b4:	e7e2      	b.n	800e97c <__d2b+0x70>
 800e9b6:	bf00      	nop
 800e9b8:	0800fb1c 	.word	0x0800fb1c
 800e9bc:	0800fb3e 	.word	0x0800fb3e

0800e9c0 <__sread>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c8:	f000 f8a8 	bl	800eb1c <_read_r>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	bfab      	itete	ge
 800e9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800e9d4:	181b      	addge	r3, r3, r0
 800e9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9da:	bfac      	ite	ge
 800e9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9de:	81a3      	strhlt	r3, [r4, #12]
 800e9e0:	bd10      	pop	{r4, pc}

0800e9e2 <__swrite>:
 800e9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e6:	461f      	mov	r7, r3
 800e9e8:	898b      	ldrh	r3, [r1, #12]
 800e9ea:	05db      	lsls	r3, r3, #23
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	4616      	mov	r6, r2
 800e9f2:	d505      	bpl.n	800ea00 <__swrite+0x1e>
 800e9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f000 f87c 	bl	800eaf8 <_lseek_r>
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea0a:	81a3      	strh	r3, [r4, #12]
 800ea0c:	4632      	mov	r2, r6
 800ea0e:	463b      	mov	r3, r7
 800ea10:	4628      	mov	r0, r5
 800ea12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea16:	f000 b8a3 	b.w	800eb60 <_write_r>

0800ea1a <__sseek>:
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea22:	f000 f869 	bl	800eaf8 <_lseek_r>
 800ea26:	1c43      	adds	r3, r0, #1
 800ea28:	89a3      	ldrh	r3, [r4, #12]
 800ea2a:	bf15      	itete	ne
 800ea2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea36:	81a3      	strheq	r3, [r4, #12]
 800ea38:	bf18      	it	ne
 800ea3a:	81a3      	strhne	r3, [r4, #12]
 800ea3c:	bd10      	pop	{r4, pc}

0800ea3e <__sclose>:
 800ea3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea42:	f000 b849 	b.w	800ead8 <_close_r>

0800ea46 <_realloc_r>:
 800ea46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4a:	4680      	mov	r8, r0
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	460e      	mov	r6, r1
 800ea50:	b921      	cbnz	r1, 800ea5c <_realloc_r+0x16>
 800ea52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea56:	4611      	mov	r1, r2
 800ea58:	f7ff bafc 	b.w	800e054 <_malloc_r>
 800ea5c:	b92a      	cbnz	r2, 800ea6a <_realloc_r+0x24>
 800ea5e:	f000 f8c5 	bl	800ebec <_free_r>
 800ea62:	4625      	mov	r5, r4
 800ea64:	4628      	mov	r0, r5
 800ea66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea6a:	f000 f91d 	bl	800eca8 <_malloc_usable_size_r>
 800ea6e:	4284      	cmp	r4, r0
 800ea70:	4607      	mov	r7, r0
 800ea72:	d802      	bhi.n	800ea7a <_realloc_r+0x34>
 800ea74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea78:	d812      	bhi.n	800eaa0 <_realloc_r+0x5a>
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	f7ff fae9 	bl	800e054 <_malloc_r>
 800ea82:	4605      	mov	r5, r0
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0ed      	beq.n	800ea64 <_realloc_r+0x1e>
 800ea88:	42bc      	cmp	r4, r7
 800ea8a:	4622      	mov	r2, r4
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	bf28      	it	cs
 800ea90:	463a      	movcs	r2, r7
 800ea92:	f7fe fad6 	bl	800d042 <memcpy>
 800ea96:	4631      	mov	r1, r6
 800ea98:	4640      	mov	r0, r8
 800ea9a:	f000 f8a7 	bl	800ebec <_free_r>
 800ea9e:	e7e1      	b.n	800ea64 <_realloc_r+0x1e>
 800eaa0:	4635      	mov	r5, r6
 800eaa2:	e7df      	b.n	800ea64 <_realloc_r+0x1e>

0800eaa4 <memmove>:
 800eaa4:	4288      	cmp	r0, r1
 800eaa6:	b510      	push	{r4, lr}
 800eaa8:	eb01 0402 	add.w	r4, r1, r2
 800eaac:	d902      	bls.n	800eab4 <memmove+0x10>
 800eaae:	4284      	cmp	r4, r0
 800eab0:	4623      	mov	r3, r4
 800eab2:	d807      	bhi.n	800eac4 <memmove+0x20>
 800eab4:	1e43      	subs	r3, r0, #1
 800eab6:	42a1      	cmp	r1, r4
 800eab8:	d008      	beq.n	800eacc <memmove+0x28>
 800eaba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eabe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eac2:	e7f8      	b.n	800eab6 <memmove+0x12>
 800eac4:	4402      	add	r2, r0
 800eac6:	4601      	mov	r1, r0
 800eac8:	428a      	cmp	r2, r1
 800eaca:	d100      	bne.n	800eace <memmove+0x2a>
 800eacc:	bd10      	pop	{r4, pc}
 800eace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ead2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ead6:	e7f7      	b.n	800eac8 <memmove+0x24>

0800ead8 <_close_r>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	4d06      	ldr	r5, [pc, #24]	; (800eaf4 <_close_r+0x1c>)
 800eadc:	2300      	movs	r3, #0
 800eade:	4604      	mov	r4, r0
 800eae0:	4608      	mov	r0, r1
 800eae2:	602b      	str	r3, [r5, #0]
 800eae4:	f7f4 ffc5 	bl	8003a72 <_close>
 800eae8:	1c43      	adds	r3, r0, #1
 800eaea:	d102      	bne.n	800eaf2 <_close_r+0x1a>
 800eaec:	682b      	ldr	r3, [r5, #0]
 800eaee:	b103      	cbz	r3, 800eaf2 <_close_r+0x1a>
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}
 800eaf4:	20002438 	.word	0x20002438

0800eaf8 <_lseek_r>:
 800eaf8:	b538      	push	{r3, r4, r5, lr}
 800eafa:	4d07      	ldr	r5, [pc, #28]	; (800eb18 <_lseek_r+0x20>)
 800eafc:	4604      	mov	r4, r0
 800eafe:	4608      	mov	r0, r1
 800eb00:	4611      	mov	r1, r2
 800eb02:	2200      	movs	r2, #0
 800eb04:	602a      	str	r2, [r5, #0]
 800eb06:	461a      	mov	r2, r3
 800eb08:	f7f4 ffda 	bl	8003ac0 <_lseek>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d102      	bne.n	800eb16 <_lseek_r+0x1e>
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	b103      	cbz	r3, 800eb16 <_lseek_r+0x1e>
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	20002438 	.word	0x20002438

0800eb1c <_read_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	4d07      	ldr	r5, [pc, #28]	; (800eb3c <_read_r+0x20>)
 800eb20:	4604      	mov	r4, r0
 800eb22:	4608      	mov	r0, r1
 800eb24:	4611      	mov	r1, r2
 800eb26:	2200      	movs	r2, #0
 800eb28:	602a      	str	r2, [r5, #0]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	f7f4 ff68 	bl	8003a00 <_read>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_read_r+0x1e>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_read_r+0x1e>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	20002438 	.word	0x20002438

0800eb40 <_sbrk_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4d06      	ldr	r5, [pc, #24]	; (800eb5c <_sbrk_r+0x1c>)
 800eb44:	2300      	movs	r3, #0
 800eb46:	4604      	mov	r4, r0
 800eb48:	4608      	mov	r0, r1
 800eb4a:	602b      	str	r3, [r5, #0]
 800eb4c:	f7f4 ffc6 	bl	8003adc <_sbrk>
 800eb50:	1c43      	adds	r3, r0, #1
 800eb52:	d102      	bne.n	800eb5a <_sbrk_r+0x1a>
 800eb54:	682b      	ldr	r3, [r5, #0]
 800eb56:	b103      	cbz	r3, 800eb5a <_sbrk_r+0x1a>
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	bd38      	pop	{r3, r4, r5, pc}
 800eb5c:	20002438 	.word	0x20002438

0800eb60 <_write_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	4d07      	ldr	r5, [pc, #28]	; (800eb80 <_write_r+0x20>)
 800eb64:	4604      	mov	r4, r0
 800eb66:	4608      	mov	r0, r1
 800eb68:	4611      	mov	r1, r2
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	602a      	str	r2, [r5, #0]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	f7f4 ff63 	bl	8003a3a <_write>
 800eb74:	1c43      	adds	r3, r0, #1
 800eb76:	d102      	bne.n	800eb7e <_write_r+0x1e>
 800eb78:	682b      	ldr	r3, [r5, #0]
 800eb7a:	b103      	cbz	r3, 800eb7e <_write_r+0x1e>
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	20002438 	.word	0x20002438

0800eb84 <__assert_func>:
 800eb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb86:	4614      	mov	r4, r2
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4b09      	ldr	r3, [pc, #36]	; (800ebb0 <__assert_func+0x2c>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4605      	mov	r5, r0
 800eb90:	68d8      	ldr	r0, [r3, #12]
 800eb92:	b14c      	cbz	r4, 800eba8 <__assert_func+0x24>
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <__assert_func+0x30>)
 800eb96:	9100      	str	r1, [sp, #0]
 800eb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb9c:	4906      	ldr	r1, [pc, #24]	; (800ebb8 <__assert_func+0x34>)
 800eb9e:	462b      	mov	r3, r5
 800eba0:	f000 f88a 	bl	800ecb8 <fiprintf>
 800eba4:	f000 f8a7 	bl	800ecf6 <abort>
 800eba8:	4b04      	ldr	r3, [pc, #16]	; (800ebbc <__assert_func+0x38>)
 800ebaa:	461c      	mov	r4, r3
 800ebac:	e7f3      	b.n	800eb96 <__assert_func+0x12>
 800ebae:	bf00      	nop
 800ebb0:	20000164 	.word	0x20000164
 800ebb4:	0800fd9f 	.word	0x0800fd9f
 800ebb8:	0800fdac 	.word	0x0800fdac
 800ebbc:	0800fdda 	.word	0x0800fdda

0800ebc0 <_calloc_r>:
 800ebc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebc2:	fba1 2402 	umull	r2, r4, r1, r2
 800ebc6:	b94c      	cbnz	r4, 800ebdc <_calloc_r+0x1c>
 800ebc8:	4611      	mov	r1, r2
 800ebca:	9201      	str	r2, [sp, #4]
 800ebcc:	f7ff fa42 	bl	800e054 <_malloc_r>
 800ebd0:	9a01      	ldr	r2, [sp, #4]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	b930      	cbnz	r0, 800ebe4 <_calloc_r+0x24>
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	b003      	add	sp, #12
 800ebda:	bd30      	pop	{r4, r5, pc}
 800ebdc:	220c      	movs	r2, #12
 800ebde:	6002      	str	r2, [r0, #0]
 800ebe0:	2500      	movs	r5, #0
 800ebe2:	e7f8      	b.n	800ebd6 <_calloc_r+0x16>
 800ebe4:	4621      	mov	r1, r4
 800ebe6:	f7fe f9f3 	bl	800cfd0 <memset>
 800ebea:	e7f4      	b.n	800ebd6 <_calloc_r+0x16>

0800ebec <_free_r>:
 800ebec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebee:	2900      	cmp	r1, #0
 800ebf0:	d044      	beq.n	800ec7c <_free_r+0x90>
 800ebf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebf6:	9001      	str	r0, [sp, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f1a1 0404 	sub.w	r4, r1, #4
 800ebfe:	bfb8      	it	lt
 800ec00:	18e4      	addlt	r4, r4, r3
 800ec02:	f7ff fb55 	bl	800e2b0 <__malloc_lock>
 800ec06:	4a1e      	ldr	r2, [pc, #120]	; (800ec80 <_free_r+0x94>)
 800ec08:	9801      	ldr	r0, [sp, #4]
 800ec0a:	6813      	ldr	r3, [r2, #0]
 800ec0c:	b933      	cbnz	r3, 800ec1c <_free_r+0x30>
 800ec0e:	6063      	str	r3, [r4, #4]
 800ec10:	6014      	str	r4, [r2, #0]
 800ec12:	b003      	add	sp, #12
 800ec14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec18:	f7ff bb50 	b.w	800e2bc <__malloc_unlock>
 800ec1c:	42a3      	cmp	r3, r4
 800ec1e:	d908      	bls.n	800ec32 <_free_r+0x46>
 800ec20:	6825      	ldr	r5, [r4, #0]
 800ec22:	1961      	adds	r1, r4, r5
 800ec24:	428b      	cmp	r3, r1
 800ec26:	bf01      	itttt	eq
 800ec28:	6819      	ldreq	r1, [r3, #0]
 800ec2a:	685b      	ldreq	r3, [r3, #4]
 800ec2c:	1949      	addeq	r1, r1, r5
 800ec2e:	6021      	streq	r1, [r4, #0]
 800ec30:	e7ed      	b.n	800ec0e <_free_r+0x22>
 800ec32:	461a      	mov	r2, r3
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	b10b      	cbz	r3, 800ec3c <_free_r+0x50>
 800ec38:	42a3      	cmp	r3, r4
 800ec3a:	d9fa      	bls.n	800ec32 <_free_r+0x46>
 800ec3c:	6811      	ldr	r1, [r2, #0]
 800ec3e:	1855      	adds	r5, r2, r1
 800ec40:	42a5      	cmp	r5, r4
 800ec42:	d10b      	bne.n	800ec5c <_free_r+0x70>
 800ec44:	6824      	ldr	r4, [r4, #0]
 800ec46:	4421      	add	r1, r4
 800ec48:	1854      	adds	r4, r2, r1
 800ec4a:	42a3      	cmp	r3, r4
 800ec4c:	6011      	str	r1, [r2, #0]
 800ec4e:	d1e0      	bne.n	800ec12 <_free_r+0x26>
 800ec50:	681c      	ldr	r4, [r3, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	6053      	str	r3, [r2, #4]
 800ec56:	440c      	add	r4, r1
 800ec58:	6014      	str	r4, [r2, #0]
 800ec5a:	e7da      	b.n	800ec12 <_free_r+0x26>
 800ec5c:	d902      	bls.n	800ec64 <_free_r+0x78>
 800ec5e:	230c      	movs	r3, #12
 800ec60:	6003      	str	r3, [r0, #0]
 800ec62:	e7d6      	b.n	800ec12 <_free_r+0x26>
 800ec64:	6825      	ldr	r5, [r4, #0]
 800ec66:	1961      	adds	r1, r4, r5
 800ec68:	428b      	cmp	r3, r1
 800ec6a:	bf04      	itt	eq
 800ec6c:	6819      	ldreq	r1, [r3, #0]
 800ec6e:	685b      	ldreq	r3, [r3, #4]
 800ec70:	6063      	str	r3, [r4, #4]
 800ec72:	bf04      	itt	eq
 800ec74:	1949      	addeq	r1, r1, r5
 800ec76:	6021      	streq	r1, [r4, #0]
 800ec78:	6054      	str	r4, [r2, #4]
 800ec7a:	e7ca      	b.n	800ec12 <_free_r+0x26>
 800ec7c:	b003      	add	sp, #12
 800ec7e:	bd30      	pop	{r4, r5, pc}
 800ec80:	20002430 	.word	0x20002430

0800ec84 <__ascii_mbtowc>:
 800ec84:	b082      	sub	sp, #8
 800ec86:	b901      	cbnz	r1, 800ec8a <__ascii_mbtowc+0x6>
 800ec88:	a901      	add	r1, sp, #4
 800ec8a:	b142      	cbz	r2, 800ec9e <__ascii_mbtowc+0x1a>
 800ec8c:	b14b      	cbz	r3, 800eca2 <__ascii_mbtowc+0x1e>
 800ec8e:	7813      	ldrb	r3, [r2, #0]
 800ec90:	600b      	str	r3, [r1, #0]
 800ec92:	7812      	ldrb	r2, [r2, #0]
 800ec94:	1e10      	subs	r0, r2, #0
 800ec96:	bf18      	it	ne
 800ec98:	2001      	movne	r0, #1
 800ec9a:	b002      	add	sp, #8
 800ec9c:	4770      	bx	lr
 800ec9e:	4610      	mov	r0, r2
 800eca0:	e7fb      	b.n	800ec9a <__ascii_mbtowc+0x16>
 800eca2:	f06f 0001 	mvn.w	r0, #1
 800eca6:	e7f8      	b.n	800ec9a <__ascii_mbtowc+0x16>

0800eca8 <_malloc_usable_size_r>:
 800eca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecac:	1f18      	subs	r0, r3, #4
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	bfbc      	itt	lt
 800ecb2:	580b      	ldrlt	r3, [r1, r0]
 800ecb4:	18c0      	addlt	r0, r0, r3
 800ecb6:	4770      	bx	lr

0800ecb8 <fiprintf>:
 800ecb8:	b40e      	push	{r1, r2, r3}
 800ecba:	b503      	push	{r0, r1, lr}
 800ecbc:	4601      	mov	r1, r0
 800ecbe:	ab03      	add	r3, sp, #12
 800ecc0:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <fiprintf+0x20>)
 800ecc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc6:	6800      	ldr	r0, [r0, #0]
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	f000 f845 	bl	800ed58 <_vfiprintf_r>
 800ecce:	b002      	add	sp, #8
 800ecd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd4:	b003      	add	sp, #12
 800ecd6:	4770      	bx	lr
 800ecd8:	20000164 	.word	0x20000164

0800ecdc <__ascii_wctomb>:
 800ecdc:	b149      	cbz	r1, 800ecf2 <__ascii_wctomb+0x16>
 800ecde:	2aff      	cmp	r2, #255	; 0xff
 800ece0:	bf85      	ittet	hi
 800ece2:	238a      	movhi	r3, #138	; 0x8a
 800ece4:	6003      	strhi	r3, [r0, #0]
 800ece6:	700a      	strbls	r2, [r1, #0]
 800ece8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ecec:	bf98      	it	ls
 800ecee:	2001      	movls	r0, #1
 800ecf0:	4770      	bx	lr
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	4770      	bx	lr

0800ecf6 <abort>:
 800ecf6:	b508      	push	{r3, lr}
 800ecf8:	2006      	movs	r0, #6
 800ecfa:	f000 fa89 	bl	800f210 <raise>
 800ecfe:	2001      	movs	r0, #1
 800ed00:	f7f4 fe74 	bl	80039ec <_exit>

0800ed04 <__sfputc_r>:
 800ed04:	6893      	ldr	r3, [r2, #8]
 800ed06:	3b01      	subs	r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	b410      	push	{r4}
 800ed0c:	6093      	str	r3, [r2, #8]
 800ed0e:	da08      	bge.n	800ed22 <__sfputc_r+0x1e>
 800ed10:	6994      	ldr	r4, [r2, #24]
 800ed12:	42a3      	cmp	r3, r4
 800ed14:	db01      	blt.n	800ed1a <__sfputc_r+0x16>
 800ed16:	290a      	cmp	r1, #10
 800ed18:	d103      	bne.n	800ed22 <__sfputc_r+0x1e>
 800ed1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed1e:	f000 b935 	b.w	800ef8c <__swbuf_r>
 800ed22:	6813      	ldr	r3, [r2, #0]
 800ed24:	1c58      	adds	r0, r3, #1
 800ed26:	6010      	str	r0, [r2, #0]
 800ed28:	7019      	strb	r1, [r3, #0]
 800ed2a:	4608      	mov	r0, r1
 800ed2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <__sfputs_r>:
 800ed32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed34:	4606      	mov	r6, r0
 800ed36:	460f      	mov	r7, r1
 800ed38:	4614      	mov	r4, r2
 800ed3a:	18d5      	adds	r5, r2, r3
 800ed3c:	42ac      	cmp	r4, r5
 800ed3e:	d101      	bne.n	800ed44 <__sfputs_r+0x12>
 800ed40:	2000      	movs	r0, #0
 800ed42:	e007      	b.n	800ed54 <__sfputs_r+0x22>
 800ed44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed48:	463a      	mov	r2, r7
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7ff ffda 	bl	800ed04 <__sfputc_r>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d1f3      	bne.n	800ed3c <__sfputs_r+0xa>
 800ed54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed58 <_vfiprintf_r>:
 800ed58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed5c:	460d      	mov	r5, r1
 800ed5e:	b09d      	sub	sp, #116	; 0x74
 800ed60:	4614      	mov	r4, r2
 800ed62:	4698      	mov	r8, r3
 800ed64:	4606      	mov	r6, r0
 800ed66:	b118      	cbz	r0, 800ed70 <_vfiprintf_r+0x18>
 800ed68:	6a03      	ldr	r3, [r0, #32]
 800ed6a:	b90b      	cbnz	r3, 800ed70 <_vfiprintf_r+0x18>
 800ed6c:	f7fe f8fa 	bl	800cf64 <__sinit>
 800ed70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed72:	07d9      	lsls	r1, r3, #31
 800ed74:	d405      	bmi.n	800ed82 <_vfiprintf_r+0x2a>
 800ed76:	89ab      	ldrh	r3, [r5, #12]
 800ed78:	059a      	lsls	r2, r3, #22
 800ed7a:	d402      	bmi.n	800ed82 <_vfiprintf_r+0x2a>
 800ed7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed7e:	f7fe f95e 	bl	800d03e <__retarget_lock_acquire_recursive>
 800ed82:	89ab      	ldrh	r3, [r5, #12]
 800ed84:	071b      	lsls	r3, r3, #28
 800ed86:	d501      	bpl.n	800ed8c <_vfiprintf_r+0x34>
 800ed88:	692b      	ldr	r3, [r5, #16]
 800ed8a:	b99b      	cbnz	r3, 800edb4 <_vfiprintf_r+0x5c>
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f000 f93a 	bl	800f008 <__swsetup_r>
 800ed94:	b170      	cbz	r0, 800edb4 <_vfiprintf_r+0x5c>
 800ed96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed98:	07dc      	lsls	r4, r3, #31
 800ed9a:	d504      	bpl.n	800eda6 <_vfiprintf_r+0x4e>
 800ed9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eda0:	b01d      	add	sp, #116	; 0x74
 800eda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda6:	89ab      	ldrh	r3, [r5, #12]
 800eda8:	0598      	lsls	r0, r3, #22
 800edaa:	d4f7      	bmi.n	800ed9c <_vfiprintf_r+0x44>
 800edac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edae:	f7fe f947 	bl	800d040 <__retarget_lock_release_recursive>
 800edb2:	e7f3      	b.n	800ed9c <_vfiprintf_r+0x44>
 800edb4:	2300      	movs	r3, #0
 800edb6:	9309      	str	r3, [sp, #36]	; 0x24
 800edb8:	2320      	movs	r3, #32
 800edba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800edc2:	2330      	movs	r3, #48	; 0x30
 800edc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ef78 <_vfiprintf_r+0x220>
 800edc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edcc:	f04f 0901 	mov.w	r9, #1
 800edd0:	4623      	mov	r3, r4
 800edd2:	469a      	mov	sl, r3
 800edd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edd8:	b10a      	cbz	r2, 800edde <_vfiprintf_r+0x86>
 800edda:	2a25      	cmp	r2, #37	; 0x25
 800eddc:	d1f9      	bne.n	800edd2 <_vfiprintf_r+0x7a>
 800edde:	ebba 0b04 	subs.w	fp, sl, r4
 800ede2:	d00b      	beq.n	800edfc <_vfiprintf_r+0xa4>
 800ede4:	465b      	mov	r3, fp
 800ede6:	4622      	mov	r2, r4
 800ede8:	4629      	mov	r1, r5
 800edea:	4630      	mov	r0, r6
 800edec:	f7ff ffa1 	bl	800ed32 <__sfputs_r>
 800edf0:	3001      	adds	r0, #1
 800edf2:	f000 80a9 	beq.w	800ef48 <_vfiprintf_r+0x1f0>
 800edf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edf8:	445a      	add	r2, fp
 800edfa:	9209      	str	r2, [sp, #36]	; 0x24
 800edfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 80a1 	beq.w	800ef48 <_vfiprintf_r+0x1f0>
 800ee06:	2300      	movs	r3, #0
 800ee08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee10:	f10a 0a01 	add.w	sl, sl, #1
 800ee14:	9304      	str	r3, [sp, #16]
 800ee16:	9307      	str	r3, [sp, #28]
 800ee18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ee1e:	4654      	mov	r4, sl
 800ee20:	2205      	movs	r2, #5
 800ee22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee26:	4854      	ldr	r0, [pc, #336]	; (800ef78 <_vfiprintf_r+0x220>)
 800ee28:	f7f1 f9d2 	bl	80001d0 <memchr>
 800ee2c:	9a04      	ldr	r2, [sp, #16]
 800ee2e:	b9d8      	cbnz	r0, 800ee68 <_vfiprintf_r+0x110>
 800ee30:	06d1      	lsls	r1, r2, #27
 800ee32:	bf44      	itt	mi
 800ee34:	2320      	movmi	r3, #32
 800ee36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee3a:	0713      	lsls	r3, r2, #28
 800ee3c:	bf44      	itt	mi
 800ee3e:	232b      	movmi	r3, #43	; 0x2b
 800ee40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee44:	f89a 3000 	ldrb.w	r3, [sl]
 800ee48:	2b2a      	cmp	r3, #42	; 0x2a
 800ee4a:	d015      	beq.n	800ee78 <_vfiprintf_r+0x120>
 800ee4c:	9a07      	ldr	r2, [sp, #28]
 800ee4e:	4654      	mov	r4, sl
 800ee50:	2000      	movs	r0, #0
 800ee52:	f04f 0c0a 	mov.w	ip, #10
 800ee56:	4621      	mov	r1, r4
 800ee58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee5c:	3b30      	subs	r3, #48	; 0x30
 800ee5e:	2b09      	cmp	r3, #9
 800ee60:	d94d      	bls.n	800eefe <_vfiprintf_r+0x1a6>
 800ee62:	b1b0      	cbz	r0, 800ee92 <_vfiprintf_r+0x13a>
 800ee64:	9207      	str	r2, [sp, #28]
 800ee66:	e014      	b.n	800ee92 <_vfiprintf_r+0x13a>
 800ee68:	eba0 0308 	sub.w	r3, r0, r8
 800ee6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ee70:	4313      	orrs	r3, r2
 800ee72:	9304      	str	r3, [sp, #16]
 800ee74:	46a2      	mov	sl, r4
 800ee76:	e7d2      	b.n	800ee1e <_vfiprintf_r+0xc6>
 800ee78:	9b03      	ldr	r3, [sp, #12]
 800ee7a:	1d19      	adds	r1, r3, #4
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	9103      	str	r1, [sp, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	bfbb      	ittet	lt
 800ee84:	425b      	neglt	r3, r3
 800ee86:	f042 0202 	orrlt.w	r2, r2, #2
 800ee8a:	9307      	strge	r3, [sp, #28]
 800ee8c:	9307      	strlt	r3, [sp, #28]
 800ee8e:	bfb8      	it	lt
 800ee90:	9204      	strlt	r2, [sp, #16]
 800ee92:	7823      	ldrb	r3, [r4, #0]
 800ee94:	2b2e      	cmp	r3, #46	; 0x2e
 800ee96:	d10c      	bne.n	800eeb2 <_vfiprintf_r+0x15a>
 800ee98:	7863      	ldrb	r3, [r4, #1]
 800ee9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee9c:	d134      	bne.n	800ef08 <_vfiprintf_r+0x1b0>
 800ee9e:	9b03      	ldr	r3, [sp, #12]
 800eea0:	1d1a      	adds	r2, r3, #4
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	9203      	str	r2, [sp, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	bfb8      	it	lt
 800eeaa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eeae:	3402      	adds	r4, #2
 800eeb0:	9305      	str	r3, [sp, #20]
 800eeb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ef88 <_vfiprintf_r+0x230>
 800eeb6:	7821      	ldrb	r1, [r4, #0]
 800eeb8:	2203      	movs	r2, #3
 800eeba:	4650      	mov	r0, sl
 800eebc:	f7f1 f988 	bl	80001d0 <memchr>
 800eec0:	b138      	cbz	r0, 800eed2 <_vfiprintf_r+0x17a>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	eba0 000a 	sub.w	r0, r0, sl
 800eec8:	2240      	movs	r2, #64	; 0x40
 800eeca:	4082      	lsls	r2, r0
 800eecc:	4313      	orrs	r3, r2
 800eece:	3401      	adds	r4, #1
 800eed0:	9304      	str	r3, [sp, #16]
 800eed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed6:	4829      	ldr	r0, [pc, #164]	; (800ef7c <_vfiprintf_r+0x224>)
 800eed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eedc:	2206      	movs	r2, #6
 800eede:	f7f1 f977 	bl	80001d0 <memchr>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d03f      	beq.n	800ef66 <_vfiprintf_r+0x20e>
 800eee6:	4b26      	ldr	r3, [pc, #152]	; (800ef80 <_vfiprintf_r+0x228>)
 800eee8:	bb1b      	cbnz	r3, 800ef32 <_vfiprintf_r+0x1da>
 800eeea:	9b03      	ldr	r3, [sp, #12]
 800eeec:	3307      	adds	r3, #7
 800eeee:	f023 0307 	bic.w	r3, r3, #7
 800eef2:	3308      	adds	r3, #8
 800eef4:	9303      	str	r3, [sp, #12]
 800eef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef8:	443b      	add	r3, r7
 800eefa:	9309      	str	r3, [sp, #36]	; 0x24
 800eefc:	e768      	b.n	800edd0 <_vfiprintf_r+0x78>
 800eefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef02:	460c      	mov	r4, r1
 800ef04:	2001      	movs	r0, #1
 800ef06:	e7a6      	b.n	800ee56 <_vfiprintf_r+0xfe>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	3401      	adds	r4, #1
 800ef0c:	9305      	str	r3, [sp, #20]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	f04f 0c0a 	mov.w	ip, #10
 800ef14:	4620      	mov	r0, r4
 800ef16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef1a:	3a30      	subs	r2, #48	; 0x30
 800ef1c:	2a09      	cmp	r2, #9
 800ef1e:	d903      	bls.n	800ef28 <_vfiprintf_r+0x1d0>
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d0c6      	beq.n	800eeb2 <_vfiprintf_r+0x15a>
 800ef24:	9105      	str	r1, [sp, #20]
 800ef26:	e7c4      	b.n	800eeb2 <_vfiprintf_r+0x15a>
 800ef28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e7f0      	b.n	800ef14 <_vfiprintf_r+0x1bc>
 800ef32:	ab03      	add	r3, sp, #12
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	462a      	mov	r2, r5
 800ef38:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <_vfiprintf_r+0x22c>)
 800ef3a:	a904      	add	r1, sp, #16
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7fd fb9f 	bl	800c680 <_printf_float>
 800ef42:	4607      	mov	r7, r0
 800ef44:	1c78      	adds	r0, r7, #1
 800ef46:	d1d6      	bne.n	800eef6 <_vfiprintf_r+0x19e>
 800ef48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef4a:	07d9      	lsls	r1, r3, #31
 800ef4c:	d405      	bmi.n	800ef5a <_vfiprintf_r+0x202>
 800ef4e:	89ab      	ldrh	r3, [r5, #12]
 800ef50:	059a      	lsls	r2, r3, #22
 800ef52:	d402      	bmi.n	800ef5a <_vfiprintf_r+0x202>
 800ef54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef56:	f7fe f873 	bl	800d040 <__retarget_lock_release_recursive>
 800ef5a:	89ab      	ldrh	r3, [r5, #12]
 800ef5c:	065b      	lsls	r3, r3, #25
 800ef5e:	f53f af1d 	bmi.w	800ed9c <_vfiprintf_r+0x44>
 800ef62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef64:	e71c      	b.n	800eda0 <_vfiprintf_r+0x48>
 800ef66:	ab03      	add	r3, sp, #12
 800ef68:	9300      	str	r3, [sp, #0]
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <_vfiprintf_r+0x22c>)
 800ef6e:	a904      	add	r1, sp, #16
 800ef70:	4630      	mov	r0, r6
 800ef72:	f7fd fe29 	bl	800cbc8 <_printf_i>
 800ef76:	e7e4      	b.n	800ef42 <_vfiprintf_r+0x1ea>
 800ef78:	0800fb2d 	.word	0x0800fb2d
 800ef7c:	0800fb37 	.word	0x0800fb37
 800ef80:	0800c681 	.word	0x0800c681
 800ef84:	0800ed33 	.word	0x0800ed33
 800ef88:	0800fb33 	.word	0x0800fb33

0800ef8c <__swbuf_r>:
 800ef8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8e:	460e      	mov	r6, r1
 800ef90:	4614      	mov	r4, r2
 800ef92:	4605      	mov	r5, r0
 800ef94:	b118      	cbz	r0, 800ef9e <__swbuf_r+0x12>
 800ef96:	6a03      	ldr	r3, [r0, #32]
 800ef98:	b90b      	cbnz	r3, 800ef9e <__swbuf_r+0x12>
 800ef9a:	f7fd ffe3 	bl	800cf64 <__sinit>
 800ef9e:	69a3      	ldr	r3, [r4, #24]
 800efa0:	60a3      	str	r3, [r4, #8]
 800efa2:	89a3      	ldrh	r3, [r4, #12]
 800efa4:	071a      	lsls	r2, r3, #28
 800efa6:	d525      	bpl.n	800eff4 <__swbuf_r+0x68>
 800efa8:	6923      	ldr	r3, [r4, #16]
 800efaa:	b31b      	cbz	r3, 800eff4 <__swbuf_r+0x68>
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	6922      	ldr	r2, [r4, #16]
 800efb0:	1a98      	subs	r0, r3, r2
 800efb2:	6963      	ldr	r3, [r4, #20]
 800efb4:	b2f6      	uxtb	r6, r6
 800efb6:	4283      	cmp	r3, r0
 800efb8:	4637      	mov	r7, r6
 800efba:	dc04      	bgt.n	800efc6 <__swbuf_r+0x3a>
 800efbc:	4621      	mov	r1, r4
 800efbe:	4628      	mov	r0, r5
 800efc0:	f7ff f94e 	bl	800e260 <_fflush_r>
 800efc4:	b9e0      	cbnz	r0, 800f000 <__swbuf_r+0x74>
 800efc6:	68a3      	ldr	r3, [r4, #8]
 800efc8:	3b01      	subs	r3, #1
 800efca:	60a3      	str	r3, [r4, #8]
 800efcc:	6823      	ldr	r3, [r4, #0]
 800efce:	1c5a      	adds	r2, r3, #1
 800efd0:	6022      	str	r2, [r4, #0]
 800efd2:	701e      	strb	r6, [r3, #0]
 800efd4:	6962      	ldr	r2, [r4, #20]
 800efd6:	1c43      	adds	r3, r0, #1
 800efd8:	429a      	cmp	r2, r3
 800efda:	d004      	beq.n	800efe6 <__swbuf_r+0x5a>
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	07db      	lsls	r3, r3, #31
 800efe0:	d506      	bpl.n	800eff0 <__swbuf_r+0x64>
 800efe2:	2e0a      	cmp	r6, #10
 800efe4:	d104      	bne.n	800eff0 <__swbuf_r+0x64>
 800efe6:	4621      	mov	r1, r4
 800efe8:	4628      	mov	r0, r5
 800efea:	f7ff f939 	bl	800e260 <_fflush_r>
 800efee:	b938      	cbnz	r0, 800f000 <__swbuf_r+0x74>
 800eff0:	4638      	mov	r0, r7
 800eff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff4:	4621      	mov	r1, r4
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 f806 	bl	800f008 <__swsetup_r>
 800effc:	2800      	cmp	r0, #0
 800effe:	d0d5      	beq.n	800efac <__swbuf_r+0x20>
 800f000:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f004:	e7f4      	b.n	800eff0 <__swbuf_r+0x64>
	...

0800f008 <__swsetup_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	4b2a      	ldr	r3, [pc, #168]	; (800f0b4 <__swsetup_r+0xac>)
 800f00c:	4605      	mov	r5, r0
 800f00e:	6818      	ldr	r0, [r3, #0]
 800f010:	460c      	mov	r4, r1
 800f012:	b118      	cbz	r0, 800f01c <__swsetup_r+0x14>
 800f014:	6a03      	ldr	r3, [r0, #32]
 800f016:	b90b      	cbnz	r3, 800f01c <__swsetup_r+0x14>
 800f018:	f7fd ffa4 	bl	800cf64 <__sinit>
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f022:	0718      	lsls	r0, r3, #28
 800f024:	d422      	bmi.n	800f06c <__swsetup_r+0x64>
 800f026:	06d9      	lsls	r1, r3, #27
 800f028:	d407      	bmi.n	800f03a <__swsetup_r+0x32>
 800f02a:	2309      	movs	r3, #9
 800f02c:	602b      	str	r3, [r5, #0]
 800f02e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f032:	81a3      	strh	r3, [r4, #12]
 800f034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f038:	e034      	b.n	800f0a4 <__swsetup_r+0x9c>
 800f03a:	0758      	lsls	r0, r3, #29
 800f03c:	d512      	bpl.n	800f064 <__swsetup_r+0x5c>
 800f03e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f040:	b141      	cbz	r1, 800f054 <__swsetup_r+0x4c>
 800f042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f046:	4299      	cmp	r1, r3
 800f048:	d002      	beq.n	800f050 <__swsetup_r+0x48>
 800f04a:	4628      	mov	r0, r5
 800f04c:	f7ff fdce 	bl	800ebec <_free_r>
 800f050:	2300      	movs	r3, #0
 800f052:	6363      	str	r3, [r4, #52]	; 0x34
 800f054:	89a3      	ldrh	r3, [r4, #12]
 800f056:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f05a:	81a3      	strh	r3, [r4, #12]
 800f05c:	2300      	movs	r3, #0
 800f05e:	6063      	str	r3, [r4, #4]
 800f060:	6923      	ldr	r3, [r4, #16]
 800f062:	6023      	str	r3, [r4, #0]
 800f064:	89a3      	ldrh	r3, [r4, #12]
 800f066:	f043 0308 	orr.w	r3, r3, #8
 800f06a:	81a3      	strh	r3, [r4, #12]
 800f06c:	6923      	ldr	r3, [r4, #16]
 800f06e:	b94b      	cbnz	r3, 800f084 <__swsetup_r+0x7c>
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f07a:	d003      	beq.n	800f084 <__swsetup_r+0x7c>
 800f07c:	4621      	mov	r1, r4
 800f07e:	4628      	mov	r0, r5
 800f080:	f000 f840 	bl	800f104 <__smakebuf_r>
 800f084:	89a0      	ldrh	r0, [r4, #12]
 800f086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f08a:	f010 0301 	ands.w	r3, r0, #1
 800f08e:	d00a      	beq.n	800f0a6 <__swsetup_r+0x9e>
 800f090:	2300      	movs	r3, #0
 800f092:	60a3      	str	r3, [r4, #8]
 800f094:	6963      	ldr	r3, [r4, #20]
 800f096:	425b      	negs	r3, r3
 800f098:	61a3      	str	r3, [r4, #24]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	b943      	cbnz	r3, 800f0b0 <__swsetup_r+0xa8>
 800f09e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0a2:	d1c4      	bne.n	800f02e <__swsetup_r+0x26>
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	0781      	lsls	r1, r0, #30
 800f0a8:	bf58      	it	pl
 800f0aa:	6963      	ldrpl	r3, [r4, #20]
 800f0ac:	60a3      	str	r3, [r4, #8]
 800f0ae:	e7f4      	b.n	800f09a <__swsetup_r+0x92>
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	e7f7      	b.n	800f0a4 <__swsetup_r+0x9c>
 800f0b4:	20000164 	.word	0x20000164

0800f0b8 <__swhatbuf_r>:
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c0:	2900      	cmp	r1, #0
 800f0c2:	b096      	sub	sp, #88	; 0x58
 800f0c4:	4615      	mov	r5, r2
 800f0c6:	461e      	mov	r6, r3
 800f0c8:	da0d      	bge.n	800f0e6 <__swhatbuf_r+0x2e>
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f0d0:	f04f 0100 	mov.w	r1, #0
 800f0d4:	bf0c      	ite	eq
 800f0d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f0da:	2340      	movne	r3, #64	; 0x40
 800f0dc:	2000      	movs	r0, #0
 800f0de:	6031      	str	r1, [r6, #0]
 800f0e0:	602b      	str	r3, [r5, #0]
 800f0e2:	b016      	add	sp, #88	; 0x58
 800f0e4:	bd70      	pop	{r4, r5, r6, pc}
 800f0e6:	466a      	mov	r2, sp
 800f0e8:	f000 f848 	bl	800f17c <_fstat_r>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	dbec      	blt.n	800f0ca <__swhatbuf_r+0x12>
 800f0f0:	9901      	ldr	r1, [sp, #4]
 800f0f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f0f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f0fa:	4259      	negs	r1, r3
 800f0fc:	4159      	adcs	r1, r3
 800f0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f102:	e7eb      	b.n	800f0dc <__swhatbuf_r+0x24>

0800f104 <__smakebuf_r>:
 800f104:	898b      	ldrh	r3, [r1, #12]
 800f106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f108:	079d      	lsls	r5, r3, #30
 800f10a:	4606      	mov	r6, r0
 800f10c:	460c      	mov	r4, r1
 800f10e:	d507      	bpl.n	800f120 <__smakebuf_r+0x1c>
 800f110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	6123      	str	r3, [r4, #16]
 800f118:	2301      	movs	r3, #1
 800f11a:	6163      	str	r3, [r4, #20]
 800f11c:	b002      	add	sp, #8
 800f11e:	bd70      	pop	{r4, r5, r6, pc}
 800f120:	ab01      	add	r3, sp, #4
 800f122:	466a      	mov	r2, sp
 800f124:	f7ff ffc8 	bl	800f0b8 <__swhatbuf_r>
 800f128:	9900      	ldr	r1, [sp, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	4630      	mov	r0, r6
 800f12e:	f7fe ff91 	bl	800e054 <_malloc_r>
 800f132:	b948      	cbnz	r0, 800f148 <__smakebuf_r+0x44>
 800f134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f138:	059a      	lsls	r2, r3, #22
 800f13a:	d4ef      	bmi.n	800f11c <__smakebuf_r+0x18>
 800f13c:	f023 0303 	bic.w	r3, r3, #3
 800f140:	f043 0302 	orr.w	r3, r3, #2
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	e7e3      	b.n	800f110 <__smakebuf_r+0xc>
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	6020      	str	r0, [r4, #0]
 800f14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	9b00      	ldr	r3, [sp, #0]
 800f154:	6163      	str	r3, [r4, #20]
 800f156:	9b01      	ldr	r3, [sp, #4]
 800f158:	6120      	str	r0, [r4, #16]
 800f15a:	b15b      	cbz	r3, 800f174 <__smakebuf_r+0x70>
 800f15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f160:	4630      	mov	r0, r6
 800f162:	f000 f81d 	bl	800f1a0 <_isatty_r>
 800f166:	b128      	cbz	r0, 800f174 <__smakebuf_r+0x70>
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	f023 0303 	bic.w	r3, r3, #3
 800f16e:	f043 0301 	orr.w	r3, r3, #1
 800f172:	81a3      	strh	r3, [r4, #12]
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	431d      	orrs	r5, r3
 800f178:	81a5      	strh	r5, [r4, #12]
 800f17a:	e7cf      	b.n	800f11c <__smakebuf_r+0x18>

0800f17c <_fstat_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	4d07      	ldr	r5, [pc, #28]	; (800f19c <_fstat_r+0x20>)
 800f180:	2300      	movs	r3, #0
 800f182:	4604      	mov	r4, r0
 800f184:	4608      	mov	r0, r1
 800f186:	4611      	mov	r1, r2
 800f188:	602b      	str	r3, [r5, #0]
 800f18a:	f7f4 fc7e 	bl	8003a8a <_fstat>
 800f18e:	1c43      	adds	r3, r0, #1
 800f190:	d102      	bne.n	800f198 <_fstat_r+0x1c>
 800f192:	682b      	ldr	r3, [r5, #0]
 800f194:	b103      	cbz	r3, 800f198 <_fstat_r+0x1c>
 800f196:	6023      	str	r3, [r4, #0]
 800f198:	bd38      	pop	{r3, r4, r5, pc}
 800f19a:	bf00      	nop
 800f19c:	20002438 	.word	0x20002438

0800f1a0 <_isatty_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d06      	ldr	r5, [pc, #24]	; (800f1bc <_isatty_r+0x1c>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	602b      	str	r3, [r5, #0]
 800f1ac:	f7f4 fc7d 	bl	8003aaa <_isatty>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_isatty_r+0x1a>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_isatty_r+0x1a>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	20002438 	.word	0x20002438

0800f1c0 <_raise_r>:
 800f1c0:	291f      	cmp	r1, #31
 800f1c2:	b538      	push	{r3, r4, r5, lr}
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	460d      	mov	r5, r1
 800f1c8:	d904      	bls.n	800f1d4 <_raise_r+0x14>
 800f1ca:	2316      	movs	r3, #22
 800f1cc:	6003      	str	r3, [r0, #0]
 800f1ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}
 800f1d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f1d6:	b112      	cbz	r2, 800f1de <_raise_r+0x1e>
 800f1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1dc:	b94b      	cbnz	r3, 800f1f2 <_raise_r+0x32>
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 f830 	bl	800f244 <_getpid_r>
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ee:	f000 b817 	b.w	800f220 <_kill_r>
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d00a      	beq.n	800f20c <_raise_r+0x4c>
 800f1f6:	1c59      	adds	r1, r3, #1
 800f1f8:	d103      	bne.n	800f202 <_raise_r+0x42>
 800f1fa:	2316      	movs	r3, #22
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	2001      	movs	r0, #1
 800f200:	e7e7      	b.n	800f1d2 <_raise_r+0x12>
 800f202:	2400      	movs	r4, #0
 800f204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f208:	4628      	mov	r0, r5
 800f20a:	4798      	blx	r3
 800f20c:	2000      	movs	r0, #0
 800f20e:	e7e0      	b.n	800f1d2 <_raise_r+0x12>

0800f210 <raise>:
 800f210:	4b02      	ldr	r3, [pc, #8]	; (800f21c <raise+0xc>)
 800f212:	4601      	mov	r1, r0
 800f214:	6818      	ldr	r0, [r3, #0]
 800f216:	f7ff bfd3 	b.w	800f1c0 <_raise_r>
 800f21a:	bf00      	nop
 800f21c:	20000164 	.word	0x20000164

0800f220 <_kill_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4d07      	ldr	r5, [pc, #28]	; (800f240 <_kill_r+0x20>)
 800f224:	2300      	movs	r3, #0
 800f226:	4604      	mov	r4, r0
 800f228:	4608      	mov	r0, r1
 800f22a:	4611      	mov	r1, r2
 800f22c:	602b      	str	r3, [r5, #0]
 800f22e:	f7f4 fbcd 	bl	80039cc <_kill>
 800f232:	1c43      	adds	r3, r0, #1
 800f234:	d102      	bne.n	800f23c <_kill_r+0x1c>
 800f236:	682b      	ldr	r3, [r5, #0]
 800f238:	b103      	cbz	r3, 800f23c <_kill_r+0x1c>
 800f23a:	6023      	str	r3, [r4, #0]
 800f23c:	bd38      	pop	{r3, r4, r5, pc}
 800f23e:	bf00      	nop
 800f240:	20002438 	.word	0x20002438

0800f244 <_getpid_r>:
 800f244:	f7f4 bbba 	b.w	80039bc <_getpid>

0800f248 <_init>:
 800f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24a:	bf00      	nop
 800f24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f24e:	bc08      	pop	{r3}
 800f250:	469e      	mov	lr, r3
 800f252:	4770      	bx	lr

0800f254 <_fini>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	bf00      	nop
 800f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25a:	bc08      	pop	{r3}
 800f25c:	469e      	mov	lr, r3
 800f25e:	4770      	bx	lr

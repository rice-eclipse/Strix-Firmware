
Strix Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  0800dd88  0800dd88  0001dd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e564  0800e564  000202d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e564  0800e564  000202d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e564  0800e564  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e568  0800e568  0001e568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800e56c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  200002d4  0800e840  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001a00  200022d8  0800e840  000222d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016065  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040a1  00000000  00000000  000363ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea2  00000000  00000000  0003b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3fc  00000000  00000000  0003c682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a49  00000000  00000000  00066a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed626  00000000  00000000  0007f4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ff0  00000000  00000000  0016caf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00172ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd70 	.word	0x0800dd70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800dd70 	.word	0x0800dd70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bd2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6858      	ldr	r0, [r3, #4]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	899b      	ldrh	r3, [r3, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f002 f9fe 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f001 fde9 	bl	80027cc <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6858      	ldr	r0, [r3, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	899b      	ldrh	r3, [r3, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f002 f9f3 	bl	8002ff0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000c0a:	2032      	movs	r0, #50	; 0x32
 8000c0c:	f001 fdde 	bl	80027cc <HAL_Delay>
	//status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
	//HAL_Delay(50);

	/* Check chip ID */
	uint8_t chipID_accel;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID_accel);
 8000c10:	f107 0316 	add.w	r3, r7, #22
 8000c14:	461a      	mov	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f8dd 	bl	8000dd8 <BMI088_ReadAccRegister>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	4413      	add	r3, r2
 8000c26:	75fb      	strb	r3, [r7, #23]

	if (chipID_accel != 0x1E) {
 8000c28:	7dbb      	ldrb	r3, [r7, #22]
 8000c2a:	2b1e      	cmp	r3, #30
 8000c2c:	d002      	beq.n	8000c34 <BMI088_Init+0x8c>
		status+=50;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	3332      	adds	r3, #50	; 0x32
 8000c32:	75fb      	strb	r3, [r7, #23]
	}
	HAL_Delay(10);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f001 fdc9 	bl	80027cc <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000c3a:	22a8      	movs	r2, #168	; 0xa8
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f944 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f001 fdbc 	bl	80027cc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000c54:	2200      	movs	r2, #0
 8000c56:	2141      	movs	r1, #65	; 0x41
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f937 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4413      	add	r3, r2
 8000c66:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f001 fdaf 	bl	80027cc <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000c6e:	220a      	movs	r2, #10
 8000c70:	2153      	movs	r1, #83	; 0x53
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f92a 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	4413      	add	r3, r2
 8000c80:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c82:	200a      	movs	r0, #10
 8000c84:	f001 fda2 	bl	80027cc <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000c88:	2204      	movs	r2, #4
 8000c8a:	2158      	movs	r1, #88	; 0x58
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 f91d 	bl	8000ecc <BMI088_WriteAccRegister>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 8000c98:	4413      	add	r3, r2
 8000c9a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f001 fd95 	bl	80027cc <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	217c      	movs	r1, #124	; 0x7c
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 f910 	bl	8000ecc <BMI088_WriteAccRegister>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f001 fd88 	bl	80027cc <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	217d      	movs	r1, #125	; 0x7d
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f903 	bl	8000ecc <BMI088_WriteAccRegister>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	4413      	add	r3, r2
 8000cce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f001 fd7b 	bl	80027cc <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	; (8000dd0 <BMI088_Init+0x228>)
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2292      	movs	r2, #146	; 0x92
 8000ce0:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6898      	ldr	r0, [r3, #8]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	89db      	ldrh	r3, [r3, #14]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	f002 f97f 	bl	8002ff0 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000cf2:	22b6      	movs	r2, #182	; 0xb6
 8000cf4:	2114      	movs	r1, #20
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 f922 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	4413      	add	r3, r2
 8000d04:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8000d06:	20fa      	movs	r0, #250	; 0xfa
 8000d08:	f001 fd60 	bl	80027cc <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID_gyr;
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID_gyr);
 8000d0c:	f107 0315 	add.w	r3, r7, #21
 8000d10:	461a      	mov	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f89d 	bl	8000e54 <BMI088_ReadGyrRegister>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	4413      	add	r3, r2
 8000d22:	75fb      	strb	r3, [r7, #23]

	if (chipID_gyr != 0x0F) {
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d002      	beq.n	8000d30 <BMI088_Init+0x188>

		status+=70;
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 8000d2c:	3346      	adds	r3, #70	; 0x46
 8000d2e:	75fb      	strb	r3, [r7, #23]

	}
	HAL_Delay(10);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f001 fd4b 	bl	80027cc <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x00); /* +- 2000 deg/s */
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f000 f900 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	4413      	add	r3, r2
 8000d48:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f001 fd3e 	bl	80027cc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x03); /* ODR = 400 Hz, Filter bandwidth = 47 Hz */
 8000d50:	2203      	movs	r2, #3
 8000d52:	2110      	movs	r1, #16
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 f8f3 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	4413      	add	r3, r2
 8000d62:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f001 fd31 	bl	80027cc <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	2115      	movs	r1, #21
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f000 f8e6 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f001 fd24 	bl	80027cc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8000d84:	2201      	movs	r2, #1
 8000d86:	2116      	movs	r1, #22
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f8d9 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	4413      	add	r3, r2
 8000d96:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000d98:	200a      	movs	r0, #10
 8000d9a:	f001 fd17 	bl	80027cc <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2118      	movs	r1, #24
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f8cc 	bl	8000f40 <BMI088_WriteGyrRegister>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	4413      	add	r3, r2
 8000db0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f001 fd0a 	bl	80027cc <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to deg/s) */
	imu->gyrConversion = 2000.0f / 32768.0f; /* Datasheet page 39 */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <BMI088_Init+0x22c>)
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2282      	movs	r2, #130	; 0x82
 8000dc2:	769a      	strb	r2, [r3, #26]

	//return status;
	return status;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]

}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	3a6b70a4 	.word	0x3a6b70a4
 8000dd4:	3d7a0000 	.word	0x3d7a0000

08000dd8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	460b      	mov	r3, r1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	753b      	strb	r3, [r7, #20]
 8000df0:	2300      	movs	r3, #0
 8000df2:	757b      	strb	r3, [r7, #21]
 8000df4:	2300      	movs	r3, #0
 8000df6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	f002 f8f4 	bl	8002ff0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	f107 0114 	add.w	r1, r7, #20
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f005 fcc8 	bl	80067b0 <HAL_SPI_TransmitReceive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	899b      	ldrh	r3, [r3, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f002 f8d9 	bl	8002ff0 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8000e44:	7cba      	ldrb	r2, [r7, #18]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	753b      	strb	r3, [r7, #20]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	89db      	ldrh	r3, [r3, #14]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f002 f8b8 	bl	8002ff0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0114 	add.w	r1, r7, #20
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f005 fc8c 	bl	80067b0 <HAL_SPI_TransmitReceive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6898      	ldr	r0, [r3, #8]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	89db      	ldrh	r3, [r3, #14]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f002 f89d 	bl	8002ff0 <HAL_GPIO_WritePin>

	if (status == 1) {
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8000ebc:	7c7a      	ldrb	r2, [r7, #17]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	733b      	strb	r3, [r7, #12]
 8000ee0:	78bb      	ldrb	r3, [r7, #2]
 8000ee2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	899b      	ldrh	r3, [r3, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f002 f87e 	bl	8002ff0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f00:	2202      	movs	r2, #2
 8000f02:	f005 fae0 	bl	80064c6 <HAL_SPI_Transmit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f14:	bf00      	nop
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 fe6a 	bl	8006bf4 <HAL_SPI_GetState>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1f7      	bne.n	8000f16 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6858      	ldr	r0, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	899b      	ldrh	r3, [r3, #12]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f002 f85d 	bl	8002ff0 <HAL_GPIO_WritePin>

	return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	733b      	strb	r3, [r7, #12]
 8000f54:	78bb      	ldrb	r3, [r7, #2]
 8000f56:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6898      	ldr	r0, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	89db      	ldrh	r3, [r3, #14]
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	f002 f844 	bl	8002ff0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f107 010c 	add.w	r1, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f74:	2202      	movs	r2, #2
 8000f76:	f005 faa6 	bl	80064c6 <HAL_SPI_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000f88:	bf00      	nop
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 fe30 	bl	8006bf4 <HAL_SPI_GetState>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d1f7      	bne.n	8000f8a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6898      	ldr	r0, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	89db      	ldrh	r3, [r3, #14]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f002 f823 	bl	8002ff0 <HAL_GPIO_WritePin>

	return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <BMI088_ReadGyroscope>:

	return status;

}

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8000fbc:	4a38      	ldr	r2, [pc, #224]	; (80010a0 <BMI088_ReadGyroscope+0xec>)
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc6:	6018      	str	r0, [r3, #0]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	8019      	strh	r1, [r3, #0]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	0c0a      	lsrs	r2, r1, #16
 8000fd0:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6898      	ldr	r0, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	89db      	ldrh	r3, [r3, #14]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f002 f807 	bl	8002ff0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f107 0208 	add.w	r2, r7, #8
 8000fea:	f107 0110 	add.w	r1, r7, #16
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	f005 fbdb 	bl	80067b0 <HAL_SPI_TransmitReceive>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6898      	ldr	r0, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	89db      	ldrh	r3, [r3, #14]
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f001 ffec 	bl	8002ff0 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	7a7b      	ldrb	r3, [r7, #9]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001048:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001064:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001080:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	return status;
 8001096:	7ffb      	ldrb	r3, [r7, #31]

}
 8001098:	4618      	mov	r0, r3
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	0800dd90 	.word	0x0800dd90

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a62      	ldr	r2, [pc, #392]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b60      	ldr	r3, [pc, #384]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b57      	ldr	r3, [pc, #348]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a56      	ldr	r2, [pc, #344]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <MX_GPIO_Init+0x1a4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a50      	ldr	r2, [pc, #320]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <MX_GPIO_Init+0x1a4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b45      	ldr	r3, [pc, #276]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a44      	ldr	r2, [pc, #272]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b42      	ldr	r3, [pc, #264]	; (8001248 <MX_GPIO_Init+0x1a4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|BMI088_Gyro_Int_Pin
 800114a:	2200      	movs	r2, #0
 800114c:	f24c 1144 	movw	r1, #49476	; 0xc144
 8001150:	483e      	ldr	r0, [pc, #248]	; (800124c <MX_GPIO_Init+0x1a8>)
 8001152:	f001 ff4d 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |BMI088_Gyro_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin|Pyro_E_Trigger_Pin
 8001156:	2200      	movs	r2, #0
 8001158:	f243 3181 	movw	r1, #13185	; 0x3381
 800115c:	483c      	ldr	r0, [pc, #240]	; (8001250 <MX_GPIO_Init+0x1ac>)
 800115e:	f001 ff47 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |Pyro_F_Trigger_Pin|BMP388_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 8001162:	2200      	movs	r2, #0
 8001164:	f647 4104 	movw	r1, #31748	; 0x7c04
 8001168:	483a      	ldr	r0, [pc, #232]	; (8001254 <MX_GPIO_Init+0x1b0>)
 800116a:	f001 ff41 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |Status_LED_Pin|KX134_NCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS3MDL_NCS_GPIO_Port, LIS3MDL_NCS_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f001 ff3a 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Pyro_A_Trigger_Pin|Continuity_LED_D_Pin|Continuity_LED_C_Pin|BMI088_Gyro_Int_Pin
 800117c:	f24c 1344 	movw	r3, #49476	; 0xc144
 8001180:	61fb      	str	r3, [r7, #28]
                          |BMI088_Gyro_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	482d      	ldr	r0, [pc, #180]	; (800124c <MX_GPIO_Init+0x1a8>)
 8001196:	f001 fc8d 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = Pyro_B_Trigger_Pin|Pyro_C_Trigger_Pin|Pyro_D_Trigger_Pin|Pyro_E_Trigger_Pin
 800119a:	f243 3381 	movw	r3, #13185	; 0x3381
 800119e:	61fb      	str	r3, [r7, #28]
                          |Pyro_F_Trigger_Pin|BMP388_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4827      	ldr	r0, [pc, #156]	; (8001250 <MX_GPIO_Init+0x1ac>)
 80011b4:	f001 fc7e 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = Continuity_LED_B_Pin|Continuity_LED_A_Pin|Continuity_LED_E_Pin|Continuity_LED_F_Pin
 80011b8:	f647 4304 	movw	r3, #31748	; 0x7c04
 80011bc:	61fb      	str	r3, [r7, #28]
                          |Status_LED_Pin|KX134_NCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <MX_GPIO_Init+0x1b0>)
 80011d2:	f001 fc6f 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIS3MDL_NCS_Pin;
 80011d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LIS3MDL_NCS_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f001 fc5f 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LIS3MDL_Int_Pin|KX134_Int_Pin;
 80011f6:	2303      	movs	r3, #3
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4812      	ldr	r0, [pc, #72]	; (8001254 <MX_GPIO_Init+0x1b0>)
 800120a:	f001 fc53 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BMI088_Accel_NCS_Pin|BMI088_Accel_Int_Pin;
 800120e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <MX_GPIO_Init+0x1a8>)
 8001224:	f001 fc46 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP388_Int_Pin;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BMP388_Int_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_GPIO_Init+0x1ac>)
 800123c:	f001 fc3a 	bl	8002ab4 <HAL_GPIO_Init>

}
 8001240:	bf00      	nop
 8001242:	3730      	adds	r7, #48	; 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400
 8001250:	48001000 	.word	0x48001000
 8001254:	48000c00 	.word	0x48000c00

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800125c:	b08e      	sub	sp, #56	; 0x38
 800125e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f001 fa3f 	bl	80026e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 fb88 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f7ff ff1c 	bl	80010a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800126c:	f000 ffee 	bl	800224c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001270:	f009 f886 	bl	800a380 <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 8001274:	f001 f828 	bl	80022c8 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 8001278:	f000 fbda 	bl	8001a30 <MX_QUADSPI_Init>
   * SEND STARTING COMMUNICATION TO LAPTOP
   *
   *
   */

  HAL_Delay(3000);
 800127c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001280:	f001 faa4 	bl	80027cc <HAL_Delay>

  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\n# ------------------------------ \n#\n#\n#\n#\n"));
 8001284:	49aa      	ldr	r1, [pc, #680]	; (8001530 <main+0x2d8>)
 8001286:	48ab      	ldr	r0, [pc, #684]	; (8001534 <main+0x2dc>)
 8001288:	f00a fb52 	bl	800b930 <siprintf>
 800128c:	4603      	mov	r3, r0
 800128e:	b29b      	uxth	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	48a8      	ldr	r0, [pc, #672]	; (8001534 <main+0x2dc>)
 8001294:	f009 f948 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1); //this is a shitty fucking solution but whatever I'm not getting paid
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fa97 	bl	80027cc <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# StrixFlight v0.0\n#\t\t\tRunning on Strix v3.0 \n#\n#\n"));
 800129e:	49a6      	ldr	r1, [pc, #664]	; (8001538 <main+0x2e0>)
 80012a0:	48a4      	ldr	r0, [pc, #656]	; (8001534 <main+0x2dc>)
 80012a2:	f00a fb45 	bl	800b930 <siprintf>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	48a1      	ldr	r0, [pc, #644]	; (8001534 <main+0x2dc>)
 80012ae:	f009 f93b 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f001 fa8a 	bl	80027cc <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# ------------------------------ \n# Initializing sensors...\n"));
 80012b8:	49a0      	ldr	r1, [pc, #640]	; (800153c <main+0x2e4>)
 80012ba:	489e      	ldr	r0, [pc, #632]	; (8001534 <main+0x2dc>)
 80012bc:	f00a fb38 	bl	800b930 <siprintf>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4619      	mov	r1, r3
 80012c6:	489b      	ldr	r0, [pc, #620]	; (8001534 <main+0x2dc>)
 80012c8:	f009 f92e 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 fa7d 	bl	80027cc <HAL_Delay>
  /*
   * devices that use hspi1
   */

  /* Initialize BMI088 */
  uint8_t bmi_status = BMI088_Init(&bmi088, &hspi1, BMI088_Accel_NCS_GPIO_Port, BMI088_Accel_NCS_Pin, BMI088_Gyro_NCS_GPIO_Port, BMI088_Gyro_NCS_Pin);
 80012d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	4b99      	ldr	r3, [pc, #612]	; (8001540 <main+0x2e8>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	4a98      	ldr	r2, [pc, #608]	; (8001540 <main+0x2e8>)
 80012e0:	4998      	ldr	r1, [pc, #608]	; (8001544 <main+0x2ec>)
 80012e2:	4899      	ldr	r0, [pc, #612]	; (8001548 <main+0x2f0>)
 80012e4:	f7ff fc60 	bl	8000ba8 <BMI088_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	77fb      	strb	r3, [r7, #31]

  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tStatus of BMI088: %i\n", bmi_status));
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4996      	ldr	r1, [pc, #600]	; (800154c <main+0x2f4>)
 80012f2:	4890      	ldr	r0, [pc, #576]	; (8001534 <main+0x2dc>)
 80012f4:	f00a fb1c 	bl	800b930 <siprintf>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	488d      	ldr	r0, [pc, #564]	; (8001534 <main+0x2dc>)
 8001300:	f009 f912 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f001 fa61 	bl	80027cc <HAL_Delay>
  if(lis3mdl_status != 4) {
  	  HAL_GPIO_WritePin(Pyro_C_Trigger_GPIO_Port, Pyro_C_Trigger_Pin, GPIO_PIN_SET);
  }
  */

  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# Finished Sensor Initialization\n"));
 800130a:	4991      	ldr	r1, [pc, #580]	; (8001550 <main+0x2f8>)
 800130c:	4889      	ldr	r0, [pc, #548]	; (8001534 <main+0x2dc>)
 800130e:	f00a fb0f 	bl	800b930 <siprintf>
 8001312:	4603      	mov	r3, r0
 8001314:	b29b      	uxth	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	4886      	ldr	r0, [pc, #536]	; (8001534 <main+0x2dc>)
 800131a:	f009 f905 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f001 fa54 	bl	80027cc <HAL_Delay>
  /*
   *
   * QSPI Memory Status
   *
   */
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# Reading Status from Flash Memory\n"));
 8001324:	498b      	ldr	r1, [pc, #556]	; (8001554 <main+0x2fc>)
 8001326:	4883      	ldr	r0, [pc, #524]	; (8001534 <main+0x2dc>)
 8001328:	f00a fb02 	bl	800b930 <siprintf>
 800132c:	4603      	mov	r3, r0
 800132e:	b29b      	uxth	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	4880      	ldr	r0, [pc, #512]	; (8001534 <main+0x2dc>)
 8001334:	f009 f8f8 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(10);
 8001338:	200a      	movs	r0, #10
 800133a:	f001 fa47 	bl	80027cc <HAL_Delay>
  if (CSP_QUADSPI_Init() != HAL_OK) {
 800133e:	f000 fc47 	bl	8001bd0 <CSP_QUADSPI_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00c      	beq.n	8001362 <main+0x10a>
	  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t\tError Configuring QSPI Flash Chip:\n#\t\t\tW25Q128JVSIQ\n#\n"));
 8001348:	4983      	ldr	r1, [pc, #524]	; (8001558 <main+0x300>)
 800134a:	487a      	ldr	r0, [pc, #488]	; (8001534 <main+0x2dc>)
 800134c:	f00a faf0 	bl	800b930 <siprintf>
 8001350:	4603      	mov	r3, r0
 8001352:	b29b      	uxth	r3, r3
 8001354:	4619      	mov	r1, r3
 8001356:	4877      	ldr	r0, [pc, #476]	; (8001534 <main+0x2dc>)
 8001358:	f009 f8e6 	bl	800a528 <CDC_Transmit_FS>
	  HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f001 fa35 	bl	80027cc <HAL_Delay>
  }

  //get the first 64 bytes, which hold configuration information
  CSP_QSPI_Read(flashReadBuffer, 0, 16);
 8001362:	2210      	movs	r2, #16
 8001364:	2100      	movs	r1, #0
 8001366:	487d      	ldr	r0, [pc, #500]	; (800155c <main+0x304>)
 8001368:	f000 ff1a 	bl	80021a0 <CSP_QSPI_Read>

  //copy the configuration into the configuration array
  memcpy(&config, &flashReadBuffer, 16);
 800136c:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <main+0x308>)
 800136e:	4b7b      	ldr	r3, [pc, #492]	; (800155c <main+0x304>)
 8001370:	4614      	mov	r4, r2
 8001372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  //read the number of recordings currently on the chip, and write to the USB port
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "# Number of Recordings: %i out of 4 possible\n", config[0]));
 8001378:	4b79      	ldr	r3, [pc, #484]	; (8001560 <main+0x308>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4979      	ldr	r1, [pc, #484]	; (8001564 <main+0x30c>)
 8001380:	486c      	ldr	r0, [pc, #432]	; (8001534 <main+0x2dc>)
 8001382:	f00a fad5 	bl	800b930 <siprintf>
 8001386:	4603      	mov	r3, r0
 8001388:	b29b      	uxth	r3, r3
 800138a:	4619      	mov	r1, r3
 800138c:	4869      	ldr	r0, [pc, #420]	; (8001534 <main+0x2dc>)
 800138e:	f009 f8cb 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f001 fa1a 	bl	80027cc <HAL_Delay>

  /*
   * TELL THE USER HOW TO COMMUNICATE
   */
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\n#\n#\t1 to test USB functionality\n"));
 8001398:	4973      	ldr	r1, [pc, #460]	; (8001568 <main+0x310>)
 800139a:	4866      	ldr	r0, [pc, #408]	; (8001534 <main+0x2dc>)
 800139c:	f00a fac8 	bl	800b930 <siprintf>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	4863      	ldr	r0, [pc, #396]	; (8001534 <main+0x2dc>)
 80013a8:	f009 f8be 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f001 fa0d 	bl	80027cc <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t2 to access a recording\n"));
 80013b2:	496e      	ldr	r1, [pc, #440]	; (800156c <main+0x314>)
 80013b4:	485f      	ldr	r0, [pc, #380]	; (8001534 <main+0x2dc>)
 80013b6:	f00a fabb 	bl	800b930 <siprintf>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4619      	mov	r1, r3
 80013c0:	485c      	ldr	r0, [pc, #368]	; (8001534 <main+0x2dc>)
 80013c2:	f009 f8b1 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f001 fa00 	bl	80027cc <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t3 to delete data (confirmation required)\n"));
 80013cc:	4968      	ldr	r1, [pc, #416]	; (8001570 <main+0x318>)
 80013ce:	4859      	ldr	r0, [pc, #356]	; (8001534 <main+0x2dc>)
 80013d0:	f00a faae 	bl	800b930 <siprintf>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	4856      	ldr	r0, [pc, #344]	; (8001534 <main+0x2dc>)
 80013dc:	f009 f8a4 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f001 f9f3 	bl	80027cc <HAL_Delay>
  CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "#\t4 to toggle live sensor data reporting\n"));
 80013e6:	4963      	ldr	r1, [pc, #396]	; (8001574 <main+0x31c>)
 80013e8:	4852      	ldr	r0, [pc, #328]	; (8001534 <main+0x2dc>)
 80013ea:	f00a faa1 	bl	800b930 <siprintf>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	484f      	ldr	r0, [pc, #316]	; (8001534 <main+0x2dc>)
 80013f6:	f009 f897 	bl	800a528 <CDC_Transmit_FS>
  HAL_Delay(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f001 f9e6 	bl	80027cc <HAL_Delay>

  //set the usbStatus to 0 to confirm nothing has been requested yet
  usbStatus = 0;
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <main+0x320>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
  //set the ledTimeout to 500ms for nominal state
  ledTimeout = 500;
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <main+0x324>)
 8001408:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800140c:	801a      	strh	r2, [r3, #0]
  //set the writeHead to 256 bc there hasn't been any data recorded, but the first 256 bytes are reserved for config
  writeHead = 256;
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <main+0x328>)
 8001410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001414:	601a      	str	r2, [r3, #0]
  //set recordingData to 0 bc we haven't detected a launch yet
  recordingData = 0;
 8001416:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <main+0x32c>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	 *
	 *
	 */

	//check if there are any commands from the user
	if (rxBuffer[0] != 0) {
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <main+0x330>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 814d 	beq.w	80016c0 <main+0x468>
		if (usbStatus == 0 || usbStatus == 3) {
 8001426:	4b54      	ldr	r3, [pc, #336]	; (8001578 <main+0x320>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <main+0x1e0>
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <main+0x320>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b03      	cmp	r3, #3
 8001434:	f040 80ba 	bne.w	80015ac <main+0x354>
			//check what was sent
			if (rxBuffer[0] == '1') {
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <main+0x330>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b31      	cmp	r3, #49	; 0x31
 800143e:	d109      	bne.n	8001454 <main+0x1fc>
				//usb transmission test
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "USB transmission confirmed functional"));
 8001440:	4952      	ldr	r1, [pc, #328]	; (800158c <main+0x334>)
 8001442:	483c      	ldr	r0, [pc, #240]	; (8001534 <main+0x2dc>)
 8001444:	f00a fa74 	bl	800b930 <siprintf>
 8001448:	4603      	mov	r3, r0
 800144a:	b29b      	uxth	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	4839      	ldr	r0, [pc, #228]	; (8001534 <main+0x2dc>)
 8001450:	f009 f86a 	bl	800a528 <CDC_Transmit_FS>
			}
			if (rxBuffer[0] == '2') {
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <main+0x330>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b32      	cmp	r3, #50	; 0x32
 800145a:	d125      	bne.n	80014a8 <main+0x250>
				//check status of the flash memory chip
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Getting Flash Memory Data"));
 800145c:	494c      	ldr	r1, [pc, #304]	; (8001590 <main+0x338>)
 800145e:	4835      	ldr	r0, [pc, #212]	; (8001534 <main+0x2dc>)
 8001460:	f00a fa66 	bl	800b930 <siprintf>
 8001464:	4603      	mov	r3, r0
 8001466:	b29b      	uxth	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	4832      	ldr	r0, [pc, #200]	; (8001534 <main+0x2dc>)
 800146c:	f009 f85c 	bl	800a528 <CDC_Transmit_FS>
				if (config[0] == 1) {
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <main+0x308>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10a      	bne.n	800148e <main+0x236>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "There are no recordings to access"));
 8001478:	4946      	ldr	r1, [pc, #280]	; (8001594 <main+0x33c>)
 800147a:	482e      	ldr	r0, [pc, #184]	; (8001534 <main+0x2dc>)
 800147c:	f00a fa58 	bl	800b930 <siprintf>
 8001480:	4603      	mov	r3, r0
 8001482:	b29b      	uxth	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	482b      	ldr	r0, [pc, #172]	; (8001534 <main+0x2dc>)
 8001488:	f009 f84e 	bl	800a528 <CDC_Transmit_FS>
 800148c:	e00c      	b.n	80014a8 <main+0x250>
				} else {
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Choose one of the %i recordings", config[0]));
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <main+0x308>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4940      	ldr	r1, [pc, #256]	; (8001598 <main+0x340>)
 8001496:	4827      	ldr	r0, [pc, #156]	; (8001534 <main+0x2dc>)
 8001498:	f00a fa4a 	bl	800b930 <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	4824      	ldr	r0, [pc, #144]	; (8001534 <main+0x2dc>)
 80014a4:	f009 f840 	bl	800a528 <CDC_Transmit_FS>
				}
			}
			if (rxBuffer[0] == '3') {
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <main+0x330>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b33      	cmp	r3, #51	; 0x33
 80014ae:	d119      	bne.n	80014e4 <main+0x28c>
				//send the confirmation message and change current state
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "You have requested to delete all flight recordings"));
 80014b0:	493a      	ldr	r1, [pc, #232]	; (800159c <main+0x344>)
 80014b2:	4820      	ldr	r0, [pc, #128]	; (8001534 <main+0x2dc>)
 80014b4:	f00a fa3c 	bl	800b930 <siprintf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	481d      	ldr	r0, [pc, #116]	; (8001534 <main+0x2dc>)
 80014c0:	f009 f832 	bl	800a528 <CDC_Transmit_FS>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "\t\t\tEnter 'yes' to proceed"));
 80014c4:	4936      	ldr	r1, [pc, #216]	; (80015a0 <main+0x348>)
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <main+0x2dc>)
 80014c8:	f00a fa32 	bl	800b930 <siprintf>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	4818      	ldr	r0, [pc, #96]	; (8001534 <main+0x2dc>)
 80014d4:	f009 f828 	bl	800a528 <CDC_Transmit_FS>
				ledTimeout = 250;
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <main+0x324>)
 80014da:	22fa      	movs	r2, #250	; 0xfa
 80014dc:	801a      	strh	r2, [r3, #0]
				usbStatus = 2;
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <main+0x320>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
			}
			if (rxBuffer[0] == '4') {
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <main+0x330>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b34      	cmp	r3, #52	; 0x34
 80014ea:	f040 80e4 	bne.w	80016b6 <main+0x45e>
				if (usbStatus != 4) {
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <main+0x320>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00d      	beq.n	8001512 <main+0x2ba>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Starting Data Transmission"));
 80014f6:	492b      	ldr	r1, [pc, #172]	; (80015a4 <main+0x34c>)
 80014f8:	480e      	ldr	r0, [pc, #56]	; (8001534 <main+0x2dc>)
 80014fa:	f00a fa19 	bl	800b930 <siprintf>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29b      	uxth	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <main+0x2dc>)
 8001506:	f009 f80f 	bl	800a528 <CDC_Transmit_FS>
					usbStatus = 3;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <main+0x320>)
 800150c:	2203      	movs	r2, #3
 800150e:	701a      	strb	r2, [r3, #0]
			if (rxBuffer[0] == '4') {
 8001510:	e0d1      	b.n	80016b6 <main+0x45e>
				} else {
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Stopping Data Transmission"));
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <main+0x350>)
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <main+0x2dc>)
 8001516:	f00a fa0b 	bl	800b930 <siprintf>
 800151a:	4603      	mov	r3, r0
 800151c:	b29b      	uxth	r3, r3
 800151e:	4619      	mov	r1, r3
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <main+0x2dc>)
 8001522:	f009 f801 	bl	800a528 <CDC_Transmit_FS>
					usbStatus = 0;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <main+0x320>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
			if (rxBuffer[0] == '4') {
 800152c:	e0c3      	b.n	80016b6 <main+0x45e>
 800152e:	bf00      	nop
 8001530:	0800dd98 	.word	0x0800dd98
 8001534:	200002f0 	.word	0x200002f0
 8001538:	0800ddc4 	.word	0x0800ddc4
 800153c:	0800ddf8 	.word	0x0800ddf8
 8001540:	48000400 	.word	0x48000400
 8001544:	200004b0 	.word	0x200004b0
 8001548:	2000041c 	.word	0x2000041c
 800154c:	0800de38 	.word	0x0800de38
 8001550:	0800de54 	.word	0x0800de54
 8001554:	0800de78 	.word	0x0800de78
 8001558:	0800de9c 	.word	0x0800de9c
 800155c:	200003bc 	.word	0x200003bc
 8001560:	200003fc 	.word	0x200003fc
 8001564:	0800ded8 	.word	0x0800ded8
 8001568:	0800df08 	.word	0x0800df08
 800156c:	0800df2c 	.word	0x0800df2c
 8001570:	0800df48 	.word	0x0800df48
 8001574:	0800df74 	.word	0x0800df74
 8001578:	20000374 	.word	0x20000374
 800157c:	20000418 	.word	0x20000418
 8001580:	2000040c 	.word	0x2000040c
 8001584:	20000410 	.word	0x20000410
 8001588:	20000330 	.word	0x20000330
 800158c:	0800dfa0 	.word	0x0800dfa0
 8001590:	0800dfc8 	.word	0x0800dfc8
 8001594:	0800dfe4 	.word	0x0800dfe4
 8001598:	0800e008 	.word	0x0800e008
 800159c:	0800e028 	.word	0x0800e028
 80015a0:	0800e05c 	.word	0x0800e05c
 80015a4:	0800e078 	.word	0x0800e078
 80015a8:	0800e094 	.word	0x0800e094
				}
			}
		} else if (usbStatus == 1) {
 80015ac:	4b98      	ldr	r3, [pc, #608]	; (8001810 <main+0x5b8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d129      	bne.n	8001608 <main+0x3b0>
			//the number that was transmitted must be the desired recording
			if (rxBuffer[0] > config[0]) {
 80015b4:	4b97      	ldr	r3, [pc, #604]	; (8001814 <main+0x5bc>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b97      	ldr	r3, [pc, #604]	; (8001818 <main+0x5c0>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d909      	bls.n	80015d4 <main+0x37c>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Invalid Number Entered"));
 80015c0:	4996      	ldr	r1, [pc, #600]	; (800181c <main+0x5c4>)
 80015c2:	4897      	ldr	r0, [pc, #604]	; (8001820 <main+0x5c8>)
 80015c4:	f00a f9b4 	bl	800b930 <siprintf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	4894      	ldr	r0, [pc, #592]	; (8001820 <main+0x5c8>)
 80015d0:	f008 ffaa 	bl	800a528 <CDC_Transmit_FS>
			}
			//report the desired results...
			//calculate starting address
			uint32_t start_address = DATA_RECORDING_LENGTH * rxBuffer[0] + 256; //add 256 b.c. the first page is reserved for config
 80015d4:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <main+0x5bc>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	059b      	lsls	r3, r3, #22
 80015da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015de:	61bb      	str	r3, [r7, #24]
			uint32_t address = start_address;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
			//read data page by page and transmit through serial port
			do {

				address+=256;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
			} while (address < start_address+DATA_RECORDING_LENGTH);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80015f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3f5      	bcc.n	80015e4 <main+0x38c>

			usbStatus = 0;
 80015f8:	4b85      	ldr	r3, [pc, #532]	; (8001810 <main+0x5b8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
			ledTimeout = 500;
 80015fe:	4b89      	ldr	r3, [pc, #548]	; (8001824 <main+0x5cc>)
 8001600:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	e056      	b.n	80016b6 <main+0x45e>
		} else if (usbStatus == 2) {
 8001608:	4b81      	ldr	r3, [pc, #516]	; (8001810 <main+0x5b8>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d152      	bne.n	80016b6 <main+0x45e>
			//check if we have confirmation to delete the entire chip
			if (rxBuffer[0] == 'y' && rxBuffer[1] == 'e' && rxBuffer[2] == 's') {
 8001610:	4b80      	ldr	r3, [pc, #512]	; (8001814 <main+0x5bc>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b79      	cmp	r3, #121	; 0x79
 8001616:	d13d      	bne.n	8001694 <main+0x43c>
 8001618:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <main+0x5bc>)
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	2b65      	cmp	r3, #101	; 0x65
 800161e:	d139      	bne.n	8001694 <main+0x43c>
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <main+0x5bc>)
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	2b73      	cmp	r3, #115	; 0x73
 8001626:	d135      	bne.n	8001694 <main+0x43c>
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Deleting entire flash chip and rewriting config"));
 8001628:	497f      	ldr	r1, [pc, #508]	; (8001828 <main+0x5d0>)
 800162a:	487d      	ldr	r0, [pc, #500]	; (8001820 <main+0x5c8>)
 800162c:	f00a f980 	bl	800b930 <siprintf>
 8001630:	4603      	mov	r3, r0
 8001632:	b29b      	uxth	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	487a      	ldr	r0, [pc, #488]	; (8001820 <main+0x5c8>)
 8001638:	f008 ff76 	bl	800a528 <CDC_Transmit_FS>
				//now we actually have to do it
				if (CSP_QSPI_Erase_Chip() != HAL_OK) {
 800163c:	f000 fb00 	bl	8001c40 <CSP_QSPI_Erase_Chip>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <main+0x402>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Error while deleting data"));
 8001646:	4979      	ldr	r1, [pc, #484]	; (800182c <main+0x5d4>)
 8001648:	4875      	ldr	r0, [pc, #468]	; (8001820 <main+0x5c8>)
 800164a:	f00a f971 	bl	800b930 <siprintf>
 800164e:	4603      	mov	r3, r0
 8001650:	b29b      	uxth	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	4872      	ldr	r0, [pc, #456]	; (8001820 <main+0x5c8>)
 8001656:	f008 ff67 	bl	800a528 <CDC_Transmit_FS>
				}
				//copy over the config array (64 bytes)
				memcpy (flashWriteBuffer, config, 64);
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	496e      	ldr	r1, [pc, #440]	; (8001818 <main+0x5c0>)
 800165e:	4874      	ldr	r0, [pc, #464]	; (8001830 <main+0x5d8>)
 8001660:	f00a fa81 	bl	800bb66 <memcpy>
				if (CSP_QSPI_WriteMemory(flashWriteBuffer, 0, 64) != HAL_OK) {
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2100      	movs	r1, #0
 8001668:	4871      	ldr	r0, [pc, #452]	; (8001830 <main+0x5d8>)
 800166a:	f000 fca5 	bl	8001fb8 <CSP_QSPI_WriteMemory>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <main+0x430>
					CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Error while copying config data"));
 8001674:	496f      	ldr	r1, [pc, #444]	; (8001834 <main+0x5dc>)
 8001676:	486a      	ldr	r0, [pc, #424]	; (8001820 <main+0x5c8>)
 8001678:	f00a f95a 	bl	800b930 <siprintf>
 800167c:	4603      	mov	r3, r0
 800167e:	b29b      	uxth	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	4867      	ldr	r0, [pc, #412]	; (8001820 <main+0x5c8>)
 8001684:	f008 ff50 	bl	800a528 <CDC_Transmit_FS>
				}
				//reset the counter of how many flights have been recorded
				CSP_QSPI_WriteMemory((uint8_t)0, 0, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f000 fc93 	bl	8001fb8 <CSP_QSPI_WriteMemory>
 8001692:	e009      	b.n	80016a8 <main+0x450>
			} else {
				CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "Exit Confirmed"));
 8001694:	4968      	ldr	r1, [pc, #416]	; (8001838 <main+0x5e0>)
 8001696:	4862      	ldr	r0, [pc, #392]	; (8001820 <main+0x5c8>)
 8001698:	f00a f94a 	bl	800b930 <siprintf>
 800169c:	4603      	mov	r3, r0
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	485f      	ldr	r0, [pc, #380]	; (8001820 <main+0x5c8>)
 80016a4:	f008 ff40 	bl	800a528 <CDC_Transmit_FS>
			}
			usbStatus = 0;
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <main+0x5b8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
			ledTimeout = 500;
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <main+0x5cc>)
 80016b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016b4:	801a      	strh	r2, [r3, #0]
		}
		//reset the rxBuffer so we don't accidentally do things multiple times
		memset (rxBuffer, '\0', 64);
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	2100      	movs	r1, #0
 80016ba:	4856      	ldr	r0, [pc, #344]	; (8001814 <main+0x5bc>)
 80016bc:	f00a fa1a 	bl	800baf4 <memset>
	}

	//check if it's time to transmit the next data tick yet
	if (HAL_GetTick() > txDataTransmitTick + 5000 && usbStatus == 3) {
 80016c0:	f001 f878 	bl	80027b4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <main+0x5e4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80016ce:	3308      	adds	r3, #8
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d92d      	bls.n	8001730 <main+0x4d8>
 80016d4:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <main+0x5b8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d129      	bne.n	8001730 <main+0x4d8>
		//update the last time data was transmitted
		txDataTransmitTick = HAL_GetTick();
 80016dc:	f001 f86a 	bl	80027b4 <HAL_GetTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a56      	ldr	r2, [pc, #344]	; (800183c <main+0x5e4>)
 80016e4:	6013      	str	r3, [r2, #0]

		//transmit the current data from the sensor structures
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
					bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <main+0x5e8>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff2c 	bl	8000548 <__aeabi_f2d>
 80016f0:	4680      	mov	r8, r0
 80016f2:	4689      	mov	r9, r1
					bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 80016f4:	4b52      	ldr	r3, [pc, #328]	; (8001840 <main+0x5e8>)
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff25 	bl	8000548 <__aeabi_f2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
					bmi088.gyr_rps[0],bmi088.gyr_rps[1],bmi088.gyr_rps[2]));
 8001702:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <main+0x5e8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		CDC_Transmit_FS(txBuffer, sprintf((char *)txBuffer, "deg/sec: x: %.3f   y: %.3f   z: %.3f\n",
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff1e 	bl	8000548 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001714:	e9cd 4500 	strd	r4, r5, [sp]
 8001718:	4642      	mov	r2, r8
 800171a:	464b      	mov	r3, r9
 800171c:	4949      	ldr	r1, [pc, #292]	; (8001844 <main+0x5ec>)
 800171e:	4840      	ldr	r0, [pc, #256]	; (8001820 <main+0x5c8>)
 8001720:	f00a f906 	bl	800b930 <siprintf>
 8001724:	4603      	mov	r3, r0
 8001726:	b29b      	uxth	r3, r3
 8001728:	4619      	mov	r1, r3
 800172a:	483d      	ldr	r0, [pc, #244]	; (8001820 <main+0x5c8>)
 800172c:	f008 fefc 	bl	800a528 <CDC_Transmit_FS>

	/*
	 * devices using hspi1
	 */
	//BMI088_ReadAccelerometer(&bmi088);
	BMI088_ReadGyroscope(&bmi088);
 8001730:	4843      	ldr	r0, [pc, #268]	; (8001840 <main+0x5e8>)
 8001732:	f7ff fc3f 	bl	8000fb4 <BMI088_ReadGyroscope>
	 * DATA RECORDING
	 *
	 *
	 */

	if (recordingData == 1) {
 8001736:	4b44      	ldr	r3, [pc, #272]	; (8001848 <main+0x5f0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 80c5 	bne.w	80018ca <main+0x672>
		//store data from the gyroscope into the first 64 bytes of the flashWriteBuffer (bc I'm lazy and sprintf sucks so its actually 65 bytes)
		uint8_t *timeArray;
		uint32_t time = HAL_GetTick();
 8001740:	f001 f838 	bl	80027b4 <HAL_GetTick>
 8001744:	4603      	mov	r3, r0
 8001746:	607b      	str	r3, [r7, #4]
		timeArray = (uint8_t*)(&time);
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	617b      	str	r3, [r7, #20]
		uint8_t *xarray;
		xarray = (uint8_t*)(&bmi088.gyr_rps[0]);
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <main+0x5f4>)
 800174e:	613b      	str	r3, [r7, #16]
		uint8_t *yarray;
		yarray = (uint8_t*)(&bmi088.gyr_rps[1]);
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <main+0x5f8>)
 8001752:	60fb      	str	r3, [r7, #12]
		uint8_t *zarray;
		zarray = (uint8_t*)(&bmi088.gyr_rps[2]);
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <main+0x5fc>)
 8001756:	60bb      	str	r3, [r7, #8]

		for (uint8_t i = 0; i < 4; i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800175e:	e014      	b.n	800178a <main+0x532>
			flashWriteBuffer[writeHead % 64] = timeArray[i];
 8001760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	441a      	add	r2, r3
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <main+0x600>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001770:	7811      	ldrb	r1, [r2, #0]
 8001772:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <main+0x5d8>)
 8001774:	54d1      	strb	r1, [r2, r3]
			writeHead++;
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <main+0x600>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a36      	ldr	r2, [pc, #216]	; (8001858 <main+0x600>)
 800177e:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 4; i++) {
 8001780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001784:	3301      	adds	r3, #1
 8001786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800178a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800178e:	2b03      	cmp	r3, #3
 8001790:	d9e6      	bls.n	8001760 <main+0x508>
		}
		for (uint8_t i = 0; i < 4; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001798:	e014      	b.n	80017c4 <main+0x56c>
			flashWriteBuffer[writeHead % 64] = xarray[i];
 800179a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	441a      	add	r2, r3
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <main+0x600>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017aa:	7811      	ldrb	r1, [r2, #0]
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <main+0x5d8>)
 80017ae:	54d1      	strb	r1, [r2, r3]
			writeHead++;
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <main+0x600>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a28      	ldr	r2, [pc, #160]	; (8001858 <main+0x600>)
 80017b8:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 4; i++) {
 80017ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017be:	3301      	adds	r3, #1
 80017c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d9e6      	bls.n	800179a <main+0x542>
		}
		for (uint8_t i = 0; i < 4; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80017d2:	e014      	b.n	80017fe <main+0x5a6>
			flashWriteBuffer[writeHead % 64] = yarray[i];
 80017d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	441a      	add	r2, r3
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <main+0x600>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e4:	7811      	ldrb	r1, [r2, #0]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <main+0x5d8>)
 80017e8:	54d1      	strb	r1, [r2, r3]
			writeHead++;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <main+0x600>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <main+0x600>)
 80017f2:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 4; i++) {
 80017f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017f8:	3301      	adds	r3, #1
 80017fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80017fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001802:	2b03      	cmp	r3, #3
 8001804:	d9e6      	bls.n	80017d4 <main+0x57c>
		}
		for (uint8_t i = 0; i < 4; i++) {
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3020 	strb.w	r3, [r7, #32]
 800180c:	e03b      	b.n	8001886 <main+0x62e>
 800180e:	bf00      	nop
 8001810:	20000374 	.word	0x20000374
 8001814:	20000330 	.word	0x20000330
 8001818:	200003fc 	.word	0x200003fc
 800181c:	0800e0b0 	.word	0x0800e0b0
 8001820:	200002f0 	.word	0x200002f0
 8001824:	20000418 	.word	0x20000418
 8001828:	0800e0c8 	.word	0x0800e0c8
 800182c:	0800e0f8 	.word	0x0800e0f8
 8001830:	20000378 	.word	0x20000378
 8001834:	0800e114 	.word	0x0800e114
 8001838:	0800e134 	.word	0x0800e134
 800183c:	20000370 	.word	0x20000370
 8001840:	2000041c 	.word	0x2000041c
 8001844:	0800e144 	.word	0x0800e144
 8001848:	20000410 	.word	0x20000410
 800184c:	20000460 	.word	0x20000460
 8001850:	20000464 	.word	0x20000464
 8001854:	20000468 	.word	0x20000468
 8001858:	2000040c 	.word	0x2000040c
			flashWriteBuffer[writeHead % 64] = zarray[i];
 800185c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	441a      	add	r2, r3
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <main+0x6fc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	7811      	ldrb	r1, [r2, #0]
 800186e:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <main+0x700>)
 8001870:	54d1      	strb	r1, [r2, r3]
			writeHead++;
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <main+0x6fc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a36      	ldr	r2, [pc, #216]	; (8001954 <main+0x6fc>)
 800187a:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 4; i++) {
 800187c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001880:	3301      	adds	r3, #1
 8001882:	f887 3020 	strb.w	r3, [r7, #32]
 8001886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d9e6      	bls.n	800185c <main+0x604>
		}

		//check if we should write data to the flash chip
		if (writeHead % 64 == 0) {
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <main+0x6fc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <main+0x650>
			//write the data from flashWriteBuffer
			CSP_QSPI_WriteMemory(flashWriteBuffer, writeHead, 64);
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <main+0x6fc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	4619      	mov	r1, r3
 80018a2:	482d      	ldr	r0, [pc, #180]	; (8001958 <main+0x700>)
 80018a4:	f000 fb88 	bl	8001fb8 <CSP_QSPI_WriteMemory>
		}
		if ((writeHead - 256) % DATA_RECORDING_LENGTH == 0 || writeHead > 0x1000000) {
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <main+0x6fc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <main+0x66a>
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <main+0x6fc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d926      	bls.n	8001910 <main+0x6b8>
			//if we reached the end of the data recording length or the chip, turn off the function to record data
			recordingData = 0;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <main+0x704>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e022      	b.n	8001910 <main+0x6b8>
		}
	} else {
		if (bmi088.gyr_rps[0] > 1.f) {
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <main+0x708>)
 80018cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	dd18      	ble.n	8001910 <main+0x6b8>
			//if we detect movement, check if we haven't already recorded a flight
			//get the current config information
			CSP_QSPI_Read(flashReadBuffer, 0, 16);
 80018de:	2210      	movs	r2, #16
 80018e0:	2100      	movs	r1, #0
 80018e2:	4820      	ldr	r0, [pc, #128]	; (8001964 <main+0x70c>)
 80018e4:	f000 fc5c 	bl	80021a0 <CSP_QSPI_Read>
			if (flashReadBuffer[0] == config[0]) {
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <main+0x70c>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <main+0x710>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d10d      	bne.n	8001910 <main+0x6b8>
				recordingData = 1;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <main+0x704>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
				flashWriteBuffer[0] = config[0]+1;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <main+0x710>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <main+0x700>)
 8001904:	701a      	strb	r2, [r3, #0]
				//update the status inside the config bytes in the flash chip
				CSP_QSPI_WriteMemory(flashWriteBuffer, 0, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	2100      	movs	r1, #0
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <main+0x700>)
 800190c:	f000 fb54 	bl	8001fb8 <CSP_QSPI_WriteMemory>
	 *
	 * LED AND BUZZER FEEDBACK
	 *
	 *
	 */
	if (HAL_GetTick() > ledTick + ledTimeout) {
 8001910:	f000 ff50 	bl	80027b4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <main+0x714>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <main+0x718>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	440b      	add	r3, r1
 8001922:	429a      	cmp	r2, r3
 8001924:	f67f ad7a 	bls.w	800141c <main+0x1c4>
		ledTick = HAL_GetTick();
 8001928:	f000 ff44 	bl	80027b4 <HAL_GetTick>
 800192c:	4603      	mov	r3, r0
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <main+0x718>)
 8001930:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <main+0x71c>)
 8001938:	f001 fb72 	bl	8003020 <HAL_GPIO_TogglePin>
		if (recordingData == 1) {
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <main+0x704>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	f47f ad6b 	bne.w	800141c <main+0x1c4>
			HAL_GPIO_TogglePin(Continuity_LED_A_GPIO_Port, Continuity_LED_A_Pin);
 8001946:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800194a:	480a      	ldr	r0, [pc, #40]	; (8001974 <main+0x71c>)
 800194c:	f001 fb68 	bl	8003020 <HAL_GPIO_TogglePin>
	if (rxBuffer[0] != 0) {
 8001950:	e564      	b.n	800141c <main+0x1c4>
 8001952:	bf00      	nop
 8001954:	2000040c 	.word	0x2000040c
 8001958:	20000378 	.word	0x20000378
 800195c:	20000410 	.word	0x20000410
 8001960:	2000041c 	.word	0x2000041c
 8001964:	200003bc 	.word	0x200003bc
 8001968:	200003fc 	.word	0x200003fc
 800196c:	20000418 	.word	0x20000418
 8001970:	20000414 	.word	0x20000414
 8001974:	48000c00 	.word	0x48000c00

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b096      	sub	sp, #88	; 0x58
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2244      	movs	r2, #68	; 0x44
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00a f8b4 	bl	800baf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800199a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800199e:	f002 fd0f 	bl	80043c0 <HAL_PWREx_ControlVoltageScaling>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019a8:	f000 f836 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ba:	2303      	movs	r3, #3
 80019bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019c2:	230a      	movs	r3, #10
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019c6:	2307      	movs	r3, #7
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fa44 	bl	8004e64 <HAL_RCC_OscConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019e2:	f000 f819 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e6:	230f      	movs	r3, #15
 80019e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ea:	2303      	movs	r3, #3
 80019ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	2104      	movs	r1, #4
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fe0c 	bl	800561c <HAL_RCC_ClockConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a0a:	f000 f805 	bl	8001a18 <Error_Handler>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3758      	adds	r7, #88	; 0x58
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(Pyro_A_Trigger_GPIO_Port, Pyro_A_Trigger_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2104      	movs	r1, #4
 8001a24:	4801      	ldr	r0, [pc, #4]	; (8001a2c <Error_Handler+0x14>)
 8001a26:	f001 fae3 	bl	8002ff0 <HAL_GPIO_WritePin>
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <Error_Handler+0x12>
 8001a2c:	48000400 	.word	0x48000400

08001a30 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <MX_QUADSPI_Init+0x48>)
 8001a38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a4e:	2217      	movs	r2, #23
 8001a50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_QUADSPI_Init+0x44>)
 8001a60:	f002 fd14 	bl	800448c <HAL_QSPI_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001a6a:	f7ff ffd5 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000046c 	.word	0x2000046c
 8001a78:	a0001000 	.word	0xa0001000

08001a7c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_QSPI_MspInit+0xf0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d161      	bne.n	8001b62 <HAL_QSPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6513      	str	r3, [r2, #80]	; 0x50
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_QSPI_MspInit+0xf4>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b0e:	230a      	movs	r3, #10
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1c:	f000 ffca 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b20:	2303      	movs	r3, #3
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b30:	230a      	movs	r3, #10
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <HAL_QSPI_MspInit+0xf8>)
 8001b3c:	f000 ffba 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b52:	230a      	movs	r3, #10
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <HAL_QSPI_MspInit+0xfc>)
 8001b5e:	f000 ffa9 	bl	8002ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	a0001000 	.word	0xa0001000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	48001000 	.word	0x48001000

08001b7c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_QSPI_MspDeInit+0x44>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_QSPI_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_QSPI_MspDeInit+0x48>)
 8001b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <HAL_QSPI_MspDeInit+0x48>)
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	6513      	str	r3, [r2, #80]	; 0x50
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_NCS
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8001b9a:	21c0      	movs	r1, #192	; 0xc0
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f001 f932 	bl	8002e08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <HAL_QSPI_MspDeInit+0x4c>)
 8001ba8:	f001 f92e 	bl	8002e08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11);
 8001bac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <HAL_QSPI_MspDeInit+0x50>)
 8001bb2:	f001 f929 	bl	8002e08 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	a0001000 	.word	0xa0001000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400
 8001bcc:	48001000 	.word	0x48001000

08001bd0 <CSP_QUADSPI_Init>:


/* USER CODE BEGIN 1 */
/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <CSP_QUADSPI_Init+0x68>)
 8001bd6:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <CSP_QUADSPI_Init+0x6c>)
 8001bd8:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001bda:	4817      	ldr	r0, [pc, #92]	; (8001c38 <CSP_QUADSPI_Init+0x68>)
 8001bdc:	f002 fccc 	bl	8004578 <HAL_QSPI_DeInit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e024      	b.n	8001c34 <CSP_QUADSPI_Init+0x64>
	}

	MX_QUADSPI_Init();
 8001bea:	f7ff ff21 	bl	8001a30 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8001bee:	f000 fa6f 	bl	80020d0 <QSPI_ResetChip>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e01b      	b.n	8001c34 <CSP_QUADSPI_Init+0x64>
	}

	HAL_Delay(1);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f000 fde5 	bl	80027cc <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001c02:	f000 f855 	bl	8001cb0 <QSPI_AutoPollingMemReady>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e011      	b.n	8001c34 <CSP_QUADSPI_Init+0x64>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8001c10:	f000 f89a 	bl	8001d48 <QSPI_WriteEnable>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00a      	b.n	8001c34 <CSP_QUADSPI_Init+0x64>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8001c1e:	f000 f8f5 	bl	8001e0c <QSPI_Configuration>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e003      	b.n	8001c34 <CSP_QUADSPI_Init+0x64>
	}

	HAL_Delay(100);
 8001c2c:	2064      	movs	r0, #100	; 0x64
 8001c2e:	f000 fdcd 	bl	80027cc <HAL_Delay>

	return HAL_OK;
 8001c32:	2300      	movs	r3, #0

}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000046c 	.word	0x2000046c
 8001c3c:	a0001000 	.word	0xa0001000

08001c40 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	; 0x38
 8001c44:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;

	if (QSPI_WriteEnable() != HAL_OK) {
 8001c46:	f000 f87f 	bl	8001d48 <QSPI_WriteEnable>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e026      	b.n	8001ca2 <CSP_QSPI_Erase_Chip+0x62>
	}

	/* Erasing Sequence --------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c58:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = CHIP_ERASE_CMD;
 8001c5a:	23c7      	movs	r3, #199	; 0xc7
 8001c5c:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY) != HAL_OK) {
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c80:	4619      	mov	r1, r3
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <CSP_QSPI_Erase_Chip+0x6c>)
 8001c84:	f002 fc9c 	bl	80045c0 <HAL_QSPI_Command>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <CSP_QSPI_Erase_Chip+0x52>
		return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e007      	b.n	8001ca2 <CSP_QSPI_Erase_Chip+0x62>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8001c92:	f000 f80d 	bl	8001cb0 <QSPI_AutoPollingMemReady>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <CSP_QSPI_Erase_Chip+0x60>
		return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <CSP_QSPI_Erase_Chip+0x62>
	}

	return HAL_OK;
 8001ca0:	2300      	movs	r3, #0

}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3738      	adds	r7, #56	; 0x38
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000046c 	.word	0x2000046c

08001cb0 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b096      	sub	sp, #88	; 0x58
 8001cb4:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	2238      	movs	r2, #56	; 0x38
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f009 ff18 	bl	800baf4 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001cda:	2305      	movs	r3, #5
 8001cdc:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cea:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	653b      	str	r3, [r7, #80]	; 0x50

	sConfig.Match = 0x00;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d14:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001d16:	1d3a      	adds	r2, r7, #4
 8001d18:	f107 011c 	add.w	r1, r7, #28
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <QSPI_AutoPollingMemReady+0x94>)
 8001d22:	f002 fde4 	bl	80048ee <HAL_QSPI_AutoPolling>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 8001d34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d38:	e000      	b.n	8001d3c <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3758      	adds	r7, #88	; 0x58
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000046c 	.word	0x2000046c

08001d48 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b096      	sub	sp, #88	; 0x58
 8001d4c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2238      	movs	r2, #56	; 0x38
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f009 fecc 	bl	800baf4 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8001d72:	2306      	movs	r3, #6
 8001d74:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	653b      	str	r3, [r7, #80]	; 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <QSPI_WriteEnable+0xc0>)
 8001d9e:	f002 fc0f 	bl	80045c0 <HAL_QSPI_Command>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8001db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001db4:	e024      	b.n	8001e00 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001db6:	2302      	movs	r3, #2
 8001db8:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dce:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd8:	643b      	str	r3, [r7, #64]	; 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001dda:	1d3a      	adds	r2, r7, #4
 8001ddc:	f107 011c 	add.w	r1, r7, #28
 8001de0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001de4:	4808      	ldr	r0, [pc, #32]	; (8001e08 <QSPI_WriteEnable+0xc0>)
 8001de6:	f002 fd82 	bl	80048ee <HAL_QSPI_AutoPolling>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8001df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dfc:	e000      	b.n	8001e00 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3758      	adds	r7, #88	; 0x58
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000046c 	.word	0x2000046c

08001e0c <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b090      	sub	sp, #64	; 0x40
 8001e10:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2238      	movs	r2, #56	; 0x38
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f009 fe6b 	bl	800baf4 <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e22:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 8001e24:	2335      	movs	r3, #53	; 0x35
 8001e26:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4619      	mov	r1, r3
 8001e52:	4858      	ldr	r0, [pc, #352]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001e54:	f002 fbb4 	bl	80045c0 <HAL_QSPI_Command>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8001e66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e6a:	e09f      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8001e6c:	1cfb      	adds	r3, r7, #3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4619      	mov	r1, r3
 8001e74:	484f      	ldr	r0, [pc, #316]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001e76:	f002 fc98 	bl	80047aa <HAL_QSPI_Receive>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 8001e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e8c:	e08e      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 8001e92:	2350      	movs	r3, #80	; 0x50
 8001e94:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4845      	ldr	r0, [pc, #276]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001ea0:	f002 fb8e 	bl	80045c0 <HAL_QSPI_Command>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 8001eaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001eae:	e07d      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 8001eb6:	2331      	movs	r3, #49	; 0x31
 8001eb8:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4839      	ldr	r0, [pc, #228]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001ece:	f002 fb77 	bl	80045c0 <HAL_QSPI_Command>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8001ed8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001edc:	e066      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001ede:	1cfb      	adds	r3, r7, #3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001ee8:	f002 fbc8 	bl	800467c <HAL_QSPI_Transmit>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 8001ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ef6:	e059      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efc:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8001efe:	2315      	movs	r3, #21
 8001f00:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4821      	ldr	r0, [pc, #132]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001f2e:	f002 fb47 	bl	80045c0 <HAL_QSPI_Command>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8001f40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f44:	e032      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8001f46:	1cfb      	adds	r3, r7, #3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001f50:	f002 fc2b 	bl	80047aa <HAL_QSPI_Receive>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 8001f62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f66:	e021      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 8001f68:	2311      	movs	r3, #17
 8001f6a:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001f80:	f002 fb1e 	bl	80045c0 <HAL_QSPI_Command>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 8001f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f8e:	e00d      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001f90:	1cfb      	adds	r3, r7, #3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4619      	mov	r1, r3
 8001f98:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <QSPI_Configuration+0x1a8>)
 8001f9a:	f002 fb6f 	bl	800467c <HAL_QSPI_Transmit>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 8001fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fa8:	e000      	b.n	8001fac <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3740      	adds	r7, #64	; 0x40
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000046c 	.word	0x2000046c

08001fb8 <CSP_QSPI_WriteMemory>:

	return HAL_OK;
}

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
		uint32_t buffer_size) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b096      	sub	sp, #88	; 0x58
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	653b      	str	r3, [r7, #80]	; 0x50

	//
	while (current_addr <= address) {
 8001fc8:	e003      	b.n	8001fd2 <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 8001fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fd0:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 8001fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d9f7      	bls.n	8001fca <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8001fda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8001fe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8002000:	2332      	movs	r3, #50	; 0x32
 8002002:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8002004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800200a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200e:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002010:	2300      	movs	r3, #0
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002018:	2300      	movs	r3, #0
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800201c:	2300      	movs	r3, #0
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8002020:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002024:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 8002032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002034:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e03f      	b.n	80020c4 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8002044:	f7ff fe80 	bl	8001d48 <QSPI_WriteEnable>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e038      	b.n	80020c4 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4619      	mov	r1, r3
 800205c:	481b      	ldr	r0, [pc, #108]	; (80020cc <CSP_QSPI_WriteMemory+0x114>)
 800205e:	f002 faaf 	bl	80045c0 <HAL_QSPI_Command>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e02b      	b.n	80020c4 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4816      	ldr	r0, [pc, #88]	; (80020cc <CSP_QSPI_WriteMemory+0x114>)
 8002074:	f002 fb02 	bl	800467c <HAL_QSPI_Transmit>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <CSP_QSPI_WriteMemory+0xca>
				!= HAL_OK) {

			return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e020      	b.n	80020c4 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8002082:	f7ff fe15 	bl	8001cb0 <QSPI_AutoPollingMemReady>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e019      	b.n	80020c4 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8002090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	4413      	add	r3, r2
 8002096:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 80020a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 80020a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d203      	bcs.n	80020b4 <CSP_QSPI_WriteMemory+0xfc>
 80020ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	e001      	b.n	80020b8 <CSP_QSPI_WriteMemory+0x100>
 80020b4:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 80020b8:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 80020ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020be:	429a      	cmp	r2, r3
 80020c0:	d9b7      	bls.n	8002032 <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 80020c2:	2300      	movs	r3, #0

}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3758      	adds	r7, #88	; 0x58
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000046c 	.word	0x2000046c

080020d0 <QSPI_ResetChip>:
	}
	HAL_Delay(100);
	return HAL_OK;
}

uint8_t QSPI_ResetChip() {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b090      	sub	sp, #64	; 0x40
 80020d4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80020d6:	463b      	mov	r3, r7
 80020d8:	2238      	movs	r2, #56	; 0x38
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f009 fd09 	bl	800baf4 <memset>
	uint32_t temp = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 80020ec:	2366      	movs	r3, #102	; 0x66
 80020ee:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 800210c:	463b      	mov	r3, r7
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4619      	mov	r1, r3
 8002114:	4820      	ldr	r0, [pc, #128]	; (8002198 <QSPI_ResetChip+0xc8>)
 8002116:	f002 fa53 	bl	80045c0 <HAL_QSPI_Command>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002128:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800212c:	e02f      	b.n	800218e <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800212e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002132:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8002134:	2399      	movs	r3, #153	; 0x99
 8002136:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800214c:	2300      	movs	r3, #0
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8002154:	463b      	mov	r3, r7
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4619      	mov	r1, r3
 800215c:	480e      	ldr	r0, [pc, #56]	; (8002198 <QSPI_ResetChip+0xc8>)
 800215e:	f002 fa2f 	bl	80045c0 <HAL_QSPI_Command>
 8002162:	4603      	mov	r3, r0
 8002164:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8002170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002174:	e00b      	b.n	800218e <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8002176:	2300      	movs	r3, #0
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e003      	b.n	8002184 <QSPI_ResetChip+0xb4>
		__NOP();
 800217c:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002180:	3301      	adds	r3, #1
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <QSPI_ResetChip+0xcc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d9f7      	bls.n	800217c <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3740      	adds	r7, #64	; 0x40
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000046c 	.word	0x2000046c
 800219c:	0007a11f 	.word	0x0007a11f

080021a0 <CSP_QSPI_Read>:

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b092      	sub	sp, #72	; 0x48
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80021ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 80021b2:	23eb      	movs	r3, #235	; 0xeb
 80021b4:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 80021b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DataMode = QSPI_DATA_4_LINES;
 80021ca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DummyCycles = 6U;
 80021d0:	2306      	movs	r3, #6
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.NbData = Size;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80021dc:	2300      	movs	r3, #0
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80021e0:	2300      	movs	r3, #0
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4619      	mov	r1, r3
 80021ee:	4816      	ldr	r0, [pc, #88]	; (8002248 <CSP_QSPI_Read+0xa8>)
 80021f0:	f002 f9e6 	bl	80045c0 <HAL_QSPI_Command>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <CSP_QSPI_Read+0x5e>
			!= HAL_OK) {
		return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e01f      	b.n	800223e <CSP_QSPI_Read+0x9e>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <CSP_QSPI_Read+0xa8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <CSP_QSPI_Read+0xa8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002210:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_5_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <CSP_QSPI_Read+0xa8>)
 800221a:	f002 fac6 	bl	80047aa <HAL_QSPI_Receive>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <CSP_QSPI_Read+0x88>
			!= HAL_OK) {
		return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00a      	b.n	800223e <CSP_QSPI_Read+0x9e>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <CSP_QSPI_Read+0xa8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <CSP_QSPI_Read+0xa8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 800223a:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3748      	adds	r7, #72	; 0x48
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000046c 	.word	0x2000046c

0800224c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <MX_SPI1_Init+0x78>)
 8002254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800225c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002266:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800226a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_SPI1_Init+0x74>)
 800226e:	2202      	movs	r2, #2
 8002270:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002274:	2201      	movs	r2, #1
 8002276:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_SPI1_Init+0x74>)
 800227a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002282:	2220      	movs	r2, #32
 8002284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_SPI1_Init+0x74>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <MX_SPI1_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_SPI1_Init+0x74>)
 800229a:	2207      	movs	r2, #7
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <MX_SPI1_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_SPI1_Init+0x74>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_SPI1_Init+0x74>)
 80022ac:	f004 f868 	bl	8006380 <HAL_SPI_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022b6:	f7ff fbaf 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200004b0 	.word	0x200004b0
 80022c4:	40013000 	.word	0x40013000

080022c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <MX_SPI3_Init+0x74>)
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <MX_SPI3_Init+0x78>)
 80022d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_SPI3_Init+0x74>)
 80022d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <MX_SPI3_Init+0x74>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <MX_SPI3_Init+0x74>)
 80022e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_SPI3_Init+0x74>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_SPI3_Init+0x74>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_SPI3_Init+0x74>)
 80022f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_SPI3_Init+0x74>)
 80022fe:	2220      	movs	r2, #32
 8002300:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_SPI3_Init+0x74>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_SPI3_Init+0x74>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_SPI3_Init+0x74>)
 8002310:	2200      	movs	r2, #0
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_SPI3_Init+0x74>)
 8002316:	2207      	movs	r2, #7
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_SPI3_Init+0x74>)
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_SPI3_Init+0x74>)
 8002322:	2200      	movs	r2, #0
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_SPI3_Init+0x74>)
 8002328:	f004 f82a 	bl	8006380 <HAL_SPI_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002332:	f7ff fb71 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000514 	.word	0x20000514
 8002340:	40003c00 	.word	0x40003c00

08002344 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2e      	ldr	r2, [pc, #184]	; (800241c <HAL_SPI_MspInit+0xd8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d128      	bne.n	80023b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 800236c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002370:	6613      	str	r3, [r2, #96]	; 0x60
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002396:	2338      	movs	r3, #56	; 0x38
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a6:	2305      	movs	r3, #5
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	481c      	ldr	r0, [pc, #112]	; (8002424 <HAL_SPI_MspInit+0xe0>)
 80023b2:	f000 fb7f 	bl	8002ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80023b6:	e02d      	b.n	8002414 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_SPI_MspInit+0xe4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d128      	bne.n	8002414 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 80023c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023cc:	6593      	str	r3, [r2, #88]	; 0x58
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_SPI_MspInit+0xdc>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80023f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002404:	2306      	movs	r3, #6
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <HAL_SPI_MspInit+0xe8>)
 8002410:	f000 fb50 	bl	8002ab4 <HAL_GPIO_Init>
}
 8002414:	bf00      	nop
 8002416:	3730      	adds	r7, #48	; 0x30
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40013000 	.word	0x40013000
 8002420:	40021000 	.word	0x40021000
 8002424:	48000400 	.word	0x48000400
 8002428:	40003c00 	.word	0x40003c00
 800242c:	48000800 	.word	0x48000800

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_MspInit+0x44>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_MspInit+0x44>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6613      	str	r3, [r2, #96]	; 0x60
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_MspInit+0x44>)
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_MspInit+0x44>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_MspInit+0x44>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_MspInit+0x44>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c4:	f000 f962 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <OTG_FS_IRQHandler+0x10>)
 80024d2:	f000 ff12 	bl	80032fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20001a60 	.word	0x20001a60

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f009 fb07 	bl	800bb0c <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	e7fe      	b.n	8002522 <_exit+0x12>

08002524 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002536:	f3af 8000 	nop.w
 800253a:	4601      	mov	r1, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dbf0      	blt.n	8002536 <_read+0x12>
  }

  return len;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	dbf1      	blt.n	8002570 <_write+0x12>
  }
  return len;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_close>:

int _close(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025be:	605a      	str	r2, [r3, #4]
  return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_isatty>:

int _isatty(int file)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f009 fa6c 	bl	800bb0c <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20018000 	.word	0x20018000
 8002660:	00000800 	.word	0x00000800
 8002664:	20000578 	.word	0x20000578
 8002668:	200022d8 	.word	0x200022d8

0800266c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002694:	f7ff ffea 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <LoopForever+0x6>)
  ldr r1, =_edata
 800269a:	490d      	ldr	r1, [pc, #52]	; (80026d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <LoopForever+0xe>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <LoopForever+0x16>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026be:	f009 fa2b 	bl	800bb18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026c2:	f7fe fdc9 	bl	8001258 <main>

080026c6 <LoopForever>:

LoopForever:
    b LoopForever
 80026c6:	e7fe      	b.n	80026c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80026d4:	0800e56c 	.word	0x0800e56c
  ldr r2, =_sbss
 80026d8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80026dc:	200022d8 	.word	0x200022d8

080026e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC1_2_IRQHandler>

080026e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ec:	2003      	movs	r0, #3
 80026ee:	f000 f961 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026f2:	200f      	movs	r0, #15
 80026f4:	f000 f80e 	bl	8002714 <HAL_InitTick>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	e001      	b.n	8002708 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002704:	f7ff fe94 	bl	8002430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002708:	79fb      	ldrb	r3, [r7, #7]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_InitTick+0x6c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d023      	beq.n	8002770 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002728:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_InitTick+0x70>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_InitTick+0x6c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f96d 	bl	8002a1e <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d809      	bhi.n	8002764 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002758:	f000 f937 	bl	80029ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_InitTick+0x74>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e007      	b.n	8002774 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e004      	b.n	8002774 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e001      	b.n	8002774 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000008 	.word	0x20000008
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000008 	.word	0x20000008
 80027b0:	2000057c 	.word	0x2000057c

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000057c 	.word	0x2000057c

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff ffee 	bl	80027b4 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000008 	.word	0x20000008

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d008      	beq.n	8002a60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e022      	b.n	8002aa6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 020e 	bic.w	r2, r2, #14
 8002a6e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f003 021c 	and.w	r2, r3, #28
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e17f      	b.n	8002dc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8171 	beq.w	8002dbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d118      	bne.n	8002b94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d017      	beq.n	8002bd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d123      	bne.n	8002c24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80ac 	beq.w	8002dbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	4a5e      	ldr	r2, [pc, #376]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6613      	str	r3, [r2, #96]	; 0x60
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7e:	4a5a      	ldr	r2, [pc, #360]	; (8002de8 <HAL_GPIO_Init+0x334>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x242>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <HAL_GPIO_Init+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x23e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <HAL_GPIO_Init+0x33c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x23a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_GPIO_Init+0x340>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x236>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_GPIO_Init+0x344>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x232>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_GPIO_Init+0x348>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x22e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_GPIO_Init+0x34c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x22a>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d08:	4937      	ldr	r1, [pc, #220]	; (8002de8 <HAL_GPIO_Init+0x334>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f47f ae78 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000
 8002dec:	48000400 	.word	0x48000400
 8002df0:	48000800 	.word	0x48000800
 8002df4:	48000c00 	.word	0x48000c00
 8002df8:	48001000 	.word	0x48001000
 8002dfc:	48001400 	.word	0x48001400
 8002e00:	48001800 	.word	0x48001800
 8002e04:	40010400 	.word	0x40010400

08002e08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e16:	e0cd      	b.n	8002fb4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80c0 	beq.w	8002fae <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e2e:	4a68      	ldr	r2, [pc, #416]	; (8002fd0 <HAL_GPIO_DeInit+0x1c8>)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e56:	d025      	beq.n	8002ea4 <HAL_GPIO_DeInit+0x9c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_GPIO_DeInit+0x1cc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_GPIO_DeInit+0x98>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a5d      	ldr	r2, [pc, #372]	; (8002fd8 <HAL_GPIO_DeInit+0x1d0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d019      	beq.n	8002e9c <HAL_GPIO_DeInit+0x94>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a5c      	ldr	r2, [pc, #368]	; (8002fdc <HAL_GPIO_DeInit+0x1d4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_GPIO_DeInit+0x90>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_GPIO_DeInit+0x1d8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00d      	beq.n	8002e94 <HAL_GPIO_DeInit+0x8c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a5a      	ldr	r2, [pc, #360]	; (8002fe4 <HAL_GPIO_DeInit+0x1dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <HAL_GPIO_DeInit+0x88>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a59      	ldr	r2, [pc, #356]	; (8002fe8 <HAL_GPIO_DeInit+0x1e0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_GPIO_DeInit+0x84>
 8002e88:	2306      	movs	r3, #6
 8002e8a:	e00c      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	e00a      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002e90:	2305      	movs	r3, #5
 8002e92:	e008      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002e94:	2304      	movs	r3, #4
 8002e96:	e006      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e004      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_GPIO_DeInit+0x9e>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	f002 0203 	and.w	r2, r2, #3
 8002eac:	0092      	lsls	r2, r2, #2
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d132      	bne.n	8002f1c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002eb6:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	494b      	ldr	r1, [pc, #300]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	4947      	ldr	r1, [pc, #284]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ed2:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	4944      	ldr	r1, [pc, #272]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ee0:	4b42      	ldr	r3, [pc, #264]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	4940      	ldr	r1, [pc, #256]	; (8002fec <HAL_GPIO_DeInit+0x1e4>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002efe:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <HAL_GPIO_DeInit+0x1c8>)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	4830      	ldr	r0, [pc, #192]	; (8002fd0 <HAL_GPIO_DeInit+0x1c8>)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	400a      	ands	r2, r1
 8002f16:	3302      	adds	r3, #2
 8002f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2103      	movs	r1, #3
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	08d2      	lsrs	r2, r2, #3
 8002f50:	4019      	ands	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2103      	movs	r1, #3
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	2101      	movs	r1, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2103      	movs	r1, #3
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	401a      	ands	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f af2b 	bne.w	8002e18 <HAL_GPIO_DeInit+0x10>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	48000400 	.word	0x48000400
 8002fd8:	48000800 	.word	0x48000800
 8002fdc:	48000c00 	.word	0x48000c00
 8002fe0:	48001000 	.word	0x48001000
 8002fe4:	48001400 	.word	0x48001400
 8002fe8:	48001800 	.word	0x48001800
 8002fec:	40010400 	.word	0x40010400

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800300c:	e002      	b.n	8003014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43d9      	mvns	r1, r3
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	400b      	ands	r3, r1
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003056:	b08f      	sub	sp, #60	; 0x3c
 8003058:	af0a      	add	r7, sp, #40	; 0x28
 800305a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e116      	b.n	8003294 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f007 fbab 	bl	800a7dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 fff0 	bl	800708a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	687e      	ldr	r6, [r7, #4]
 80030b2:	466d      	mov	r5, sp
 80030b4:	f106 0410 	add.w	r4, r6, #16
 80030b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030c8:	1d33      	adds	r3, r6, #4
 80030ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030cc:	6838      	ldr	r0, [r7, #0]
 80030ce:	f003 ff03 	bl	8006ed8 <USB_CoreInit>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0d7      	b.n	8003294 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 ffde 	bl	80070ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e04a      	b.n	800318c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	333d      	adds	r3, #61	; 0x3d
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	333c      	adds	r3, #60	; 0x3c
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	b298      	uxth	r0, r3
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3356      	adds	r3, #86	; 0x56
 8003132:	4602      	mov	r2, r0
 8003134:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3340      	adds	r3, #64	; 0x40
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3344      	adds	r3, #68	; 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3348      	adds	r3, #72	; 0x48
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334c      	adds	r3, #76	; 0x4c
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3301      	adds	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d3af      	bcc.n	80030f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e044      	b.n	8003226 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	3301      	adds	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d3b5      	bcc.n	800319c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	687e      	ldr	r6, [r7, #4]
 8003238:	466d      	mov	r5, sp
 800323a:	f106 0410 	add.w	r4, r6, #16
 800323e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800324a:	e885 0003 	stmia.w	r5, {r0, r1}
 800324e:	1d33      	adds	r3, r6, #4
 8003250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003252:	6838      	ldr	r0, [r7, #0]
 8003254:	f003 ff76 	bl	8007144 <USB_DevInit>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e014      	b.n	8003294 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 f86a 	bl	800435c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f004 ff24 	bl	80080da <USB_DevDisconnect>

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800329c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_PCD_Start+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e01c      	b.n	80032f2 <HAL_PCD_Start+0x56>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fec5 	bl	8007068 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fed8 	bl	8008098 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032fa:	b590      	push	{r4, r7, lr}
 80032fc:	b08d      	sub	sp, #52	; 0x34
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f004 ff96 	bl	8008242 <USB_GetMode>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 847e 	bne.w	8003c1a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fefa 	bl	800811c <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8474 	beq.w	8003c18 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f004 fee7 	bl	800811c <USB_ReadInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d107      	bne.n	8003368 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f002 0202 	and.w	r2, r2, #2
 8003366:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f004 fed5 	bl	800811c <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b10      	cmp	r3, #16
 800337a:	d161      	bne.n	8003440 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0210 	bic.w	r2, r2, #16
 800338a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	0c5b      	lsrs	r3, r3, #17
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d124      	bne.n	8003402 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d035      	beq.n	8003430 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6a38      	ldr	r0, [r7, #32]
 80033d8:	f004 fd0c 	bl	8007df4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e8:	441a      	add	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fa:	441a      	add	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	615a      	str	r2, [r3, #20]
 8003400:	e016      	b.n	8003430 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	0c5b      	lsrs	r3, r3, #17
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	2b06      	cmp	r3, #6
 800340c:	d110      	bne.n	8003430 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003414:	2208      	movs	r2, #8
 8003416:	4619      	mov	r1, r3
 8003418:	6a38      	ldr	r0, [r7, #32]
 800341a:	f004 fceb 	bl	8007df4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342a:	441a      	add	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0210 	orr.w	r2, r2, #16
 800343e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 fe69 	bl	800811c <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003450:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003454:	f040 80a7 	bne.w	80035a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f004 fe6e 	bl	8008142 <USB_ReadDevAllOutEpInterrupt>
 8003466:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003468:	e099      	b.n	800359e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 808e 	beq.w	8003592 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f004 fe92 	bl	80081aa <USB_ReadDevOutEPInterrupt>
 8003486:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	461a      	mov	r2, r3
 80034a0:	2301      	movs	r3, #1
 80034a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fe7e 	bl	80041a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	461a      	mov	r2, r3
 80034c4:	2308      	movs	r3, #8
 80034c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 feba 	bl	8004244 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	461a      	mov	r2, r3
 80034e8:	2310      	movs	r3, #16
 80034ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d030      	beq.n	8003558 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d109      	bne.n	8003516 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003514:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	78db      	ldrb	r3, [r3, #3]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2200      	movs	r2, #0
 8003538:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f007 fa9f 	bl	800aa84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	461a      	mov	r2, r3
 8003554:	2302      	movs	r3, #2
 8003556:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	2320      	movs	r3, #32
 8003572:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003590:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	3301      	adds	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f47f af62 	bne.w	800346a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 fdb6 	bl	800811c <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ba:	f040 80a4 	bne.w	8003706 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 fdd7 	bl	8008176 <USB_ReadDevAllInEpInterrupt>
 80035c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035ce:	e096      	b.n	80036fe <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 808b 	beq.w	80036f2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fdfd 	bl	80081e6 <USB_ReadDevInEPInterrupt>
 80035ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	2201      	movs	r2, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	69f9      	ldr	r1, [r7, #28]
 8003614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003618:	4013      	ands	r3, r2
 800361a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	2301      	movs	r3, #1
 800362c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f007 f990 	bl	800a95a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	461a      	mov	r2, r3
 8003652:	2308      	movs	r3, #8
 8003654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	461a      	mov	r2, r3
 800366e:	2310      	movs	r3, #16
 8003670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	461a      	mov	r2, r3
 800368a:	2340      	movs	r3, #64	; 0x40
 800368c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800369a:	6a38      	ldr	r0, [r7, #32]
 800369c:	f003 fe94 	bl	80073c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3338      	adds	r3, #56	; 0x38
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	78db      	ldrb	r3, [r3, #3]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d108      	bne.n	80036ce <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f007 f9ed 	bl	800aaa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036da:	461a      	mov	r2, r3
 80036dc:	2302      	movs	r3, #2
 80036de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fcd2 	bl	8004096 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	3301      	adds	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af65 	bne.w	80035d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fd06 	bl	800811c <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371a:	d122      	bne.n	8003762 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003742:	2100      	movs	r1, #0
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f007 fc21 	bl	800af8c <HAL_PCDEx_LPM_Callback>
 800374a:	e002      	b.n	8003752 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f007 f971 	bl	800aa34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f004 fcd8 	bl	800811c <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d112      	bne.n	800379e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d102      	bne.n	800378e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f007 f92d 	bl	800a9e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800379c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 fcba 	bl	800811c <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b2:	d121      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80037c2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d111      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80037e8:	2101      	movs	r1, #1
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f007 fbce 	bl	800af8c <HAL_PCDEx_LPM_Callback>
 80037f0:	e002      	b.n	80037f8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f007 f8f8 	bl	800a9e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f004 fc8d 	bl	800811c <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	f040 80b5 	bne.w	800397a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2110      	movs	r1, #16
 800382a:	4618      	mov	r0, r3
 800382c:	f003 fdcc 	bl	80073c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	e046      	b.n	80038c4 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	461a      	mov	r2, r3
 8003844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003848:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003868:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388e:	0151      	lsls	r1, r2, #5
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	440a      	add	r2, r1
 8003894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800389c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	3301      	adds	r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d3b3      	bcc.n	8003836 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fa:	f043 030b 	orr.w	r3, r3, #11
 80038fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003910:	f043 030b 	orr.w	r3, r3, #11
 8003914:	6453      	str	r3, [r2, #68]	; 0x44
 8003916:	e015      	b.n	8003944 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800392e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393e:	f043 030b 	orr.w	r3, r3, #11
 8003942:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003952:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003956:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f004 fc9d 	bl	80082a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f004 fbcc 	bl	800811c <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800398a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398e:	d124      	bne.n	80039da <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f004 fc62 	bl	800825e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fd8f 	bl	80074c2 <USB_GetDevSpeed>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681c      	ldr	r4, [r3, #0]
 80039b0:	f001 ffbe 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 80039b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	4620      	mov	r0, r4
 80039c0:	f003 fab6 	bl	8006f30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f006 fff0 	bl	800a9aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 fb9c 	bl	800811c <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d10a      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f006 ffcd 	bl	800a98e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f002 0208 	and.w	r2, r2, #8
 8003a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 fb87 	bl	800811c <USB_ReadInterrupts>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d122      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	e014      	b.n	8003a54 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 faf3 	bl	8004034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	3301      	adds	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3e5      	bcc.n	8003a2a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 fb5a 	bl	800811c <USB_ReadInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a72:	d13b      	bne.n	8003aec <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a74:	2301      	movs	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	e02b      	b.n	8003ad2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3340      	adds	r3, #64	; 0x40
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d115      	bne.n	8003acc <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003aa0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	da12      	bge.n	8003acc <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	333f      	adds	r3, #63	; 0x3f
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fab4 	bl	8004034 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	3301      	adds	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3ce      	bcc.n	8003a7a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f004 fb13 	bl	800811c <USB_ReadInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b00:	d155      	bne.n	8003bae <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b02:	2301      	movs	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e045      	b.n	8003b94 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d12e      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da2b      	bge.n	8003b8e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d121      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8a:	6053      	str	r3, [r2, #4]
            break;
 8003b8c:	e007      	b.n	8003b9e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	3301      	adds	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3b4      	bcc.n	8003b08 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fab2 	bl	800811c <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d10a      	bne.n	8003bda <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f006 ff81 	bl	800aacc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 fa9c 	bl	800811c <USB_ReadInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d115      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f006 ff71 	bl	800aae8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	e000      	b.n	8003c1a <HAL_PCD_IRQHandler+0x920>
      return;
 8003c18:	bf00      	nop
    }
  }
}
 8003c1a:	3734      	adds	r7, #52	; 0x34
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_PCD_SetAddress+0x1a>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e013      	b.n	8003c62 <HAL_PCD_SetAddress+0x42>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 f9fa 	bl	800804c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	4608      	mov	r0, r1
 8003c74:	4611      	mov	r1, r2
 8003c76:	461a      	mov	r2, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	70fb      	strb	r3, [r7, #3]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	803b      	strh	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da0f      	bge.n	8003cb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	705a      	strb	r2, [r3, #1]
 8003cae:	e00f      	b.n	8003cd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cdc:	883a      	ldrh	r2, [r7, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	78ba      	ldrb	r2, [r7, #2]
 8003ce6:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cfa:	78bb      	ldrb	r3, [r7, #2]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d102      	bne.n	8003d06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_Open+0xaa>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_Open+0xc8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 fbec 	bl	8007500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d30:	7afb      	ldrb	r3, [r7, #11]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da0f      	bge.n	8003d6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	3338      	adds	r3, #56	; 0x38
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	705a      	strb	r2, [r3, #1]
 8003d6c:	e00f      	b.n	8003d8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	f003 020f 	and.w	r2, r3, #15
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_EP_Close+0x6e>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e00e      	b.n	8003dc6 <HAL_PCD_EP_Close+0x8c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fc2a 	bl	8007610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	f003 020f 	and.w	r2, r3, #15
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2200      	movs	r2, #0
 8003e08:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6979      	ldr	r1, [r7, #20]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f003 fcd0 	bl	80077c8 <USB_EPStartXfer>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003e54:	681b      	ldr	r3, [r3, #0]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e72:	7afb      	ldrb	r3, [r7, #11]
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3338      	adds	r3, #56	; 0x38
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	3304      	adds	r3, #4
 8003e88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6979      	ldr	r1, [r7, #20]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 fc87 	bl	80077c8 <USB_EPStartXfer>

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 020f 	and.w	r2, r3, #15
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d901      	bls.n	8003ee2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e04e      	b.n	8003f80 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da0f      	bge.n	8003f0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 020f 	and.w	r2, r3, #15
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	3338      	adds	r3, #56	; 0x38
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	705a      	strb	r2, [r3, #1]
 8003f08:	e00d      	b.n	8003f26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_PCD_EP_SetStall+0x82>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e01c      	b.n	8003f80 <HAL_PCD_EP_SetStall+0xbc>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 ffa5 	bl	8007ea4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f004 f997 	bl	80082a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 020f 	and.w	r2, r3, #15
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d901      	bls.n	8003fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e042      	b.n	800402c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da0f      	bge.n	8003fce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3338      	adds	r3, #56	; 0x38
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	705a      	strb	r2, [r3, #1]
 8003fcc:	e00f      	b.n	8003fee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_PCD_EP_ClrStall+0x86>
 800400a:	2302      	movs	r3, #2
 800400c:	e00e      	b.n	800402c <HAL_PCD_EP_ClrStall+0xa4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	4618      	mov	r0, r3
 800401e:	f003 ffaf 	bl	8007f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0c      	bge.n	8004062 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3338      	adds	r3, #56	; 0x38
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e00c      	b.n	800407c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fdd2 	bl	8007c2c <USB_EPStopXfer>
 8004088:	4603      	mov	r3, r0
 800408a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800408c:	7afb      	ldrb	r3, [r7, #11]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	3338      	adds	r3, #56	; 0x38
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	3304      	adds	r3, #4
 80040bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d901      	bls.n	80040ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e067      	b.n	800419e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d902      	bls.n	80040ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3303      	adds	r3, #3
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f2:	e026      	b.n	8004142 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	429a      	cmp	r2, r3
 8004108:	d902      	bls.n	8004110 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3303      	adds	r3, #3
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	b29b      	uxth	r3, r3
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f003 fe2b 	bl	8007d80 <USB_WritePacket>

    ep->xfer_buff  += len;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	441a      	add	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d809      	bhi.n	800416c <PCD_WriteEmptyTxFifo+0xd6>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004160:	429a      	cmp	r2, r3
 8004162:	d203      	bcs.n	800416c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1c3      	bne.n	80040f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	d811      	bhi.n	800419c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	2201      	movs	r2, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	43db      	mvns	r3, r3
 8004192:	6939      	ldr	r1, [r7, #16]
 8004194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004198:	4013      	ands	r3, r2
 800419a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	333c      	adds	r3, #60	; 0x3c
 80041c0:	3304      	adds	r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <PCD_EP_OutXfrComplete_int+0x98>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d124      	bne.n	8004228 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	461a      	mov	r2, r3
 80041f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fa:	6093      	str	r3, [r2, #8]
 80041fc:	e01a      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	461a      	mov	r2, r3
 8004216:	2320      	movs	r3, #32
 8004218:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f006 fb7f 	bl	800a924 <HAL_PCD_DataOutStageCallback>
 8004226:	e005      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f006 fb78 	bl	800a924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	4f54310a 	.word	0x4f54310a

08004244 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	333c      	adds	r3, #60	; 0x3c
 800425c:	3304      	adds	r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a0c      	ldr	r2, [pc, #48]	; (80042a8 <PCD_EP_OutSetupPacket_int+0x64>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d90e      	bls.n	8004298 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f006 fb31 	bl	800a900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	4f54300a 	.word	0x4f54300a

080042ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
 80042b8:	4613      	mov	r3, r2
 80042ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ca:	883b      	ldrh	r3, [r7, #0]
 80042cc:	0419      	lsls	r1, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
 80042d8:	e028      	b.n	800432c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4413      	add	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e00d      	b.n	800430a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	3340      	adds	r3, #64	; 0x40
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4413      	add	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	3301      	adds	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	3b01      	subs	r3, #1
 8004310:	429a      	cmp	r2, r3
 8004312:	d3ec      	bcc.n	80042ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004314:	883b      	ldrh	r3, [r7, #0]
 8004316:	0418      	lsls	r0, r3, #16
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	3b01      	subs	r3, #1
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	4302      	orrs	r2, r0
 8004324:	3340      	adds	r3, #64	; 0x40
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438e:	f043 0303 	orr.w	r3, r3, #3
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_PWREx_GetVoltageRange+0x18>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40007000 	.word	0x40007000

080043c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ce:	d130      	bne.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043dc:	d038      	beq.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2232      	movs	r2, #50	; 0x32
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	0c9b      	lsrs	r3, r3, #18
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004404:	e002      	b.n	800440c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b01      	subs	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004418:	d102      	bne.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x60>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f2      	bne.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d110      	bne.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e00f      	b.n	8004452 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443e:	d007      	beq.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004448:	4a05      	ldr	r2, [pc, #20]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40007000 	.word	0x40007000
 8004464:	20000000 	.word	0x20000000
 8004468:	431bde83 	.word	0x431bde83

0800446c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800447a:	6053      	str	r3, [r2, #4]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40007000 	.word	0x40007000

0800448c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7fe f98e 	bl	80027b4 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e063      	b.n	800456c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fd fadf 	bl	8001a7c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044be:	f241 3188 	movw	r1, #5000	; 0x1388
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fb03 	bl	8004ace <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	021a      	lsls	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	2120      	movs	r1, #32
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fafb 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d131      	bne.n	8004562 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	0611      	lsls	r1, r2, #24
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68d2      	ldr	r2, [r2, #12]
 8004516:	4311      	orrs	r1, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	430b      	orrs	r3, r1
 800451e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <HAL_QSPI_Init+0xe8>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6912      	ldr	r2, [r2, #16]
 800452e:	0411      	lsls	r1, r2, #16
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6952      	ldr	r2, [r2, #20]
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6992      	ldr	r2, [r2, #24]
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800456a:	7afb      	ldrb	r3, [r7, #11]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	ffe0f8fe 	.word	0xffe0f8fe

08004578 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e016      	b.n	80045b8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd faee 	bl	8001b7c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80045cc:	f7fe f8f2 	bl	80027b4 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_QSPI_Command+0x22>
 80045de:	2302      	movs	r3, #2
 80045e0:	e048      	b.n	8004674 <HAL_QSPI_Command+0xb4>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d137      	bne.n	8004666 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2200      	movs	r2, #0
 800460c:	2120      	movs	r1, #32
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa6b 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d125      	bne.n	800466a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800461e:	2200      	movs	r2, #0
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa98 	bl	8004b58 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d115      	bne.n	800465c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2201      	movs	r2, #1
 8004638:	2102      	movs	r1, #2
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fa55 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2202      	movs	r2, #2
 8004650:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800465a:	e006      	b.n	800466a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004664:	e001      	b.n	800466a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004666:	2302      	movs	r3, #2
 8004668:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800468c:	f7fe f892 	bl	80027b4 <HAL_GetTick>
 8004690:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3320      	adds	r3, #32
 8004698:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_QSPI_Transmit+0x2e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e07b      	b.n	80047a2 <HAL_QSPI_Transmit+0x126>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d16a      	bne.n	8004794 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d05b      	beq.n	8004782 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2212      	movs	r2, #18
 80046ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80046fe:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004700:	e01b      	b.n	800473a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2201      	movs	r2, #1
 800470a:	2104      	movs	r1, #4
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f9ec 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004716:	7ffb      	ldrb	r3, [r7, #31]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d113      	bne.n	8004744 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	781a      	ldrb	r2, [r3, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	1e5a      	subs	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1df      	bne.n	8004702 <HAL_QSPI_Transmit+0x86>
 8004742:	e000      	b.n	8004746 <HAL_QSPI_Transmit+0xca>
          break;
 8004744:	bf00      	nop
      }

      if (status == HAL_OK)
 8004746:	7ffb      	ldrb	r3, [r7, #31]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d115      	bne.n	8004778 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2201      	movs	r2, #1
 8004754:	2102      	movs	r1, #2
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f9c7 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004760:	7ffb      	ldrb	r3, [r7, #31]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2202      	movs	r2, #2
 800476c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f934 	bl	80049dc <HAL_QSPI_Abort>
 8004774:	4603      	mov	r3, r0
 8004776:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004780:	e00a      	b.n	8004798 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e001      	b.n	8004798 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08a      	sub	sp, #40	; 0x28
 80047ae:	af02      	add	r7, sp, #8
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80047ba:	f7fd fffb 	bl	80027b4 <HAL_GetTick>
 80047be:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3320      	adds	r3, #32
 80047ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_QSPI_Receive+0x36>
 80047dc:	2302      	movs	r3, #2
 80047de:	e082      	b.n	80048e6 <HAL_QSPI_Receive+0x13c>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d171      	bne.n	80048d8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d062      	beq.n	80048c6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2222      	movs	r2, #34	; 0x22
 8004804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004838:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004842:	e01c      	b.n	800487e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2201      	movs	r2, #1
 800484c:	2106      	movs	r1, #6
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f94b 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d114      	bne.n	8004888 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1de      	bne.n	8004844 <HAL_QSPI_Receive+0x9a>
 8004886:	e000      	b.n	800488a <HAL_QSPI_Receive+0xe0>
          break;
 8004888:	bf00      	nop
      }

      if (status == HAL_OK)
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d115      	bne.n	80048bc <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2201      	movs	r2, #1
 8004898:	2102      	movs	r1, #2
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f925 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f892 	bl	80049dc <HAL_QSPI_Abort>
 80048b8:	4603      	mov	r3, r0
 80048ba:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80048c4:	e00a      	b.n	80048dc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	f043 0208 	orr.w	r2, r3, #8
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e001      	b.n	80048dc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
 80048da:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80048e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af02      	add	r7, sp, #8
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7fd ff5a 	bl	80027b4 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_QSPI_AutoPolling+0x24>
 800490e:	2302      	movs	r3, #2
 8004910:	e060      	b.n	80049d4 <HAL_QSPI_AutoPolling+0xe6>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d14f      	bne.n	80049c6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2242      	movs	r2, #66	; 0x42
 8004930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2200      	movs	r2, #0
 800493c:	2120      	movs	r1, #32
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f8d3 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d13d      	bne.n	80049ca <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6852      	ldr	r2, [r2, #4]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6892      	ldr	r2, [r2, #8]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	431a      	orrs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004984:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800498e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f8df 	bl	8004b58 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2201      	movs	r2, #1
 80049a2:	2108      	movs	r1, #8
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f8a0 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2208      	movs	r2, #8
 80049ba:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80049c4:	e001      	b.n	80049ca <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
 80049c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80049e8:	f7fd fee4 	bl	80027b4 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d062      	beq.n	8004ac4 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d017      	beq.n	8004a44 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe f804 	bl	8002a36 <HAL_DMA_Abort>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d034      	beq.n	8004abc <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0202 	orr.w	r2, r2, #2
 8004a60:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f83b 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2202      	movs	r2, #2
 8004a84:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2120      	movs	r1, #32
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f829 	bl	8004aea <QSPI_WaitFlagStateUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004ab0:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004aba:	e003      	b.n	8004ac4 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004afa:	e01a      	b.n	8004b32 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b02:	d016      	beq.n	8004b32 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b04:	f7fd fe56 	bl	80027b4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d302      	bcc.n	8004b1a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e00e      	b.n	8004b50 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d1d6      	bne.n	8004afc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <QSPI_Config+0x28>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b72:	d005      	beq.n	8004b80 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80b9 	beq.w	8004cfc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d05f      	beq.n	8004c52 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	6892      	ldr	r2, [r2, #8]
 8004b9a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d031      	beq.n	8004c08 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	049b      	lsls	r3, r3, #18
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	ea42 0103 	orr.w	r1, r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bf8:	f000 812e 	beq.w	8004e58 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	6852      	ldr	r2, [r2, #4]
 8004c04:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004c06:	e127      	b.n	8004e58 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	049b      	lsls	r3, r3, #18
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	ea42 0103 	orr.w	r1, r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	615a      	str	r2, [r3, #20]
}
 8004c50:	e102      	b.n	8004e58 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02e      	beq.n	8004cb8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	049b      	lsls	r3, r3, #18
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	ea42 0103 	orr.w	r1, r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ca8:	f000 80d6 	beq.w	8004e58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	619a      	str	r2, [r3, #24]
}
 8004cb6:	e0cf      	b.n	8004e58 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	049b      	lsls	r3, r3, #18
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	615a      	str	r2, [r3, #20]
}
 8004cfa:	e0ad      	b.n	8004e58 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d058      	beq.n	8004db6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	6892      	ldr	r2, [r2, #8]
 8004d0c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d02d      	beq.n	8004d72 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	049b      	lsls	r3, r3, #18
 8004d32:	431a      	orrs	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	ea42 0103 	orr.w	r1, r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d64:	d078      	beq.n	8004e58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	6852      	ldr	r2, [r2, #4]
 8004d6e:	619a      	str	r2, [r3, #24]
}
 8004d70:	e072      	b.n	8004e58 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	049b      	lsls	r3, r3, #18
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	ea42 0103 	orr.w	r1, r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	615a      	str	r2, [r3, #20]
}
 8004db4:	e050      	b.n	8004e58 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d02a      	beq.n	8004e14 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	049b      	lsls	r3, r3, #18
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	ea42 0103 	orr.w	r1, r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e06:	d027      	beq.n	8004e58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	619a      	str	r2, [r3, #24]
}
 8004e12:	e021      	b.n	8004e58 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01d      	beq.n	8004e58 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	049b      	lsls	r3, r3, #18
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	ea42 0103 	orr.w	r1, r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	615a      	str	r2, [r3, #20]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e3ca      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e76:	4b97      	ldr	r3, [pc, #604]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e80:	4b94      	ldr	r3, [pc, #592]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80e4 	beq.w	8005060 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <HAL_RCC_OscConfig+0x4a>
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	f040 808b 	bne.w	8004fbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 8087 	bne.w	8004fbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eae:	4b89      	ldr	r3, [pc, #548]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x62>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e3a2      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	4b82      	ldr	r3, [pc, #520]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x7c>
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ede:	e005      	b.n	8004eec <HAL_RCC_OscConfig+0x88>
 8004ee0:	4b7c      	ldr	r3, [pc, #496]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d223      	bcs.n	8004f38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fd27 	bl	8005948 <RCC_SetFlashLatencyFromMSIRange>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e383      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f04:	4b73      	ldr	r3, [pc, #460]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a72      	ldr	r2, [pc, #456]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f0a:	f043 0308 	orr.w	r3, r3, #8
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b70      	ldr	r3, [pc, #448]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	496d      	ldr	r1, [pc, #436]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f22:	4b6c      	ldr	r3, [pc, #432]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	4968      	ldr	r1, [pc, #416]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	604b      	str	r3, [r1, #4]
 8004f36:	e025      	b.n	8004f84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f38:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a65      	ldr	r2, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f3e:	f043 0308 	orr.w	r3, r3, #8
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4960      	ldr	r1, [pc, #384]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f56:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	495b      	ldr	r1, [pc, #364]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fce7 	bl	8005948 <RCC_SetFlashLatencyFromMSIRange>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e343      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f84:	f000 fc4a 	bl	800581c <HAL_RCC_GetSysClockFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b52      	ldr	r3, [pc, #328]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	4950      	ldr	r1, [pc, #320]	; (80050d8 <HAL_RCC_OscConfig+0x274>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	4a4e      	ldr	r2, [pc, #312]	; (80050dc <HAL_RCC_OscConfig+0x278>)
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fa4:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd fbb3 	bl	8002714 <HAL_InitTick>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d052      	beq.n	800505e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	e327      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d032      	beq.n	800502a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a42      	ldr	r2, [pc, #264]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fbf0 	bl	80027b4 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fd8:	f7fd fbec 	bl	80027b4 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e310      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fea:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ff6:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a36      	ldr	r2, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	f043 0308 	orr.w	r3, r3, #8
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4931      	ldr	r1, [pc, #196]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005014:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	492c      	ldr	r1, [pc, #176]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
 8005028:	e01a      	b.n	8005060 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a29      	ldr	r2, [pc, #164]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005036:	f7fd fbbd 	bl	80027b4 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800503e:	f7fd fbb9 	bl	80027b4 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e2dd      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f0      	bne.n	800503e <HAL_RCC_OscConfig+0x1da>
 800505c:	e000      	b.n	8005060 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800505e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d074      	beq.n	8005156 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b08      	cmp	r3, #8
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x21a>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d10e      	bne.n	8005096 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d10b      	bne.n	8005096 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d064      	beq.n	8005154 <HAL_RCC_OscConfig+0x2f0>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d160      	bne.n	8005154 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e2ba      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x24a>
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e026      	b.n	80050fc <HAL_RCC_OscConfig+0x298>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b6:	d115      	bne.n	80050e4 <HAL_RCC_OscConfig+0x280>
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a02      	ldr	r2, [pc, #8]	; (80050d4 <HAL_RCC_OscConfig+0x270>)
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e014      	b.n	80050fc <HAL_RCC_OscConfig+0x298>
 80050d2:	bf00      	nop
 80050d4:	40021000 	.word	0x40021000
 80050d8:	0800e1b4 	.word	0x0800e1b4
 80050dc:	20000000 	.word	0x20000000
 80050e0:	20000004 	.word	0x20000004
 80050e4:	4ba0      	ldr	r3, [pc, #640]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a9f      	ldr	r2, [pc, #636]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	4b9d      	ldr	r3, [pc, #628]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a9c      	ldr	r2, [pc, #624]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80050f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fd fb56 	bl	80027b4 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800510c:	f7fd fb52 	bl	80027b4 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e276      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800511e:	4b92      	ldr	r3, [pc, #584]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x2a8>
 800512a:	e014      	b.n	8005156 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd fb42 	bl	80027b4 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fd fb3e 	bl	80027b4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e262      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005146:	4b88      	ldr	r3, [pc, #544]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x2d0>
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d060      	beq.n	8005224 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d005      	beq.n	8005174 <HAL_RCC_OscConfig+0x310>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d119      	bne.n	80051a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d116      	bne.n	80051a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005174:	4b7c      	ldr	r3, [pc, #496]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_OscConfig+0x328>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e23f      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b76      	ldr	r3, [pc, #472]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	4973      	ldr	r1, [pc, #460]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a0:	e040      	b.n	8005224 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d023      	beq.n	80051f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051aa:	4b6f      	ldr	r3, [pc, #444]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6e      	ldr	r2, [pc, #440]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fd fafd 	bl	80027b4 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051be:	f7fd faf9 	bl	80027b4 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e21d      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d0:	4b65      	ldr	r3, [pc, #404]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4b62      	ldr	r3, [pc, #392]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	495f      	ldr	r1, [pc, #380]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
 80051f0:	e018      	b.n	8005224 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f2:	4b5d      	ldr	r3, [pc, #372]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a5c      	ldr	r2, [pc, #368]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fd fad9 	bl	80027b4 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005206:	f7fd fad5 	bl	80027b4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e1f9      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005218:	4b53      	ldr	r3, [pc, #332]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1f0      	bne.n	8005206 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d03c      	beq.n	80052aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01c      	beq.n	8005272 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005238:	4b4b      	ldr	r3, [pc, #300]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800523a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523e:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fd fab4 	bl	80027b4 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005250:	f7fd fab0 	bl	80027b4 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e1d4      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005262:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ef      	beq.n	8005250 <HAL_RCC_OscConfig+0x3ec>
 8005270:	e01b      	b.n	80052aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005272:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005278:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005282:	f7fd fa97 	bl	80027b4 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528a:	f7fd fa93 	bl	80027b4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e1b7      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800529c:	4b32      	ldr	r3, [pc, #200]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800529e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ef      	bne.n	800528a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a6 	beq.w	8005404 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b8:	2300      	movs	r3, #0
 80052ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052bc:	4b2a      	ldr	r3, [pc, #168]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6593      	str	r3, [r2, #88]	; 0x58
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e0:	2301      	movs	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e4:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCC_OscConfig+0x508>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d118      	bne.n	8005322 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCC_OscConfig+0x508>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <HAL_RCC_OscConfig+0x508>)
 80052f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fc:	f7fd fa5a 	bl	80027b4 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005304:	f7fd fa56 	bl	80027b4 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e17a      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_RCC_OscConfig+0x508>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d108      	bne.n	800533c <HAL_RCC_OscConfig+0x4d8>
 800532a:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533a:	e029      	b.n	8005390 <HAL_RCC_OscConfig+0x52c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b05      	cmp	r3, #5
 8005342:	d115      	bne.n	8005370 <HAL_RCC_OscConfig+0x50c>
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	4a03      	ldr	r2, [pc, #12]	; (8005368 <HAL_RCC_OscConfig+0x504>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005364:	e014      	b.n	8005390 <HAL_RCC_OscConfig+0x52c>
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	40007000 	.word	0x40007000
 8005370:	4b9c      	ldr	r3, [pc, #624]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	4a9b      	ldr	r2, [pc, #620]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005380:	4b98      	ldr	r3, [pc, #608]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	4a97      	ldr	r2, [pc, #604]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d016      	beq.n	80053c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fd fa0c 	bl	80027b4 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fd fa08 	bl	80027b4 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e12a      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b6:	4b8b      	ldr	r3, [pc, #556]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ed      	beq.n	80053a0 <HAL_RCC_OscConfig+0x53c>
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fd f9f5 	bl	80027b4 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd f9f1 	bl	80027b4 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e113      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e4:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ed      	bne.n	80053ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d105      	bne.n	8005404 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f8:	4b7a      	ldr	r3, [pc, #488]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	4a79      	ldr	r2, [pc, #484]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80053fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005402:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80fe 	beq.w	800560a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	2b02      	cmp	r3, #2
 8005414:	f040 80d0 	bne.w	80055b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005418:	4b72      	ldr	r3, [pc, #456]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f003 0203 	and.w	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	429a      	cmp	r2, r3
 800542a:	d130      	bne.n	800548e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	3b01      	subs	r3, #1
 8005438:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d127      	bne.n	800548e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005448:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d11f      	bne.n	800548e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005458:	2a07      	cmp	r2, #7
 800545a:	bf14      	ite	ne
 800545c:	2201      	movne	r2, #1
 800545e:	2200      	moveq	r2, #0
 8005460:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005462:	4293      	cmp	r3, r2
 8005464:	d113      	bne.n	800548e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	3b01      	subs	r3, #1
 8005474:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d109      	bne.n	800548e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	3b01      	subs	r3, #1
 8005488:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d06e      	beq.n	800556c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b0c      	cmp	r3, #12
 8005492:	d069      	beq.n	8005568 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005494:	4b53      	ldr	r3, [pc, #332]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054a0:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0ad      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054b0:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a4b      	ldr	r2, [pc, #300]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80054b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054bc:	f7fd f97a 	bl	80027b4 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c4:	f7fd f976 	bl	80027b4 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e09a      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d6:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e2:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	4b40      	ldr	r3, [pc, #256]	; (80055e8 <HAL_RCC_OscConfig+0x784>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054f2:	3a01      	subs	r2, #1
 80054f4:	0112      	lsls	r2, r2, #4
 80054f6:	4311      	orrs	r1, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054fc:	0212      	lsls	r2, r2, #8
 80054fe:	4311      	orrs	r1, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005504:	0852      	lsrs	r2, r2, #1
 8005506:	3a01      	subs	r2, #1
 8005508:	0552      	lsls	r2, r2, #21
 800550a:	4311      	orrs	r1, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005510:	0852      	lsrs	r2, r2, #1
 8005512:	3a01      	subs	r2, #1
 8005514:	0652      	lsls	r2, r2, #25
 8005516:	4311      	orrs	r1, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800551c:	0912      	lsrs	r2, r2, #4
 800551e:	0452      	lsls	r2, r2, #17
 8005520:	430a      	orrs	r2, r1
 8005522:	4930      	ldr	r1, [pc, #192]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005524:	4313      	orrs	r3, r2
 8005526:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005528:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800552e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005532:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005540:	f7fd f938 	bl	80027b4 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fd f934 	bl	80027b4 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e058      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005566:	e050      	b.n	800560a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e04f      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d148      	bne.n	800560a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005578:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800557e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005582:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005584:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 800558a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005590:	f7fd f910 	bl	80027b4 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fd f90c 	bl	80027b4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e030      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0x734>
 80055b6:	e028      	b.n	800560a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d023      	beq.n	8005606 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <HAL_RCC_OscConfig+0x780>)
 80055c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fd f8f3 	bl	80027b4 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d0:	e00c      	b.n	80055ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d2:	f7fd f8ef 	bl	80027b4 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d905      	bls.n	80055ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e013      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
 80055e4:	40021000 	.word	0x40021000
 80055e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_OscConfig+0x7b0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ec      	bne.n	80055d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_OscConfig+0x7b0>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4905      	ldr	r1, [pc, #20]	; (8005614 <HAL_RCC_OscConfig+0x7b0>)
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCC_OscConfig+0x7b4>)
 8005600:	4013      	ands	r3, r2
 8005602:	60cb      	str	r3, [r1, #12]
 8005604:	e001      	b.n	800560a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	feeefffc 	.word	0xfeeefffc

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0e7      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b75      	ldr	r3, [pc, #468]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d910      	bls.n	8005660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b72      	ldr	r3, [pc, #456]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 0207 	bic.w	r2, r3, #7
 8005646:	4970      	ldr	r1, [pc, #448]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b6e      	ldr	r3, [pc, #440]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0cf      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	4b66      	ldr	r3, [pc, #408]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005678:	429a      	cmp	r2, r3
 800567a:	d908      	bls.n	800568e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800567c:	4b63      	ldr	r3, [pc, #396]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4960      	ldr	r1, [pc, #384]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04c      	beq.n	8005734 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d107      	bne.n	80056b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a2:	4b5a      	ldr	r3, [pc, #360]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d121      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0a6      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ba:	4b54      	ldr	r3, [pc, #336]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d115      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e09a      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056d2:	4b4e      	ldr	r3, [pc, #312]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e08e      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e2:	4b4a      	ldr	r3, [pc, #296]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e086      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056f2:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 0203 	bic.w	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4943      	ldr	r1, [pc, #268]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005700:	4313      	orrs	r3, r2
 8005702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005704:	f7fd f856 	bl	80027b4 <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570a:	e00a      	b.n	8005722 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570c:	f7fd f852 	bl	80027b4 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f241 3288 	movw	r2, #5000	; 0x1388
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e06e      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005722:	4b3a      	ldr	r3, [pc, #232]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 020c 	and.w	r2, r3, #12
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	429a      	cmp	r2, r3
 8005732:	d1eb      	bne.n	800570c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d010      	beq.n	8005762 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	4b31      	ldr	r3, [pc, #196]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800574c:	429a      	cmp	r2, r3
 800574e:	d208      	bcs.n	8005762 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005750:	4b2e      	ldr	r3, [pc, #184]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	492b      	ldr	r1, [pc, #172]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005762:	4b29      	ldr	r3, [pc, #164]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d210      	bcs.n	8005792 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f023 0207 	bic.w	r2, r3, #7
 8005778:	4923      	ldr	r1, [pc, #140]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005780:	4b21      	ldr	r3, [pc, #132]	; (8005808 <HAL_RCC_ClockConfig+0x1ec>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d001      	beq.n	8005792 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e036      	b.n	8005800 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	4918      	ldr	r1, [pc, #96]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057bc:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4910      	ldr	r1, [pc, #64]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057d0:	f000 f824 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <HAL_RCC_ClockConfig+0x1f0>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	091b      	lsrs	r3, r3, #4
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <HAL_RCC_ClockConfig+0x1f4>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x1f8>)
 80057ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x1fc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fc ff8d 	bl	8002714 <HAL_InitTick>
 80057fa:	4603      	mov	r3, r0
 80057fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80057fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40022000 	.word	0x40022000
 800580c:	40021000 	.word	0x40021000
 8005810:	0800e1b4 	.word	0x0800e1b4
 8005814:	20000000 	.word	0x20000000
 8005818:	20000004 	.word	0x20000004

0800581c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800582a:	4b3e      	ldr	r3, [pc, #248]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005834:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x34>
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b0c      	cmp	r3, #12
 8005848:	d121      	bne.n	800588e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d11e      	bne.n	800588e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005850:	4b34      	ldr	r3, [pc, #208]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800585c:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 800585e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e005      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005878:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <HAL_RCC_GetSysClockFreq+0x10c>)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005880:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d102      	bne.n	800589a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_GetSysClockFreq+0x110>)
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e004      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058a0:	4b22      	ldr	r3, [pc, #136]	; (800592c <HAL_RCC_GetSysClockFreq+0x110>)
 80058a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b0c      	cmp	r3, #12
 80058a8:	d134      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058aa:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d003      	beq.n	80058c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d003      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0xac>
 80058c0:	e005      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <HAL_RCC_GetSysClockFreq+0x110>)
 80058c4:	617b      	str	r3, [r7, #20]
      break;
 80058c6:	e005      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058c8:	4b18      	ldr	r3, [pc, #96]	; (800592c <HAL_RCC_GetSysClockFreq+0x110>)
 80058ca:	617b      	str	r3, [r7, #20]
      break;
 80058cc:	e002      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	617b      	str	r3, [r7, #20]
      break;
 80058d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d4:	4b13      	ldr	r3, [pc, #76]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	3301      	adds	r3, #1
 80058e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	fb03 f202 	mul.w	r2, r3, r2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <HAL_RCC_GetSysClockFreq+0x108>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	0e5b      	lsrs	r3, r3, #25
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	3301      	adds	r3, #1
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005914:	69bb      	ldr	r3, [r7, #24]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3724      	adds	r7, #36	; 0x24
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	0800e1c4 	.word	0x0800e1c4
 800592c:	00f42400 	.word	0x00f42400

08005930 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCC_GetHCLKFreq+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000000 	.word	0x20000000

08005948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005954:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005960:	f7fe fd20 	bl	80043a4 <HAL_PWREx_GetVoltageRange>
 8005964:	6178      	str	r0, [r7, #20]
 8005966:	e014      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	6593      	str	r3, [r2, #88]	; 0x58
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005980:	f7fe fd10 	bl	80043a4 <HAL_PWREx_GetVoltageRange>
 8005984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800598c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d10b      	bne.n	80059b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d919      	bls.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2ba0      	cmp	r3, #160	; 0xa0
 80059a4:	d902      	bls.n	80059ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059a6:	2302      	movs	r3, #2
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	e013      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059ac:	2301      	movs	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e010      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d902      	bls.n	80059be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059b8:	2303      	movs	r3, #3
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e00a      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b80      	cmp	r3, #128	; 0x80
 80059c2:	d102      	bne.n	80059ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059c4:	2302      	movs	r3, #2
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e004      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b70      	cmp	r3, #112	; 0x70
 80059ce:	d101      	bne.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059d0:	2301      	movs	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f023 0207 	bic.w	r2, r3, #7
 80059dc:	4909      	ldr	r1, [pc, #36]	; (8005a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d001      	beq.n	80059f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40022000 	.word	0x40022000

08005a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a10:	2300      	movs	r3, #0
 8005a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a14:	2300      	movs	r3, #0
 8005a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d041      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a2c:	d02a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a32:	d824      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a38:	d008      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a3e:	d81e      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a48:	d010      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a4a:	e018      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a4c:	4b86      	ldr	r3, [pc, #536]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4a85      	ldr	r2, [pc, #532]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a58:	e015      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fabb 	bl	8005fdc <RCCEx_PLLSAI1_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a6a:	e00c      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3320      	adds	r3, #32
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fba6 	bl	80061c4 <RCCEx_PLLSAI2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a7c:	e003      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	74fb      	strb	r3, [r7, #19]
      break;
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a86:	7cfb      	ldrb	r3, [r7, #19]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a8c:	4b76      	ldr	r3, [pc, #472]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9a:	4973      	ldr	r1, [pc, #460]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005aa2:	e001      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d041      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005abc:	d02a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005abe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ac2:	d824      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac8:	d008      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ace:	d81e      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad8:	d010      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ada:	e018      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005adc:	4b62      	ldr	r3, [pc, #392]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a61      	ldr	r2, [pc, #388]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ae8:	e015      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fa73 	bl	8005fdc <RCCEx_PLLSAI1_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005afa:	e00c      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3320      	adds	r3, #32
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fb5e 	bl	80061c4 <RCCEx_PLLSAI2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b0c:	e003      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	74fb      	strb	r3, [r7, #19]
      break;
 8005b12:	e000      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b16:	7cfb      	ldrb	r3, [r7, #19]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b1c:	4b52      	ldr	r3, [pc, #328]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2a:	494f      	ldr	r1, [pc, #316]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b32:	e001      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80a0 	beq.w	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b60:	4b41      	ldr	r3, [pc, #260]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	4a40      	ldr	r2, [pc, #256]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b6c:	4b3e      	ldr	r3, [pc, #248]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b7c:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3a      	ldr	r2, [pc, #232]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b88:	f7fc fe14 	bl	80027b4 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b8e:	e009      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b90:	f7fc fe10 	bl	80027b4 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d902      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	74fb      	strb	r3, [r7, #19]
        break;
 8005ba2:	e005      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ba4:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ef      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d15c      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bb6:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01f      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d019      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005be0:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c00:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fc fdcf 	bl	80027b4 <HAL_GetTick>
 8005c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c18:	e00b      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fc fdcb 	bl	80027b4 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d902      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c30:	e006      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ec      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c40:	7cfb      	ldrb	r3, [r7, #19]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c56:	4904      	ldr	r1, [pc, #16]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c5e:	e009      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c60:	7cfb      	ldrb	r3, [r7, #19]
 8005c62:	74bb      	strb	r3, [r7, #18]
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c74:	7c7b      	ldrb	r3, [r7, #17]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d105      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c7a:	4b9e      	ldr	r3, [pc, #632]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	4a9d      	ldr	r2, [pc, #628]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c92:	4b98      	ldr	r3, [pc, #608]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f023 0203 	bic.w	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	4994      	ldr	r1, [pc, #592]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cb4:	4b8f      	ldr	r3, [pc, #572]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	f023 020c 	bic.w	r2, r3, #12
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	498c      	ldr	r1, [pc, #560]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cd6:	4b87      	ldr	r3, [pc, #540]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	4983      	ldr	r1, [pc, #524]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cf8:	4b7e      	ldr	r3, [pc, #504]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	497b      	ldr	r1, [pc, #492]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d1a:	4b76      	ldr	r3, [pc, #472]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d28:	4972      	ldr	r1, [pc, #456]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d3c:	4b6d      	ldr	r3, [pc, #436]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4a:	496a      	ldr	r1, [pc, #424]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d5e:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	4961      	ldr	r1, [pc, #388]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d80:	4b5c      	ldr	r3, [pc, #368]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8e:	4959      	ldr	r1, [pc, #356]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005da2:	4b54      	ldr	r3, [pc, #336]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	4950      	ldr	r1, [pc, #320]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dc4:	4b4b      	ldr	r3, [pc, #300]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	4948      	ldr	r1, [pc, #288]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005de6:	4b43      	ldr	r3, [pc, #268]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	493f      	ldr	r1, [pc, #252]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d028      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e08:	4b3a      	ldr	r3, [pc, #232]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e16:	4937      	ldr	r1, [pc, #220]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e26:	d106      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e28:	4b32      	ldr	r3, [pc, #200]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a31      	ldr	r2, [pc, #196]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e32:	60d3      	str	r3, [r2, #12]
 8005e34:	e011      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e3e:	d10c      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	2101      	movs	r1, #1
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f8c8 	bl	8005fdc <RCCEx_PLLSAI1_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d028      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e66:	4b23      	ldr	r3, [pc, #140]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e74:	491f      	ldr	r1, [pc, #124]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e84:	d106      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e86:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e90:	60d3      	str	r3, [r2, #12]
 8005e92:	e011      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f899 	bl	8005fdc <RCCEx_PLLSAI1_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005eb4:	7cfb      	ldrb	r3, [r7, #19]
 8005eb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d02b      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed2:	4908      	ldr	r1, [pc, #32]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee2:	d109      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a02      	ldr	r2, [pc, #8]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eee:	60d3      	str	r3, [r2, #12]
 8005ef0:	e014      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	2101      	movs	r1, #1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f867 	bl	8005fdc <RCCEx_PLLSAI1_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f12:	7cfb      	ldrb	r3, [r7, #19]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f18:	7cfb      	ldrb	r3, [r7, #19]
 8005f1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d02f      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f36:	4928      	ldr	r1, [pc, #160]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f46:	d10d      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 f844 	bl	8005fdc <RCCEx_PLLSAI1_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d014      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f5e:	7cfb      	ldrb	r3, [r7, #19]
 8005f60:	74bb      	strb	r3, [r7, #18]
 8005f62:	e011      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3320      	adds	r3, #32
 8005f72:	2102      	movs	r1, #2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 f925 	bl	80061c4 <RCCEx_PLLSAI2_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
 8005f86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa2:	490d      	ldr	r1, [pc, #52]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc6:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fce:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40021000 	.word	0x40021000

08005fdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fea:	4b75      	ldr	r3, [pc, #468]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ff6:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0203 	and.w	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d10d      	bne.n	8006022 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
       ||
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800600e:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	091b      	lsrs	r3, r3, #4
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
       ||
 800601e:	429a      	cmp	r2, r3
 8006020:	d047      	beq.n	80060b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	e044      	b.n	80060b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b03      	cmp	r3, #3
 800602e:	d018      	beq.n	8006062 <RCCEx_PLLSAI1_Config+0x86>
 8006030:	2b03      	cmp	r3, #3
 8006032:	d825      	bhi.n	8006080 <RCCEx_PLLSAI1_Config+0xa4>
 8006034:	2b01      	cmp	r3, #1
 8006036:	d002      	beq.n	800603e <RCCEx_PLLSAI1_Config+0x62>
 8006038:	2b02      	cmp	r3, #2
 800603a:	d009      	beq.n	8006050 <RCCEx_PLLSAI1_Config+0x74>
 800603c:	e020      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800603e:	4b60      	ldr	r3, [pc, #384]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d11d      	bne.n	8006086 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800604e:	e01a      	b.n	8006086 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006050:	4b5b      	ldr	r3, [pc, #364]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006058:	2b00      	cmp	r3, #0
 800605a:	d116      	bne.n	800608a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006060:	e013      	b.n	800608a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006062:	4b57      	ldr	r3, [pc, #348]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800606e:	4b54      	ldr	r3, [pc, #336]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800607e:	e006      	b.n	800608e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e004      	b.n	8006090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800608e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10d      	bne.n	80060b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	430b      	orrs	r3, r1
 80060ac:	4944      	ldr	r1, [pc, #272]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d17d      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060b8:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a40      	ldr	r2, [pc, #256]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c4:	f7fc fb76 	bl	80027b4 <HAL_GetTick>
 80060c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060ca:	e009      	b.n	80060e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060cc:	f7fc fb72 	bl	80027b4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d902      	bls.n	80060e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	73fb      	strb	r3, [r7, #15]
        break;
 80060de:	e005      	b.n	80060ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060e0:	4b37      	ldr	r3, [pc, #220]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1ef      	bne.n	80060cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d160      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d111      	bne.n	800611c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060f8:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6892      	ldr	r2, [r2, #8]
 8006108:	0211      	lsls	r1, r2, #8
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68d2      	ldr	r2, [r2, #12]
 800610e:	0912      	lsrs	r2, r2, #4
 8006110:	0452      	lsls	r2, r2, #17
 8006112:	430a      	orrs	r2, r1
 8006114:	492a      	ldr	r1, [pc, #168]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006116:	4313      	orrs	r3, r2
 8006118:	610b      	str	r3, [r1, #16]
 800611a:	e027      	b.n	800616c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d112      	bne.n	8006148 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006122:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800612a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6892      	ldr	r2, [r2, #8]
 8006132:	0211      	lsls	r1, r2, #8
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6912      	ldr	r2, [r2, #16]
 8006138:	0852      	lsrs	r2, r2, #1
 800613a:	3a01      	subs	r2, #1
 800613c:	0552      	lsls	r2, r2, #21
 800613e:	430a      	orrs	r2, r1
 8006140:	491f      	ldr	r1, [pc, #124]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	610b      	str	r3, [r1, #16]
 8006146:	e011      	b.n	800616c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006150:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6892      	ldr	r2, [r2, #8]
 8006158:	0211      	lsls	r1, r2, #8
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6952      	ldr	r2, [r2, #20]
 800615e:	0852      	lsrs	r2, r2, #1
 8006160:	3a01      	subs	r2, #1
 8006162:	0652      	lsls	r2, r2, #25
 8006164:	430a      	orrs	r2, r1
 8006166:	4916      	ldr	r1, [pc, #88]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006168:	4313      	orrs	r3, r2
 800616a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fc fb1c 	bl	80027b4 <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800617e:	e009      	b.n	8006194 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006180:	f7fc fb18 	bl	80027b4 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d902      	bls.n	8006194 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	73fb      	strb	r3, [r7, #15]
          break;
 8006192:	e005      	b.n	80061a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ef      	beq.n	8006180 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	4904      	ldr	r1, [pc, #16]	; (80061c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000

080061c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061d2:	4b6a      	ldr	r3, [pc, #424]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d018      	beq.n	8006210 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061de:	4b67      	ldr	r3, [pc, #412]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0203 	and.w	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d10d      	bne.n	800620a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
       ||
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80061f6:	4b61      	ldr	r3, [pc, #388]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
       ||
 8006206:	429a      	cmp	r2, r3
 8006208:	d047      	beq.n	800629a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
 800620e:	e044      	b.n	800629a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d018      	beq.n	800624a <RCCEx_PLLSAI2_Config+0x86>
 8006218:	2b03      	cmp	r3, #3
 800621a:	d825      	bhi.n	8006268 <RCCEx_PLLSAI2_Config+0xa4>
 800621c:	2b01      	cmp	r3, #1
 800621e:	d002      	beq.n	8006226 <RCCEx_PLLSAI2_Config+0x62>
 8006220:	2b02      	cmp	r3, #2
 8006222:	d009      	beq.n	8006238 <RCCEx_PLLSAI2_Config+0x74>
 8006224:	e020      	b.n	8006268 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006226:	4b55      	ldr	r3, [pc, #340]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d11d      	bne.n	800626e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006236:	e01a      	b.n	800626e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006238:	4b50      	ldr	r3, [pc, #320]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006240:	2b00      	cmp	r3, #0
 8006242:	d116      	bne.n	8006272 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006248:	e013      	b.n	8006272 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800624a:	4b4c      	ldr	r3, [pc, #304]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10f      	bne.n	8006276 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006256:	4b49      	ldr	r3, [pc, #292]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006266:	e006      	b.n	8006276 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e004      	b.n	8006278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006276:	bf00      	nop
    }

    if(status == HAL_OK)
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800627e:	4b3f      	ldr	r3, [pc, #252]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	3b01      	subs	r3, #1
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	430b      	orrs	r3, r1
 8006294:	4939      	ldr	r1, [pc, #228]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006296:	4313      	orrs	r3, r2
 8006298:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d167      	bne.n	8006370 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062a0:	4b36      	ldr	r3, [pc, #216]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a35      	ldr	r2, [pc, #212]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ac:	f7fc fa82 	bl	80027b4 <HAL_GetTick>
 80062b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062b2:	e009      	b.n	80062c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062b4:	f7fc fa7e 	bl	80027b4 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d902      	bls.n	80062c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	73fb      	strb	r3, [r7, #15]
        break;
 80062c6:	e005      	b.n	80062d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062c8:	4b2c      	ldr	r3, [pc, #176]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ef      	bne.n	80062b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d14a      	bne.n	8006370 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d111      	bne.n	8006304 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062e0:	4b26      	ldr	r3, [pc, #152]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80062e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6892      	ldr	r2, [r2, #8]
 80062f0:	0211      	lsls	r1, r2, #8
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68d2      	ldr	r2, [r2, #12]
 80062f6:	0912      	lsrs	r2, r2, #4
 80062f8:	0452      	lsls	r2, r2, #17
 80062fa:	430a      	orrs	r2, r1
 80062fc:	491f      	ldr	r1, [pc, #124]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	614b      	str	r3, [r1, #20]
 8006302:	e011      	b.n	8006328 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800630c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6892      	ldr	r2, [r2, #8]
 8006314:	0211      	lsls	r1, r2, #8
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6912      	ldr	r2, [r2, #16]
 800631a:	0852      	lsrs	r2, r2, #1
 800631c:	3a01      	subs	r2, #1
 800631e:	0652      	lsls	r2, r2, #25
 8006320:	430a      	orrs	r2, r1
 8006322:	4916      	ldr	r1, [pc, #88]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006324:	4313      	orrs	r3, r2
 8006326:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006328:	4b14      	ldr	r3, [pc, #80]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a13      	ldr	r2, [pc, #76]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 800632e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006334:	f7fc fa3e 	bl	80027b4 <HAL_GetTick>
 8006338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800633a:	e009      	b.n	8006350 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800633c:	f7fc fa3a 	bl	80027b4 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d902      	bls.n	8006350 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	73fb      	strb	r3, [r7, #15]
          break;
 800634e:	e005      	b.n	800635c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ef      	beq.n	800633c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006364:	695a      	ldr	r2, [r3, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	4904      	ldr	r1, [pc, #16]	; (800637c <RCCEx_PLLSAI2_Config+0x1b8>)
 800636c:	4313      	orrs	r3, r2
 800636e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000

08006380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e095      	b.n	80064be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2b00      	cmp	r3, #0
 8006398:	d108      	bne.n	80063ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a2:	d009      	beq.n	80063b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	61da      	str	r2, [r3, #28]
 80063aa:	e005      	b.n	80063b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb ffb6 	bl	8002344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063f8:	d902      	bls.n	8006400 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e002      	b.n	8006406 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006404:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800640e:	d007      	beq.n	8006420 <HAL_SPI_Init+0xa0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	ea42 0103 	orr.w	r1, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 0204 	and.w	r2, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800649c:	ea42 0103 	orr.w	r1, r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b088      	sub	sp, #32
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_SPI_Transmit+0x22>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e15f      	b.n	80067a8 <HAL_SPI_Transmit+0x2e2>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f0:	f7fc f960 	bl	80027b4 <HAL_GetTick>
 80064f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	d002      	beq.n	800650c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006506:	2302      	movs	r3, #2
 8006508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800650a:	e148      	b.n	800679e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Transmit+0x52>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800651c:	e13f      	b.n	800679e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2203      	movs	r2, #3
 8006522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	88fa      	ldrh	r2, [r7, #6]
 8006536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	d10f      	bne.n	800658a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006588:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d007      	beq.n	80065a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065b0:	d94f      	bls.n	8006652 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_SPI_Transmit+0xfa>
 80065ba:	8afb      	ldrh	r3, [r7, #22]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d142      	bne.n	8006646 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	881a      	ldrh	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065e4:	e02f      	b.n	8006646 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d112      	bne.n	800661a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	881a      	ldrh	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	1c9a      	adds	r2, r3, #2
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006618:	e015      	b.n	8006646 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800661a:	f7fc f8cb 	bl	80027b4 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d803      	bhi.n	8006632 <HAL_SPI_Transmit+0x16c>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006630:	d102      	bne.n	8006638 <HAL_SPI_Transmit+0x172>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006644:	e0ab      	b.n	800679e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1ca      	bne.n	80065e6 <HAL_SPI_Transmit+0x120>
 8006650:	e080      	b.n	8006754 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_SPI_Transmit+0x19a>
 800665a:	8afb      	ldrh	r3, [r7, #22]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d174      	bne.n	800674a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d912      	bls.n	8006690 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	881a      	ldrh	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	1c9a      	adds	r2, r3, #2
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b02      	subs	r3, #2
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800668e:	e05c      	b.n	800674a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	7812      	ldrb	r2, [r2, #0]
 800669c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80066b6:	e048      	b.n	800674a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d12b      	bne.n	800671e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d912      	bls.n	80066f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	881a      	ldrh	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b02      	subs	r3, #2
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066f4:	e029      	b.n	800674a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800671c:	e015      	b.n	800674a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800671e:	f7fc f849 	bl	80027b4 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d803      	bhi.n	8006736 <HAL_SPI_Transmit+0x270>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006734:	d102      	bne.n	800673c <HAL_SPI_Transmit+0x276>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d106      	bne.n	800674a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006748:	e029      	b.n	800679e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1b1      	bne.n	80066b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fb77 	bl	8006e4c <SPI_EndRxTxTransaction>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e003      	b.n	800679e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067be:	2301      	movs	r3, #1
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x26>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e20a      	b.n	8006bec <HAL_SPI_TransmitReceive+0x43c>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067de:	f7fb ffe9 	bl	80027b4 <HAL_GetTick>
 80067e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067f6:	887b      	ldrh	r3, [r7, #2]
 80067f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067fa:	7efb      	ldrb	r3, [r7, #27]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d00e      	beq.n	800681e <HAL_SPI_TransmitReceive+0x6e>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006806:	d106      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x66>
 8006810:	7efb      	ldrb	r3, [r7, #27]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d003      	beq.n	800681e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006816:	2302      	movs	r3, #2
 8006818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800681c:	e1e0      	b.n	8006be0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x80>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x80>
 800682a:	887b      	ldrh	r3, [r7, #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d103      	bne.n	8006838 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006836:	e1d3      	b.n	8006be0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b04      	cmp	r3, #4
 8006842:	d003      	beq.n	800684c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2205      	movs	r2, #5
 8006848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	887a      	ldrh	r2, [r7, #2]
 800685c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	887a      	ldrh	r2, [r7, #2]
 8006864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	887a      	ldrh	r2, [r7, #2]
 8006872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	887a      	ldrh	r2, [r7, #2]
 8006878:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800688e:	d802      	bhi.n	8006896 <HAL_SPI_TransmitReceive+0xe6>
 8006890:	8a3b      	ldrh	r3, [r7, #16]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d908      	bls.n	80068a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	e007      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d007      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068de:	f240 8081 	bls.w	80069e4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_TransmitReceive+0x140>
 80068ea:	8a7b      	ldrh	r3, [r7, #18]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d16d      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	1c9a      	adds	r2, r3, #2
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006914:	e05a      	b.n	80069cc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d11b      	bne.n	800695c <HAL_SPI_TransmitReceive+0x1ac>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <HAL_SPI_TransmitReceive+0x1ac>
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	2b01      	cmp	r3, #1
 8006932:	d113      	bne.n	800695c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	881a      	ldrh	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	1c9a      	adds	r2, r3, #2
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d11c      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x1f4>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	b292      	uxth	r2, r2
 8006982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069a0:	2301      	movs	r3, #1
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069a4:	f7fb ff06 	bl	80027b4 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d80b      	bhi.n	80069cc <HAL_SPI_TransmitReceive+0x21c>
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ba:	d007      	beq.n	80069cc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80069ca:	e109      	b.n	8006be0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d19f      	bne.n	8006916 <HAL_SPI_TransmitReceive+0x166>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d199      	bne.n	8006916 <HAL_SPI_TransmitReceive+0x166>
 80069e2:	e0e3      	b.n	8006bac <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_SPI_TransmitReceive+0x244>
 80069ec:	8a7b      	ldrh	r3, [r7, #18]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	f040 80cf 	bne.w	8006b92 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d912      	bls.n	8006a24 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	1c9a      	adds	r2, r3, #2
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b02      	subs	r3, #2
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a22:	e0b6      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4a:	e0a2      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d134      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x314>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02f      	beq.n	8006ac4 <HAL_SPI_TransmitReceive+0x314>
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d12c      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d912      	bls.n	8006a9a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	881a      	ldrh	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	1c9a      	adds	r2, r3, #2
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b02      	subs	r3, #2
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a98:	e012      	b.n	8006ac0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d148      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x3b4>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d042      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d923      	bls.n	8006b32 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	b292      	uxth	r2, r2
 8006af6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	1c9a      	adds	r2, r3, #2
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b02      	subs	r3, #2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d81f      	bhi.n	8006b60 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b2e:	605a      	str	r2, [r3, #4]
 8006b30:	e016      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f103 020c 	add.w	r2, r3, #12
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	7812      	ldrb	r2, [r2, #0]
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b60:	2301      	movs	r3, #1
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b64:	f7fb fe26 	bl	80027b4 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d803      	bhi.n	8006b7c <HAL_SPI_TransmitReceive+0x3cc>
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7a:	d102      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x3d2>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006b90:	e026      	b.n	8006be0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f47f af57 	bne.w	8006a4c <HAL_SPI_TransmitReceive+0x29c>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f47f af50 	bne.w	8006a4c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f94b 	bl	8006e4c <SPI_EndRxTxTransaction>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd6:	e003      	b.n	8006be0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3728      	adds	r7, #40	; 0x28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c02:	b2db      	uxtb	r3, r3
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c20:	f7fb fdc8 	bl	80027b4 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c30:	f7fb fdc0 	bl	80027b4 <HAL_GetTick>
 8006c34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c36:	4b39      	ldr	r3, [pc, #228]	; (8006d1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	015b      	lsls	r3, r3, #5
 8006c3c:	0d1b      	lsrs	r3, r3, #20
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c46:	e054      	b.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4e:	d050      	beq.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c50:	f7fb fdb0 	bl	80027b4 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d902      	bls.n	8006c66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d13d      	bne.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c7e:	d111      	bne.n	8006ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c88:	d004      	beq.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c92:	d107      	bne.n	8006ca4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cac:	d10f      	bne.n	8006cce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e017      	b.n	8006d12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	bf0c      	ite	eq
 8006d02:	2301      	moveq	r3, #1
 8006d04:	2300      	movne	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d19b      	bne.n	8006c48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000000 	.word	0x20000000

08006d20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d32:	f7fb fd3f 	bl	80027b4 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	4413      	add	r3, r2
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d42:	f7fb fd37 	bl	80027b4 <HAL_GetTick>
 8006d46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d50:	4b3d      	ldr	r3, [pc, #244]	; (8006e48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	00da      	lsls	r2, r3, #3
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	0d1b      	lsrs	r3, r3, #20
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
 8006d66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d68:	e060      	b.n	8006e2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d70:	d107      	bne.n	8006d82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d88:	d050      	beq.n	8006e2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d8a:	f7fb fd13 	bl	80027b4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d902      	bls.n	8006da0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d13d      	bne.n	8006e1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db8:	d111      	bne.n	8006dde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc2:	d004      	beq.n	8006dce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dcc:	d107      	bne.n	8006dde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ddc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	d10f      	bne.n	8006e08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e010      	b.n	8006e3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d196      	bne.n	8006d6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	; 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000000 	.word	0x20000000

08006e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ff5b 	bl	8006d20 <SPI_WaitFifoStateUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e74:	f043 0220 	orr.w	r2, r3, #32
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e027      	b.n	8006ed0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	2180      	movs	r1, #128	; 0x80
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fec0 	bl	8006c10 <SPI_WaitFlagStateUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e014      	b.n	8006ed0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff ff34 	bl	8006d20 <SPI_WaitFifoStateUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec2:	f043 0220 	orr.w	r2, r3, #32
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e000      	b.n	8006ed0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ed8:	b084      	sub	sp, #16
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	f107 001c 	add.w	r0, r7, #28
 8006ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fa1c 	bl	8008334 <USB_CoreReset>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
 8006f12:	e005      	b.n	8006f20 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2c:	b004      	add	sp, #16
 8006f2e:	4770      	bx	lr

08006f30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d165      	bne.n	8007010 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4a3e      	ldr	r2, [pc, #248]	; (8007040 <USB_SetTurnaroundTime+0x110>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d906      	bls.n	8006f5a <USB_SetTurnaroundTime+0x2a>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a3d      	ldr	r2, [pc, #244]	; (8007044 <USB_SetTurnaroundTime+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d202      	bcs.n	8006f5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f54:	230f      	movs	r3, #15
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e05c      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a39      	ldr	r2, [pc, #228]	; (8007044 <USB_SetTurnaroundTime+0x114>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d306      	bcc.n	8006f70 <USB_SetTurnaroundTime+0x40>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a38      	ldr	r2, [pc, #224]	; (8007048 <USB_SetTurnaroundTime+0x118>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d202      	bcs.n	8006f70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f6a:	230e      	movs	r3, #14
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e051      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a35      	ldr	r2, [pc, #212]	; (8007048 <USB_SetTurnaroundTime+0x118>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d306      	bcc.n	8006f86 <USB_SetTurnaroundTime+0x56>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a34      	ldr	r2, [pc, #208]	; (800704c <USB_SetTurnaroundTime+0x11c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d202      	bcs.n	8006f86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f80:	230d      	movs	r3, #13
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e046      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a30      	ldr	r2, [pc, #192]	; (800704c <USB_SetTurnaroundTime+0x11c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d306      	bcc.n	8006f9c <USB_SetTurnaroundTime+0x6c>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <USB_SetTurnaroundTime+0x120>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d802      	bhi.n	8006f9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f96:	230c      	movs	r3, #12
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	e03b      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <USB_SetTurnaroundTime+0x120>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d906      	bls.n	8006fb2 <USB_SetTurnaroundTime+0x82>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a2b      	ldr	r2, [pc, #172]	; (8007054 <USB_SetTurnaroundTime+0x124>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d802      	bhi.n	8006fb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fac:	230b      	movs	r3, #11
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e030      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a27      	ldr	r2, [pc, #156]	; (8007054 <USB_SetTurnaroundTime+0x124>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d906      	bls.n	8006fc8 <USB_SetTurnaroundTime+0x98>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	; (8007058 <USB_SetTurnaroundTime+0x128>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d802      	bhi.n	8006fc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e025      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a23      	ldr	r2, [pc, #140]	; (8007058 <USB_SetTurnaroundTime+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d906      	bls.n	8006fde <USB_SetTurnaroundTime+0xae>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a22      	ldr	r2, [pc, #136]	; (800705c <USB_SetTurnaroundTime+0x12c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d202      	bcs.n	8006fde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd8:	2309      	movs	r3, #9
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e01a      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a1e      	ldr	r2, [pc, #120]	; (800705c <USB_SetTurnaroundTime+0x12c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d306      	bcc.n	8006ff4 <USB_SetTurnaroundTime+0xc4>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4a1d      	ldr	r2, [pc, #116]	; (8007060 <USB_SetTurnaroundTime+0x130>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d802      	bhi.n	8006ff4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fee:	2308      	movs	r3, #8
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e00f      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <USB_SetTurnaroundTime+0x130>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d906      	bls.n	800700a <USB_SetTurnaroundTime+0xda>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a19      	ldr	r2, [pc, #100]	; (8007064 <USB_SetTurnaroundTime+0x134>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d202      	bcs.n	800700a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007004:	2307      	movs	r3, #7
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	e004      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800700a:	2306      	movs	r3, #6
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e001      	b.n	8007014 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007010:	2309      	movs	r3, #9
 8007012:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800702c:	431a      	orrs	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	00d8acbf 	.word	0x00d8acbf
 8007044:	00e4e1c0 	.word	0x00e4e1c0
 8007048:	00f42400 	.word	0x00f42400
 800704c:	01067380 	.word	0x01067380
 8007050:	011a499f 	.word	0x011a499f
 8007054:	01312cff 	.word	0x01312cff
 8007058:	014ca43f 	.word	0x014ca43f
 800705c:	016e3600 	.word	0x016e3600
 8007060:	01a6ab1f 	.word	0x01a6ab1f
 8007064:	01e84800 	.word	0x01e84800

08007068 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f043 0201 	orr.w	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d115      	bne.n	80070fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070da:	2001      	movs	r0, #1
 80070dc:	f7fb fb76 	bl	80027cc <HAL_Delay>
      ms++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 f8ab 	bl	8008242 <USB_GetMode>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d01e      	beq.n	8007130 <USB_SetCurrentMode+0x84>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b31      	cmp	r3, #49	; 0x31
 80070f6:	d9f0      	bls.n	80070da <USB_SetCurrentMode+0x2e>
 80070f8:	e01a      	b.n	8007130 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d115      	bne.n	800712c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800710c:	2001      	movs	r0, #1
 800710e:	f7fb fb5d 	bl	80027cc <HAL_Delay>
      ms++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f892 	bl	8008242 <USB_GetMode>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <USB_SetCurrentMode+0x84>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b31      	cmp	r3, #49	; 0x31
 8007128:	d9f0      	bls.n	800710c <USB_SetCurrentMode+0x60>
 800712a:	e001      	b.n	8007130 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e005      	b.n	800713c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b32      	cmp	r3, #50	; 0x32
 8007134:	d101      	bne.n	800713a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007144:	b084      	sub	sp, #16
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e009      	b.n	8007178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3340      	adds	r3, #64	; 0x40
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3301      	adds	r3, #1
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b0e      	cmp	r3, #14
 800717c:	d9f2      	bls.n	8007164 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800717e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d11c      	bne.n	80071be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007192:	f043 0302 	orr.w	r3, r3, #2
 8007196:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	e005      	b.n	80071ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071d0:	461a      	mov	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071d6:	2103      	movs	r1, #3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f959 	bl	8007490 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071de:	2110      	movs	r1, #16
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f8f1 	bl	80073c8 <USB_FlushTxFifo>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f91d 	bl	8007430 <USB_FlushRxFifo>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	461a      	mov	r2, r3
 8007208:	2300      	movs	r3, #0
 800720a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	461a      	mov	r2, r3
 8007214:	2300      	movs	r3, #0
 8007216:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721e:	461a      	mov	r2, r3
 8007220:	2300      	movs	r3, #0
 8007222:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e043      	b.n	80072b2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800723c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007240:	d118      	bne.n	8007274 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	461a      	mov	r2, r3
 8007256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	e013      	b.n	8007286 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	461a      	mov	r2, r3
 800726c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	e008      	b.n	8007286 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007292:	461a      	mov	r2, r3
 8007294:	2300      	movs	r3, #0
 8007296:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a4:	461a      	mov	r2, r3
 80072a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	3301      	adds	r3, #1
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3b7      	bcc.n	800722a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	e043      	b.n	8007348 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d6:	d118      	bne.n	800730a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	461a      	mov	r2, r3
 80072ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e013      	b.n	800731c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007300:	461a      	mov	r2, r3
 8007302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	e008      	b.n	800731c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	2300      	movs	r3, #0
 800731a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	461a      	mov	r2, r3
 800732a:	2300      	movs	r3, #0
 800732c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	461a      	mov	r2, r3
 800733c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3301      	adds	r3, #1
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	429a      	cmp	r2, r3
 800734e:	d3b7      	bcc.n	80072c0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007362:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007370:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f043 0210 	orr.w	r2, r3, #16
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <USB_DevInit+0x280>)
 8007384:	4313      	orrs	r3, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f043 0208 	orr.w	r2, r3, #8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800739c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d107      	bne.n	80073b2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073aa:	f043 0304 	orr.w	r3, r3, #4
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073be:	b004      	add	sp, #16
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	803c3800 	.word	0x803c3800

080073c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4a13      	ldr	r2, [pc, #76]	; (800742c <USB_FlushTxFifo+0x64>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d901      	bls.n	80073e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e01b      	b.n	8007420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	daf2      	bge.n	80073d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	019b      	lsls	r3, r3, #6
 80073f8:	f043 0220 	orr.w	r2, r3, #32
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a08      	ldr	r2, [pc, #32]	; (800742c <USB_FlushTxFifo+0x64>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e006      	b.n	8007420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b20      	cmp	r3, #32
 800741c:	d0f0      	beq.n	8007400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	00030d40 	.word	0x00030d40

08007430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4a11      	ldr	r2, [pc, #68]	; (800748c <USB_FlushRxFifo+0x5c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e018      	b.n	8007480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	daf2      	bge.n	800743c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2210      	movs	r2, #16
 800745e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4a08      	ldr	r2, [pc, #32]	; (800748c <USB_FlushRxFifo+0x5c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e006      	b.n	8007480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	2b10      	cmp	r3, #16
 800747c:	d0f0      	beq.n	8007460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	00030d40 	.word	0x00030d40

08007490 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074b0:	4313      	orrs	r3, r2
 80074b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b087      	sub	sp, #28
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0306 	and.w	r3, r3, #6
 80074da:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d002      	beq.n	80074e8 <USB_GetDevSpeed+0x26>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d102      	bne.n	80074ee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074e8:	2302      	movs	r3, #2
 80074ea:	75fb      	strb	r3, [r7, #23]
 80074ec:	e001      	b.n	80074f2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80074ee:	230f      	movs	r3, #15
 80074f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d13a      	bne.n	8007592 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f303 	lsl.w	r3, r1, r3
 8007532:	b29b      	uxth	r3, r3
 8007534:	68f9      	ldr	r1, [r7, #12]
 8007536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800753a:	4313      	orrs	r3, r2
 800753c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d155      	bne.n	8007600 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	791b      	ldrb	r3, [r3, #4]
 800756e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007570:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	059b      	lsls	r3, r3, #22
 8007576:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007578:	4313      	orrs	r3, r2
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e036      	b.n	8007600 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	2101      	movs	r1, #1
 80075a4:	fa01 f303 	lsl.w	r3, r1, r3
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11a      	bne.n	8007600 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	791b      	ldrb	r3, [r3, #4]
 80075e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075e6:	430b      	orrs	r3, r1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d161      	bne.n	80076f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007642:	d11f      	bne.n	8007684 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007662:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	2101      	movs	r1, #1
 8007696:	fa01 f303 	lsl.w	r3, r1, r3
 800769a:	b29b      	uxth	r3, r3
 800769c:	43db      	mvns	r3, r3
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a4:	4013      	ands	r3, r2
 80076a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	2101      	movs	r1, #1
 80076ba:	fa01 f303 	lsl.w	r3, r1, r3
 80076be:	b29b      	uxth	r3, r3
 80076c0:	43db      	mvns	r3, r3
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076c8:	4013      	ands	r3, r2
 80076ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	0159      	lsls	r1, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	440b      	add	r3, r1
 80076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e6:	4619      	mov	r1, r3
 80076e8:	4b35      	ldr	r3, [pc, #212]	; (80077c0 <USB_DeactivateEndpoint+0x1b0>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]
 80076ee:	e060      	b.n	80077b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007706:	d11f      	bne.n	8007748 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007726:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	2101      	movs	r1, #1
 800775a:	fa01 f303 	lsl.w	r3, r1, r3
 800775e:	041b      	lsls	r3, r3, #16
 8007760:	43db      	mvns	r3, r3
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007768:	4013      	ands	r3, r2
 800776a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	69da      	ldr	r2, [r3, #28]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	2101      	movs	r1, #1
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	041b      	lsls	r3, r3, #16
 8007784:	43db      	mvns	r3, r3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800778c:	4013      	ands	r3, r2
 800778e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	0159      	lsls	r1, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	440b      	add	r3, r1
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	4619      	mov	r1, r3
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <USB_DeactivateEndpoint+0x1b4>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	ec337800 	.word	0xec337800
 80077c4:	eff37800 	.word	0xeff37800

080077c8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	f040 8128 	bne.w	8007a36 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d132      	bne.n	8007854 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800780c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784c:	0cdb      	lsrs	r3, r3, #19
 800784e:	04db      	lsls	r3, r3, #19
 8007850:	6113      	str	r3, [r2, #16]
 8007852:	e092      	b.n	800797a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786e:	0cdb      	lsrs	r3, r3, #19
 8007870:	04db      	lsls	r3, r3, #19
 8007872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	440a      	add	r2, r1
 800788a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007892:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007896:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d11a      	bne.n	80078d4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d903      	bls.n	80078b2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d0:	6113      	str	r3, [r2, #16]
 80078d2:	e01b      	b.n	800790c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6919      	ldr	r1, [r3, #16]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	440b      	add	r3, r1
 80078ec:	1e59      	subs	r1, r3, #1
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078f6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078f8:	4b8d      	ldr	r3, [pc, #564]	; (8007b30 <USB_EPStartXfer+0x368>)
 80078fa:	400b      	ands	r3, r1
 80078fc:	6939      	ldr	r1, [r7, #16]
 80078fe:	0148      	lsls	r0, r1, #5
 8007900:	6979      	ldr	r1, [r7, #20]
 8007902:	4401      	add	r1, r0
 8007904:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007908:	4313      	orrs	r3, r2
 800790a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007922:	6939      	ldr	r1, [r7, #16]
 8007924:	0148      	lsls	r0, r1, #5
 8007926:	6979      	ldr	r1, [r7, #20]
 8007928:	4401      	add	r1, r0
 800792a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800792e:	4313      	orrs	r3, r2
 8007930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d11f      	bne.n	800797a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	440a      	add	r2, r1
 8007970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007978:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	0151      	lsls	r1, r2, #5
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	440a      	add	r2, r1
 8007990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007998:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d015      	beq.n	80079ce <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8139 	beq.w	8007c1e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	2101      	movs	r1, #1
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	6979      	ldr	r1, [r7, #20]
 80079c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079c8:	4313      	orrs	r3, r2
 80079ca:	634b      	str	r3, [r1, #52]	; 0x34
 80079cc:	e127      	b.n	8007c1e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d110      	bne.n	8007a00 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	0151      	lsls	r1, r2, #5
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	440a      	add	r2, r1
 80079f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e00f      	b.n	8007a20 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68d9      	ldr	r1, [r3, #12]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9a6 	bl	8007d80 <USB_WritePacket>
 8007a34:	e0f3      	b.n	8007c1e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a50:	0cdb      	lsrs	r3, r3, #19
 8007a52:	04db      	lsls	r3, r3, #19
 8007a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a78:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d12f      	bne.n	8007ae0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aae:	6939      	ldr	r1, [r7, #16]
 8007ab0:	0148      	lsls	r0, r1, #5
 8007ab2:	6979      	ldr	r1, [r7, #20]
 8007ab4:	4401      	add	r1, r0
 8007ab6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007aba:	4313      	orrs	r3, r2
 8007abc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007adc:	6113      	str	r3, [r2, #16]
 8007ade:	e061      	b.n	8007ba4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d125      	bne.n	8007b34 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007afe:	6939      	ldr	r1, [r7, #16]
 8007b00:	0148      	lsls	r0, r1, #5
 8007b02:	6979      	ldr	r1, [r7, #20]
 8007b04:	4401      	add	r1, r0
 8007b06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b2c:	6113      	str	r3, [r2, #16]
 8007b2e:	e039      	b.n	8007ba4 <USB_EPStartXfer+0x3dc>
 8007b30:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	1e5a      	subs	r2, r3, #1
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b48:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	89fa      	ldrh	r2, [r7, #14]
 8007b50:	fb03 f202 	mul.w	r2, r3, r2
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	89fb      	ldrh	r3, [r7, #14]
 8007b68:	04d9      	lsls	r1, r3, #19
 8007b6a:	4b2f      	ldr	r3, [pc, #188]	; (8007c28 <USB_EPStartXfer+0x460>)
 8007b6c:	400b      	ands	r3, r1
 8007b6e:	6939      	ldr	r1, [r7, #16]
 8007b70:	0148      	lsls	r0, r1, #5
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	4401      	add	r1, r0
 8007b76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b94:	6939      	ldr	r1, [r7, #16]
 8007b96:	0148      	lsls	r0, r1, #5
 8007b98:	6979      	ldr	r1, [r7, #20]
 8007b9a:	4401      	add	r1, r0
 8007b9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d128      	bne.n	8007bfe <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d110      	bne.n	8007bde <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	e00f      	b.n	8007bfe <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	1ff80000 	.word	0x1ff80000

08007c2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d14a      	bne.n	8007ce0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c62:	f040 8086 	bne.w	8007d72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	7812      	ldrb	r2, [r2, #0]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d902      	bls.n	8007cc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc2:	e056      	b.n	8007d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cdc:	d0e7      	beq.n	8007cae <USB_EPStopXfer+0x82>
 8007cde:	e048      	b.n	8007d72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cf8:	d13b      	bne.n	8007d72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3301      	adds	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d902      	bls.n	8007d58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	75fb      	strb	r3, [r7, #23]
          break;
 8007d56:	e00c      	b.n	8007d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d70:	d0e7      	beq.n	8007d42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b089      	sub	sp, #36	; 0x24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	460b      	mov	r3, r1
 8007d90:	71fb      	strb	r3, [r7, #7]
 8007d92:	4613      	mov	r3, r2
 8007d94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007d9e:	88bb      	ldrh	r3, [r7, #4]
 8007da0:	3303      	adds	r3, #3
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	e018      	b.n	8007dde <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	031a      	lsls	r2, r3, #12
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db8:	461a      	mov	r2, r3
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3e2      	bcc.n	8007dac <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3724      	adds	r7, #36	; 0x24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b08b      	sub	sp, #44	; 0x2c
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	089b      	lsrs	r3, r3, #2
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	623b      	str	r3, [r7, #32]
 8007e1e:	e014      	b.n	8007e4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	3301      	adds	r3, #1
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	3301      	adds	r3, #1
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	3301      	adds	r3, #1
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	3301      	adds	r3, #1
 8007e48:	623b      	str	r3, [r7, #32]
 8007e4a:	6a3a      	ldr	r2, [r7, #32]
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d3e6      	bcc.n	8007e20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e52:	8bfb      	ldrh	r3, [r7, #30]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01e      	beq.n	8007e96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e62:	461a      	mov	r2, r3
 8007e64:	f107 0310 	add.w	r3, r7, #16
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	701a      	strb	r2, [r3, #0]
      i++;
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	3301      	adds	r3, #1
 8007e82:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	3301      	adds	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e8a:	8bfb      	ldrh	r3, [r7, #30]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e90:	8bfb      	ldrh	r3, [r7, #30]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1ea      	bne.n	8007e6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	372c      	adds	r7, #44	; 0x2c
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d12c      	bne.n	8007f1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	db12      	blt.n	8007ef8 <USB_EPSetStall+0x54>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00f      	beq.n	8007ef8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ef6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	e02b      	b.n	8007f72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db12      	blt.n	8007f52 <USB_EPSetStall+0xae>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00f      	beq.n	8007f52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	0151      	lsls	r1, r2, #5
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	440a      	add	r2, r1
 8007f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d128      	bne.n	8007fee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d003      	beq.n	8007fcc <USB_EPClearStall+0x4c>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	791b      	ldrb	r3, [r3, #4]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d138      	bne.n	800803e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	e027      	b.n	800803e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	0151      	lsls	r1, r2, #5
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	440a      	add	r2, r1
 8008004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800800c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	791b      	ldrb	r3, [r3, #4]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d003      	beq.n	800801e <USB_EPClearStall+0x9e>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	791b      	ldrb	r3, [r3, #4]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d10f      	bne.n	800803e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	440a      	add	r2, r1
 8008034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800806a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800806e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008080:	68f9      	ldr	r1, [r7, #12]
 8008082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008086:	4313      	orrs	r3, r2
 8008088:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c6:	f023 0302 	bic.w	r3, r3, #2
 80080ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4013      	ands	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008134:	68fb      	ldr	r3, [r7, #12]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	4013      	ands	r3, r2
 8008164:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	0c1b      	lsrs	r3, r3, #16
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	4013      	ands	r3, r2
 8008198:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	b29b      	uxth	r3, r3
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4013      	ands	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081d8:	68bb      	ldr	r3, [r7, #8]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b087      	sub	sp, #28
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008208:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	fa22 f303 	lsr.w	r3, r2, r3
 8008216:	01db      	lsls	r3, r3, #7
 8008218:	b2db      	uxtb	r3, r3
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4013      	ands	r3, r2
 8008232:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008234:	68bb      	ldr	r3, [r7, #8]
}
 8008236:	4618      	mov	r0, r3
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	f003 0301 	and.w	r3, r3, #1
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008278:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	333c      	adds	r3, #60	; 0x3c
 80082b6:	3304      	adds	r3, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a1c      	ldr	r2, [pc, #112]	; (8008330 <USB_EP0_OutStart+0x8c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d90a      	bls.n	80082da <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d4:	d101      	bne.n	80082da <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	e024      	b.n	8008324 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e0:	461a      	mov	r2, r3
 80082e2:	2300      	movs	r3, #0
 80082e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008308:	f043 0318 	orr.w	r3, r3, #24
 800830c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800831c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008320:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	4f54300a 	.word	0x4f54300a

08008334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a13      	ldr	r2, [pc, #76]	; (8008398 <USB_CoreReset+0x64>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d901      	bls.n	8008352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e01b      	b.n	800838a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	daf2      	bge.n	8008340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f043 0201 	orr.w	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a09      	ldr	r2, [pc, #36]	; (8008398 <USB_CoreReset+0x64>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d901      	bls.n	800837c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e006      	b.n	800838a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b01      	cmp	r3, #1
 8008386:	d0f0      	beq.n	800836a <USB_CoreReset+0x36>

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	00030d40 	.word	0x00030d40

0800839c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80083a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80083ac:	f002 fe3c 	bl	800b028 <USBD_static_malloc>
 80083b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d109      	bne.n	80083cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	32b0      	adds	r2, #176	; 0xb0
 80083c2:	2100      	movs	r1, #0
 80083c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80083c8:	2302      	movs	r3, #2
 80083ca:	e0d4      	b.n	8008576 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80083cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f003 fb8e 	bl	800baf4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	32b0      	adds	r2, #176	; 0xb0
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32b0      	adds	r2, #176	; 0xb0
 80083f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7c1b      	ldrb	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d138      	bne.n	8008476 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008404:	4b5e      	ldr	r3, [pc, #376]	; (8008580 <USBD_CDC_Init+0x1e4>)
 8008406:	7819      	ldrb	r1, [r3, #0]
 8008408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840c:	2202      	movs	r2, #2
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f002 fbf6 	bl	800ac00 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008414:	4b5a      	ldr	r3, [pc, #360]	; (8008580 <USBD_CDC_Init+0x1e4>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3324      	adds	r3, #36	; 0x24
 800842a:	2201      	movs	r2, #1
 800842c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800842e:	4b55      	ldr	r3, [pc, #340]	; (8008584 <USBD_CDC_Init+0x1e8>)
 8008430:	7819      	ldrb	r1, [r3, #0]
 8008432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008436:	2202      	movs	r2, #2
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f002 fbe1 	bl	800ac00 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800843e:	4b51      	ldr	r3, [pc, #324]	; (8008584 <USBD_CDC_Init+0x1e8>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 020f 	and.w	r2, r3, #15
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	440b      	add	r3, r1
 8008452:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008456:	2201      	movs	r2, #1
 8008458:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800845a:	4b4b      	ldr	r3, [pc, #300]	; (8008588 <USBD_CDC_Init+0x1ec>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 020f 	and.w	r2, r3, #15
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	3326      	adds	r3, #38	; 0x26
 8008470:	2210      	movs	r2, #16
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	e035      	b.n	80084e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008476:	4b42      	ldr	r3, [pc, #264]	; (8008580 <USBD_CDC_Init+0x1e4>)
 8008478:	7819      	ldrb	r1, [r3, #0]
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	2202      	movs	r2, #2
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f002 fbbe 	bl	800ac00 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008484:	4b3e      	ldr	r3, [pc, #248]	; (8008580 <USBD_CDC_Init+0x1e4>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 020f 	and.w	r2, r3, #15
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	3324      	adds	r3, #36	; 0x24
 800849a:	2201      	movs	r2, #1
 800849c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800849e:	4b39      	ldr	r3, [pc, #228]	; (8008584 <USBD_CDC_Init+0x1e8>)
 80084a0:	7819      	ldrb	r1, [r3, #0]
 80084a2:	2340      	movs	r3, #64	; 0x40
 80084a4:	2202      	movs	r2, #2
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f002 fbaa 	bl	800ac00 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80084ac:	4b35      	ldr	r3, [pc, #212]	; (8008584 <USBD_CDC_Init+0x1e8>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 020f 	and.w	r2, r3, #15
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084c4:	2201      	movs	r2, #1
 80084c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80084c8:	4b2f      	ldr	r3, [pc, #188]	; (8008588 <USBD_CDC_Init+0x1ec>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3326      	adds	r3, #38	; 0x26
 80084de:	2210      	movs	r2, #16
 80084e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80084e2:	4b29      	ldr	r3, [pc, #164]	; (8008588 <USBD_CDC_Init+0x1ec>)
 80084e4:	7819      	ldrb	r1, [r3, #0]
 80084e6:	2308      	movs	r3, #8
 80084e8:	2203      	movs	r2, #3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f002 fb88 	bl	800ac00 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80084f0:	4b25      	ldr	r3, [pc, #148]	; (8008588 <USBD_CDC_Init+0x1ec>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 020f 	and.w	r2, r3, #15
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	2201      	movs	r2, #1
 8008508:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	33b0      	adds	r3, #176	; 0xb0
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008540:	2302      	movs	r3, #2
 8008542:	e018      	b.n	8008576 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7c1b      	ldrb	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <USBD_CDC_Init+0x1e8>)
 800854e:	7819      	ldrb	r1, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f002 fcca 	bl	800aef4 <USBD_LL_PrepareReceive>
 8008560:	e008      	b.n	8008574 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <USBD_CDC_Init+0x1e8>)
 8008564:	7819      	ldrb	r1, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800856c:	2340      	movs	r3, #64	; 0x40
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f002 fcc0 	bl	800aef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000093 	.word	0x20000093
 8008584:	20000094 	.word	0x20000094
 8008588:	20000095 	.word	0x20000095

0800858c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008598:	4b3a      	ldr	r3, [pc, #232]	; (8008684 <USBD_CDC_DeInit+0xf8>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f002 fb6c 	bl	800ac7c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80085a4:	4b37      	ldr	r3, [pc, #220]	; (8008684 <USBD_CDC_DeInit+0xf8>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	3324      	adds	r3, #36	; 0x24
 80085ba:	2200      	movs	r2, #0
 80085bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <USBD_CDC_DeInit+0xfc>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f002 fb59 	bl	800ac7c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80085ca:	4b2f      	ldr	r3, [pc, #188]	; (8008688 <USBD_CDC_DeInit+0xfc>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f003 020f 	and.w	r2, r3, #15
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085e2:	2200      	movs	r2, #0
 80085e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80085e6:	4b29      	ldr	r3, [pc, #164]	; (800868c <USBD_CDC_DeInit+0x100>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f002 fb45 	bl	800ac7c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <USBD_CDC_DeInit+0x100>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	2200      	movs	r2, #0
 800860a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800860c:	4b1f      	ldr	r3, [pc, #124]	; (800868c <USBD_CDC_DeInit+0x100>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	3326      	adds	r3, #38	; 0x26
 8008622:	2200      	movs	r2, #0
 8008624:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	32b0      	adds	r2, #176	; 0xb0
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01f      	beq.n	8008678 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	33b0      	adds	r3, #176	; 0xb0
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32b0      	adds	r2, #176	; 0xb0
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	4618      	mov	r0, r3
 800865c:	f002 fcf2 	bl	800b044 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	32b0      	adds	r2, #176	; 0xb0
 800866a:	2100      	movs	r1, #0
 800866c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000093 	.word	0x20000093
 8008688:	20000094 	.word	0x20000094
 800868c:	20000095 	.word	0x20000095

08008690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	32b0      	adds	r2, #176	; 0xb0
 80086a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e0bf      	b.n	8008840 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d050      	beq.n	800876e <USBD_CDC_Setup+0xde>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	f040 80af 	bne.w	8008830 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d03a      	beq.n	8008750 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	b25b      	sxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	da1b      	bge.n	800871c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	33b0      	adds	r3, #176	; 0xb0
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80086fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	88d2      	ldrh	r2, [r2, #6]
 8008700:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	88db      	ldrh	r3, [r3, #6]
 8008706:	2b07      	cmp	r3, #7
 8008708:	bf28      	it	cs
 800870a:	2307      	movcs	r3, #7
 800870c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	89fa      	ldrh	r2, [r7, #14]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fdb3 	bl	800a280 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800871a:	e090      	b.n	800883e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	785a      	ldrb	r2, [r3, #1]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	88db      	ldrh	r3, [r3, #6]
 800872a:	2b3f      	cmp	r3, #63	; 0x3f
 800872c:	d803      	bhi.n	8008736 <USBD_CDC_Setup+0xa6>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	88db      	ldrh	r3, [r3, #6]
 8008732:	b2da      	uxtb	r2, r3
 8008734:	e000      	b.n	8008738 <USBD_CDC_Setup+0xa8>
 8008736:	2240      	movs	r2, #64	; 0x40
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800873e:	6939      	ldr	r1, [r7, #16]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008746:	461a      	mov	r2, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 fdc5 	bl	800a2d8 <USBD_CtlPrepareRx>
      break;
 800874e:	e076      	b.n	800883e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	33b0      	adds	r3, #176	; 0xb0
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	7850      	ldrb	r0, [r2, #1]
 8008766:	2200      	movs	r2, #0
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	4798      	blx	r3
      break;
 800876c:	e067      	b.n	800883e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	2b0b      	cmp	r3, #11
 8008774:	d851      	bhi.n	800881a <USBD_CDC_Setup+0x18a>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <USBD_CDC_Setup+0xec>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	080087ad 	.word	0x080087ad
 8008780:	08008829 	.word	0x08008829
 8008784:	0800881b 	.word	0x0800881b
 8008788:	0800881b 	.word	0x0800881b
 800878c:	0800881b 	.word	0x0800881b
 8008790:	0800881b 	.word	0x0800881b
 8008794:	0800881b 	.word	0x0800881b
 8008798:	0800881b 	.word	0x0800881b
 800879c:	0800881b 	.word	0x0800881b
 80087a0:	0800881b 	.word	0x0800881b
 80087a4:	080087d7 	.word	0x080087d7
 80087a8:	08008801 	.word	0x08008801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d107      	bne.n	80087c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087b8:	f107 030a 	add.w	r3, r7, #10
 80087bc:	2202      	movs	r2, #2
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fd5d 	bl	800a280 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087c6:	e032      	b.n	800882e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 fce7 	bl	800a19e <USBD_CtlError>
            ret = USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	75fb      	strb	r3, [r7, #23]
          break;
 80087d4:	e02b      	b.n	800882e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d107      	bne.n	80087f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087e2:	f107 030d 	add.w	r3, r7, #13
 80087e6:	2201      	movs	r2, #1
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fd48 	bl	800a280 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087f0:	e01d      	b.n	800882e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fcd2 	bl	800a19e <USBD_CtlError>
            ret = USBD_FAIL;
 80087fa:	2303      	movs	r3, #3
 80087fc:	75fb      	strb	r3, [r7, #23]
          break;
 80087fe:	e016      	b.n	800882e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b03      	cmp	r3, #3
 800880a:	d00f      	beq.n	800882c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fcc5 	bl	800a19e <USBD_CtlError>
            ret = USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008818:	e008      	b.n	800882c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fcbe 	bl	800a19e <USBD_CtlError>
          ret = USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	75fb      	strb	r3, [r7, #23]
          break;
 8008826:	e002      	b.n	800882e <USBD_CDC_Setup+0x19e>
          break;
 8008828:	bf00      	nop
 800882a:	e008      	b.n	800883e <USBD_CDC_Setup+0x1ae>
          break;
 800882c:	bf00      	nop
      }
      break;
 800882e:	e006      	b.n	800883e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fcb3 	bl	800a19e <USBD_CtlError>
      ret = USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	75fb      	strb	r3, [r7, #23]
      break;
 800883c:	bf00      	nop
  }

  return (uint8_t)ret;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800885a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32b0      	adds	r2, #176	; 0xb0
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800886e:	2303      	movs	r3, #3
 8008870:	e065      	b.n	800893e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	32b0      	adds	r2, #176	; 0xb0
 800887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008880:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	f003 020f 	and.w	r2, r3, #15
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	3318      	adds	r3, #24
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d02f      	beq.n	80088fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	f003 020f 	and.w	r2, r3, #15
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	3318      	adds	r3, #24
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	f003 010f 	and.w	r1, r3, #15
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	460b      	mov	r3, r1
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	440b      	add	r3, r1
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4403      	add	r3, r0
 80088c4:	3344      	adds	r3, #68	; 0x44
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d112      	bne.n	80088fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	3318      	adds	r3, #24
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088ee:	78f9      	ldrb	r1, [r7, #3]
 80088f0:	2300      	movs	r3, #0
 80088f2:	2200      	movs	r2, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f002 fac5 	bl	800ae84 <USBD_LL_Transmit>
 80088fa:	e01f      	b.n	800893c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	33b0      	adds	r3, #176	; 0xb0
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	33b0      	adds	r3, #176	; 0xb0
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	32b0      	adds	r2, #176	; 0xb0
 800895c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008960:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	32b0      	adds	r2, #176	; 0xb0
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008974:	2303      	movs	r3, #3
 8008976:	e01a      	b.n	80089ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f002 faf1 	bl	800af64 <USBD_LL_GetRxDataSize>
 8008982:	4602      	mov	r2, r0
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	33b0      	adds	r3, #176	; 0xb0
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80089a8:	4611      	mov	r1, r2
 80089aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	32b0      	adds	r2, #176	; 0xb0
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e025      	b.n	8008a24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	33b0      	adds	r3, #176	; 0xb0
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01a      	beq.n	8008a22 <USBD_CDC_EP0_RxReady+0x6c>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089f2:	2bff      	cmp	r3, #255	; 0xff
 80089f4:	d015      	beq.n	8008a22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	33b0      	adds	r3, #176	; 0xb0
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008a0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008a16:	b292      	uxth	r2, r2
 8008a18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a34:	2182      	movs	r1, #130	; 0x82
 8008a36:	4818      	ldr	r0, [pc, #96]	; (8008a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a38:	f000 fd4f 	bl	80094da <USBD_GetEpDesc>
 8008a3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4815      	ldr	r0, [pc, #84]	; (8008a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a42:	f000 fd4a 	bl	80094da <USBD_GetEpDesc>
 8008a46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a48:	2181      	movs	r1, #129	; 0x81
 8008a4a:	4813      	ldr	r0, [pc, #76]	; (8008a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a4c:	f000 fd45 	bl	80094da <USBD_GetEpDesc>
 8008a50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d006      	beq.n	8008a72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a6c:	711a      	strb	r2, [r3, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d006      	beq.n	8008a86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a80:	711a      	strb	r2, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2243      	movs	r2, #67	; 0x43
 8008a8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000050 	.word	0x20000050

08008a9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008aa4:	2182      	movs	r1, #130	; 0x82
 8008aa6:	4818      	ldr	r0, [pc, #96]	; (8008b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008aa8:	f000 fd17 	bl	80094da <USBD_GetEpDesc>
 8008aac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008aae:	2101      	movs	r1, #1
 8008ab0:	4815      	ldr	r0, [pc, #84]	; (8008b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ab2:	f000 fd12 	bl	80094da <USBD_GetEpDesc>
 8008ab6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ab8:	2181      	movs	r1, #129	; 0x81
 8008aba:	4813      	ldr	r0, [pc, #76]	; (8008b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008abc:	f000 fd0d 	bl	80094da <USBD_GetEpDesc>
 8008ac0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2210      	movs	r2, #16
 8008acc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	711a      	strb	r2, [r3, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f042 0202 	orr.w	r2, r2, #2
 8008ae0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d006      	beq.n	8008af6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	711a      	strb	r2, [r3, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f042 0202 	orr.w	r2, r2, #2
 8008af4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2243      	movs	r2, #67	; 0x43
 8008afa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000050 	.word	0x20000050

08008b0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b14:	2182      	movs	r1, #130	; 0x82
 8008b16:	4818      	ldr	r0, [pc, #96]	; (8008b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008b18:	f000 fcdf 	bl	80094da <USBD_GetEpDesc>
 8008b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4815      	ldr	r0, [pc, #84]	; (8008b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008b22:	f000 fcda 	bl	80094da <USBD_GetEpDesc>
 8008b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b28:	2181      	movs	r1, #129	; 0x81
 8008b2a:	4813      	ldr	r0, [pc, #76]	; (8008b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008b2c:	f000 fcd5 	bl	80094da <USBD_GetEpDesc>
 8008b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2210      	movs	r2, #16
 8008b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d006      	beq.n	8008b52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b4c:	711a      	strb	r2, [r3, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d006      	beq.n	8008b66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b60:	711a      	strb	r2, [r3, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2243      	movs	r2, #67	; 0x43
 8008b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b6c:	4b02      	ldr	r3, [pc, #8]	; (8008b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000050 	.word	0x20000050

08008b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	220a      	movs	r2, #10
 8008b88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b8a:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	2000000c 	.word	0x2000000c

08008b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e009      	b.n	8008bc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	33b0      	adds	r3, #176	; 0xb0
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	32b0      	adds	r2, #176	; 0xb0
 8008be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e008      	b.n	8008c08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	32b0      	adds	r2, #176	; 0xb0
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e004      	b.n	8008c42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	32b0      	adds	r2, #176	; 0xb0
 8008c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e025      	b.n	8008cc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11f      	bne.n	8008cc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008c88:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <USBD_CDC_TransmitPacket+0x7c>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	f003 020f 	and.w	r2, r3, #15
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4403      	add	r3, r0
 8008ca2:	3318      	adds	r3, #24
 8008ca4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <USBD_CDC_TransmitPacket+0x7c>)
 8008ca8:	7819      	ldrb	r1, [r3, #0]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f002 f8e4 	bl	800ae84 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000093 	.word	0x20000093

08008cd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	32b0      	adds	r2, #176	; 0xb0
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	32b0      	adds	r2, #176	; 0xb0
 8008cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e018      	b.n	8008d30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7c1b      	ldrb	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d06:	4b0c      	ldr	r3, [pc, #48]	; (8008d38 <USBD_CDC_ReceivePacket+0x68>)
 8008d08:	7819      	ldrb	r1, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f002 f8ed 	bl	800aef4 <USBD_LL_PrepareReceive>
 8008d1a:	e008      	b.n	8008d2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <USBD_CDC_ReceivePacket+0x68>)
 8008d1e:	7819      	ldrb	r1, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d26:	2340      	movs	r3, #64	; 0x40
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f002 f8e3 	bl	800aef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000094 	.word	0x20000094

08008d3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e01f      	b.n	8008d94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	79fa      	ldrb	r2, [r7, #7]
 8008d86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f001 febb 	bl	800ab04 <USBD_LL_Init>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e025      	b.n	8008e00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	; 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00f      	beq.n	8008df0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32ae      	adds	r2, #174	; 0xae
 8008dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	f107 020e 	add.w	r2, r7, #14
 8008de4:	4610      	mov	r0, r2
 8008de6:	4798      	blx	r3
 8008de8:	4602      	mov	r2, r0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fec3 	bl	800ab9c <USBD_LL_Start>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d009      	beq.n	8008e64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f938 	bl	800a12a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ec8:	461a      	mov	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d01a      	beq.n	8008f14 <USBD_LL_SetupStage+0x72>
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d822      	bhi.n	8008f28 <USBD_LL_SetupStage+0x86>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <USBD_LL_SetupStage+0x4a>
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d00a      	beq.n	8008f00 <USBD_LL_SetupStage+0x5e>
 8008eea:	e01d      	b.n	8008f28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fb65 	bl	80095c4 <USBD_StdDevReq>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]
      break;
 8008efe:	e020      	b.n	8008f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fbcd 	bl	80096a8 <USBD_StdItfReq>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73fb      	strb	r3, [r7, #15]
      break;
 8008f12:	e016      	b.n	8008f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fc2f 	bl	8009780 <USBD_StdEPReq>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
      break;
 8008f26:	e00c      	b.n	8008f42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fed6 	bl	800ace8 <USBD_LL_StallEP>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f40:	bf00      	nop
  }

  return ret;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	460b      	mov	r3, r1
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d16e      	bne.n	8009042 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	f040 8098 	bne.w	80090a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d913      	bls.n	8008fac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	1ad2      	subs	r2, r2, r3
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	bf28      	it	cs
 8008f9e:	4613      	movcs	r3, r2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f001 f9b4 	bl	800a312 <USBD_CtlContinueRx>
 8008faa:	e07d      	b.n	80090a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d014      	beq.n	8008fe4 <USBD_LL_DataOutStage+0x98>
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d81d      	bhi.n	8008ffa <USBD_LL_DataOutStage+0xae>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <USBD_LL_DataOutStage+0x7c>
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d003      	beq.n	8008fce <USBD_LL_DataOutStage+0x82>
 8008fc6:	e018      	b.n	8008ffa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	75bb      	strb	r3, [r7, #22]
            break;
 8008fcc:	e018      	b.n	8009000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fa64 	bl	80094a6 <USBD_CoreFindIF>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75bb      	strb	r3, [r7, #22]
            break;
 8008fe2:	e00d      	b.n	8009000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	4619      	mov	r1, r3
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fa66 	bl	80094c0 <USBD_CoreFindEP>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ff8:	e002      	b.n	8009000 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ffe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009000:	7dbb      	ldrb	r3, [r7, #22]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d119      	bne.n	800903a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	d113      	bne.n	800903a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009012:	7dba      	ldrb	r2, [r7, #22]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	32ae      	adds	r2, #174	; 0xae
 8009018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009022:	7dba      	ldrb	r2, [r7, #22]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800902a:	7dba      	ldrb	r2, [r7, #22]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	32ae      	adds	r2, #174	; 0xae
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f001 f97a 	bl	800a334 <USBD_CtlSendStatus>
 8009040:	e032      	b.n	80090a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009042:	7afb      	ldrb	r3, [r7, #11]
 8009044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009048:	b2db      	uxtb	r3, r3
 800904a:	4619      	mov	r1, r3
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fa37 	bl	80094c0 <USBD_CoreFindEP>
 8009052:	4603      	mov	r3, r0
 8009054:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009056:	7dbb      	ldrb	r3, [r7, #22]
 8009058:	2bff      	cmp	r3, #255	; 0xff
 800905a:	d025      	beq.n	80090a8 <USBD_LL_DataOutStage+0x15c>
 800905c:	7dbb      	ldrb	r3, [r7, #22]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d122      	bne.n	80090a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d117      	bne.n	800909e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800906e:	7dba      	ldrb	r2, [r7, #22]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	32ae      	adds	r2, #174	; 0xae
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00f      	beq.n	800909e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800907e:	7dba      	ldrb	r2, [r7, #22]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009086:	7dba      	ldrb	r2, [r7, #22]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	32ae      	adds	r2, #174	; 0xae
 800908c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	7afa      	ldrb	r2, [r7, #11]
 8009094:	4611      	mov	r1, r2
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	4798      	blx	r3
 800909a:	4603      	mov	r3, r0
 800909c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	e000      	b.n	80090aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	460b      	mov	r3, r1
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d16f      	bne.n	80091a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3314      	adds	r3, #20
 80090ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d15a      	bne.n	800918c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d914      	bls.n	800910c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	461a      	mov	r2, r3
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f001 f8dc 	bl	800a2b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090fe:	2300      	movs	r3, #0
 8009100:	2200      	movs	r2, #0
 8009102:	2100      	movs	r1, #0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f001 fef5 	bl	800aef4 <USBD_LL_PrepareReceive>
 800910a:	e03f      	b.n	800918c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	429a      	cmp	r2, r3
 8009116:	d11c      	bne.n	8009152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009120:	429a      	cmp	r2, r3
 8009122:	d316      	bcc.n	8009152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800912e:	429a      	cmp	r2, r3
 8009130:	d20f      	bcs.n	8009152 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f001 f8bd 	bl	800a2b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009144:	2300      	movs	r3, #0
 8009146:	2200      	movs	r2, #0
 8009148:	2100      	movs	r1, #0
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f001 fed2 	bl	800aef4 <USBD_LL_PrepareReceive>
 8009150:	e01c      	b.n	800918c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b03      	cmp	r3, #3
 800915c:	d10f      	bne.n	800917e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800917e:	2180      	movs	r1, #128	; 0x80
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f001 fdb1 	bl	800ace8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f001 f8e7 	bl	800a35a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d03a      	beq.n	800920c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fe42 	bl	8008e20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091a4:	e032      	b.n	800920c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f985 	bl	80094c0 <USBD_CoreFindEP>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	2bff      	cmp	r3, #255	; 0xff
 80091be:	d025      	beq.n	800920c <USBD_LL_DataInStage+0x15a>
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d122      	bne.n	800920c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d11c      	bne.n	800920c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80091d2:	7dfa      	ldrb	r2, [r7, #23]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	32ae      	adds	r2, #174	; 0xae
 80091d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d014      	beq.n	800920c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80091e2:	7dfa      	ldrb	r2, [r7, #23]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80091ea:	7dfa      	ldrb	r2, [r7, #23]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	32ae      	adds	r2, #174	; 0xae
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	7afa      	ldrb	r2, [r7, #11]
 80091f8:	4611      	mov	r1, r2
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	4798      	blx	r3
 80091fe:	4603      	mov	r3, r0
 8009200:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009202:	7dbb      	ldrb	r3, [r7, #22]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009208:	7dbb      	ldrb	r3, [r7, #22]
 800920a:	e000      	b.n	800920e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924e:	2b00      	cmp	r3, #0
 8009250:	d014      	beq.n	800927c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00e      	beq.n	800927c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6852      	ldr	r2, [r2, #4]
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	4611      	mov	r1, r2
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009278:	2303      	movs	r3, #3
 800927a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800927c:	2340      	movs	r3, #64	; 0x40
 800927e:	2200      	movs	r2, #0
 8009280:	2100      	movs	r1, #0
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 fcbc 	bl	800ac00 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2240      	movs	r2, #64	; 0x40
 8009294:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009298:	2340      	movs	r3, #64	; 0x40
 800929a:	2200      	movs	r2, #0
 800929c:	2180      	movs	r1, #128	; 0x80
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 fcae 	bl	800ac00 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2240      	movs	r2, #64	; 0x40
 80092ae:	621a      	str	r2, [r3, #32]

  return ret;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d006      	beq.n	80092fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2204      	movs	r2, #4
 8009300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b04      	cmp	r3, #4
 8009324:	d106      	bne.n	8009334 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800932c:	b2da      	uxtb	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b03      	cmp	r3, #3
 8009354:	d110      	bne.n	8009378 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	32ae      	adds	r2, #174	; 0xae
 8009398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e01c      	b.n	80093de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d115      	bne.n	80093dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	32ae      	adds	r2, #174	; 0xae
 80093ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	32ae      	adds	r2, #174	; 0xae
 80093ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	4611      	mov	r1, r2
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	460b      	mov	r3, r1
 80093f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	32ae      	adds	r2, #174	; 0xae
 80093fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009404:	2303      	movs	r3, #3
 8009406:	e01c      	b.n	8009442 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b03      	cmp	r3, #3
 8009412:	d115      	bne.n	8009440 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32ae      	adds	r2, #174	; 0xae
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	32ae      	adds	r2, #174	; 0xae
 8009432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	78fa      	ldrb	r2, [r7, #3]
 800943a:	4611      	mov	r1, r2
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00e      	beq.n	800949c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	6852      	ldr	r2, [r2, #4]
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	4611      	mov	r1, r2
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	4798      	blx	r3
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009498:	2303      	movs	r3, #3
 800949a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	460b      	mov	r3, r1
 80094b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80094b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80094cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	429a      	cmp	r2, r3
 8009500:	d920      	bls.n	8009544 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800950a:	e013      	b.n	8009534 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800950c:	f107 030a 	add.w	r3, r7, #10
 8009510:	4619      	mov	r1, r3
 8009512:	6978      	ldr	r0, [r7, #20]
 8009514:	f000 f81b 	bl	800954e <USBD_GetNextDesc>
 8009518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b05      	cmp	r3, #5
 8009520:	d108      	bne.n	8009534 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	789b      	ldrb	r3, [r3, #2]
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	429a      	cmp	r2, r3
 800952e:	d008      	beq.n	8009542 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009530:	2300      	movs	r3, #0
 8009532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	885b      	ldrh	r3, [r3, #2]
 8009538:	b29a      	uxth	r2, r3
 800953a:	897b      	ldrh	r3, [r7, #10]
 800953c:	429a      	cmp	r2, r3
 800953e:	d8e5      	bhi.n	800950c <USBD_GetEpDesc+0x32>
 8009540:	e000      	b.n	8009544 <USBD_GetEpDesc+0x6a>
          break;
 8009542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009544:	693b      	ldr	r3, [r7, #16]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	881a      	ldrh	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	4413      	add	r3, r2
 8009568:	b29a      	uxth	r2, r3
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800957a:	68fb      	ldr	r3, [r7, #12]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	3301      	adds	r3, #1
 800959e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80095a6:	8a3b      	ldrh	r3, [r7, #16]
 80095a8:	021b      	lsls	r3, r3, #8
 80095aa:	b21a      	sxth	r2, r3
 80095ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	b21b      	sxth	r3, r3
 80095b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80095b6:	89fb      	ldrh	r3, [r7, #14]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d005      	beq.n	80095ea <USBD_StdDevReq+0x26>
 80095de:	2b40      	cmp	r3, #64	; 0x40
 80095e0:	d857      	bhi.n	8009692 <USBD_StdDevReq+0xce>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00f      	beq.n	8009606 <USBD_StdDevReq+0x42>
 80095e6:	2b20      	cmp	r3, #32
 80095e8:	d153      	bne.n	8009692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	32ae      	adds	r2, #174	; 0xae
 80095f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]
      break;
 8009604:	e04a      	b.n	800969c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b09      	cmp	r3, #9
 800960c:	d83b      	bhi.n	8009686 <USBD_StdDevReq+0xc2>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <USBD_StdDevReq+0x50>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009669 	.word	0x08009669
 8009618:	0800967d 	.word	0x0800967d
 800961c:	08009687 	.word	0x08009687
 8009620:	08009673 	.word	0x08009673
 8009624:	08009687 	.word	0x08009687
 8009628:	08009647 	.word	0x08009647
 800962c:	0800963d 	.word	0x0800963d
 8009630:	08009687 	.word	0x08009687
 8009634:	0800965f 	.word	0x0800965f
 8009638:	08009651 	.word	0x08009651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa3c 	bl	8009abc <USBD_GetDescriptor>
          break;
 8009644:	e024      	b.n	8009690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fbcb 	bl	8009de4 <USBD_SetAddress>
          break;
 800964e:	e01f      	b.n	8009690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fc0a 	bl	8009e6c <USBD_SetConfig>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]
          break;
 800965c:	e018      	b.n	8009690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fcad 	bl	8009fc0 <USBD_GetConfig>
          break;
 8009666:	e013      	b.n	8009690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fcde 	bl	800a02c <USBD_GetStatus>
          break;
 8009670:	e00e      	b.n	8009690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fd0d 	bl	800a094 <USBD_SetFeature>
          break;
 800967a:	e009      	b.n	8009690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fd31 	bl	800a0e6 <USBD_ClrFeature>
          break;
 8009684:	e004      	b.n	8009690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fd88 	bl	800a19e <USBD_CtlError>
          break;
 800968e:	bf00      	nop
      }
      break;
 8009690:	e004      	b.n	800969c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fd82 	bl	800a19e <USBD_CtlError>
      break;
 800969a:	bf00      	nop
  }

  return ret;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop

080096a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d005      	beq.n	80096ce <USBD_StdItfReq+0x26>
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d852      	bhi.n	800976c <USBD_StdItfReq+0xc4>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <USBD_StdItfReq+0x26>
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d14e      	bne.n	800976c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d840      	bhi.n	800975e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	889b      	ldrh	r3, [r3, #4]
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d836      	bhi.n	8009754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	889b      	ldrh	r3, [r3, #4]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff fed9 	bl	80094a6 <USBD_CoreFindIF>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2bff      	cmp	r3, #255	; 0xff
 80096fc:	d01d      	beq.n	800973a <USBD_StdItfReq+0x92>
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d11a      	bne.n	800973a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009704:	7bba      	ldrb	r2, [r7, #14]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	32ae      	adds	r2, #174	; 0xae
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00f      	beq.n	8009734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009714:	7bba      	ldrb	r2, [r7, #14]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800971c:	7bba      	ldrb	r2, [r7, #14]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	32ae      	adds	r2, #174	; 0xae
 8009722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009732:	e004      	b.n	800973e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009738:	e001      	b.n	800973e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800973a:	2303      	movs	r3, #3
 800973c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d110      	bne.n	8009768 <USBD_StdItfReq+0xc0>
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10d      	bne.n	8009768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fdf1 	bl	800a334 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009752:	e009      	b.n	8009768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fd21 	bl	800a19e <USBD_CtlError>
          break;
 800975c:	e004      	b.n	8009768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fd1c 	bl	800a19e <USBD_CtlError>
          break;
 8009766:	e000      	b.n	800976a <USBD_StdItfReq+0xc2>
          break;
 8009768:	bf00      	nop
      }
      break;
 800976a:	e004      	b.n	8009776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fd15 	bl	800a19e <USBD_CtlError>
      break;
 8009774:	bf00      	nop
  }

  return ret;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	889b      	ldrh	r3, [r3, #4]
 8009792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800979c:	2b40      	cmp	r3, #64	; 0x40
 800979e:	d007      	beq.n	80097b0 <USBD_StdEPReq+0x30>
 80097a0:	2b40      	cmp	r3, #64	; 0x40
 80097a2:	f200 817f 	bhi.w	8009aa4 <USBD_StdEPReq+0x324>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d02a      	beq.n	8009800 <USBD_StdEPReq+0x80>
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	f040 817a 	bne.w	8009aa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fe83 	bl	80094c0 <USBD_CoreFindEP>
 80097ba:	4603      	mov	r3, r0
 80097bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097be:	7b7b      	ldrb	r3, [r7, #13]
 80097c0:	2bff      	cmp	r3, #255	; 0xff
 80097c2:	f000 8174 	beq.w	8009aae <USBD_StdEPReq+0x32e>
 80097c6:	7b7b      	ldrb	r3, [r7, #13]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f040 8170 	bne.w	8009aae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80097ce:	7b7a      	ldrb	r2, [r7, #13]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80097d6:	7b7a      	ldrb	r2, [r7, #13]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	32ae      	adds	r2, #174	; 0xae
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8163 	beq.w	8009aae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80097e8:	7b7a      	ldrb	r2, [r7, #13]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097fe:	e156      	b.n	8009aae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	785b      	ldrb	r3, [r3, #1]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d008      	beq.n	800981a <USBD_StdEPReq+0x9a>
 8009808:	2b03      	cmp	r3, #3
 800980a:	f300 8145 	bgt.w	8009a98 <USBD_StdEPReq+0x318>
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 809b 	beq.w	800994a <USBD_StdEPReq+0x1ca>
 8009814:	2b01      	cmp	r3, #1
 8009816:	d03c      	beq.n	8009892 <USBD_StdEPReq+0x112>
 8009818:	e13e      	b.n	8009a98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d002      	beq.n	800982c <USBD_StdEPReq+0xac>
 8009826:	2b03      	cmp	r3, #3
 8009828:	d016      	beq.n	8009858 <USBD_StdEPReq+0xd8>
 800982a:	e02c      	b.n	8009886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <USBD_StdEPReq+0xce>
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b80      	cmp	r3, #128	; 0x80
 8009836:	d00a      	beq.n	800984e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 fa53 	bl	800ace8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009842:	2180      	movs	r1, #128	; 0x80
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fa4f 	bl	800ace8 <USBD_LL_StallEP>
 800984a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800984c:	e020      	b.n	8009890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fca4 	bl	800a19e <USBD_CtlError>
              break;
 8009856:	e01b      	b.n	8009890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	885b      	ldrh	r3, [r3, #2]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10e      	bne.n	800987e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <USBD_StdEPReq+0xfe>
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b80      	cmp	r3, #128	; 0x80
 800986a:	d008      	beq.n	800987e <USBD_StdEPReq+0xfe>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	88db      	ldrh	r3, [r3, #6]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d104      	bne.n	800987e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f001 fa35 	bl	800ace8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fd58 	bl	800a334 <USBD_CtlSendStatus>

              break;
 8009884:	e004      	b.n	8009890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc88 	bl	800a19e <USBD_CtlError>
              break;
 800988e:	bf00      	nop
          }
          break;
 8009890:	e107      	b.n	8009aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b02      	cmp	r3, #2
 800989c:	d002      	beq.n	80098a4 <USBD_StdEPReq+0x124>
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d016      	beq.n	80098d0 <USBD_StdEPReq+0x150>
 80098a2:	e04b      	b.n	800993c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00d      	beq.n	80098c6 <USBD_StdEPReq+0x146>
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	2b80      	cmp	r3, #128	; 0x80
 80098ae:	d00a      	beq.n	80098c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f001 fa17 	bl	800ace8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ba:	2180      	movs	r1, #128	; 0x80
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 fa13 	bl	800ace8 <USBD_LL_StallEP>
 80098c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098c4:	e040      	b.n	8009948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fc68 	bl	800a19e <USBD_CtlError>
              break;
 80098ce:	e03b      	b.n	8009948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d136      	bne.n	8009946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fa34 	bl	800ad54 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fd21 	bl	800a334 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fde2 	bl	80094c0 <USBD_CoreFindEP>
 80098fc:	4603      	mov	r3, r0
 80098fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009900:	7b7b      	ldrb	r3, [r7, #13]
 8009902:	2bff      	cmp	r3, #255	; 0xff
 8009904:	d01f      	beq.n	8009946 <USBD_StdEPReq+0x1c6>
 8009906:	7b7b      	ldrb	r3, [r7, #13]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d11c      	bne.n	8009946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800990c:	7b7a      	ldrb	r2, [r7, #13]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009914:	7b7a      	ldrb	r2, [r7, #13]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	32ae      	adds	r2, #174	; 0xae
 800991a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d010      	beq.n	8009946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009924:	7b7a      	ldrb	r2, [r7, #13]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32ae      	adds	r2, #174	; 0xae
 800992a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	4798      	blx	r3
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800993a:	e004      	b.n	8009946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fc2d 	bl	800a19e <USBD_CtlError>
              break;
 8009944:	e000      	b.n	8009948 <USBD_StdEPReq+0x1c8>
              break;
 8009946:	bf00      	nop
          }
          break;
 8009948:	e0ab      	b.n	8009aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b02      	cmp	r3, #2
 8009954:	d002      	beq.n	800995c <USBD_StdEPReq+0x1dc>
 8009956:	2b03      	cmp	r3, #3
 8009958:	d032      	beq.n	80099c0 <USBD_StdEPReq+0x240>
 800995a:	e097      	b.n	8009a8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d007      	beq.n	8009972 <USBD_StdEPReq+0x1f2>
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	2b80      	cmp	r3, #128	; 0x80
 8009966:	d004      	beq.n	8009972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fc17 	bl	800a19e <USBD_CtlError>
                break;
 8009970:	e091      	b.n	8009a96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	da0b      	bge.n	8009992 <USBD_StdEPReq+0x212>
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	3310      	adds	r3, #16
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	3304      	adds	r3, #4
 8009990:	e00b      	b.n	80099aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009998:	4613      	mov	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	4413      	add	r3, r2
 80099a8:	3304      	adds	r3, #4
 80099aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	2200      	movs	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2202      	movs	r2, #2
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc61 	bl	800a280 <USBD_CtlSendData>
              break;
 80099be:	e06a      	b.n	8009a96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da11      	bge.n	80099ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	f003 020f 	and.w	r2, r3, #15
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	3324      	adds	r3, #36	; 0x24
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d117      	bne.n	8009a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fbda 	bl	800a19e <USBD_CtlError>
                  break;
 80099ea:	e054      	b.n	8009a96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	f003 020f 	and.w	r2, r3, #15
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fbc7 	bl	800a19e <USBD_CtlError>
                  break;
 8009a10:	e041      	b.n	8009a96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	da0b      	bge.n	8009a32 <USBD_StdEPReq+0x2b2>
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	3310      	adds	r3, #16
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3304      	adds	r3, #4
 8009a30:	e00b      	b.n	8009a4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	4413      	add	r3, r2
 8009a48:	3304      	adds	r3, #4
 8009a4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <USBD_StdEPReq+0x2d8>
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b80      	cmp	r3, #128	; 0x80
 8009a56:	d103      	bne.n	8009a60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e00e      	b.n	8009a7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 f9ab 	bl	800adc0 <USBD_LL_IsStallEP>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2201      	movs	r2, #1
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	e002      	b.n	8009a7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2202      	movs	r2, #2
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fbfb 	bl	800a280 <USBD_CtlSendData>
              break;
 8009a8a:	e004      	b.n	8009a96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fb85 	bl	800a19e <USBD_CtlError>
              break;
 8009a94:	bf00      	nop
          }
          break;
 8009a96:	e004      	b.n	8009aa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fb7f 	bl	800a19e <USBD_CtlError>
          break;
 8009aa0:	bf00      	nop
      }
      break;
 8009aa2:	e005      	b.n	8009ab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fb79 	bl	800a19e <USBD_CtlError>
      break;
 8009aac:	e000      	b.n	8009ab0 <USBD_StdEPReq+0x330>
      break;
 8009aae:	bf00      	nop
  }

  return ret;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	885b      	ldrh	r3, [r3, #2]
 8009ad6:	0a1b      	lsrs	r3, r3, #8
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	2b0e      	cmp	r3, #14
 8009ade:	f200 8152 	bhi.w	8009d86 <USBD_GetDescriptor+0x2ca>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <USBD_GetDescriptor+0x2c>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009b59 	.word	0x08009b59
 8009aec:	08009b71 	.word	0x08009b71
 8009af0:	08009bb1 	.word	0x08009bb1
 8009af4:	08009d87 	.word	0x08009d87
 8009af8:	08009d87 	.word	0x08009d87
 8009afc:	08009d27 	.word	0x08009d27
 8009b00:	08009d53 	.word	0x08009d53
 8009b04:	08009d87 	.word	0x08009d87
 8009b08:	08009d87 	.word	0x08009d87
 8009b0c:	08009d87 	.word	0x08009d87
 8009b10:	08009d87 	.word	0x08009d87
 8009b14:	08009d87 	.word	0x08009d87
 8009b18:	08009d87 	.word	0x08009d87
 8009b1c:	08009d87 	.word	0x08009d87
 8009b20:	08009b25 	.word	0x08009b25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	7c12      	ldrb	r2, [r2, #16]
 8009b3c:	f107 0108 	add.w	r1, r7, #8
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
 8009b44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b46:	e126      	b.n	8009d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fb27 	bl	800a19e <USBD_CtlError>
        err++;
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	3301      	adds	r3, #1
 8009b54:	72fb      	strb	r3, [r7, #11]
      break;
 8009b56:	e11e      	b.n	8009d96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	7c12      	ldrb	r2, [r2, #16]
 8009b64:	f107 0108 	add.w	r1, r7, #8
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	60f8      	str	r0, [r7, #12]
      break;
 8009b6e:	e112      	b.n	8009d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	7c1b      	ldrb	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10d      	bne.n	8009b94 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b80:	f107 0208 	add.w	r2, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	2202      	movs	r2, #2
 8009b90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b92:	e100      	b.n	8009d96 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	f107 0208 	add.w	r2, r7, #8
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4798      	blx	r3
 8009ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	2202      	movs	r2, #2
 8009bac:	701a      	strb	r2, [r3, #0]
      break;
 8009bae:	e0f2      	b.n	8009d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	885b      	ldrh	r3, [r3, #2]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b05      	cmp	r3, #5
 8009bb8:	f200 80ac 	bhi.w	8009d14 <USBD_GetDescriptor+0x258>
 8009bbc:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <USBD_GetDescriptor+0x108>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009c11 	.word	0x08009c11
 8009bcc:	08009c45 	.word	0x08009c45
 8009bd0:	08009c79 	.word	0x08009c79
 8009bd4:	08009cad 	.word	0x08009cad
 8009bd8:	08009ce1 	.word	0x08009ce1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7c12      	ldrb	r2, [r2, #16]
 8009bf4:	f107 0108 	add.w	r1, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bfe:	e091      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 facb 	bl	800a19e <USBD_CtlError>
            err++;
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0e:	e089      	b.n	8009d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	7c12      	ldrb	r2, [r2, #16]
 8009c28:	f107 0108 	add.w	r1, r7, #8
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4798      	blx	r3
 8009c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c32:	e077      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fab1 	bl	800a19e <USBD_CtlError>
            err++;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	72fb      	strb	r3, [r7, #11]
          break;
 8009c42:	e06f      	b.n	8009d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	7c12      	ldrb	r2, [r2, #16]
 8009c5c:	f107 0108 	add.w	r1, r7, #8
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
 8009c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c66:	e05d      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa97 	bl	800a19e <USBD_CtlError>
            err++;
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	3301      	adds	r3, #1
 8009c74:	72fb      	strb	r3, [r7, #11]
          break;
 8009c76:	e055      	b.n	8009d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7c12      	ldrb	r2, [r2, #16]
 8009c90:	f107 0108 	add.w	r1, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c9a:	e043      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa7d 	bl	800a19e <USBD_CtlError>
            err++;
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8009caa:	e03b      	b.n	8009d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	7c12      	ldrb	r2, [r2, #16]
 8009cc4:	f107 0108 	add.w	r1, r7, #8
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4798      	blx	r3
 8009ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cce:	e029      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa63 	bl	800a19e <USBD_CtlError>
            err++;
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cde:	e021      	b.n	8009d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	7c12      	ldrb	r2, [r2, #16]
 8009cf8:	f107 0108 	add.w	r1, r7, #8
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	4798      	blx	r3
 8009d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d02:	e00f      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fa49 	bl	800a19e <USBD_CtlError>
            err++;
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	72fb      	strb	r3, [r7, #11]
          break;
 8009d12:	e007      	b.n	8009d24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa41 	bl	800a19e <USBD_CtlError>
          err++;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d22:	bf00      	nop
      }
      break;
 8009d24:	e037      	b.n	8009d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	7c1b      	ldrb	r3, [r3, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d109      	bne.n	8009d42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d36:	f107 0208 	add.w	r2, r7, #8
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	4798      	blx	r3
 8009d3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d40:	e029      	b.n	8009d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa2a 	bl	800a19e <USBD_CtlError>
        err++;
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d50:	e021      	b.n	8009d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	7c1b      	ldrb	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10d      	bne.n	8009d76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	f107 0208 	add.w	r2, r7, #8
 8009d66:	4610      	mov	r0, r2
 8009d68:	4798      	blx	r3
 8009d6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	2207      	movs	r2, #7
 8009d72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d74:	e00f      	b.n	8009d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fa10 	bl	800a19e <USBD_CtlError>
        err++;
 8009d7e:	7afb      	ldrb	r3, [r7, #11]
 8009d80:	3301      	adds	r3, #1
 8009d82:	72fb      	strb	r3, [r7, #11]
      break;
 8009d84:	e007      	b.n	8009d96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fa08 	bl	800a19e <USBD_CtlError>
      err++;
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	3301      	adds	r3, #1
 8009d92:	72fb      	strb	r3, [r7, #11]
      break;
 8009d94:	bf00      	nop
  }

  if (err != 0U)
 8009d96:	7afb      	ldrb	r3, [r7, #11]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d11e      	bne.n	8009dda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	88db      	ldrh	r3, [r3, #6]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d016      	beq.n	8009dd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009da4:	893b      	ldrh	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00e      	beq.n	8009dc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88da      	ldrh	r2, [r3, #6]
 8009dae:	893b      	ldrh	r3, [r7, #8]
 8009db0:	4293      	cmp	r3, r2
 8009db2:	bf28      	it	cs
 8009db4:	4613      	movcs	r3, r2
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dba:	893b      	ldrh	r3, [r7, #8]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	68f9      	ldr	r1, [r7, #12]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fa5d 	bl	800a280 <USBD_CtlSendData>
 8009dc6:	e009      	b.n	8009ddc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f9e7 	bl	800a19e <USBD_CtlError>
 8009dd0:	e004      	b.n	8009ddc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 faae 	bl	800a334 <USBD_CtlSendStatus>
 8009dd8:	e000      	b.n	8009ddc <USBD_GetDescriptor+0x320>
    return;
 8009dda:	bf00      	nop
  }
}
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop

08009de4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	889b      	ldrh	r3, [r3, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d131      	bne.n	8009e5a <USBD_SetAddress+0x76>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	88db      	ldrh	r3, [r3, #6]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d12d      	bne.n	8009e5a <USBD_SetAddress+0x76>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	885b      	ldrh	r3, [r3, #2]
 8009e02:	2b7f      	cmp	r3, #127	; 0x7f
 8009e04:	d829      	bhi.n	8009e5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d104      	bne.n	8009e28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f9bc 	bl	800a19e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	e01d      	b.n	8009e64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7bfa      	ldrb	r2, [r7, #15]
 8009e2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 ffef 	bl	800ae18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa7a 	bl	800a334 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d004      	beq.n	8009e50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4e:	e009      	b.n	8009e64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e58:	e004      	b.n	8009e64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f99e 	bl	800a19e <USBD_CtlError>
  }
}
 8009e62:	bf00      	nop
 8009e64:	bf00      	nop
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	885b      	ldrh	r3, [r3, #2]
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	4b4e      	ldr	r3, [pc, #312]	; (8009fbc <USBD_SetConfig+0x150>)
 8009e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e84:	4b4d      	ldr	r3, [pc, #308]	; (8009fbc <USBD_SetConfig+0x150>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d905      	bls.n	8009e98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f985 	bl	800a19e <USBD_CtlError>
    return USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e08c      	b.n	8009fb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d002      	beq.n	8009eaa <USBD_SetConfig+0x3e>
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d029      	beq.n	8009efc <USBD_SetConfig+0x90>
 8009ea8:	e075      	b.n	8009f96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009eaa:	4b44      	ldr	r3, [pc, #272]	; (8009fbc <USBD_SetConfig+0x150>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d020      	beq.n	8009ef4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009eb2:	4b42      	ldr	r3, [pc, #264]	; (8009fbc <USBD_SetConfig+0x150>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ebc:	4b3f      	ldr	r3, [pc, #252]	; (8009fbc <USBD_SetConfig+0x150>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7fe ffb7 	bl	8008e36 <USBD_SetClassConfig>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d008      	beq.n	8009ee4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f962 	bl	800a19e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ee2:	e065      	b.n	8009fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fa25 	bl	800a334 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2203      	movs	r2, #3
 8009eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ef2:	e05d      	b.n	8009fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fa1d 	bl	800a334 <USBD_CtlSendStatus>
      break;
 8009efa:	e059      	b.n	8009fb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009efc:	4b2f      	ldr	r3, [pc, #188]	; (8009fbc <USBD_SetConfig+0x150>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d112      	bne.n	8009f2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f0c:	4b2b      	ldr	r3, [pc, #172]	; (8009fbc <USBD_SetConfig+0x150>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	461a      	mov	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f16:	4b29      	ldr	r3, [pc, #164]	; (8009fbc <USBD_SetConfig+0x150>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7fe ffa6 	bl	8008e6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fa06 	bl	800a334 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f28:	e042      	b.n	8009fb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <USBD_SetConfig+0x150>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d02a      	beq.n	8009f8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7fe ff94 	bl	8008e6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f46:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <USBD_SetConfig+0x150>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f50:	4b1a      	ldr	r3, [pc, #104]	; (8009fbc <USBD_SetConfig+0x150>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fe ff6d 	bl	8008e36 <USBD_SetClassConfig>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00f      	beq.n	8009f86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f918 	bl	800a19e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7fe ff79 	bl	8008e6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f84:	e014      	b.n	8009fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f9d4 	bl	800a334 <USBD_CtlSendStatus>
      break;
 8009f8c:	e010      	b.n	8009fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f9d0 	bl	800a334 <USBD_CtlSendStatus>
      break;
 8009f94:	e00c      	b.n	8009fb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f900 	bl	800a19e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f9e:	4b07      	ldr	r3, [pc, #28]	; (8009fbc <USBD_SetConfig+0x150>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7fe ff62 	bl	8008e6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009faa:	2303      	movs	r3, #3
 8009fac:	73fb      	strb	r3, [r7, #15]
      break;
 8009fae:	bf00      	nop
  }

  return ret;
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000580 	.word	0x20000580

08009fc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	88db      	ldrh	r3, [r3, #6]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d004      	beq.n	8009fdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f8e2 	bl	800a19e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fda:	e023      	b.n	800a024 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	dc02      	bgt.n	8009fee <USBD_GetConfig+0x2e>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dc03      	bgt.n	8009ff4 <USBD_GetConfig+0x34>
 8009fec:	e015      	b.n	800a01a <USBD_GetConfig+0x5a>
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d00b      	beq.n	800a00a <USBD_GetConfig+0x4a>
 8009ff2:	e012      	b.n	800a01a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	2201      	movs	r2, #1
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f93c 	bl	800a280 <USBD_CtlSendData>
        break;
 800a008:	e00c      	b.n	800a024 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3304      	adds	r3, #4
 800a00e:	2201      	movs	r2, #1
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f934 	bl	800a280 <USBD_CtlSendData>
        break;
 800a018:	e004      	b.n	800a024 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f8be 	bl	800a19e <USBD_CtlError>
        break;
 800a022:	bf00      	nop
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	2b02      	cmp	r3, #2
 800a042:	d81e      	bhi.n	800a082 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	88db      	ldrh	r3, [r3, #6]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d004      	beq.n	800a056 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8a5 	bl	800a19e <USBD_CtlError>
        break;
 800a054:	e01a      	b.n	800a08c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f043 0202 	orr.w	r2, r3, #2
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	330c      	adds	r3, #12
 800a076:	2202      	movs	r2, #2
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f900 	bl	800a280 <USBD_CtlSendData>
      break;
 800a080:	e004      	b.n	800a08c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f88a 	bl	800a19e <USBD_CtlError>
      break;
 800a08a:	bf00      	nop
  }
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	885b      	ldrh	r3, [r3, #2]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d107      	bne.n	800a0b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f940 	bl	800a334 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a0b4:	e013      	b.n	800a0de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d10b      	bne.n	800a0d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	889b      	ldrh	r3, [r3, #4]
 800a0c2:	0a1b      	lsrs	r3, r3, #8
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f930 	bl	800a334 <USBD_CtlSendStatus>
}
 800a0d4:	e003      	b.n	800a0de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f860 	bl	800a19e <USBD_CtlError>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d80b      	bhi.n	800a116 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	885b      	ldrh	r3, [r3, #2]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10c      	bne.n	800a120 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f910 	bl	800a334 <USBD_CtlSendStatus>
      }
      break;
 800a114:	e004      	b.n	800a120 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f840 	bl	800a19e <USBD_CtlError>
      break;
 800a11e:	e000      	b.n	800a122 <USBD_ClrFeature+0x3c>
      break;
 800a120:	bf00      	nop
  }
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	781a      	ldrb	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3301      	adds	r3, #1
 800a144:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fa17 	bl	8009588 <SWAPBYTE>
 800a15a:	4603      	mov	r3, r0
 800a15c:	461a      	mov	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3301      	adds	r3, #1
 800a16c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7ff fa0a 	bl	8009588 <SWAPBYTE>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3301      	adds	r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3301      	adds	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff f9fd 	bl	8009588 <SWAPBYTE>
 800a18e:	4603      	mov	r3, r0
 800a190:	461a      	mov	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	80da      	strh	r2, [r3, #6]
}
 800a196:	bf00      	nop
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1a8:	2180      	movs	r1, #128	; 0x80
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fd9c 	bl	800ace8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fd98 	bl	800ace8 <USBD_LL_StallEP>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d036      	beq.n	800a244 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f000 f836 	bl	800a24c <USBD_GetLen>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	4413      	add	r3, r2
 800a206:	2203      	movs	r2, #3
 800a208:	701a      	strb	r2, [r3, #0]
  idx++;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	3301      	adds	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a210:	e013      	b.n	800a23a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a212:	7dfb      	ldrb	r3, [r7, #23]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	4413      	add	r3, r2
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	7812      	ldrb	r2, [r2, #0]
 800a21c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	3301      	adds	r3, #1
 800a222:	613b      	str	r3, [r7, #16]
    idx++;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	3301      	adds	r3, #1
 800a228:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4413      	add	r3, r2
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]
    idx++;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	3301      	adds	r3, #1
 800a238:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e7      	bne.n	800a212 <USBD_GetString+0x52>
 800a242:	e000      	b.n	800a246 <USBD_GetString+0x86>
    return;
 800a244:	bf00      	nop
  }
}
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a25c:	e005      	b.n	800a26a <USBD_GetLen+0x1e>
  {
    len++;
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	3301      	adds	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	3301      	adds	r3, #1
 800a268:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f5      	bne.n	800a25e <USBD_GetLen+0x12>
  }

  return len;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2202      	movs	r2, #2
 800a290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fdec 	bl	800ae84 <USBD_LL_Transmit>

  return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fddb 	bl	800ae84 <USBD_LL_Transmit>

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2203      	movs	r2, #3
 800a2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	2100      	movs	r1, #0
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 fdf6 	bl	800aef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	2100      	movs	r1, #0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fde5 	bl	800aef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2204      	movs	r2, #4
 800a340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a344:	2300      	movs	r3, #0
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fd9a 	bl	800ae84 <USBD_LL_Transmit>

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2205      	movs	r2, #5
 800a366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fdbf 	bl	800aef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a384:	2200      	movs	r2, #0
 800a386:	4912      	ldr	r1, [pc, #72]	; (800a3d0 <MX_USB_DEVICE_Init+0x50>)
 800a388:	4812      	ldr	r0, [pc, #72]	; (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a38a:	f7fe fcd7 	bl	8008d3c <USBD_Init>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a394:	f7f7 fb40 	bl	8001a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a398:	490f      	ldr	r1, [pc, #60]	; (800a3d8 <MX_USB_DEVICE_Init+0x58>)
 800a39a:	480e      	ldr	r0, [pc, #56]	; (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a39c:	f7fe fcfe 	bl	8008d9c <USBD_RegisterClass>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3a6:	f7f7 fb37 	bl	8001a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3aa:	490c      	ldr	r1, [pc, #48]	; (800a3dc <MX_USB_DEVICE_Init+0x5c>)
 800a3ac:	4809      	ldr	r0, [pc, #36]	; (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a3ae:	f7fe fbf5 	bl	8008b9c <USBD_CDC_RegisterInterface>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3b8:	f7f7 fb2e 	bl	8001a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3bc:	4805      	ldr	r0, [pc, #20]	; (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a3be:	f7fe fd23 	bl	8008e08 <USBD_Start>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3c8:	f7f7 fb26 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3cc:	bf00      	nop
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	200000ac 	.word	0x200000ac
 800a3d4:	20000584 	.word	0x20000584
 800a3d8:	20000018 	.word	0x20000018
 800a3dc:	20000098 	.word	0x20000098

0800a3e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4905      	ldr	r1, [pc, #20]	; (800a3fc <CDC_Init_FS+0x1c>)
 800a3e8:	4805      	ldr	r0, [pc, #20]	; (800a400 <CDC_Init_FS+0x20>)
 800a3ea:	f7fe fbf1 	bl	8008bd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3ee:	4905      	ldr	r1, [pc, #20]	; (800a404 <CDC_Init_FS+0x24>)
 800a3f0:	4803      	ldr	r0, [pc, #12]	; (800a400 <CDC_Init_FS+0x20>)
 800a3f2:	f7fe fc0f 	bl	8008c14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	20001060 	.word	0x20001060
 800a400:	20000584 	.word	0x20000584
 800a404:	20000860 	.word	0x20000860

0800a408 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a40c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a40e:	4618      	mov	r0, r3
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
 800a424:	4613      	mov	r3, r2
 800a426:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	2b23      	cmp	r3, #35	; 0x23
 800a42c:	d84a      	bhi.n	800a4c4 <CDC_Control_FS+0xac>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <CDC_Control_FS+0x1c>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a4c5 	.word	0x0800a4c5
 800a438:	0800a4c5 	.word	0x0800a4c5
 800a43c:	0800a4c5 	.word	0x0800a4c5
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a4c5 	.word	0x0800a4c5
 800a448:	0800a4c5 	.word	0x0800a4c5
 800a44c:	0800a4c5 	.word	0x0800a4c5
 800a450:	0800a4c5 	.word	0x0800a4c5
 800a454:	0800a4c5 	.word	0x0800a4c5
 800a458:	0800a4c5 	.word	0x0800a4c5
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a4c5 	.word	0x0800a4c5
 800a464:	0800a4c5 	.word	0x0800a4c5
 800a468:	0800a4c5 	.word	0x0800a4c5
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a4c5 	.word	0x0800a4c5
 800a478:	0800a4c5 	.word	0x0800a4c5
 800a47c:	0800a4c5 	.word	0x0800a4c5
 800a480:	0800a4c5 	.word	0x0800a4c5
 800a484:	0800a4c5 	.word	0x0800a4c5
 800a488:	0800a4c5 	.word	0x0800a4c5
 800a48c:	0800a4c5 	.word	0x0800a4c5
 800a490:	0800a4c5 	.word	0x0800a4c5
 800a494:	0800a4c5 	.word	0x0800a4c5
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	0800a4c5 	.word	0x0800a4c5
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4c5 	.word	0x0800a4c5
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	0800a4c5 	.word	0x0800a4c5
 800a4b0:	0800a4c5 	.word	0x0800a4c5
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a4c5 	.word	0x0800a4c5
 800a4bc:	0800a4c5 	.word	0x0800a4c5
 800a4c0:	0800a4c5 	.word	0x0800a4c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4c4:	bf00      	nop
  }

  return (USBD_OK);
 800a4c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	480f      	ldr	r0, [pc, #60]	; (800a520 <CDC_Receive_FS+0x4c>)
 800a4e2:	f7fe fb97 	bl	8008c14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4e6:	480e      	ldr	r0, [pc, #56]	; (800a520 <CDC_Receive_FS+0x4c>)
 800a4e8:	f7fe fbf2 	bl	8008cd0 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	73fb      	strb	r3, [r7, #15]
  memset (rxBuffer, '\0', 64);
 800a4f2:	2240      	movs	r2, #64	; 0x40
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	480b      	ldr	r0, [pc, #44]	; (800a524 <CDC_Receive_FS+0x50>)
 800a4f8:	f001 fafc 	bl	800baf4 <memset>
  memcpy (rxBuffer, Buf, len);
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	461a      	mov	r2, r3
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	4808      	ldr	r0, [pc, #32]	; (800a524 <CDC_Receive_FS+0x50>)
 800a504:	f001 fb2f 	bl	800bb66 <memcpy>
  memset (Buf, '\0', len);
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	461a      	mov	r2, r3
 800a50c:	2100      	movs	r1, #0
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f001 faf0 	bl	800baf4 <memset>
  return (USBD_OK);
 800a514:	2300      	movs	r3, #0

  //if we're still using this shit after 2024 is over.....
  //				-Max

  /* USER CODE END 6 */
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20000584 	.word	0x20000584
 800a524:	20000330 	.word	0x20000330

0800a528 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a538:	4b0d      	ldr	r3, [pc, #52]	; (800a570 <CDC_Transmit_FS+0x48>)
 800a53a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a53e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e00b      	b.n	800a566 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a54e:	887b      	ldrh	r3, [r7, #2]
 800a550:	461a      	mov	r2, r3
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4806      	ldr	r0, [pc, #24]	; (800a570 <CDC_Transmit_FS+0x48>)
 800a556:	f7fe fb3b 	bl	8008bd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a55a:	4805      	ldr	r0, [pc, #20]	; (800a570 <CDC_Transmit_FS+0x48>)
 800a55c:	f7fe fb78 	bl	8008c50 <USBD_CDC_TransmitPacket>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20000584 	.word	0x20000584

0800a574 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	6039      	str	r1, [r7, #0]
 800a5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2212      	movs	r2, #18
 800a5a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5aa:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	200000cc 	.word	0x200000cc

0800a5bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5ce:	4b03      	ldr	r3, [pc, #12]	; (800a5dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	200000ec 	.word	0x200000ec

0800a5e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d105      	bne.n	800a5fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	4907      	ldr	r1, [pc, #28]	; (800a614 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5f6:	4808      	ldr	r0, [pc, #32]	; (800a618 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5f8:	f7ff fde2 	bl	800a1c0 <USBD_GetString>
 800a5fc:	e004      	b.n	800a608 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	4904      	ldr	r1, [pc, #16]	; (800a614 <USBD_FS_ProductStrDescriptor+0x34>)
 800a602:	4805      	ldr	r0, [pc, #20]	; (800a618 <USBD_FS_ProductStrDescriptor+0x38>)
 800a604:	f7ff fddc 	bl	800a1c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20001860 	.word	0x20001860
 800a618:	0800e16c 	.word	0x0800e16c

0800a61c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	4904      	ldr	r1, [pc, #16]	; (800a63c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a62c:	4804      	ldr	r0, [pc, #16]	; (800a640 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a62e:	f7ff fdc7 	bl	800a1c0 <USBD_GetString>
  return USBD_StrDesc;
 800a632:	4b02      	ldr	r3, [pc, #8]	; (800a63c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20001860 	.word	0x20001860
 800a640:	0800e184 	.word	0x0800e184

0800a644 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	221a      	movs	r2, #26
 800a654:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a656:	f000 f855 	bl	800a704 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a65a:	4b02      	ldr	r3, [pc, #8]	; (800a664 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	200000f0 	.word	0x200000f0

0800a668 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d105      	bne.n	800a686 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4907      	ldr	r1, [pc, #28]	; (800a69c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a67e:	4808      	ldr	r0, [pc, #32]	; (800a6a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a680:	f7ff fd9e 	bl	800a1c0 <USBD_GetString>
 800a684:	e004      	b.n	800a690 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4904      	ldr	r1, [pc, #16]	; (800a69c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a68a:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a68c:	f7ff fd98 	bl	800a1c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20001860 	.word	0x20001860
 800a6a0:	0800e198 	.word	0x0800e198

0800a6a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6039      	str	r1, [r7, #0]
 800a6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	4907      	ldr	r1, [pc, #28]	; (800a6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6ba:	4808      	ldr	r0, [pc, #32]	; (800a6dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6bc:	f7ff fd80 	bl	800a1c0 <USBD_GetString>
 800a6c0:	e004      	b.n	800a6cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6c6:	4805      	ldr	r0, [pc, #20]	; (800a6dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6c8:	f7ff fd7a 	bl	800a1c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6cc:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20001860 	.word	0x20001860
 800a6dc:	0800e1a4 	.word	0x0800e1a4

0800a6e0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	220c      	movs	r2, #12
 800a6f0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a6f2:	4b03      	ldr	r3, [pc, #12]	; (800a700 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	200000e0 	.word	0x200000e0

0800a704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a70a:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <Get_SerialNum+0x44>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a710:	4b0e      	ldr	r3, [pc, #56]	; (800a74c <Get_SerialNum+0x48>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a716:	4b0e      	ldr	r3, [pc, #56]	; (800a750 <Get_SerialNum+0x4c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4413      	add	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a72a:	2208      	movs	r2, #8
 800a72c:	4909      	ldr	r1, [pc, #36]	; (800a754 <Get_SerialNum+0x50>)
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 f814 	bl	800a75c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a734:	2204      	movs	r2, #4
 800a736:	4908      	ldr	r1, [pc, #32]	; (800a758 <Get_SerialNum+0x54>)
 800a738:	68b8      	ldr	r0, [r7, #8]
 800a73a:	f000 f80f 	bl	800a75c <IntToUnicode>
  }
}
 800a73e:	bf00      	nop
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	1fff7590 	.word	0x1fff7590
 800a74c:	1fff7594 	.word	0x1fff7594
 800a750:	1fff7598 	.word	0x1fff7598
 800a754:	200000f2 	.word	0x200000f2
 800a758:	20000102 	.word	0x20000102

0800a75c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a76e:	2300      	movs	r3, #0
 800a770:	75fb      	strb	r3, [r7, #23]
 800a772:	e027      	b.n	800a7c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	0f1b      	lsrs	r3, r3, #28
 800a778:	2b09      	cmp	r3, #9
 800a77a:	d80b      	bhi.n	800a794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	0f1b      	lsrs	r3, r3, #28
 800a780:	b2da      	uxtb	r2, r3
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	4619      	mov	r1, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	440b      	add	r3, r1
 800a78c:	3230      	adds	r2, #48	; 0x30
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
 800a792:	e00a      	b.n	800a7aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	0f1b      	lsrs	r3, r3, #28
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	4619      	mov	r1, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	440b      	add	r3, r1
 800a7a4:	3237      	adds	r2, #55	; 0x37
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	75fb      	strb	r3, [r7, #23]
 800a7c4:	7dfa      	ldrb	r2, [r7, #23]
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d3d3      	bcc.n	800a774 <IntToUnicode+0x18>
  }
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
	...

0800a7dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b0ac      	sub	sp, #176	; 0xb0
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	605a      	str	r2, [r3, #4]
 800a7ee:	609a      	str	r2, [r3, #8]
 800a7f0:	60da      	str	r2, [r3, #12]
 800a7f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a7f4:	f107 0314 	add.w	r3, r7, #20
 800a7f8:	2288      	movs	r2, #136	; 0x88
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 f979 	bl	800baf4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a80a:	d173      	bne.n	800a8f4 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a80c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a810:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a812:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800a81a:	2303      	movs	r3, #3
 800a81c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a81e:	2301      	movs	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800a822:	230c      	movs	r3, #12
 800a824:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a826:	2307      	movs	r3, #7
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800a82a:	2304      	movs	r3, #4
 800a82c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a82e:	2302      	movs	r3, #2
 800a830:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a832:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a836:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a838:	f107 0314 	add.w	r3, r7, #20
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fb f8e3 	bl	8005a08 <HAL_RCCEx_PeriphCLKConfig>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800a848:	f7f7 f8e6 	bl	8001a18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a84c:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a850:	4a2a      	ldr	r2, [pc, #168]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a852:	f043 0301 	orr.w	r3, r3, #1
 800a856:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a858:	4b28      	ldr	r3, [pc, #160]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a864:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a86c:	2302      	movs	r3, #2
 800a86e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a872:	2300      	movs	r3, #0
 800a874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a878:	2303      	movs	r3, #3
 800a87a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a87e:	230a      	movs	r3, #10
 800a880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a888:	4619      	mov	r1, r3
 800a88a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a88e:	f7f8 f911 	bl	8002ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a892:	4b1a      	ldr	r3, [pc, #104]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a896:	4a19      	ldr	r2, [pc, #100]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a89c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a89e:	4b17      	ldr	r3, [pc, #92]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8aa:	4b14      	ldr	r3, [pc, #80]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d114      	bne.n	800a8e0 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8b6:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ba:	4a10      	ldr	r2, [pc, #64]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a8c2:	4b0e      	ldr	r3, [pc, #56]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8ca:	60bb      	str	r3, [r7, #8]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a8ce:	f7f9 fdcd 	bl	800446c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8d2:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d6:	4a09      	ldr	r2, [pc, #36]	; (800a8fc <HAL_PCD_MspInit+0x120>)
 800a8d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8dc:	6593      	str	r3, [r2, #88]	; 0x58
 800a8de:	e001      	b.n	800a8e4 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a8e0:	f7f9 fdc4 	bl	800446c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	2043      	movs	r0, #67	; 0x43
 800a8ea:	f7f8 f86e 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8ee:	2043      	movs	r0, #67	; 0x43
 800a8f0:	f7f8 f887 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8f4:	bf00      	nop
 800a8f6:	37b0      	adds	r7, #176	; 0xb0
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	40021000 	.word	0x40021000

0800a900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	f7fe fac3 	bl	8008ea2 <USBD_LL_SetupStage>
}
 800a91c:	bf00      	nop
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a936:	78fa      	ldrb	r2, [r7, #3]
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	4619      	mov	r1, r3
 800a94e:	f7fe fafd 	bl	8008f4c <USBD_LL_DataOutStage>
}
 800a952:	bf00      	nop
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	460b      	mov	r3, r1
 800a964:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a96c:	78fa      	ldrb	r2, [r7, #3]
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	4613      	mov	r3, r2
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	440b      	add	r3, r1
 800a97a:	3348      	adds	r3, #72	; 0x48
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	4619      	mov	r1, r3
 800a982:	f7fe fb96 	bl	80090b2 <USBD_LL_DataInStage>
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe fcd0 	bl	8009342 <USBD_LL_SOF>
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d001      	beq.n	800a9c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a9be:	f7f7 f82b 	bl	8001a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9c8:	7bfa      	ldrb	r2, [r7, #15]
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fe fc74 	bl	80092ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe fc1c 	bl	8009216 <USBD_LL_Reset>
}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa02:	f043 0301 	orr.w	r3, r3, #1
 800aa06:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fc63 	bl	80092da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <HAL_PCD_SuspendCallback+0x48>)
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	4a03      	ldr	r2, [pc, #12]	; (800aa30 <HAL_PCD_SuspendCallback+0x48>)
 800aa22:	f043 0306 	orr.w	r3, r3, #6
 800aa26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	e000ed00 	.word	0xe000ed00

0800aa34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa4e:	f023 0301 	bic.w	r3, r3, #1
 800aa52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d007      	beq.n	800aa6c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa5c:	4b08      	ldr	r3, [pc, #32]	; (800aa80 <HAL_PCD_ResumeCallback+0x4c>)
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	4a07      	ldr	r2, [pc, #28]	; (800aa80 <HAL_PCD_ResumeCallback+0x4c>)
 800aa62:	f023 0306 	bic.w	r3, r3, #6
 800aa66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aa68:	f000 faf6 	bl	800b058 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fc4d 	bl	8009312 <USBD_LL_Resume>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	e000ed00 	.word	0xe000ed00

0800aa84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe fca3 	bl	80093e6 <USBD_LL_IsoOUTIncomplete>
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fc5f 	bl	8009382 <USBD_LL_IsoINIncomplete>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fcb5 	bl	800944a <USBD_LL_DevConnected>
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe fcb2 	bl	8009460 <USBD_LL_DevDisconnected>
}
 800aafc:	bf00      	nop
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d13c      	bne.n	800ab8e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab14:	4a20      	ldr	r2, [pc, #128]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a1e      	ldr	r2, [pc, #120]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab20:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab24:	4b1c      	ldr	r3, [pc, #112]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab2e:	2206      	movs	r2, #6
 800ab30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab32:	4b19      	ldr	r3, [pc, #100]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab34:	2202      	movs	r2, #2
 800ab36:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab38:	4b17      	ldr	r3, [pc, #92]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab3e:	4b16      	ldr	r3, [pc, #88]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab44:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ab50:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab56:	4b10      	ldr	r3, [pc, #64]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ab5c:	4b0e      	ldr	r3, [pc, #56]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab62:	480d      	ldr	r0, [pc, #52]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab64:	f7f8 fa76 	bl	8003054 <HAL_PCD_Init>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab6e:	f7f6 ff53 	bl	8001a18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab72:	2180      	movs	r1, #128	; 0x80
 800ab74:	4808      	ldr	r0, [pc, #32]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab76:	f7f9 fbe0 	bl	800433a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab7a:	2240      	movs	r2, #64	; 0x40
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4806      	ldr	r0, [pc, #24]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab80:	f7f9 fb94 	bl	80042ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab84:	2280      	movs	r2, #128	; 0x80
 800ab86:	2101      	movs	r1, #1
 800ab88:	4803      	ldr	r0, [pc, #12]	; (800ab98 <USBD_LL_Init+0x94>)
 800ab8a:	f7f9 fb8f 	bl	80042ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	20001a60 	.word	0x20001a60

0800ab9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7f8 fb72 	bl	800329c <HAL_PCD_Start>
 800abb8:	4603      	mov	r3, r0
 800abba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d816      	bhi.n	800abf0 <USBD_LL_Start+0x54>
 800abc2:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <USBD_LL_Start+0x2c>)
 800abc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc8:	0800abd9 	.word	0x0800abd9
 800abcc:	0800abdf 	.word	0x0800abdf
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abeb 	.word	0x0800abeb
    case HAL_OK :
      usb_status = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
    break;
 800abdc:	e00b      	b.n	800abf6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abde:	2303      	movs	r3, #3
 800abe0:	73fb      	strb	r3, [r7, #15]
    break;
 800abe2:	e008      	b.n	800abf6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
    break;
 800abe8:	e005      	b.n	800abf6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	73fb      	strb	r3, [r7, #15]
    break;
 800abee:	e002      	b.n	800abf6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800abf0:	2303      	movs	r3, #3
 800abf2:	73fb      	strb	r3, [r7, #15]
    break;
 800abf4:	bf00      	nop
  }
  return usb_status;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	4608      	mov	r0, r1
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4603      	mov	r3, r0
 800ac10:	70fb      	strb	r3, [r7, #3]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70bb      	strb	r3, [r7, #2]
 800ac16:	4613      	mov	r3, r2
 800ac18:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac28:	78bb      	ldrb	r3, [r7, #2]
 800ac2a:	883a      	ldrh	r2, [r7, #0]
 800ac2c:	78f9      	ldrb	r1, [r7, #3]
 800ac2e:	f7f9 f81c 	bl	8003c6a <HAL_PCD_EP_Open>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d817      	bhi.n	800ac6c <USBD_LL_OpenEP+0x6c>
 800ac3c:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <USBD_LL_OpenEP+0x44>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800ac55 	.word	0x0800ac55
 800ac48:	0800ac5b 	.word	0x0800ac5b
 800ac4c:	0800ac61 	.word	0x0800ac61
 800ac50:	0800ac67 	.word	0x0800ac67
    case HAL_OK :
      usb_status = USBD_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
    break;
 800ac58:	e00b      	b.n	800ac72 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac5e:	e008      	b.n	800ac72 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac60:	2301      	movs	r3, #1
 800ac62:	73fb      	strb	r3, [r7, #15]
    break;
 800ac64:	e005      	b.n	800ac72 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac66:	2303      	movs	r3, #3
 800ac68:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6a:	e002      	b.n	800ac72 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac70:	bf00      	nop
  }
  return usb_status;
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f9 f84d 	bl	8003d3a <HAL_PCD_EP_Close>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d816      	bhi.n	800acd8 <USBD_LL_CloseEP+0x5c>
 800acaa:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <USBD_LL_CloseEP+0x34>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800acc1 	.word	0x0800acc1
 800acb4:	0800acc7 	.word	0x0800acc7
 800acb8:	0800accd 	.word	0x0800accd
 800acbc:	0800acd3 	.word	0x0800acd3
    case HAL_OK :
      usb_status = USBD_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
    break;
 800acc4:	e00b      	b.n	800acde <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acc6:	2303      	movs	r3, #3
 800acc8:	73fb      	strb	r3, [r7, #15]
    break;
 800acca:	e008      	b.n	800acde <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800accc:	2301      	movs	r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
    break;
 800acd0:	e005      	b.n	800acde <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acd2:	2303      	movs	r3, #3
 800acd4:	73fb      	strb	r3, [r7, #15]
    break;
 800acd6:	e002      	b.n	800acde <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800acd8:	2303      	movs	r3, #3
 800acda:	73fb      	strb	r3, [r7, #15]
    break;
 800acdc:	bf00      	nop
  }
  return usb_status;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f9 f8dc 	bl	8003ec4 <HAL_PCD_EP_SetStall>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d816      	bhi.n	800ad44 <USBD_LL_StallEP+0x5c>
 800ad16:	a201      	add	r2, pc, #4	; (adr r2, 800ad1c <USBD_LL_StallEP+0x34>)
 800ad18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1c:	0800ad2d 	.word	0x0800ad2d
 800ad20:	0800ad33 	.word	0x0800ad33
 800ad24:	0800ad39 	.word	0x0800ad39
 800ad28:	0800ad3f 	.word	0x0800ad3f
    case HAL_OK :
      usb_status = USBD_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad30:	e00b      	b.n	800ad4a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad32:	2303      	movs	r3, #3
 800ad34:	73fb      	strb	r3, [r7, #15]
    break;
 800ad36:	e008      	b.n	800ad4a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3c:	e005      	b.n	800ad4a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	73fb      	strb	r3, [r7, #15]
    break;
 800ad42:	e002      	b.n	800ad4a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	73fb      	strb	r3, [r7, #15]
    break;
 800ad48:	bf00      	nop
  }
  return usb_status;
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad6e:	78fa      	ldrb	r2, [r7, #3]
 800ad70:	4611      	mov	r1, r2
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f9 f908 	bl	8003f88 <HAL_PCD_EP_ClrStall>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d816      	bhi.n	800adb0 <USBD_LL_ClearStallEP+0x5c>
 800ad82:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <USBD_LL_ClearStallEP+0x34>)
 800ad84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad88:	0800ad99 	.word	0x0800ad99
 800ad8c:	0800ad9f 	.word	0x0800ad9f
 800ad90:	0800ada5 	.word	0x0800ada5
 800ad94:	0800adab 	.word	0x0800adab
    case HAL_OK :
      usb_status = USBD_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad9c:	e00b      	b.n	800adb6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	73fb      	strb	r3, [r7, #15]
    break;
 800ada2:	e008      	b.n	800adb6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
    break;
 800ada8:	e005      	b.n	800adb6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adaa:	2303      	movs	r3, #3
 800adac:	73fb      	strb	r3, [r7, #15]
    break;
 800adae:	e002      	b.n	800adb6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800adb0:	2303      	movs	r3, #3
 800adb2:	73fb      	strb	r3, [r7, #15]
    break;
 800adb4:	bf00      	nop
  }
  return usb_status;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800add2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800add4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da0b      	bge.n	800adf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	4613      	mov	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	333e      	adds	r3, #62	; 0x3e
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	e00b      	b.n	800ae0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	4613      	mov	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	440b      	add	r3, r1
 800ae06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ae0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae32:	78fa      	ldrb	r2, [r7, #3]
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f8 fef2 	bl	8003c20 <HAL_PCD_SetAddress>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d816      	bhi.n	800ae74 <USBD_LL_SetUSBAddress+0x5c>
 800ae46:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <USBD_LL_SetUSBAddress+0x34>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800ae5d 	.word	0x0800ae5d
 800ae50:	0800ae63 	.word	0x0800ae63
 800ae54:	0800ae69 	.word	0x0800ae69
 800ae58:	0800ae6f 	.word	0x0800ae6f
    case HAL_OK :
      usb_status = USBD_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae60:	e00b      	b.n	800ae7a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae62:	2303      	movs	r3, #3
 800ae64:	73fb      	strb	r3, [r7, #15]
    break;
 800ae66:	e008      	b.n	800ae7a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6c:	e005      	b.n	800ae7a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	73fb      	strb	r3, [r7, #15]
    break;
 800ae72:	e002      	b.n	800ae7a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	73fb      	strb	r3, [r7, #15]
    break;
 800ae78:	bf00      	nop
  }
  return usb_status;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	460b      	mov	r3, r1
 800ae92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aea2:	7af9      	ldrb	r1, [r7, #11]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	f7f8 ffdb 	bl	8003e62 <HAL_PCD_EP_Transmit>
 800aeac:	4603      	mov	r3, r0
 800aeae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aeb0:	7dbb      	ldrb	r3, [r7, #22]
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d816      	bhi.n	800aee4 <USBD_LL_Transmit+0x60>
 800aeb6:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <USBD_LL_Transmit+0x38>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800aecd 	.word	0x0800aecd
 800aec0:	0800aed3 	.word	0x0800aed3
 800aec4:	0800aed9 	.word	0x0800aed9
 800aec8:	0800aedf 	.word	0x0800aedf
    case HAL_OK :
      usb_status = USBD_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	75fb      	strb	r3, [r7, #23]
    break;
 800aed0:	e00b      	b.n	800aeea <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aed2:	2303      	movs	r3, #3
 800aed4:	75fb      	strb	r3, [r7, #23]
    break;
 800aed6:	e008      	b.n	800aeea <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aed8:	2301      	movs	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]
    break;
 800aedc:	e005      	b.n	800aeea <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aede:	2303      	movs	r3, #3
 800aee0:	75fb      	strb	r3, [r7, #23]
    break;
 800aee2:	e002      	b.n	800aeea <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	75fb      	strb	r3, [r7, #23]
    break;
 800aee8:	bf00      	nop
  }
  return usb_status;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	460b      	mov	r3, r1
 800af02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af12:	7af9      	ldrb	r1, [r7, #11]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	f7f8 ff59 	bl	8003dce <HAL_PCD_EP_Receive>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800af20:	7dbb      	ldrb	r3, [r7, #22]
 800af22:	2b03      	cmp	r3, #3
 800af24:	d816      	bhi.n	800af54 <USBD_LL_PrepareReceive+0x60>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <USBD_LL_PrepareReceive+0x38>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af43 	.word	0x0800af43
 800af34:	0800af49 	.word	0x0800af49
 800af38:	0800af4f 	.word	0x0800af4f
    case HAL_OK :
      usb_status = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	75fb      	strb	r3, [r7, #23]
    break;
 800af40:	e00b      	b.n	800af5a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af42:	2303      	movs	r3, #3
 800af44:	75fb      	strb	r3, [r7, #23]
    break;
 800af46:	e008      	b.n	800af5a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af48:	2301      	movs	r3, #1
 800af4a:	75fb      	strb	r3, [r7, #23]
    break;
 800af4c:	e005      	b.n	800af5a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af4e:	2303      	movs	r3, #3
 800af50:	75fb      	strb	r3, [r7, #23]
    break;
 800af52:	e002      	b.n	800af5a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800af54:	2303      	movs	r3, #3
 800af56:	75fb      	strb	r3, [r7, #23]
    break;
 800af58:	bf00      	nop
  }
  return usb_status;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af76:	78fa      	ldrb	r2, [r7, #3]
 800af78:	4611      	mov	r1, r2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7f8 ff59 	bl	8003e32 <HAL_PCD_EP_GetRxCount>
 800af80:	4603      	mov	r3, r0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
	...

0800af8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <HAL_PCDEx_LPM_Callback+0x18>
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d01f      	beq.n	800afe2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800afa2:	e03b      	b.n	800b01c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d007      	beq.n	800afbc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800afac:	f000 f854 	bl	800b058 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afb0:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <HAL_PCDEx_LPM_Callback+0x98>)
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	4a1b      	ldr	r2, [pc, #108]	; (800b024 <HAL_PCDEx_LPM_Callback+0x98>)
 800afb6:	f023 0306 	bic.w	r3, r3, #6
 800afba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afce:	f023 0301 	bic.w	r3, r3, #1
 800afd2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe f999 	bl	8009312 <USBD_LL_Resume>
    break;
 800afe0:	e01c      	b.n	800b01c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6812      	ldr	r2, [r2, #0]
 800aff0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aff4:	f043 0301 	orr.w	r3, r3, #1
 800aff8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe f96a 	bl	80092da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d005      	beq.n	800b01a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b00e:	4b05      	ldr	r3, [pc, #20]	; (800b024 <HAL_PCDEx_LPM_Callback+0x98>)
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	4a04      	ldr	r2, [pc, #16]	; (800b024 <HAL_PCDEx_LPM_Callback+0x98>)
 800b014:	f043 0306 	orr.w	r3, r3, #6
 800b018:	6113      	str	r3, [r2, #16]
    break;
 800b01a:	bf00      	nop
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	e000ed00 	.word	0xe000ed00

0800b028 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b030:	4b03      	ldr	r3, [pc, #12]	; (800b040 <USBD_static_malloc+0x18>)
}
 800b032:	4618      	mov	r0, r3
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	20001f6c 	.word	0x20001f6c

0800b044 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]

}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b05c:	f7f6 fc8c 	bl	8001978 <SystemClock_Config>
}
 800b060:	bf00      	nop
 800b062:	bd80      	pop	{r7, pc}

0800b064 <__cvt>:
 800b064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	ec55 4b10 	vmov	r4, r5, d0
 800b06c:	2d00      	cmp	r5, #0
 800b06e:	460e      	mov	r6, r1
 800b070:	4619      	mov	r1, r3
 800b072:	462b      	mov	r3, r5
 800b074:	bfbb      	ittet	lt
 800b076:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b07a:	461d      	movlt	r5, r3
 800b07c:	2300      	movge	r3, #0
 800b07e:	232d      	movlt	r3, #45	; 0x2d
 800b080:	700b      	strb	r3, [r1, #0]
 800b082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b088:	4691      	mov	r9, r2
 800b08a:	f023 0820 	bic.w	r8, r3, #32
 800b08e:	bfbc      	itt	lt
 800b090:	4622      	movlt	r2, r4
 800b092:	4614      	movlt	r4, r2
 800b094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b098:	d005      	beq.n	800b0a6 <__cvt+0x42>
 800b09a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b09e:	d100      	bne.n	800b0a2 <__cvt+0x3e>
 800b0a0:	3601      	adds	r6, #1
 800b0a2:	2102      	movs	r1, #2
 800b0a4:	e000      	b.n	800b0a8 <__cvt+0x44>
 800b0a6:	2103      	movs	r1, #3
 800b0a8:	ab03      	add	r3, sp, #12
 800b0aa:	9301      	str	r3, [sp, #4]
 800b0ac:	ab02      	add	r3, sp, #8
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	ec45 4b10 	vmov	d0, r4, r5
 800b0b4:	4653      	mov	r3, sl
 800b0b6:	4632      	mov	r2, r6
 800b0b8:	f000 fdee 	bl	800bc98 <_dtoa_r>
 800b0bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	d102      	bne.n	800b0ca <__cvt+0x66>
 800b0c4:	f019 0f01 	tst.w	r9, #1
 800b0c8:	d022      	beq.n	800b110 <__cvt+0xac>
 800b0ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0ce:	eb07 0906 	add.w	r9, r7, r6
 800b0d2:	d110      	bne.n	800b0f6 <__cvt+0x92>
 800b0d4:	783b      	ldrb	r3, [r7, #0]
 800b0d6:	2b30      	cmp	r3, #48	; 0x30
 800b0d8:	d10a      	bne.n	800b0f0 <__cvt+0x8c>
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7f5 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e6:	b918      	cbnz	r0, 800b0f0 <__cvt+0x8c>
 800b0e8:	f1c6 0601 	rsb	r6, r6, #1
 800b0ec:	f8ca 6000 	str.w	r6, [sl]
 800b0f0:	f8da 3000 	ldr.w	r3, [sl]
 800b0f4:	4499      	add	r9, r3
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7f5 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b102:	b108      	cbz	r0, 800b108 <__cvt+0xa4>
 800b104:	f8cd 900c 	str.w	r9, [sp, #12]
 800b108:	2230      	movs	r2, #48	; 0x30
 800b10a:	9b03      	ldr	r3, [sp, #12]
 800b10c:	454b      	cmp	r3, r9
 800b10e:	d307      	bcc.n	800b120 <__cvt+0xbc>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b114:	1bdb      	subs	r3, r3, r7
 800b116:	4638      	mov	r0, r7
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	b004      	add	sp, #16
 800b11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b120:	1c59      	adds	r1, r3, #1
 800b122:	9103      	str	r1, [sp, #12]
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	e7f0      	b.n	800b10a <__cvt+0xa6>

0800b128 <__exponent>:
 800b128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b12a:	4603      	mov	r3, r0
 800b12c:	2900      	cmp	r1, #0
 800b12e:	bfb8      	it	lt
 800b130:	4249      	neglt	r1, r1
 800b132:	f803 2b02 	strb.w	r2, [r3], #2
 800b136:	bfb4      	ite	lt
 800b138:	222d      	movlt	r2, #45	; 0x2d
 800b13a:	222b      	movge	r2, #43	; 0x2b
 800b13c:	2909      	cmp	r1, #9
 800b13e:	7042      	strb	r2, [r0, #1]
 800b140:	dd2a      	ble.n	800b198 <__exponent+0x70>
 800b142:	f10d 0207 	add.w	r2, sp, #7
 800b146:	4617      	mov	r7, r2
 800b148:	260a      	movs	r6, #10
 800b14a:	4694      	mov	ip, r2
 800b14c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b150:	fb06 1415 	mls	r4, r6, r5, r1
 800b154:	3430      	adds	r4, #48	; 0x30
 800b156:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b15a:	460c      	mov	r4, r1
 800b15c:	2c63      	cmp	r4, #99	; 0x63
 800b15e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b162:	4629      	mov	r1, r5
 800b164:	dcf1      	bgt.n	800b14a <__exponent+0x22>
 800b166:	3130      	adds	r1, #48	; 0x30
 800b168:	f1ac 0402 	sub.w	r4, ip, #2
 800b16c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b170:	1c41      	adds	r1, r0, #1
 800b172:	4622      	mov	r2, r4
 800b174:	42ba      	cmp	r2, r7
 800b176:	d30a      	bcc.n	800b18e <__exponent+0x66>
 800b178:	f10d 0209 	add.w	r2, sp, #9
 800b17c:	eba2 020c 	sub.w	r2, r2, ip
 800b180:	42bc      	cmp	r4, r7
 800b182:	bf88      	it	hi
 800b184:	2200      	movhi	r2, #0
 800b186:	4413      	add	r3, r2
 800b188:	1a18      	subs	r0, r3, r0
 800b18a:	b003      	add	sp, #12
 800b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b192:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b196:	e7ed      	b.n	800b174 <__exponent+0x4c>
 800b198:	2330      	movs	r3, #48	; 0x30
 800b19a:	3130      	adds	r1, #48	; 0x30
 800b19c:	7083      	strb	r3, [r0, #2]
 800b19e:	70c1      	strb	r1, [r0, #3]
 800b1a0:	1d03      	adds	r3, r0, #4
 800b1a2:	e7f1      	b.n	800b188 <__exponent+0x60>

0800b1a4 <_printf_float>:
 800b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	ed2d 8b02 	vpush	{d8}
 800b1ac:	b08d      	sub	sp, #52	; 0x34
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1b4:	4616      	mov	r6, r2
 800b1b6:	461f      	mov	r7, r3
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	f000 fca3 	bl	800bb04 <_localeconv_r>
 800b1be:	f8d0 a000 	ldr.w	sl, [r0]
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	f7f5 f854 	bl	8000270 <strlen>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	9305      	str	r3, [sp, #20]
 800b1d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1d8:	3307      	adds	r3, #7
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	f103 0208 	add.w	r2, r3, #8
 800b1e2:	f8c8 2000 	str.w	r2, [r8]
 800b1e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1f4:	ee08 0a10 	vmov	s16, r0
 800b1f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b1fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b200:	4b9e      	ldr	r3, [pc, #632]	; (800b47c <_printf_float+0x2d8>)
 800b202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b206:	f7f5 fc91 	bl	8000b2c <__aeabi_dcmpun>
 800b20a:	bb88      	cbnz	r0, 800b270 <_printf_float+0xcc>
 800b20c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b210:	4b9a      	ldr	r3, [pc, #616]	; (800b47c <_printf_float+0x2d8>)
 800b212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b216:	f7f5 fc6b 	bl	8000af0 <__aeabi_dcmple>
 800b21a:	bb48      	cbnz	r0, 800b270 <_printf_float+0xcc>
 800b21c:	2200      	movs	r2, #0
 800b21e:	2300      	movs	r3, #0
 800b220:	4640      	mov	r0, r8
 800b222:	4649      	mov	r1, r9
 800b224:	f7f5 fc5a 	bl	8000adc <__aeabi_dcmplt>
 800b228:	b110      	cbz	r0, 800b230 <_printf_float+0x8c>
 800b22a:	232d      	movs	r3, #45	; 0x2d
 800b22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b230:	4a93      	ldr	r2, [pc, #588]	; (800b480 <_printf_float+0x2dc>)
 800b232:	4b94      	ldr	r3, [pc, #592]	; (800b484 <_printf_float+0x2e0>)
 800b234:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b238:	bf94      	ite	ls
 800b23a:	4690      	movls	r8, r2
 800b23c:	4698      	movhi	r8, r3
 800b23e:	2303      	movs	r3, #3
 800b240:	6123      	str	r3, [r4, #16]
 800b242:	9b05      	ldr	r3, [sp, #20]
 800b244:	f023 0304 	bic.w	r3, r3, #4
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	f04f 0900 	mov.w	r9, #0
 800b24e:	9700      	str	r7, [sp, #0]
 800b250:	4633      	mov	r3, r6
 800b252:	aa0b      	add	r2, sp, #44	; 0x2c
 800b254:	4621      	mov	r1, r4
 800b256:	4628      	mov	r0, r5
 800b258:	f000 f9da 	bl	800b610 <_printf_common>
 800b25c:	3001      	adds	r0, #1
 800b25e:	f040 8090 	bne.w	800b382 <_printf_float+0x1de>
 800b262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b266:	b00d      	add	sp, #52	; 0x34
 800b268:	ecbd 8b02 	vpop	{d8}
 800b26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b270:	4642      	mov	r2, r8
 800b272:	464b      	mov	r3, r9
 800b274:	4640      	mov	r0, r8
 800b276:	4649      	mov	r1, r9
 800b278:	f7f5 fc58 	bl	8000b2c <__aeabi_dcmpun>
 800b27c:	b140      	cbz	r0, 800b290 <_printf_float+0xec>
 800b27e:	464b      	mov	r3, r9
 800b280:	2b00      	cmp	r3, #0
 800b282:	bfbc      	itt	lt
 800b284:	232d      	movlt	r3, #45	; 0x2d
 800b286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b28a:	4a7f      	ldr	r2, [pc, #508]	; (800b488 <_printf_float+0x2e4>)
 800b28c:	4b7f      	ldr	r3, [pc, #508]	; (800b48c <_printf_float+0x2e8>)
 800b28e:	e7d1      	b.n	800b234 <_printf_float+0x90>
 800b290:	6863      	ldr	r3, [r4, #4]
 800b292:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b296:	9206      	str	r2, [sp, #24]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	d13f      	bne.n	800b31c <_printf_float+0x178>
 800b29c:	2306      	movs	r3, #6
 800b29e:	6063      	str	r3, [r4, #4]
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	6861      	ldr	r1, [r4, #4]
 800b2a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9303      	str	r3, [sp, #12]
 800b2ac:	ab0a      	add	r3, sp, #40	; 0x28
 800b2ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b2b2:	ab09      	add	r3, sp, #36	; 0x24
 800b2b4:	ec49 8b10 	vmov	d0, r8, r9
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	6022      	str	r2, [r4, #0]
 800b2bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f7ff fecf 	bl	800b064 <__cvt>
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ca:	2b47      	cmp	r3, #71	; 0x47
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	d108      	bne.n	800b2e2 <_printf_float+0x13e>
 800b2d0:	1cc8      	adds	r0, r1, #3
 800b2d2:	db02      	blt.n	800b2da <_printf_float+0x136>
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	4299      	cmp	r1, r3
 800b2d8:	dd41      	ble.n	800b35e <_printf_float+0x1ba>
 800b2da:	f1ab 0302 	sub.w	r3, fp, #2
 800b2de:	fa5f fb83 	uxtb.w	fp, r3
 800b2e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2e6:	d820      	bhi.n	800b32a <_printf_float+0x186>
 800b2e8:	3901      	subs	r1, #1
 800b2ea:	465a      	mov	r2, fp
 800b2ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2f0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2f2:	f7ff ff19 	bl	800b128 <__exponent>
 800b2f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2f8:	1813      	adds	r3, r2, r0
 800b2fa:	2a01      	cmp	r2, #1
 800b2fc:	4681      	mov	r9, r0
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	dc02      	bgt.n	800b308 <_printf_float+0x164>
 800b302:	6822      	ldr	r2, [r4, #0]
 800b304:	07d2      	lsls	r2, r2, #31
 800b306:	d501      	bpl.n	800b30c <_printf_float+0x168>
 800b308:	3301      	adds	r3, #1
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b310:	2b00      	cmp	r3, #0
 800b312:	d09c      	beq.n	800b24e <_printf_float+0xaa>
 800b314:	232d      	movs	r3, #45	; 0x2d
 800b316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b31a:	e798      	b.n	800b24e <_printf_float+0xaa>
 800b31c:	9a06      	ldr	r2, [sp, #24]
 800b31e:	2a47      	cmp	r2, #71	; 0x47
 800b320:	d1be      	bne.n	800b2a0 <_printf_float+0xfc>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1bc      	bne.n	800b2a0 <_printf_float+0xfc>
 800b326:	2301      	movs	r3, #1
 800b328:	e7b9      	b.n	800b29e <_printf_float+0xfa>
 800b32a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b32e:	d118      	bne.n	800b362 <_printf_float+0x1be>
 800b330:	2900      	cmp	r1, #0
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	dd0b      	ble.n	800b34e <_printf_float+0x1aa>
 800b336:	6121      	str	r1, [r4, #16]
 800b338:	b913      	cbnz	r3, 800b340 <_printf_float+0x19c>
 800b33a:	6822      	ldr	r2, [r4, #0]
 800b33c:	07d0      	lsls	r0, r2, #31
 800b33e:	d502      	bpl.n	800b346 <_printf_float+0x1a2>
 800b340:	3301      	adds	r3, #1
 800b342:	440b      	add	r3, r1
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	65a1      	str	r1, [r4, #88]	; 0x58
 800b348:	f04f 0900 	mov.w	r9, #0
 800b34c:	e7de      	b.n	800b30c <_printf_float+0x168>
 800b34e:	b913      	cbnz	r3, 800b356 <_printf_float+0x1b2>
 800b350:	6822      	ldr	r2, [r4, #0]
 800b352:	07d2      	lsls	r2, r2, #31
 800b354:	d501      	bpl.n	800b35a <_printf_float+0x1b6>
 800b356:	3302      	adds	r3, #2
 800b358:	e7f4      	b.n	800b344 <_printf_float+0x1a0>
 800b35a:	2301      	movs	r3, #1
 800b35c:	e7f2      	b.n	800b344 <_printf_float+0x1a0>
 800b35e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b364:	4299      	cmp	r1, r3
 800b366:	db05      	blt.n	800b374 <_printf_float+0x1d0>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	6121      	str	r1, [r4, #16]
 800b36c:	07d8      	lsls	r0, r3, #31
 800b36e:	d5ea      	bpl.n	800b346 <_printf_float+0x1a2>
 800b370:	1c4b      	adds	r3, r1, #1
 800b372:	e7e7      	b.n	800b344 <_printf_float+0x1a0>
 800b374:	2900      	cmp	r1, #0
 800b376:	bfd4      	ite	le
 800b378:	f1c1 0202 	rsble	r2, r1, #2
 800b37c:	2201      	movgt	r2, #1
 800b37e:	4413      	add	r3, r2
 800b380:	e7e0      	b.n	800b344 <_printf_float+0x1a0>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	055a      	lsls	r2, r3, #21
 800b386:	d407      	bmi.n	800b398 <_printf_float+0x1f4>
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	4642      	mov	r2, r8
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	d12c      	bne.n	800b3f0 <_printf_float+0x24c>
 800b396:	e764      	b.n	800b262 <_printf_float+0xbe>
 800b398:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b39c:	f240 80e0 	bls.w	800b560 <_printf_float+0x3bc>
 800b3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f7f5 fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d034      	beq.n	800b41a <_printf_float+0x276>
 800b3b0:	4a37      	ldr	r2, [pc, #220]	; (800b490 <_printf_float+0x2ec>)
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f af51 	beq.w	800b262 <_printf_float+0xbe>
 800b3c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	db02      	blt.n	800b3ce <_printf_float+0x22a>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	07d8      	lsls	r0, r3, #31
 800b3cc:	d510      	bpl.n	800b3f0 <_printf_float+0x24c>
 800b3ce:	ee18 3a10 	vmov	r3, s16
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	4631      	mov	r1, r6
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	47b8      	blx	r7
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f43f af41 	beq.w	800b262 <_printf_float+0xbe>
 800b3e0:	f04f 0800 	mov.w	r8, #0
 800b3e4:	f104 091a 	add.w	r9, r4, #26
 800b3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	4543      	cmp	r3, r8
 800b3ee:	dc09      	bgt.n	800b404 <_printf_float+0x260>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	079b      	lsls	r3, r3, #30
 800b3f4:	f100 8107 	bmi.w	800b606 <_printf_float+0x462>
 800b3f8:	68e0      	ldr	r0, [r4, #12]
 800b3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fc:	4298      	cmp	r0, r3
 800b3fe:	bfb8      	it	lt
 800b400:	4618      	movlt	r0, r3
 800b402:	e730      	b.n	800b266 <_printf_float+0xc2>
 800b404:	2301      	movs	r3, #1
 800b406:	464a      	mov	r2, r9
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f43f af27 	beq.w	800b262 <_printf_float+0xbe>
 800b414:	f108 0801 	add.w	r8, r8, #1
 800b418:	e7e6      	b.n	800b3e8 <_printf_float+0x244>
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dc39      	bgt.n	800b494 <_printf_float+0x2f0>
 800b420:	4a1b      	ldr	r2, [pc, #108]	; (800b490 <_printf_float+0x2ec>)
 800b422:	2301      	movs	r3, #1
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	47b8      	blx	r7
 800b42a:	3001      	adds	r0, #1
 800b42c:	f43f af19 	beq.w	800b262 <_printf_float+0xbe>
 800b430:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b434:	4313      	orrs	r3, r2
 800b436:	d102      	bne.n	800b43e <_printf_float+0x29a>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	07d9      	lsls	r1, r3, #31
 800b43c:	d5d8      	bpl.n	800b3f0 <_printf_float+0x24c>
 800b43e:	ee18 3a10 	vmov	r3, s16
 800b442:	4652      	mov	r2, sl
 800b444:	4631      	mov	r1, r6
 800b446:	4628      	mov	r0, r5
 800b448:	47b8      	blx	r7
 800b44a:	3001      	adds	r0, #1
 800b44c:	f43f af09 	beq.w	800b262 <_printf_float+0xbe>
 800b450:	f04f 0900 	mov.w	r9, #0
 800b454:	f104 0a1a 	add.w	sl, r4, #26
 800b458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b45a:	425b      	negs	r3, r3
 800b45c:	454b      	cmp	r3, r9
 800b45e:	dc01      	bgt.n	800b464 <_printf_float+0x2c0>
 800b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b462:	e792      	b.n	800b38a <_printf_float+0x1e6>
 800b464:	2301      	movs	r3, #1
 800b466:	4652      	mov	r2, sl
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	f43f aef7 	beq.w	800b262 <_printf_float+0xbe>
 800b474:	f109 0901 	add.w	r9, r9, #1
 800b478:	e7ee      	b.n	800b458 <_printf_float+0x2b4>
 800b47a:	bf00      	nop
 800b47c:	7fefffff 	.word	0x7fefffff
 800b480:	0800e1f4 	.word	0x0800e1f4
 800b484:	0800e1f8 	.word	0x0800e1f8
 800b488:	0800e1fc 	.word	0x0800e1fc
 800b48c:	0800e200 	.word	0x0800e200
 800b490:	0800e204 	.word	0x0800e204
 800b494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b498:	429a      	cmp	r2, r3
 800b49a:	bfa8      	it	ge
 800b49c:	461a      	movge	r2, r3
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	4691      	mov	r9, r2
 800b4a2:	dc37      	bgt.n	800b514 <_printf_float+0x370>
 800b4a4:	f04f 0b00 	mov.w	fp, #0
 800b4a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ac:	f104 021a 	add.w	r2, r4, #26
 800b4b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	eba3 0309 	sub.w	r3, r3, r9
 800b4b8:	455b      	cmp	r3, fp
 800b4ba:	dc33      	bgt.n	800b524 <_printf_float+0x380>
 800b4bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	db3b      	blt.n	800b53c <_printf_float+0x398>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	07da      	lsls	r2, r3, #31
 800b4c8:	d438      	bmi.n	800b53c <_printf_float+0x398>
 800b4ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4ce:	eba2 0903 	sub.w	r9, r2, r3
 800b4d2:	9b05      	ldr	r3, [sp, #20]
 800b4d4:	1ad2      	subs	r2, r2, r3
 800b4d6:	4591      	cmp	r9, r2
 800b4d8:	bfa8      	it	ge
 800b4da:	4691      	movge	r9, r2
 800b4dc:	f1b9 0f00 	cmp.w	r9, #0
 800b4e0:	dc35      	bgt.n	800b54e <_printf_float+0x3aa>
 800b4e2:	f04f 0800 	mov.w	r8, #0
 800b4e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ea:	f104 0a1a 	add.w	sl, r4, #26
 800b4ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	eba3 0309 	sub.w	r3, r3, r9
 800b4f8:	4543      	cmp	r3, r8
 800b4fa:	f77f af79 	ble.w	800b3f0 <_printf_float+0x24c>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4652      	mov	r2, sl
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f aeaa 	beq.w	800b262 <_printf_float+0xbe>
 800b50e:	f108 0801 	add.w	r8, r8, #1
 800b512:	e7ec      	b.n	800b4ee <_printf_float+0x34a>
 800b514:	4613      	mov	r3, r2
 800b516:	4631      	mov	r1, r6
 800b518:	4642      	mov	r2, r8
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	d1c0      	bne.n	800b4a4 <_printf_float+0x300>
 800b522:	e69e      	b.n	800b262 <_printf_float+0xbe>
 800b524:	2301      	movs	r3, #1
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	9205      	str	r2, [sp, #20]
 800b52c:	47b8      	blx	r7
 800b52e:	3001      	adds	r0, #1
 800b530:	f43f ae97 	beq.w	800b262 <_printf_float+0xbe>
 800b534:	9a05      	ldr	r2, [sp, #20]
 800b536:	f10b 0b01 	add.w	fp, fp, #1
 800b53a:	e7b9      	b.n	800b4b0 <_printf_float+0x30c>
 800b53c:	ee18 3a10 	vmov	r3, s16
 800b540:	4652      	mov	r2, sl
 800b542:	4631      	mov	r1, r6
 800b544:	4628      	mov	r0, r5
 800b546:	47b8      	blx	r7
 800b548:	3001      	adds	r0, #1
 800b54a:	d1be      	bne.n	800b4ca <_printf_float+0x326>
 800b54c:	e689      	b.n	800b262 <_printf_float+0xbe>
 800b54e:	9a05      	ldr	r2, [sp, #20]
 800b550:	464b      	mov	r3, r9
 800b552:	4442      	add	r2, r8
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	d1c1      	bne.n	800b4e2 <_printf_float+0x33e>
 800b55e:	e680      	b.n	800b262 <_printf_float+0xbe>
 800b560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b562:	2a01      	cmp	r2, #1
 800b564:	dc01      	bgt.n	800b56a <_printf_float+0x3c6>
 800b566:	07db      	lsls	r3, r3, #31
 800b568:	d53a      	bpl.n	800b5e0 <_printf_float+0x43c>
 800b56a:	2301      	movs	r3, #1
 800b56c:	4642      	mov	r2, r8
 800b56e:	4631      	mov	r1, r6
 800b570:	4628      	mov	r0, r5
 800b572:	47b8      	blx	r7
 800b574:	3001      	adds	r0, #1
 800b576:	f43f ae74 	beq.w	800b262 <_printf_float+0xbe>
 800b57a:	ee18 3a10 	vmov	r3, s16
 800b57e:	4652      	mov	r2, sl
 800b580:	4631      	mov	r1, r6
 800b582:	4628      	mov	r0, r5
 800b584:	47b8      	blx	r7
 800b586:	3001      	adds	r0, #1
 800b588:	f43f ae6b 	beq.w	800b262 <_printf_float+0xbe>
 800b58c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b590:	2200      	movs	r2, #0
 800b592:	2300      	movs	r3, #0
 800b594:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b598:	f7f5 fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800b59c:	b9d8      	cbnz	r0, 800b5d6 <_printf_float+0x432>
 800b59e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b5a2:	f108 0201 	add.w	r2, r8, #1
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	47b8      	blx	r7
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d10e      	bne.n	800b5ce <_printf_float+0x42a>
 800b5b0:	e657      	b.n	800b262 <_printf_float+0xbe>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	4631      	mov	r1, r6
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	47b8      	blx	r7
 800b5bc:	3001      	adds	r0, #1
 800b5be:	f43f ae50 	beq.w	800b262 <_printf_float+0xbe>
 800b5c2:	f108 0801 	add.w	r8, r8, #1
 800b5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	4543      	cmp	r3, r8
 800b5cc:	dcf1      	bgt.n	800b5b2 <_printf_float+0x40e>
 800b5ce:	464b      	mov	r3, r9
 800b5d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5d4:	e6da      	b.n	800b38c <_printf_float+0x1e8>
 800b5d6:	f04f 0800 	mov.w	r8, #0
 800b5da:	f104 0a1a 	add.w	sl, r4, #26
 800b5de:	e7f2      	b.n	800b5c6 <_printf_float+0x422>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4642      	mov	r2, r8
 800b5e4:	e7df      	b.n	800b5a6 <_printf_float+0x402>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	464a      	mov	r2, r9
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	f43f ae36 	beq.w	800b262 <_printf_float+0xbe>
 800b5f6:	f108 0801 	add.w	r8, r8, #1
 800b5fa:	68e3      	ldr	r3, [r4, #12]
 800b5fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5fe:	1a5b      	subs	r3, r3, r1
 800b600:	4543      	cmp	r3, r8
 800b602:	dcf0      	bgt.n	800b5e6 <_printf_float+0x442>
 800b604:	e6f8      	b.n	800b3f8 <_printf_float+0x254>
 800b606:	f04f 0800 	mov.w	r8, #0
 800b60a:	f104 0919 	add.w	r9, r4, #25
 800b60e:	e7f4      	b.n	800b5fa <_printf_float+0x456>

0800b610 <_printf_common>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	4616      	mov	r6, r2
 800b616:	4699      	mov	r9, r3
 800b618:	688a      	ldr	r2, [r1, #8]
 800b61a:	690b      	ldr	r3, [r1, #16]
 800b61c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b620:	4293      	cmp	r3, r2
 800b622:	bfb8      	it	lt
 800b624:	4613      	movlt	r3, r2
 800b626:	6033      	str	r3, [r6, #0]
 800b628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b62c:	4607      	mov	r7, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	b10a      	cbz	r2, 800b636 <_printf_common+0x26>
 800b632:	3301      	adds	r3, #1
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	0699      	lsls	r1, r3, #26
 800b63a:	bf42      	ittt	mi
 800b63c:	6833      	ldrmi	r3, [r6, #0]
 800b63e:	3302      	addmi	r3, #2
 800b640:	6033      	strmi	r3, [r6, #0]
 800b642:	6825      	ldr	r5, [r4, #0]
 800b644:	f015 0506 	ands.w	r5, r5, #6
 800b648:	d106      	bne.n	800b658 <_printf_common+0x48>
 800b64a:	f104 0a19 	add.w	sl, r4, #25
 800b64e:	68e3      	ldr	r3, [r4, #12]
 800b650:	6832      	ldr	r2, [r6, #0]
 800b652:	1a9b      	subs	r3, r3, r2
 800b654:	42ab      	cmp	r3, r5
 800b656:	dc26      	bgt.n	800b6a6 <_printf_common+0x96>
 800b658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b65c:	1e13      	subs	r3, r2, #0
 800b65e:	6822      	ldr	r2, [r4, #0]
 800b660:	bf18      	it	ne
 800b662:	2301      	movne	r3, #1
 800b664:	0692      	lsls	r2, r2, #26
 800b666:	d42b      	bmi.n	800b6c0 <_printf_common+0xb0>
 800b668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b66c:	4649      	mov	r1, r9
 800b66e:	4638      	mov	r0, r7
 800b670:	47c0      	blx	r8
 800b672:	3001      	adds	r0, #1
 800b674:	d01e      	beq.n	800b6b4 <_printf_common+0xa4>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	f003 0306 	and.w	r3, r3, #6
 800b67e:	2b04      	cmp	r3, #4
 800b680:	bf02      	ittt	eq
 800b682:	68e5      	ldreq	r5, [r4, #12]
 800b684:	6833      	ldreq	r3, [r6, #0]
 800b686:	1aed      	subeq	r5, r5, r3
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	bf0c      	ite	eq
 800b68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b690:	2500      	movne	r5, #0
 800b692:	4293      	cmp	r3, r2
 800b694:	bfc4      	itt	gt
 800b696:	1a9b      	subgt	r3, r3, r2
 800b698:	18ed      	addgt	r5, r5, r3
 800b69a:	2600      	movs	r6, #0
 800b69c:	341a      	adds	r4, #26
 800b69e:	42b5      	cmp	r5, r6
 800b6a0:	d11a      	bne.n	800b6d8 <_printf_common+0xc8>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	e008      	b.n	800b6b8 <_printf_common+0xa8>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	4652      	mov	r2, sl
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	47c0      	blx	r8
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d103      	bne.n	800b6bc <_printf_common+0xac>
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6bc:	3501      	adds	r5, #1
 800b6be:	e7c6      	b.n	800b64e <_printf_common+0x3e>
 800b6c0:	18e1      	adds	r1, r4, r3
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	2030      	movs	r0, #48	; 0x30
 800b6c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ca:	4422      	add	r2, r4
 800b6cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6d4:	3302      	adds	r3, #2
 800b6d6:	e7c7      	b.n	800b668 <_printf_common+0x58>
 800b6d8:	2301      	movs	r3, #1
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4649      	mov	r1, r9
 800b6de:	4638      	mov	r0, r7
 800b6e0:	47c0      	blx	r8
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	d0e6      	beq.n	800b6b4 <_printf_common+0xa4>
 800b6e6:	3601      	adds	r6, #1
 800b6e8:	e7d9      	b.n	800b69e <_printf_common+0x8e>
	...

0800b6ec <_printf_i>:
 800b6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f0:	7e0f      	ldrb	r7, [r1, #24]
 800b6f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6f4:	2f78      	cmp	r7, #120	; 0x78
 800b6f6:	4691      	mov	r9, r2
 800b6f8:	4680      	mov	r8, r0
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	469a      	mov	sl, r3
 800b6fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b702:	d807      	bhi.n	800b714 <_printf_i+0x28>
 800b704:	2f62      	cmp	r7, #98	; 0x62
 800b706:	d80a      	bhi.n	800b71e <_printf_i+0x32>
 800b708:	2f00      	cmp	r7, #0
 800b70a:	f000 80d4 	beq.w	800b8b6 <_printf_i+0x1ca>
 800b70e:	2f58      	cmp	r7, #88	; 0x58
 800b710:	f000 80c0 	beq.w	800b894 <_printf_i+0x1a8>
 800b714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b71c:	e03a      	b.n	800b794 <_printf_i+0xa8>
 800b71e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b722:	2b15      	cmp	r3, #21
 800b724:	d8f6      	bhi.n	800b714 <_printf_i+0x28>
 800b726:	a101      	add	r1, pc, #4	; (adr r1, 800b72c <_printf_i+0x40>)
 800b728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b72c:	0800b785 	.word	0x0800b785
 800b730:	0800b799 	.word	0x0800b799
 800b734:	0800b715 	.word	0x0800b715
 800b738:	0800b715 	.word	0x0800b715
 800b73c:	0800b715 	.word	0x0800b715
 800b740:	0800b715 	.word	0x0800b715
 800b744:	0800b799 	.word	0x0800b799
 800b748:	0800b715 	.word	0x0800b715
 800b74c:	0800b715 	.word	0x0800b715
 800b750:	0800b715 	.word	0x0800b715
 800b754:	0800b715 	.word	0x0800b715
 800b758:	0800b89d 	.word	0x0800b89d
 800b75c:	0800b7c5 	.word	0x0800b7c5
 800b760:	0800b857 	.word	0x0800b857
 800b764:	0800b715 	.word	0x0800b715
 800b768:	0800b715 	.word	0x0800b715
 800b76c:	0800b8bf 	.word	0x0800b8bf
 800b770:	0800b715 	.word	0x0800b715
 800b774:	0800b7c5 	.word	0x0800b7c5
 800b778:	0800b715 	.word	0x0800b715
 800b77c:	0800b715 	.word	0x0800b715
 800b780:	0800b85f 	.word	0x0800b85f
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	1d1a      	adds	r2, r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	602a      	str	r2, [r5, #0]
 800b78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b794:	2301      	movs	r3, #1
 800b796:	e09f      	b.n	800b8d8 <_printf_i+0x1ec>
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	0607      	lsls	r7, r0, #24
 800b79e:	f103 0104 	add.w	r1, r3, #4
 800b7a2:	6029      	str	r1, [r5, #0]
 800b7a4:	d501      	bpl.n	800b7aa <_printf_i+0xbe>
 800b7a6:	681e      	ldr	r6, [r3, #0]
 800b7a8:	e003      	b.n	800b7b2 <_printf_i+0xc6>
 800b7aa:	0646      	lsls	r6, r0, #25
 800b7ac:	d5fb      	bpl.n	800b7a6 <_printf_i+0xba>
 800b7ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	da03      	bge.n	800b7be <_printf_i+0xd2>
 800b7b6:	232d      	movs	r3, #45	; 0x2d
 800b7b8:	4276      	negs	r6, r6
 800b7ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7be:	485a      	ldr	r0, [pc, #360]	; (800b928 <_printf_i+0x23c>)
 800b7c0:	230a      	movs	r3, #10
 800b7c2:	e012      	b.n	800b7ea <_printf_i+0xfe>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	6820      	ldr	r0, [r4, #0]
 800b7c8:	1d19      	adds	r1, r3, #4
 800b7ca:	6029      	str	r1, [r5, #0]
 800b7cc:	0605      	lsls	r5, r0, #24
 800b7ce:	d501      	bpl.n	800b7d4 <_printf_i+0xe8>
 800b7d0:	681e      	ldr	r6, [r3, #0]
 800b7d2:	e002      	b.n	800b7da <_printf_i+0xee>
 800b7d4:	0641      	lsls	r1, r0, #25
 800b7d6:	d5fb      	bpl.n	800b7d0 <_printf_i+0xe4>
 800b7d8:	881e      	ldrh	r6, [r3, #0]
 800b7da:	4853      	ldr	r0, [pc, #332]	; (800b928 <_printf_i+0x23c>)
 800b7dc:	2f6f      	cmp	r7, #111	; 0x6f
 800b7de:	bf0c      	ite	eq
 800b7e0:	2308      	moveq	r3, #8
 800b7e2:	230a      	movne	r3, #10
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ea:	6865      	ldr	r5, [r4, #4]
 800b7ec:	60a5      	str	r5, [r4, #8]
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	bfa2      	ittt	ge
 800b7f2:	6821      	ldrge	r1, [r4, #0]
 800b7f4:	f021 0104 	bicge.w	r1, r1, #4
 800b7f8:	6021      	strge	r1, [r4, #0]
 800b7fa:	b90e      	cbnz	r6, 800b800 <_printf_i+0x114>
 800b7fc:	2d00      	cmp	r5, #0
 800b7fe:	d04b      	beq.n	800b898 <_printf_i+0x1ac>
 800b800:	4615      	mov	r5, r2
 800b802:	fbb6 f1f3 	udiv	r1, r6, r3
 800b806:	fb03 6711 	mls	r7, r3, r1, r6
 800b80a:	5dc7      	ldrb	r7, [r0, r7]
 800b80c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b810:	4637      	mov	r7, r6
 800b812:	42bb      	cmp	r3, r7
 800b814:	460e      	mov	r6, r1
 800b816:	d9f4      	bls.n	800b802 <_printf_i+0x116>
 800b818:	2b08      	cmp	r3, #8
 800b81a:	d10b      	bne.n	800b834 <_printf_i+0x148>
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	07de      	lsls	r6, r3, #31
 800b820:	d508      	bpl.n	800b834 <_printf_i+0x148>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	6861      	ldr	r1, [r4, #4]
 800b826:	4299      	cmp	r1, r3
 800b828:	bfde      	ittt	le
 800b82a:	2330      	movle	r3, #48	; 0x30
 800b82c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b834:	1b52      	subs	r2, r2, r5
 800b836:	6122      	str	r2, [r4, #16]
 800b838:	f8cd a000 	str.w	sl, [sp]
 800b83c:	464b      	mov	r3, r9
 800b83e:	aa03      	add	r2, sp, #12
 800b840:	4621      	mov	r1, r4
 800b842:	4640      	mov	r0, r8
 800b844:	f7ff fee4 	bl	800b610 <_printf_common>
 800b848:	3001      	adds	r0, #1
 800b84a:	d14a      	bne.n	800b8e2 <_printf_i+0x1f6>
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b850:	b004      	add	sp, #16
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	f043 0320 	orr.w	r3, r3, #32
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	4833      	ldr	r0, [pc, #204]	; (800b92c <_printf_i+0x240>)
 800b860:	2778      	movs	r7, #120	; 0x78
 800b862:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	6829      	ldr	r1, [r5, #0]
 800b86a:	061f      	lsls	r7, r3, #24
 800b86c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b870:	d402      	bmi.n	800b878 <_printf_i+0x18c>
 800b872:	065f      	lsls	r7, r3, #25
 800b874:	bf48      	it	mi
 800b876:	b2b6      	uxthmi	r6, r6
 800b878:	07df      	lsls	r7, r3, #31
 800b87a:	bf48      	it	mi
 800b87c:	f043 0320 	orrmi.w	r3, r3, #32
 800b880:	6029      	str	r1, [r5, #0]
 800b882:	bf48      	it	mi
 800b884:	6023      	strmi	r3, [r4, #0]
 800b886:	b91e      	cbnz	r6, 800b890 <_printf_i+0x1a4>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	f023 0320 	bic.w	r3, r3, #32
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	2310      	movs	r3, #16
 800b892:	e7a7      	b.n	800b7e4 <_printf_i+0xf8>
 800b894:	4824      	ldr	r0, [pc, #144]	; (800b928 <_printf_i+0x23c>)
 800b896:	e7e4      	b.n	800b862 <_printf_i+0x176>
 800b898:	4615      	mov	r5, r2
 800b89a:	e7bd      	b.n	800b818 <_printf_i+0x12c>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	6826      	ldr	r6, [r4, #0]
 800b8a0:	6961      	ldr	r1, [r4, #20]
 800b8a2:	1d18      	adds	r0, r3, #4
 800b8a4:	6028      	str	r0, [r5, #0]
 800b8a6:	0635      	lsls	r5, r6, #24
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	d501      	bpl.n	800b8b0 <_printf_i+0x1c4>
 800b8ac:	6019      	str	r1, [r3, #0]
 800b8ae:	e002      	b.n	800b8b6 <_printf_i+0x1ca>
 800b8b0:	0670      	lsls	r0, r6, #25
 800b8b2:	d5fb      	bpl.n	800b8ac <_printf_i+0x1c0>
 800b8b4:	8019      	strh	r1, [r3, #0]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	4615      	mov	r5, r2
 800b8bc:	e7bc      	b.n	800b838 <_printf_i+0x14c>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	1d1a      	adds	r2, r3, #4
 800b8c2:	602a      	str	r2, [r5, #0]
 800b8c4:	681d      	ldr	r5, [r3, #0]
 800b8c6:	6862      	ldr	r2, [r4, #4]
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7f4 fc80 	bl	80001d0 <memchr>
 800b8d0:	b108      	cbz	r0, 800b8d6 <_printf_i+0x1ea>
 800b8d2:	1b40      	subs	r0, r0, r5
 800b8d4:	6060      	str	r0, [r4, #4]
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e0:	e7aa      	b.n	800b838 <_printf_i+0x14c>
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	47d0      	blx	sl
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d0ad      	beq.n	800b84c <_printf_i+0x160>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	079b      	lsls	r3, r3, #30
 800b8f4:	d413      	bmi.n	800b91e <_printf_i+0x232>
 800b8f6:	68e0      	ldr	r0, [r4, #12]
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	4298      	cmp	r0, r3
 800b8fc:	bfb8      	it	lt
 800b8fe:	4618      	movlt	r0, r3
 800b900:	e7a6      	b.n	800b850 <_printf_i+0x164>
 800b902:	2301      	movs	r3, #1
 800b904:	4632      	mov	r2, r6
 800b906:	4649      	mov	r1, r9
 800b908:	4640      	mov	r0, r8
 800b90a:	47d0      	blx	sl
 800b90c:	3001      	adds	r0, #1
 800b90e:	d09d      	beq.n	800b84c <_printf_i+0x160>
 800b910:	3501      	adds	r5, #1
 800b912:	68e3      	ldr	r3, [r4, #12]
 800b914:	9903      	ldr	r1, [sp, #12]
 800b916:	1a5b      	subs	r3, r3, r1
 800b918:	42ab      	cmp	r3, r5
 800b91a:	dcf2      	bgt.n	800b902 <_printf_i+0x216>
 800b91c:	e7eb      	b.n	800b8f6 <_printf_i+0x20a>
 800b91e:	2500      	movs	r5, #0
 800b920:	f104 0619 	add.w	r6, r4, #25
 800b924:	e7f5      	b.n	800b912 <_printf_i+0x226>
 800b926:	bf00      	nop
 800b928:	0800e206 	.word	0x0800e206
 800b92c:	0800e217 	.word	0x0800e217

0800b930 <siprintf>:
 800b930:	b40e      	push	{r1, r2, r3}
 800b932:	b500      	push	{lr}
 800b934:	b09c      	sub	sp, #112	; 0x70
 800b936:	ab1d      	add	r3, sp, #116	; 0x74
 800b938:	9002      	str	r0, [sp, #8]
 800b93a:	9006      	str	r0, [sp, #24]
 800b93c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b940:	4809      	ldr	r0, [pc, #36]	; (800b968 <siprintf+0x38>)
 800b942:	9107      	str	r1, [sp, #28]
 800b944:	9104      	str	r1, [sp, #16]
 800b946:	4909      	ldr	r1, [pc, #36]	; (800b96c <siprintf+0x3c>)
 800b948:	f853 2b04 	ldr.w	r2, [r3], #4
 800b94c:	9105      	str	r1, [sp, #20]
 800b94e:	6800      	ldr	r0, [r0, #0]
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	a902      	add	r1, sp, #8
 800b954:	f000 ffec 	bl	800c930 <_svfiprintf_r>
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	b01c      	add	sp, #112	; 0x70
 800b960:	f85d eb04 	ldr.w	lr, [sp], #4
 800b964:	b003      	add	sp, #12
 800b966:	4770      	bx	lr
 800b968:	20000164 	.word	0x20000164
 800b96c:	ffff0208 	.word	0xffff0208

0800b970 <std>:
 800b970:	2300      	movs	r3, #0
 800b972:	b510      	push	{r4, lr}
 800b974:	4604      	mov	r4, r0
 800b976:	e9c0 3300 	strd	r3, r3, [r0]
 800b97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b97e:	6083      	str	r3, [r0, #8]
 800b980:	8181      	strh	r1, [r0, #12]
 800b982:	6643      	str	r3, [r0, #100]	; 0x64
 800b984:	81c2      	strh	r2, [r0, #14]
 800b986:	6183      	str	r3, [r0, #24]
 800b988:	4619      	mov	r1, r3
 800b98a:	2208      	movs	r2, #8
 800b98c:	305c      	adds	r0, #92	; 0x5c
 800b98e:	f000 f8b1 	bl	800baf4 <memset>
 800b992:	4b0d      	ldr	r3, [pc, #52]	; (800b9c8 <std+0x58>)
 800b994:	6263      	str	r3, [r4, #36]	; 0x24
 800b996:	4b0d      	ldr	r3, [pc, #52]	; (800b9cc <std+0x5c>)
 800b998:	62a3      	str	r3, [r4, #40]	; 0x28
 800b99a:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <std+0x60>)
 800b99c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b99e:	4b0d      	ldr	r3, [pc, #52]	; (800b9d4 <std+0x64>)
 800b9a0:	6323      	str	r3, [r4, #48]	; 0x30
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <std+0x68>)
 800b9a4:	6224      	str	r4, [r4, #32]
 800b9a6:	429c      	cmp	r4, r3
 800b9a8:	d006      	beq.n	800b9b8 <std+0x48>
 800b9aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b9ae:	4294      	cmp	r4, r2
 800b9b0:	d002      	beq.n	800b9b8 <std+0x48>
 800b9b2:	33d0      	adds	r3, #208	; 0xd0
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d105      	bne.n	800b9c4 <std+0x54>
 800b9b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c0:	f000 b8ce 	b.w	800bb60 <__retarget_lock_init_recursive>
 800b9c4:	bd10      	pop	{r4, pc}
 800b9c6:	bf00      	nop
 800b9c8:	0800d4e9 	.word	0x0800d4e9
 800b9cc:	0800d50b 	.word	0x0800d50b
 800b9d0:	0800d543 	.word	0x0800d543
 800b9d4:	0800d567 	.word	0x0800d567
 800b9d8:	2000218c 	.word	0x2000218c

0800b9dc <stdio_exit_handler>:
 800b9dc:	4a02      	ldr	r2, [pc, #8]	; (800b9e8 <stdio_exit_handler+0xc>)
 800b9de:	4903      	ldr	r1, [pc, #12]	; (800b9ec <stdio_exit_handler+0x10>)
 800b9e0:	4803      	ldr	r0, [pc, #12]	; (800b9f0 <stdio_exit_handler+0x14>)
 800b9e2:	f000 b869 	b.w	800bab8 <_fwalk_sglue>
 800b9e6:	bf00      	nop
 800b9e8:	2000010c 	.word	0x2000010c
 800b9ec:	0800cd89 	.word	0x0800cd89
 800b9f0:	20000118 	.word	0x20000118

0800b9f4 <cleanup_stdio>:
 800b9f4:	6841      	ldr	r1, [r0, #4]
 800b9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <cleanup_stdio+0x34>)
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	d001      	beq.n	800ba04 <cleanup_stdio+0x10>
 800ba00:	f001 f9c2 	bl	800cd88 <_fflush_r>
 800ba04:	68a1      	ldr	r1, [r4, #8]
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <cleanup_stdio+0x38>)
 800ba08:	4299      	cmp	r1, r3
 800ba0a:	d002      	beq.n	800ba12 <cleanup_stdio+0x1e>
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f001 f9bb 	bl	800cd88 <_fflush_r>
 800ba12:	68e1      	ldr	r1, [r4, #12]
 800ba14:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <cleanup_stdio+0x3c>)
 800ba16:	4299      	cmp	r1, r3
 800ba18:	d004      	beq.n	800ba24 <cleanup_stdio+0x30>
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba20:	f001 b9b2 	b.w	800cd88 <_fflush_r>
 800ba24:	bd10      	pop	{r4, pc}
 800ba26:	bf00      	nop
 800ba28:	2000218c 	.word	0x2000218c
 800ba2c:	200021f4 	.word	0x200021f4
 800ba30:	2000225c 	.word	0x2000225c

0800ba34 <global_stdio_init.part.0>:
 800ba34:	b510      	push	{r4, lr}
 800ba36:	4b0b      	ldr	r3, [pc, #44]	; (800ba64 <global_stdio_init.part.0+0x30>)
 800ba38:	4c0b      	ldr	r4, [pc, #44]	; (800ba68 <global_stdio_init.part.0+0x34>)
 800ba3a:	4a0c      	ldr	r2, [pc, #48]	; (800ba6c <global_stdio_init.part.0+0x38>)
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	4620      	mov	r0, r4
 800ba40:	2200      	movs	r2, #0
 800ba42:	2104      	movs	r1, #4
 800ba44:	f7ff ff94 	bl	800b970 <std>
 800ba48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	2109      	movs	r1, #9
 800ba50:	f7ff ff8e 	bl	800b970 <std>
 800ba54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ba58:	2202      	movs	r2, #2
 800ba5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba5e:	2112      	movs	r1, #18
 800ba60:	f7ff bf86 	b.w	800b970 <std>
 800ba64:	200022c4 	.word	0x200022c4
 800ba68:	2000218c 	.word	0x2000218c
 800ba6c:	0800b9dd 	.word	0x0800b9dd

0800ba70 <__sfp_lock_acquire>:
 800ba70:	4801      	ldr	r0, [pc, #4]	; (800ba78 <__sfp_lock_acquire+0x8>)
 800ba72:	f000 b876 	b.w	800bb62 <__retarget_lock_acquire_recursive>
 800ba76:	bf00      	nop
 800ba78:	200022c9 	.word	0x200022c9

0800ba7c <__sfp_lock_release>:
 800ba7c:	4801      	ldr	r0, [pc, #4]	; (800ba84 <__sfp_lock_release+0x8>)
 800ba7e:	f000 b871 	b.w	800bb64 <__retarget_lock_release_recursive>
 800ba82:	bf00      	nop
 800ba84:	200022c9 	.word	0x200022c9

0800ba88 <__sinit>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	f7ff fff0 	bl	800ba70 <__sfp_lock_acquire>
 800ba90:	6a23      	ldr	r3, [r4, #32]
 800ba92:	b11b      	cbz	r3, 800ba9c <__sinit+0x14>
 800ba94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba98:	f7ff bff0 	b.w	800ba7c <__sfp_lock_release>
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <__sinit+0x28>)
 800ba9e:	6223      	str	r3, [r4, #32]
 800baa0:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <__sinit+0x2c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1f5      	bne.n	800ba94 <__sinit+0xc>
 800baa8:	f7ff ffc4 	bl	800ba34 <global_stdio_init.part.0>
 800baac:	e7f2      	b.n	800ba94 <__sinit+0xc>
 800baae:	bf00      	nop
 800bab0:	0800b9f5 	.word	0x0800b9f5
 800bab4:	200022c4 	.word	0x200022c4

0800bab8 <_fwalk_sglue>:
 800bab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800babc:	4607      	mov	r7, r0
 800babe:	4688      	mov	r8, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	2600      	movs	r6, #0
 800bac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bac8:	f1b9 0901 	subs.w	r9, r9, #1
 800bacc:	d505      	bpl.n	800bada <_fwalk_sglue+0x22>
 800bace:	6824      	ldr	r4, [r4, #0]
 800bad0:	2c00      	cmp	r4, #0
 800bad2:	d1f7      	bne.n	800bac4 <_fwalk_sglue+0xc>
 800bad4:	4630      	mov	r0, r6
 800bad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d907      	bls.n	800baf0 <_fwalk_sglue+0x38>
 800bae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bae4:	3301      	adds	r3, #1
 800bae6:	d003      	beq.n	800baf0 <_fwalk_sglue+0x38>
 800bae8:	4629      	mov	r1, r5
 800baea:	4638      	mov	r0, r7
 800baec:	47c0      	blx	r8
 800baee:	4306      	orrs	r6, r0
 800baf0:	3568      	adds	r5, #104	; 0x68
 800baf2:	e7e9      	b.n	800bac8 <_fwalk_sglue+0x10>

0800baf4 <memset>:
 800baf4:	4402      	add	r2, r0
 800baf6:	4603      	mov	r3, r0
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d100      	bne.n	800bafe <memset+0xa>
 800bafc:	4770      	bx	lr
 800bafe:	f803 1b01 	strb.w	r1, [r3], #1
 800bb02:	e7f9      	b.n	800baf8 <memset+0x4>

0800bb04 <_localeconv_r>:
 800bb04:	4800      	ldr	r0, [pc, #0]	; (800bb08 <_localeconv_r+0x4>)
 800bb06:	4770      	bx	lr
 800bb08:	20000258 	.word	0x20000258

0800bb0c <__errno>:
 800bb0c:	4b01      	ldr	r3, [pc, #4]	; (800bb14 <__errno+0x8>)
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000164 	.word	0x20000164

0800bb18 <__libc_init_array>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	4d0d      	ldr	r5, [pc, #52]	; (800bb50 <__libc_init_array+0x38>)
 800bb1c:	4c0d      	ldr	r4, [pc, #52]	; (800bb54 <__libc_init_array+0x3c>)
 800bb1e:	1b64      	subs	r4, r4, r5
 800bb20:	10a4      	asrs	r4, r4, #2
 800bb22:	2600      	movs	r6, #0
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d109      	bne.n	800bb3c <__libc_init_array+0x24>
 800bb28:	4d0b      	ldr	r5, [pc, #44]	; (800bb58 <__libc_init_array+0x40>)
 800bb2a:	4c0c      	ldr	r4, [pc, #48]	; (800bb5c <__libc_init_array+0x44>)
 800bb2c:	f002 f920 	bl	800dd70 <_init>
 800bb30:	1b64      	subs	r4, r4, r5
 800bb32:	10a4      	asrs	r4, r4, #2
 800bb34:	2600      	movs	r6, #0
 800bb36:	42a6      	cmp	r6, r4
 800bb38:	d105      	bne.n	800bb46 <__libc_init_array+0x2e>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb40:	4798      	blx	r3
 800bb42:	3601      	adds	r6, #1
 800bb44:	e7ee      	b.n	800bb24 <__libc_init_array+0xc>
 800bb46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb4a:	4798      	blx	r3
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	e7f2      	b.n	800bb36 <__libc_init_array+0x1e>
 800bb50:	0800e564 	.word	0x0800e564
 800bb54:	0800e564 	.word	0x0800e564
 800bb58:	0800e564 	.word	0x0800e564
 800bb5c:	0800e568 	.word	0x0800e568

0800bb60 <__retarget_lock_init_recursive>:
 800bb60:	4770      	bx	lr

0800bb62 <__retarget_lock_acquire_recursive>:
 800bb62:	4770      	bx	lr

0800bb64 <__retarget_lock_release_recursive>:
 800bb64:	4770      	bx	lr

0800bb66 <memcpy>:
 800bb66:	440a      	add	r2, r1
 800bb68:	4291      	cmp	r1, r2
 800bb6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb6e:	d100      	bne.n	800bb72 <memcpy+0xc>
 800bb70:	4770      	bx	lr
 800bb72:	b510      	push	{r4, lr}
 800bb74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb7c:	4291      	cmp	r1, r2
 800bb7e:	d1f9      	bne.n	800bb74 <memcpy+0xe>
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <quorem>:
 800bb82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb86:	6903      	ldr	r3, [r0, #16]
 800bb88:	690c      	ldr	r4, [r1, #16]
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	db7e      	blt.n	800bc8e <quorem+0x10c>
 800bb90:	3c01      	subs	r4, #1
 800bb92:	f101 0814 	add.w	r8, r1, #20
 800bb96:	f100 0514 	add.w	r5, r0, #20
 800bb9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbb8:	d331      	bcc.n	800bc1e <quorem+0x9c>
 800bbba:	f04f 0e00 	mov.w	lr, #0
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	46ac      	mov	ip, r5
 800bbc2:	46f2      	mov	sl, lr
 800bbc4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbc8:	b293      	uxth	r3, r2
 800bbca:	fb06 e303 	mla	r3, r6, r3, lr
 800bbce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbd2:	0c1a      	lsrs	r2, r3, #16
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	ebaa 0303 	sub.w	r3, sl, r3
 800bbda:	f8dc a000 	ldr.w	sl, [ip]
 800bbde:	fa13 f38a 	uxtah	r3, r3, sl
 800bbe2:	fb06 220e 	mla	r2, r6, lr, r2
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	9b00      	ldr	r3, [sp, #0]
 800bbea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbee:	b292      	uxth	r2, r2
 800bbf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbf8:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbfc:	4581      	cmp	r9, r0
 800bbfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc02:	f84c 3b04 	str.w	r3, [ip], #4
 800bc06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc0a:	d2db      	bcs.n	800bbc4 <quorem+0x42>
 800bc0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc10:	b92b      	cbnz	r3, 800bc1e <quorem+0x9c>
 800bc12:	9b01      	ldr	r3, [sp, #4]
 800bc14:	3b04      	subs	r3, #4
 800bc16:	429d      	cmp	r5, r3
 800bc18:	461a      	mov	r2, r3
 800bc1a:	d32c      	bcc.n	800bc76 <quorem+0xf4>
 800bc1c:	613c      	str	r4, [r7, #16]
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f001 fb62 	bl	800d2e8 <__mcmp>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	db22      	blt.n	800bc6e <quorem+0xec>
 800bc28:	3601      	adds	r6, #1
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc32:	f8d1 c000 	ldr.w	ip, [r1]
 800bc36:	b293      	uxth	r3, r2
 800bc38:	1ac3      	subs	r3, r0, r3
 800bc3a:	0c12      	lsrs	r2, r2, #16
 800bc3c:	fa13 f38c 	uxtah	r3, r3, ip
 800bc40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc4e:	45c1      	cmp	r9, r8
 800bc50:	f841 3b04 	str.w	r3, [r1], #4
 800bc54:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc58:	d2e9      	bcs.n	800bc2e <quorem+0xac>
 800bc5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc62:	b922      	cbnz	r2, 800bc6e <quorem+0xec>
 800bc64:	3b04      	subs	r3, #4
 800bc66:	429d      	cmp	r5, r3
 800bc68:	461a      	mov	r2, r3
 800bc6a:	d30a      	bcc.n	800bc82 <quorem+0x100>
 800bc6c:	613c      	str	r4, [r7, #16]
 800bc6e:	4630      	mov	r0, r6
 800bc70:	b003      	add	sp, #12
 800bc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc76:	6812      	ldr	r2, [r2, #0]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	d1ce      	bne.n	800bc1c <quorem+0x9a>
 800bc7e:	3c01      	subs	r4, #1
 800bc80:	e7c9      	b.n	800bc16 <quorem+0x94>
 800bc82:	6812      	ldr	r2, [r2, #0]
 800bc84:	3b04      	subs	r3, #4
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	d1f0      	bne.n	800bc6c <quorem+0xea>
 800bc8a:	3c01      	subs	r4, #1
 800bc8c:	e7eb      	b.n	800bc66 <quorem+0xe4>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e7ee      	b.n	800bc70 <quorem+0xee>
 800bc92:	0000      	movs	r0, r0
 800bc94:	0000      	movs	r0, r0
	...

0800bc98 <_dtoa_r>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	ed2d 8b04 	vpush	{d8-d9}
 800bca0:	69c5      	ldr	r5, [r0, #28]
 800bca2:	b093      	sub	sp, #76	; 0x4c
 800bca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bca8:	ec57 6b10 	vmov	r6, r7, d0
 800bcac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcb0:	9107      	str	r1, [sp, #28]
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	920a      	str	r2, [sp, #40]	; 0x28
 800bcb6:	930d      	str	r3, [sp, #52]	; 0x34
 800bcb8:	b975      	cbnz	r5, 800bcd8 <_dtoa_r+0x40>
 800bcba:	2010      	movs	r0, #16
 800bcbc:	f000 ff36 	bl	800cb2c <malloc>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	61e0      	str	r0, [r4, #28]
 800bcc4:	b920      	cbnz	r0, 800bcd0 <_dtoa_r+0x38>
 800bcc6:	4bae      	ldr	r3, [pc, #696]	; (800bf80 <_dtoa_r+0x2e8>)
 800bcc8:	21ef      	movs	r1, #239	; 0xef
 800bcca:	48ae      	ldr	r0, [pc, #696]	; (800bf84 <_dtoa_r+0x2ec>)
 800bccc:	f001 fcee 	bl	800d6ac <__assert_func>
 800bcd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcd4:	6005      	str	r5, [r0, #0]
 800bcd6:	60c5      	str	r5, [r0, #12]
 800bcd8:	69e3      	ldr	r3, [r4, #28]
 800bcda:	6819      	ldr	r1, [r3, #0]
 800bcdc:	b151      	cbz	r1, 800bcf4 <_dtoa_r+0x5c>
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	604a      	str	r2, [r1, #4]
 800bce2:	2301      	movs	r3, #1
 800bce4:	4093      	lsls	r3, r2
 800bce6:	608b      	str	r3, [r1, #8]
 800bce8:	4620      	mov	r0, r4
 800bcea:	f001 f8c1 	bl	800ce70 <_Bfree>
 800bcee:	69e3      	ldr	r3, [r4, #28]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	1e3b      	subs	r3, r7, #0
 800bcf6:	bfbb      	ittet	lt
 800bcf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcfc:	9303      	strlt	r3, [sp, #12]
 800bcfe:	2300      	movge	r3, #0
 800bd00:	2201      	movlt	r2, #1
 800bd02:	bfac      	ite	ge
 800bd04:	f8c8 3000 	strge.w	r3, [r8]
 800bd08:	f8c8 2000 	strlt.w	r2, [r8]
 800bd0c:	4b9e      	ldr	r3, [pc, #632]	; (800bf88 <_dtoa_r+0x2f0>)
 800bd0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd12:	ea33 0308 	bics.w	r3, r3, r8
 800bd16:	d11b      	bne.n	800bd50 <_dtoa_r+0xb8>
 800bd18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd24:	4333      	orrs	r3, r6
 800bd26:	f000 8593 	beq.w	800c850 <_dtoa_r+0xbb8>
 800bd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd2c:	b963      	cbnz	r3, 800bd48 <_dtoa_r+0xb0>
 800bd2e:	4b97      	ldr	r3, [pc, #604]	; (800bf8c <_dtoa_r+0x2f4>)
 800bd30:	e027      	b.n	800bd82 <_dtoa_r+0xea>
 800bd32:	4b97      	ldr	r3, [pc, #604]	; (800bf90 <_dtoa_r+0x2f8>)
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	3308      	adds	r3, #8
 800bd38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd3a:	6013      	str	r3, [r2, #0]
 800bd3c:	9800      	ldr	r0, [sp, #0]
 800bd3e:	b013      	add	sp, #76	; 0x4c
 800bd40:	ecbd 8b04 	vpop	{d8-d9}
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd48:	4b90      	ldr	r3, [pc, #576]	; (800bf8c <_dtoa_r+0x2f4>)
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	3303      	adds	r3, #3
 800bd4e:	e7f3      	b.n	800bd38 <_dtoa_r+0xa0>
 800bd50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	ec51 0b17 	vmov	r0, r1, d7
 800bd5a:	eeb0 8a47 	vmov.f32	s16, s14
 800bd5e:	eef0 8a67 	vmov.f32	s17, s15
 800bd62:	2300      	movs	r3, #0
 800bd64:	f7f4 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd68:	4681      	mov	r9, r0
 800bd6a:	b160      	cbz	r0, 800bd86 <_dtoa_r+0xee>
 800bd6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd6e:	2301      	movs	r3, #1
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 8568 	beq.w	800c84a <_dtoa_r+0xbb2>
 800bd7a:	4b86      	ldr	r3, [pc, #536]	; (800bf94 <_dtoa_r+0x2fc>)
 800bd7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd7e:	6013      	str	r3, [r2, #0]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	e7da      	b.n	800bd3c <_dtoa_r+0xa4>
 800bd86:	aa10      	add	r2, sp, #64	; 0x40
 800bd88:	a911      	add	r1, sp, #68	; 0x44
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	eeb0 0a48 	vmov.f32	s0, s16
 800bd90:	eef0 0a68 	vmov.f32	s1, s17
 800bd94:	f001 fb4e 	bl	800d434 <__d2b>
 800bd98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd9c:	4682      	mov	sl, r0
 800bd9e:	2d00      	cmp	r5, #0
 800bda0:	d07f      	beq.n	800bea2 <_dtoa_r+0x20a>
 800bda2:	ee18 3a90 	vmov	r3, s17
 800bda6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bdae:	ec51 0b18 	vmov	r0, r1, d8
 800bdb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4b75      	ldr	r3, [pc, #468]	; (800bf98 <_dtoa_r+0x300>)
 800bdc4:	f7f4 fa60 	bl	8000288 <__aeabi_dsub>
 800bdc8:	a367      	add	r3, pc, #412	; (adr r3, 800bf68 <_dtoa_r+0x2d0>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	a367      	add	r3, pc, #412	; (adr r3, 800bf70 <_dtoa_r+0x2d8>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa58 	bl	800028c <__adddf3>
 800bddc:	4606      	mov	r6, r0
 800bdde:	4628      	mov	r0, r5
 800bde0:	460f      	mov	r7, r1
 800bde2:	f7f4 fb9f 	bl	8000524 <__aeabi_i2d>
 800bde6:	a364      	add	r3, pc, #400	; (adr r3, 800bf78 <_dtoa_r+0x2e0>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f7f4 fc04 	bl	80005f8 <__aeabi_dmul>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	f7f4 fa48 	bl	800028c <__adddf3>
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	460f      	mov	r7, r1
 800be00:	f7f4 feaa 	bl	8000b58 <__aeabi_d2iz>
 800be04:	2200      	movs	r2, #0
 800be06:	4683      	mov	fp, r0
 800be08:	2300      	movs	r3, #0
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 fe65 	bl	8000adc <__aeabi_dcmplt>
 800be12:	b148      	cbz	r0, 800be28 <_dtoa_r+0x190>
 800be14:	4658      	mov	r0, fp
 800be16:	f7f4 fb85 	bl	8000524 <__aeabi_i2d>
 800be1a:	4632      	mov	r2, r6
 800be1c:	463b      	mov	r3, r7
 800be1e:	f7f4 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 800be22:	b908      	cbnz	r0, 800be28 <_dtoa_r+0x190>
 800be24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800be28:	f1bb 0f16 	cmp.w	fp, #22
 800be2c:	d857      	bhi.n	800bede <_dtoa_r+0x246>
 800be2e:	4b5b      	ldr	r3, [pc, #364]	; (800bf9c <_dtoa_r+0x304>)
 800be30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	ec51 0b18 	vmov	r0, r1, d8
 800be3c:	f7f4 fe4e 	bl	8000adc <__aeabi_dcmplt>
 800be40:	2800      	cmp	r0, #0
 800be42:	d04e      	beq.n	800bee2 <_dtoa_r+0x24a>
 800be44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800be48:	2300      	movs	r3, #0
 800be4a:	930c      	str	r3, [sp, #48]	; 0x30
 800be4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be4e:	1b5b      	subs	r3, r3, r5
 800be50:	1e5a      	subs	r2, r3, #1
 800be52:	bf45      	ittet	mi
 800be54:	f1c3 0301 	rsbmi	r3, r3, #1
 800be58:	9305      	strmi	r3, [sp, #20]
 800be5a:	2300      	movpl	r3, #0
 800be5c:	2300      	movmi	r3, #0
 800be5e:	9206      	str	r2, [sp, #24]
 800be60:	bf54      	ite	pl
 800be62:	9305      	strpl	r3, [sp, #20]
 800be64:	9306      	strmi	r3, [sp, #24]
 800be66:	f1bb 0f00 	cmp.w	fp, #0
 800be6a:	db3c      	blt.n	800bee6 <_dtoa_r+0x24e>
 800be6c:	9b06      	ldr	r3, [sp, #24]
 800be6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be72:	445b      	add	r3, fp
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	2300      	movs	r3, #0
 800be78:	9308      	str	r3, [sp, #32]
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d868      	bhi.n	800bf52 <_dtoa_r+0x2ba>
 800be80:	2b05      	cmp	r3, #5
 800be82:	bfc4      	itt	gt
 800be84:	3b04      	subgt	r3, #4
 800be86:	9307      	strgt	r3, [sp, #28]
 800be88:	9b07      	ldr	r3, [sp, #28]
 800be8a:	f1a3 0302 	sub.w	r3, r3, #2
 800be8e:	bfcc      	ite	gt
 800be90:	2500      	movgt	r5, #0
 800be92:	2501      	movle	r5, #1
 800be94:	2b03      	cmp	r3, #3
 800be96:	f200 8085 	bhi.w	800bfa4 <_dtoa_r+0x30c>
 800be9a:	e8df f003 	tbb	[pc, r3]
 800be9e:	3b2e      	.short	0x3b2e
 800bea0:	5839      	.short	0x5839
 800bea2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bea6:	441d      	add	r5, r3
 800bea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800beac:	2b20      	cmp	r3, #32
 800beae:	bfc1      	itttt	gt
 800beb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800beb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800beb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bebc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bec0:	bfd6      	itet	le
 800bec2:	f1c3 0320 	rsble	r3, r3, #32
 800bec6:	ea48 0003 	orrgt.w	r0, r8, r3
 800beca:	fa06 f003 	lslle.w	r0, r6, r3
 800bece:	f7f4 fb19 	bl	8000504 <__aeabi_ui2d>
 800bed2:	2201      	movs	r2, #1
 800bed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bed8:	3d01      	subs	r5, #1
 800beda:	920e      	str	r2, [sp, #56]	; 0x38
 800bedc:	e76f      	b.n	800bdbe <_dtoa_r+0x126>
 800bede:	2301      	movs	r3, #1
 800bee0:	e7b3      	b.n	800be4a <_dtoa_r+0x1b2>
 800bee2:	900c      	str	r0, [sp, #48]	; 0x30
 800bee4:	e7b2      	b.n	800be4c <_dtoa_r+0x1b4>
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	eba3 030b 	sub.w	r3, r3, fp
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	f1cb 0300 	rsb	r3, fp, #0
 800bef2:	9308      	str	r3, [sp, #32]
 800bef4:	2300      	movs	r3, #0
 800bef6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bef8:	e7bf      	b.n	800be7a <_dtoa_r+0x1e2>
 800befa:	2300      	movs	r3, #0
 800befc:	9309      	str	r3, [sp, #36]	; 0x24
 800befe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	dc52      	bgt.n	800bfaa <_dtoa_r+0x312>
 800bf04:	2301      	movs	r3, #1
 800bf06:	9301      	str	r3, [sp, #4]
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	920a      	str	r2, [sp, #40]	; 0x28
 800bf0e:	e00b      	b.n	800bf28 <_dtoa_r+0x290>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e7f3      	b.n	800befc <_dtoa_r+0x264>
 800bf14:	2300      	movs	r3, #0
 800bf16:	9309      	str	r3, [sp, #36]	; 0x24
 800bf18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf1a:	445b      	add	r3, fp
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	bfb8      	it	lt
 800bf26:	2301      	movlt	r3, #1
 800bf28:	69e0      	ldr	r0, [r4, #28]
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	2204      	movs	r2, #4
 800bf2e:	f102 0614 	add.w	r6, r2, #20
 800bf32:	429e      	cmp	r6, r3
 800bf34:	d93d      	bls.n	800bfb2 <_dtoa_r+0x31a>
 800bf36:	6041      	str	r1, [r0, #4]
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 ff59 	bl	800cdf0 <_Balloc>
 800bf3e:	9000      	str	r0, [sp, #0]
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d139      	bne.n	800bfb8 <_dtoa_r+0x320>
 800bf44:	4b16      	ldr	r3, [pc, #88]	; (800bfa0 <_dtoa_r+0x308>)
 800bf46:	4602      	mov	r2, r0
 800bf48:	f240 11af 	movw	r1, #431	; 0x1af
 800bf4c:	e6bd      	b.n	800bcca <_dtoa_r+0x32>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e7e1      	b.n	800bf16 <_dtoa_r+0x27e>
 800bf52:	2501      	movs	r5, #1
 800bf54:	2300      	movs	r3, #0
 800bf56:	9307      	str	r3, [sp, #28]
 800bf58:	9509      	str	r5, [sp, #36]	; 0x24
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	2200      	movs	r2, #0
 800bf64:	2312      	movs	r3, #18
 800bf66:	e7d1      	b.n	800bf0c <_dtoa_r+0x274>
 800bf68:	636f4361 	.word	0x636f4361
 800bf6c:	3fd287a7 	.word	0x3fd287a7
 800bf70:	8b60c8b3 	.word	0x8b60c8b3
 800bf74:	3fc68a28 	.word	0x3fc68a28
 800bf78:	509f79fb 	.word	0x509f79fb
 800bf7c:	3fd34413 	.word	0x3fd34413
 800bf80:	0800e235 	.word	0x0800e235
 800bf84:	0800e24c 	.word	0x0800e24c
 800bf88:	7ff00000 	.word	0x7ff00000
 800bf8c:	0800e231 	.word	0x0800e231
 800bf90:	0800e228 	.word	0x0800e228
 800bf94:	0800e205 	.word	0x0800e205
 800bf98:	3ff80000 	.word	0x3ff80000
 800bf9c:	0800e348 	.word	0x0800e348
 800bfa0:	0800e2a4 	.word	0x0800e2a4
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa8:	e7d7      	b.n	800bf5a <_dtoa_r+0x2c2>
 800bfaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	9304      	str	r3, [sp, #16]
 800bfb0:	e7ba      	b.n	800bf28 <_dtoa_r+0x290>
 800bfb2:	3101      	adds	r1, #1
 800bfb4:	0052      	lsls	r2, r2, #1
 800bfb6:	e7ba      	b.n	800bf2e <_dtoa_r+0x296>
 800bfb8:	69e3      	ldr	r3, [r4, #28]
 800bfba:	9a00      	ldr	r2, [sp, #0]
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	9b04      	ldr	r3, [sp, #16]
 800bfc0:	2b0e      	cmp	r3, #14
 800bfc2:	f200 80a8 	bhi.w	800c116 <_dtoa_r+0x47e>
 800bfc6:	2d00      	cmp	r5, #0
 800bfc8:	f000 80a5 	beq.w	800c116 <_dtoa_r+0x47e>
 800bfcc:	f1bb 0f00 	cmp.w	fp, #0
 800bfd0:	dd38      	ble.n	800c044 <_dtoa_r+0x3ac>
 800bfd2:	4bc0      	ldr	r3, [pc, #768]	; (800c2d4 <_dtoa_r+0x63c>)
 800bfd4:	f00b 020f 	and.w	r2, fp, #15
 800bfd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bfe8:	d019      	beq.n	800c01e <_dtoa_r+0x386>
 800bfea:	4bbb      	ldr	r3, [pc, #748]	; (800c2d8 <_dtoa_r+0x640>)
 800bfec:	ec51 0b18 	vmov	r0, r1, d8
 800bff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bff4:	f7f4 fc2a 	bl	800084c <__aeabi_ddiv>
 800bff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bffc:	f008 080f 	and.w	r8, r8, #15
 800c000:	2503      	movs	r5, #3
 800c002:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2d8 <_dtoa_r+0x640>
 800c006:	f1b8 0f00 	cmp.w	r8, #0
 800c00a:	d10a      	bne.n	800c022 <_dtoa_r+0x38a>
 800c00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c010:	4632      	mov	r2, r6
 800c012:	463b      	mov	r3, r7
 800c014:	f7f4 fc1a 	bl	800084c <__aeabi_ddiv>
 800c018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c01c:	e02b      	b.n	800c076 <_dtoa_r+0x3de>
 800c01e:	2502      	movs	r5, #2
 800c020:	e7ef      	b.n	800c002 <_dtoa_r+0x36a>
 800c022:	f018 0f01 	tst.w	r8, #1
 800c026:	d008      	beq.n	800c03a <_dtoa_r+0x3a2>
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c030:	f7f4 fae2 	bl	80005f8 <__aeabi_dmul>
 800c034:	3501      	adds	r5, #1
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c03e:	f109 0908 	add.w	r9, r9, #8
 800c042:	e7e0      	b.n	800c006 <_dtoa_r+0x36e>
 800c044:	f000 809f 	beq.w	800c186 <_dtoa_r+0x4ee>
 800c048:	f1cb 0600 	rsb	r6, fp, #0
 800c04c:	4ba1      	ldr	r3, [pc, #644]	; (800c2d4 <_dtoa_r+0x63c>)
 800c04e:	4fa2      	ldr	r7, [pc, #648]	; (800c2d8 <_dtoa_r+0x640>)
 800c050:	f006 020f 	and.w	r2, r6, #15
 800c054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	ec51 0b18 	vmov	r0, r1, d8
 800c060:	f7f4 faca 	bl	80005f8 <__aeabi_dmul>
 800c064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c068:	1136      	asrs	r6, r6, #4
 800c06a:	2300      	movs	r3, #0
 800c06c:	2502      	movs	r5, #2
 800c06e:	2e00      	cmp	r6, #0
 800c070:	d17e      	bne.n	800c170 <_dtoa_r+0x4d8>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1d0      	bne.n	800c018 <_dtoa_r+0x380>
 800c076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c078:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 8084 	beq.w	800c18a <_dtoa_r+0x4f2>
 800c082:	4b96      	ldr	r3, [pc, #600]	; (800c2dc <_dtoa_r+0x644>)
 800c084:	2200      	movs	r2, #0
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f7f4 fd27 	bl	8000adc <__aeabi_dcmplt>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d07b      	beq.n	800c18a <_dtoa_r+0x4f2>
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d078      	beq.n	800c18a <_dtoa_r+0x4f2>
 800c098:	9b01      	ldr	r3, [sp, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	dd39      	ble.n	800c112 <_dtoa_r+0x47a>
 800c09e:	4b90      	ldr	r3, [pc, #576]	; (800c2e0 <_dtoa_r+0x648>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	4640      	mov	r0, r8
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	f7f4 faa7 	bl	80005f8 <__aeabi_dmul>
 800c0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ae:	9e01      	ldr	r6, [sp, #4]
 800c0b0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c0b4:	3501      	adds	r5, #1
 800c0b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f7f4 fa32 	bl	8000524 <__aeabi_i2d>
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	f7f4 fa98 	bl	80005f8 <__aeabi_dmul>
 800c0c8:	4b86      	ldr	r3, [pc, #536]	; (800c2e4 <_dtoa_r+0x64c>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f7f4 f8de 	bl	800028c <__adddf3>
 800c0d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d8:	9303      	str	r3, [sp, #12]
 800c0da:	2e00      	cmp	r6, #0
 800c0dc:	d158      	bne.n	800c190 <_dtoa_r+0x4f8>
 800c0de:	4b82      	ldr	r3, [pc, #520]	; (800c2e8 <_dtoa_r+0x650>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	f7f4 f8cf 	bl	8000288 <__aeabi_dsub>
 800c0ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0ee:	4680      	mov	r8, r0
 800c0f0:	4689      	mov	r9, r1
 800c0f2:	f7f4 fd11 	bl	8000b18 <__aeabi_dcmpgt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f040 8296 	bne.w	800c628 <_dtoa_r+0x990>
 800c0fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c100:	4640      	mov	r0, r8
 800c102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c106:	4649      	mov	r1, r9
 800c108:	f7f4 fce8 	bl	8000adc <__aeabi_dcmplt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	f040 8289 	bne.w	800c624 <_dtoa_r+0x98c>
 800c112:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f2c0 814e 	blt.w	800c3ba <_dtoa_r+0x722>
 800c11e:	f1bb 0f0e 	cmp.w	fp, #14
 800c122:	f300 814a 	bgt.w	800c3ba <_dtoa_r+0x722>
 800c126:	4b6b      	ldr	r3, [pc, #428]	; (800c2d4 <_dtoa_r+0x63c>)
 800c128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c132:	2b00      	cmp	r3, #0
 800c134:	f280 80dc 	bge.w	800c2f0 <_dtoa_r+0x658>
 800c138:	9b04      	ldr	r3, [sp, #16]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f300 80d8 	bgt.w	800c2f0 <_dtoa_r+0x658>
 800c140:	f040 826f 	bne.w	800c622 <_dtoa_r+0x98a>
 800c144:	4b68      	ldr	r3, [pc, #416]	; (800c2e8 <_dtoa_r+0x650>)
 800c146:	2200      	movs	r2, #0
 800c148:	4640      	mov	r0, r8
 800c14a:	4649      	mov	r1, r9
 800c14c:	f7f4 fa54 	bl	80005f8 <__aeabi_dmul>
 800c150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c154:	f7f4 fcd6 	bl	8000b04 <__aeabi_dcmpge>
 800c158:	9e04      	ldr	r6, [sp, #16]
 800c15a:	4637      	mov	r7, r6
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f040 8245 	bne.w	800c5ec <_dtoa_r+0x954>
 800c162:	9d00      	ldr	r5, [sp, #0]
 800c164:	2331      	movs	r3, #49	; 0x31
 800c166:	f805 3b01 	strb.w	r3, [r5], #1
 800c16a:	f10b 0b01 	add.w	fp, fp, #1
 800c16e:	e241      	b.n	800c5f4 <_dtoa_r+0x95c>
 800c170:	07f2      	lsls	r2, r6, #31
 800c172:	d505      	bpl.n	800c180 <_dtoa_r+0x4e8>
 800c174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c178:	f7f4 fa3e 	bl	80005f8 <__aeabi_dmul>
 800c17c:	3501      	adds	r5, #1
 800c17e:	2301      	movs	r3, #1
 800c180:	1076      	asrs	r6, r6, #1
 800c182:	3708      	adds	r7, #8
 800c184:	e773      	b.n	800c06e <_dtoa_r+0x3d6>
 800c186:	2502      	movs	r5, #2
 800c188:	e775      	b.n	800c076 <_dtoa_r+0x3de>
 800c18a:	9e04      	ldr	r6, [sp, #16]
 800c18c:	465f      	mov	r7, fp
 800c18e:	e792      	b.n	800c0b6 <_dtoa_r+0x41e>
 800c190:	9900      	ldr	r1, [sp, #0]
 800c192:	4b50      	ldr	r3, [pc, #320]	; (800c2d4 <_dtoa_r+0x63c>)
 800c194:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c198:	4431      	add	r1, r6
 800c19a:	9102      	str	r1, [sp, #8]
 800c19c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c19e:	eeb0 9a47 	vmov.f32	s18, s14
 800c1a2:	eef0 9a67 	vmov.f32	s19, s15
 800c1a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1ae:	2900      	cmp	r1, #0
 800c1b0:	d044      	beq.n	800c23c <_dtoa_r+0x5a4>
 800c1b2:	494e      	ldr	r1, [pc, #312]	; (800c2ec <_dtoa_r+0x654>)
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	f7f4 fb49 	bl	800084c <__aeabi_ddiv>
 800c1ba:	ec53 2b19 	vmov	r2, r3, d9
 800c1be:	f7f4 f863 	bl	8000288 <__aeabi_dsub>
 800c1c2:	9d00      	ldr	r5, [sp, #0]
 800c1c4:	ec41 0b19 	vmov	d9, r0, r1
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	f7f4 fcc4 	bl	8000b58 <__aeabi_d2iz>
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	f7f4 f9a7 	bl	8000524 <__aeabi_i2d>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	4640      	mov	r0, r8
 800c1dc:	4649      	mov	r1, r9
 800c1de:	f7f4 f853 	bl	8000288 <__aeabi_dsub>
 800c1e2:	3630      	adds	r6, #48	; 0x30
 800c1e4:	f805 6b01 	strb.w	r6, [r5], #1
 800c1e8:	ec53 2b19 	vmov	r2, r3, d9
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	f7f4 fc74 	bl	8000adc <__aeabi_dcmplt>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d164      	bne.n	800c2c2 <_dtoa_r+0x62a>
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	464b      	mov	r3, r9
 800c1fc:	4937      	ldr	r1, [pc, #220]	; (800c2dc <_dtoa_r+0x644>)
 800c1fe:	2000      	movs	r0, #0
 800c200:	f7f4 f842 	bl	8000288 <__aeabi_dsub>
 800c204:	ec53 2b19 	vmov	r2, r3, d9
 800c208:	f7f4 fc68 	bl	8000adc <__aeabi_dcmplt>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f040 80b6 	bne.w	800c37e <_dtoa_r+0x6e6>
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	429d      	cmp	r5, r3
 800c216:	f43f af7c 	beq.w	800c112 <_dtoa_r+0x47a>
 800c21a:	4b31      	ldr	r3, [pc, #196]	; (800c2e0 <_dtoa_r+0x648>)
 800c21c:	ec51 0b19 	vmov	r0, r1, d9
 800c220:	2200      	movs	r2, #0
 800c222:	f7f4 f9e9 	bl	80005f8 <__aeabi_dmul>
 800c226:	4b2e      	ldr	r3, [pc, #184]	; (800c2e0 <_dtoa_r+0x648>)
 800c228:	ec41 0b19 	vmov	d9, r0, r1
 800c22c:	2200      	movs	r2, #0
 800c22e:	4640      	mov	r0, r8
 800c230:	4649      	mov	r1, r9
 800c232:	f7f4 f9e1 	bl	80005f8 <__aeabi_dmul>
 800c236:	4680      	mov	r8, r0
 800c238:	4689      	mov	r9, r1
 800c23a:	e7c5      	b.n	800c1c8 <_dtoa_r+0x530>
 800c23c:	ec51 0b17 	vmov	r0, r1, d7
 800c240:	f7f4 f9da 	bl	80005f8 <__aeabi_dmul>
 800c244:	9b02      	ldr	r3, [sp, #8]
 800c246:	9d00      	ldr	r5, [sp, #0]
 800c248:	930f      	str	r3, [sp, #60]	; 0x3c
 800c24a:	ec41 0b19 	vmov	d9, r0, r1
 800c24e:	4649      	mov	r1, r9
 800c250:	4640      	mov	r0, r8
 800c252:	f7f4 fc81 	bl	8000b58 <__aeabi_d2iz>
 800c256:	4606      	mov	r6, r0
 800c258:	f7f4 f964 	bl	8000524 <__aeabi_i2d>
 800c25c:	3630      	adds	r6, #48	; 0x30
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 f80f 	bl	8000288 <__aeabi_dsub>
 800c26a:	f805 6b01 	strb.w	r6, [r5], #1
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	429d      	cmp	r5, r3
 800c272:	4680      	mov	r8, r0
 800c274:	4689      	mov	r9, r1
 800c276:	f04f 0200 	mov.w	r2, #0
 800c27a:	d124      	bne.n	800c2c6 <_dtoa_r+0x62e>
 800c27c:	4b1b      	ldr	r3, [pc, #108]	; (800c2ec <_dtoa_r+0x654>)
 800c27e:	ec51 0b19 	vmov	r0, r1, d9
 800c282:	f7f4 f803 	bl	800028c <__adddf3>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4640      	mov	r0, r8
 800c28c:	4649      	mov	r1, r9
 800c28e:	f7f4 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 800c292:	2800      	cmp	r0, #0
 800c294:	d173      	bne.n	800c37e <_dtoa_r+0x6e6>
 800c296:	ec53 2b19 	vmov	r2, r3, d9
 800c29a:	4914      	ldr	r1, [pc, #80]	; (800c2ec <_dtoa_r+0x654>)
 800c29c:	2000      	movs	r0, #0
 800c29e:	f7f3 fff3 	bl	8000288 <__aeabi_dsub>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	f7f4 fc17 	bl	8000adc <__aeabi_dcmplt>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f43f af2f 	beq.w	800c112 <_dtoa_r+0x47a>
 800c2b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c2b6:	1e6b      	subs	r3, r5, #1
 800c2b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2be:	2b30      	cmp	r3, #48	; 0x30
 800c2c0:	d0f8      	beq.n	800c2b4 <_dtoa_r+0x61c>
 800c2c2:	46bb      	mov	fp, r7
 800c2c4:	e04a      	b.n	800c35c <_dtoa_r+0x6c4>
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <_dtoa_r+0x648>)
 800c2c8:	f7f4 f996 	bl	80005f8 <__aeabi_dmul>
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	4689      	mov	r9, r1
 800c2d0:	e7bd      	b.n	800c24e <_dtoa_r+0x5b6>
 800c2d2:	bf00      	nop
 800c2d4:	0800e348 	.word	0x0800e348
 800c2d8:	0800e320 	.word	0x0800e320
 800c2dc:	3ff00000 	.word	0x3ff00000
 800c2e0:	40240000 	.word	0x40240000
 800c2e4:	401c0000 	.word	0x401c0000
 800c2e8:	40140000 	.word	0x40140000
 800c2ec:	3fe00000 	.word	0x3fe00000
 800c2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2f4:	9d00      	ldr	r5, [sp, #0]
 800c2f6:	4642      	mov	r2, r8
 800c2f8:	464b      	mov	r3, r9
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	f7f4 faa5 	bl	800084c <__aeabi_ddiv>
 800c302:	f7f4 fc29 	bl	8000b58 <__aeabi_d2iz>
 800c306:	9001      	str	r0, [sp, #4]
 800c308:	f7f4 f90c 	bl	8000524 <__aeabi_i2d>
 800c30c:	4642      	mov	r2, r8
 800c30e:	464b      	mov	r3, r9
 800c310:	f7f4 f972 	bl	80005f8 <__aeabi_dmul>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f3 ffb4 	bl	8000288 <__aeabi_dsub>
 800c320:	9e01      	ldr	r6, [sp, #4]
 800c322:	9f04      	ldr	r7, [sp, #16]
 800c324:	3630      	adds	r6, #48	; 0x30
 800c326:	f805 6b01 	strb.w	r6, [r5], #1
 800c32a:	9e00      	ldr	r6, [sp, #0]
 800c32c:	1bae      	subs	r6, r5, r6
 800c32e:	42b7      	cmp	r7, r6
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	d134      	bne.n	800c3a0 <_dtoa_r+0x708>
 800c336:	f7f3 ffa9 	bl	800028c <__adddf3>
 800c33a:	4642      	mov	r2, r8
 800c33c:	464b      	mov	r3, r9
 800c33e:	4606      	mov	r6, r0
 800c340:	460f      	mov	r7, r1
 800c342:	f7f4 fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 800c346:	b9c8      	cbnz	r0, 800c37c <_dtoa_r+0x6e4>
 800c348:	4642      	mov	r2, r8
 800c34a:	464b      	mov	r3, r9
 800c34c:	4630      	mov	r0, r6
 800c34e:	4639      	mov	r1, r7
 800c350:	f7f4 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 800c354:	b110      	cbz	r0, 800c35c <_dtoa_r+0x6c4>
 800c356:	9b01      	ldr	r3, [sp, #4]
 800c358:	07db      	lsls	r3, r3, #31
 800c35a:	d40f      	bmi.n	800c37c <_dtoa_r+0x6e4>
 800c35c:	4651      	mov	r1, sl
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 fd86 	bl	800ce70 <_Bfree>
 800c364:	2300      	movs	r3, #0
 800c366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c368:	702b      	strb	r3, [r5, #0]
 800c36a:	f10b 0301 	add.w	r3, fp, #1
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c372:	2b00      	cmp	r3, #0
 800c374:	f43f ace2 	beq.w	800bd3c <_dtoa_r+0xa4>
 800c378:	601d      	str	r5, [r3, #0]
 800c37a:	e4df      	b.n	800bd3c <_dtoa_r+0xa4>
 800c37c:	465f      	mov	r7, fp
 800c37e:	462b      	mov	r3, r5
 800c380:	461d      	mov	r5, r3
 800c382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c386:	2a39      	cmp	r2, #57	; 0x39
 800c388:	d106      	bne.n	800c398 <_dtoa_r+0x700>
 800c38a:	9a00      	ldr	r2, [sp, #0]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d1f7      	bne.n	800c380 <_dtoa_r+0x6e8>
 800c390:	9900      	ldr	r1, [sp, #0]
 800c392:	2230      	movs	r2, #48	; 0x30
 800c394:	3701      	adds	r7, #1
 800c396:	700a      	strb	r2, [r1, #0]
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	3201      	adds	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	e790      	b.n	800c2c2 <_dtoa_r+0x62a>
 800c3a0:	4ba3      	ldr	r3, [pc, #652]	; (800c630 <_dtoa_r+0x998>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f7f4 f928 	bl	80005f8 <__aeabi_dmul>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	460f      	mov	r7, r1
 800c3b0:	f7f4 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d09e      	beq.n	800c2f6 <_dtoa_r+0x65e>
 800c3b8:	e7d0      	b.n	800c35c <_dtoa_r+0x6c4>
 800c3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	f000 80ca 	beq.w	800c556 <_dtoa_r+0x8be>
 800c3c2:	9a07      	ldr	r2, [sp, #28]
 800c3c4:	2a01      	cmp	r2, #1
 800c3c6:	f300 80ad 	bgt.w	800c524 <_dtoa_r+0x88c>
 800c3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3cc:	2a00      	cmp	r2, #0
 800c3ce:	f000 80a5 	beq.w	800c51c <_dtoa_r+0x884>
 800c3d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3d6:	9e08      	ldr	r6, [sp, #32]
 800c3d8:	9d05      	ldr	r5, [sp, #20]
 800c3da:	9a05      	ldr	r2, [sp, #20]
 800c3dc:	441a      	add	r2, r3
 800c3de:	9205      	str	r2, [sp, #20]
 800c3e0:	9a06      	ldr	r2, [sp, #24]
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	441a      	add	r2, r3
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	9206      	str	r2, [sp, #24]
 800c3ea:	f000 fdf7 	bl	800cfdc <__i2b>
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	b165      	cbz	r5, 800c40c <_dtoa_r+0x774>
 800c3f2:	9b06      	ldr	r3, [sp, #24]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dd09      	ble.n	800c40c <_dtoa_r+0x774>
 800c3f8:	42ab      	cmp	r3, r5
 800c3fa:	9a05      	ldr	r2, [sp, #20]
 800c3fc:	bfa8      	it	ge
 800c3fe:	462b      	movge	r3, r5
 800c400:	1ad2      	subs	r2, r2, r3
 800c402:	9205      	str	r2, [sp, #20]
 800c404:	9a06      	ldr	r2, [sp, #24]
 800c406:	1aed      	subs	r5, r5, r3
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	9306      	str	r3, [sp, #24]
 800c40c:	9b08      	ldr	r3, [sp, #32]
 800c40e:	b1f3      	cbz	r3, 800c44e <_dtoa_r+0x7b6>
 800c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c412:	2b00      	cmp	r3, #0
 800c414:	f000 80a3 	beq.w	800c55e <_dtoa_r+0x8c6>
 800c418:	2e00      	cmp	r6, #0
 800c41a:	dd10      	ble.n	800c43e <_dtoa_r+0x7a6>
 800c41c:	4639      	mov	r1, r7
 800c41e:	4632      	mov	r2, r6
 800c420:	4620      	mov	r0, r4
 800c422:	f000 fe9b 	bl	800d15c <__pow5mult>
 800c426:	4652      	mov	r2, sl
 800c428:	4601      	mov	r1, r0
 800c42a:	4607      	mov	r7, r0
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 fdeb 	bl	800d008 <__multiply>
 800c432:	4651      	mov	r1, sl
 800c434:	4680      	mov	r8, r0
 800c436:	4620      	mov	r0, r4
 800c438:	f000 fd1a 	bl	800ce70 <_Bfree>
 800c43c:	46c2      	mov	sl, r8
 800c43e:	9b08      	ldr	r3, [sp, #32]
 800c440:	1b9a      	subs	r2, r3, r6
 800c442:	d004      	beq.n	800c44e <_dtoa_r+0x7b6>
 800c444:	4651      	mov	r1, sl
 800c446:	4620      	mov	r0, r4
 800c448:	f000 fe88 	bl	800d15c <__pow5mult>
 800c44c:	4682      	mov	sl, r0
 800c44e:	2101      	movs	r1, #1
 800c450:	4620      	mov	r0, r4
 800c452:	f000 fdc3 	bl	800cfdc <__i2b>
 800c456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	4606      	mov	r6, r0
 800c45c:	f340 8081 	ble.w	800c562 <_dtoa_r+0x8ca>
 800c460:	461a      	mov	r2, r3
 800c462:	4601      	mov	r1, r0
 800c464:	4620      	mov	r0, r4
 800c466:	f000 fe79 	bl	800d15c <__pow5mult>
 800c46a:	9b07      	ldr	r3, [sp, #28]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	4606      	mov	r6, r0
 800c470:	dd7a      	ble.n	800c568 <_dtoa_r+0x8d0>
 800c472:	f04f 0800 	mov.w	r8, #0
 800c476:	6933      	ldr	r3, [r6, #16]
 800c478:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c47c:	6918      	ldr	r0, [r3, #16]
 800c47e:	f000 fd5f 	bl	800cf40 <__hi0bits>
 800c482:	f1c0 0020 	rsb	r0, r0, #32
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	4418      	add	r0, r3
 800c48a:	f010 001f 	ands.w	r0, r0, #31
 800c48e:	f000 8094 	beq.w	800c5ba <_dtoa_r+0x922>
 800c492:	f1c0 0320 	rsb	r3, r0, #32
 800c496:	2b04      	cmp	r3, #4
 800c498:	f340 8085 	ble.w	800c5a6 <_dtoa_r+0x90e>
 800c49c:	9b05      	ldr	r3, [sp, #20]
 800c49e:	f1c0 001c 	rsb	r0, r0, #28
 800c4a2:	4403      	add	r3, r0
 800c4a4:	9305      	str	r3, [sp, #20]
 800c4a6:	9b06      	ldr	r3, [sp, #24]
 800c4a8:	4403      	add	r3, r0
 800c4aa:	4405      	add	r5, r0
 800c4ac:	9306      	str	r3, [sp, #24]
 800c4ae:	9b05      	ldr	r3, [sp, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	dd05      	ble.n	800c4c0 <_dtoa_r+0x828>
 800c4b4:	4651      	mov	r1, sl
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fea9 	bl	800d210 <__lshift>
 800c4be:	4682      	mov	sl, r0
 800c4c0:	9b06      	ldr	r3, [sp, #24]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dd05      	ble.n	800c4d2 <_dtoa_r+0x83a>
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fea0 	bl	800d210 <__lshift>
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d072      	beq.n	800c5be <_dtoa_r+0x926>
 800c4d8:	4631      	mov	r1, r6
 800c4da:	4650      	mov	r0, sl
 800c4dc:	f000 ff04 	bl	800d2e8 <__mcmp>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	da6c      	bge.n	800c5be <_dtoa_r+0x926>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4651      	mov	r1, sl
 800c4e8:	220a      	movs	r2, #10
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fce2 	bl	800ceb4 <__multadd>
 800c4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c4f6:	4682      	mov	sl, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 81b0 	beq.w	800c85e <_dtoa_r+0xbc6>
 800c4fe:	2300      	movs	r3, #0
 800c500:	4639      	mov	r1, r7
 800c502:	220a      	movs	r2, #10
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fcd5 	bl	800ceb4 <__multadd>
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	4607      	mov	r7, r0
 800c510:	f300 8096 	bgt.w	800c640 <_dtoa_r+0x9a8>
 800c514:	9b07      	ldr	r3, [sp, #28]
 800c516:	2b02      	cmp	r3, #2
 800c518:	dc59      	bgt.n	800c5ce <_dtoa_r+0x936>
 800c51a:	e091      	b.n	800c640 <_dtoa_r+0x9a8>
 800c51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c51e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c522:	e758      	b.n	800c3d6 <_dtoa_r+0x73e>
 800c524:	9b04      	ldr	r3, [sp, #16]
 800c526:	1e5e      	subs	r6, r3, #1
 800c528:	9b08      	ldr	r3, [sp, #32]
 800c52a:	42b3      	cmp	r3, r6
 800c52c:	bfbf      	itttt	lt
 800c52e:	9b08      	ldrlt	r3, [sp, #32]
 800c530:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c532:	9608      	strlt	r6, [sp, #32]
 800c534:	1af3      	sublt	r3, r6, r3
 800c536:	bfb4      	ite	lt
 800c538:	18d2      	addlt	r2, r2, r3
 800c53a:	1b9e      	subge	r6, r3, r6
 800c53c:	9b04      	ldr	r3, [sp, #16]
 800c53e:	bfbc      	itt	lt
 800c540:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c542:	2600      	movlt	r6, #0
 800c544:	2b00      	cmp	r3, #0
 800c546:	bfb7      	itett	lt
 800c548:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c54c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c550:	1a9d      	sublt	r5, r3, r2
 800c552:	2300      	movlt	r3, #0
 800c554:	e741      	b.n	800c3da <_dtoa_r+0x742>
 800c556:	9e08      	ldr	r6, [sp, #32]
 800c558:	9d05      	ldr	r5, [sp, #20]
 800c55a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c55c:	e748      	b.n	800c3f0 <_dtoa_r+0x758>
 800c55e:	9a08      	ldr	r2, [sp, #32]
 800c560:	e770      	b.n	800c444 <_dtoa_r+0x7ac>
 800c562:	9b07      	ldr	r3, [sp, #28]
 800c564:	2b01      	cmp	r3, #1
 800c566:	dc19      	bgt.n	800c59c <_dtoa_r+0x904>
 800c568:	9b02      	ldr	r3, [sp, #8]
 800c56a:	b9bb      	cbnz	r3, 800c59c <_dtoa_r+0x904>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c572:	b99b      	cbnz	r3, 800c59c <_dtoa_r+0x904>
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c57a:	0d1b      	lsrs	r3, r3, #20
 800c57c:	051b      	lsls	r3, r3, #20
 800c57e:	b183      	cbz	r3, 800c5a2 <_dtoa_r+0x90a>
 800c580:	9b05      	ldr	r3, [sp, #20]
 800c582:	3301      	adds	r3, #1
 800c584:	9305      	str	r3, [sp, #20]
 800c586:	9b06      	ldr	r3, [sp, #24]
 800c588:	3301      	adds	r3, #1
 800c58a:	9306      	str	r3, [sp, #24]
 800c58c:	f04f 0801 	mov.w	r8, #1
 800c590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c592:	2b00      	cmp	r3, #0
 800c594:	f47f af6f 	bne.w	800c476 <_dtoa_r+0x7de>
 800c598:	2001      	movs	r0, #1
 800c59a:	e774      	b.n	800c486 <_dtoa_r+0x7ee>
 800c59c:	f04f 0800 	mov.w	r8, #0
 800c5a0:	e7f6      	b.n	800c590 <_dtoa_r+0x8f8>
 800c5a2:	4698      	mov	r8, r3
 800c5a4:	e7f4      	b.n	800c590 <_dtoa_r+0x8f8>
 800c5a6:	d082      	beq.n	800c4ae <_dtoa_r+0x816>
 800c5a8:	9a05      	ldr	r2, [sp, #20]
 800c5aa:	331c      	adds	r3, #28
 800c5ac:	441a      	add	r2, r3
 800c5ae:	9205      	str	r2, [sp, #20]
 800c5b0:	9a06      	ldr	r2, [sp, #24]
 800c5b2:	441a      	add	r2, r3
 800c5b4:	441d      	add	r5, r3
 800c5b6:	9206      	str	r2, [sp, #24]
 800c5b8:	e779      	b.n	800c4ae <_dtoa_r+0x816>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	e7f4      	b.n	800c5a8 <_dtoa_r+0x910>
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	dc37      	bgt.n	800c634 <_dtoa_r+0x99c>
 800c5c4:	9b07      	ldr	r3, [sp, #28]
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	dd34      	ble.n	800c634 <_dtoa_r+0x99c>
 800c5ca:	9b04      	ldr	r3, [sp, #16]
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	9b01      	ldr	r3, [sp, #4]
 800c5d0:	b963      	cbnz	r3, 800c5ec <_dtoa_r+0x954>
 800c5d2:	4631      	mov	r1, r6
 800c5d4:	2205      	movs	r2, #5
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 fc6c 	bl	800ceb4 <__multadd>
 800c5dc:	4601      	mov	r1, r0
 800c5de:	4606      	mov	r6, r0
 800c5e0:	4650      	mov	r0, sl
 800c5e2:	f000 fe81 	bl	800d2e8 <__mcmp>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	f73f adbb 	bgt.w	800c162 <_dtoa_r+0x4ca>
 800c5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ee:	9d00      	ldr	r5, [sp, #0]
 800c5f0:	ea6f 0b03 	mvn.w	fp, r3
 800c5f4:	f04f 0800 	mov.w	r8, #0
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 fc38 	bl	800ce70 <_Bfree>
 800c600:	2f00      	cmp	r7, #0
 800c602:	f43f aeab 	beq.w	800c35c <_dtoa_r+0x6c4>
 800c606:	f1b8 0f00 	cmp.w	r8, #0
 800c60a:	d005      	beq.n	800c618 <_dtoa_r+0x980>
 800c60c:	45b8      	cmp	r8, r7
 800c60e:	d003      	beq.n	800c618 <_dtoa_r+0x980>
 800c610:	4641      	mov	r1, r8
 800c612:	4620      	mov	r0, r4
 800c614:	f000 fc2c 	bl	800ce70 <_Bfree>
 800c618:	4639      	mov	r1, r7
 800c61a:	4620      	mov	r0, r4
 800c61c:	f000 fc28 	bl	800ce70 <_Bfree>
 800c620:	e69c      	b.n	800c35c <_dtoa_r+0x6c4>
 800c622:	2600      	movs	r6, #0
 800c624:	4637      	mov	r7, r6
 800c626:	e7e1      	b.n	800c5ec <_dtoa_r+0x954>
 800c628:	46bb      	mov	fp, r7
 800c62a:	4637      	mov	r7, r6
 800c62c:	e599      	b.n	800c162 <_dtoa_r+0x4ca>
 800c62e:	bf00      	nop
 800c630:	40240000 	.word	0x40240000
 800c634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 80c8 	beq.w	800c7cc <_dtoa_r+0xb34>
 800c63c:	9b04      	ldr	r3, [sp, #16]
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	2d00      	cmp	r5, #0
 800c642:	dd05      	ble.n	800c650 <_dtoa_r+0x9b8>
 800c644:	4639      	mov	r1, r7
 800c646:	462a      	mov	r2, r5
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 fde1 	bl	800d210 <__lshift>
 800c64e:	4607      	mov	r7, r0
 800c650:	f1b8 0f00 	cmp.w	r8, #0
 800c654:	d05b      	beq.n	800c70e <_dtoa_r+0xa76>
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 fbc9 	bl	800cdf0 <_Balloc>
 800c65e:	4605      	mov	r5, r0
 800c660:	b928      	cbnz	r0, 800c66e <_dtoa_r+0x9d6>
 800c662:	4b83      	ldr	r3, [pc, #524]	; (800c870 <_dtoa_r+0xbd8>)
 800c664:	4602      	mov	r2, r0
 800c666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c66a:	f7ff bb2e 	b.w	800bcca <_dtoa_r+0x32>
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	3202      	adds	r2, #2
 800c672:	0092      	lsls	r2, r2, #2
 800c674:	f107 010c 	add.w	r1, r7, #12
 800c678:	300c      	adds	r0, #12
 800c67a:	f7ff fa74 	bl	800bb66 <memcpy>
 800c67e:	2201      	movs	r2, #1
 800c680:	4629      	mov	r1, r5
 800c682:	4620      	mov	r0, r4
 800c684:	f000 fdc4 	bl	800d210 <__lshift>
 800c688:	9b00      	ldr	r3, [sp, #0]
 800c68a:	3301      	adds	r3, #1
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c692:	4413      	add	r3, r2
 800c694:	9308      	str	r3, [sp, #32]
 800c696:	9b02      	ldr	r3, [sp, #8]
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	46b8      	mov	r8, r7
 800c69e:	9306      	str	r3, [sp, #24]
 800c6a0:	4607      	mov	r7, r0
 800c6a2:	9b04      	ldr	r3, [sp, #16]
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	f7ff fa69 	bl	800bb82 <quorem>
 800c6b0:	4641      	mov	r1, r8
 800c6b2:	9002      	str	r0, [sp, #8]
 800c6b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	f000 fe15 	bl	800d2e8 <__mcmp>
 800c6be:	463a      	mov	r2, r7
 800c6c0:	9005      	str	r0, [sp, #20]
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 fe2b 	bl	800d320 <__mdiff>
 800c6ca:	68c2      	ldr	r2, [r0, #12]
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	bb02      	cbnz	r2, 800c712 <_dtoa_r+0xa7a>
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	f000 fe08 	bl	800d2e8 <__mcmp>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4620      	mov	r0, r4
 800c6de:	9209      	str	r2, [sp, #36]	; 0x24
 800c6e0:	f000 fbc6 	bl	800ce70 <_Bfree>
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6e8:	9d04      	ldr	r5, [sp, #16]
 800c6ea:	ea43 0102 	orr.w	r1, r3, r2
 800c6ee:	9b06      	ldr	r3, [sp, #24]
 800c6f0:	4319      	orrs	r1, r3
 800c6f2:	d110      	bne.n	800c716 <_dtoa_r+0xa7e>
 800c6f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6f8:	d029      	beq.n	800c74e <_dtoa_r+0xab6>
 800c6fa:	9b05      	ldr	r3, [sp, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	dd02      	ble.n	800c706 <_dtoa_r+0xa6e>
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c706:	9b01      	ldr	r3, [sp, #4]
 800c708:	f883 9000 	strb.w	r9, [r3]
 800c70c:	e774      	b.n	800c5f8 <_dtoa_r+0x960>
 800c70e:	4638      	mov	r0, r7
 800c710:	e7ba      	b.n	800c688 <_dtoa_r+0x9f0>
 800c712:	2201      	movs	r2, #1
 800c714:	e7e1      	b.n	800c6da <_dtoa_r+0xa42>
 800c716:	9b05      	ldr	r3, [sp, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	db04      	blt.n	800c726 <_dtoa_r+0xa8e>
 800c71c:	9907      	ldr	r1, [sp, #28]
 800c71e:	430b      	orrs	r3, r1
 800c720:	9906      	ldr	r1, [sp, #24]
 800c722:	430b      	orrs	r3, r1
 800c724:	d120      	bne.n	800c768 <_dtoa_r+0xad0>
 800c726:	2a00      	cmp	r2, #0
 800c728:	dded      	ble.n	800c706 <_dtoa_r+0xa6e>
 800c72a:	4651      	mov	r1, sl
 800c72c:	2201      	movs	r2, #1
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 fd6e 	bl	800d210 <__lshift>
 800c734:	4631      	mov	r1, r6
 800c736:	4682      	mov	sl, r0
 800c738:	f000 fdd6 	bl	800d2e8 <__mcmp>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	dc03      	bgt.n	800c748 <_dtoa_r+0xab0>
 800c740:	d1e1      	bne.n	800c706 <_dtoa_r+0xa6e>
 800c742:	f019 0f01 	tst.w	r9, #1
 800c746:	d0de      	beq.n	800c706 <_dtoa_r+0xa6e>
 800c748:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c74c:	d1d8      	bne.n	800c700 <_dtoa_r+0xa68>
 800c74e:	9a01      	ldr	r2, [sp, #4]
 800c750:	2339      	movs	r3, #57	; 0x39
 800c752:	7013      	strb	r3, [r2, #0]
 800c754:	462b      	mov	r3, r5
 800c756:	461d      	mov	r5, r3
 800c758:	3b01      	subs	r3, #1
 800c75a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c75e:	2a39      	cmp	r2, #57	; 0x39
 800c760:	d06c      	beq.n	800c83c <_dtoa_r+0xba4>
 800c762:	3201      	adds	r2, #1
 800c764:	701a      	strb	r2, [r3, #0]
 800c766:	e747      	b.n	800c5f8 <_dtoa_r+0x960>
 800c768:	2a00      	cmp	r2, #0
 800c76a:	dd07      	ble.n	800c77c <_dtoa_r+0xae4>
 800c76c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c770:	d0ed      	beq.n	800c74e <_dtoa_r+0xab6>
 800c772:	9a01      	ldr	r2, [sp, #4]
 800c774:	f109 0301 	add.w	r3, r9, #1
 800c778:	7013      	strb	r3, [r2, #0]
 800c77a:	e73d      	b.n	800c5f8 <_dtoa_r+0x960>
 800c77c:	9b04      	ldr	r3, [sp, #16]
 800c77e:	9a08      	ldr	r2, [sp, #32]
 800c780:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c784:	4293      	cmp	r3, r2
 800c786:	d043      	beq.n	800c810 <_dtoa_r+0xb78>
 800c788:	4651      	mov	r1, sl
 800c78a:	2300      	movs	r3, #0
 800c78c:	220a      	movs	r2, #10
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 fb90 	bl	800ceb4 <__multadd>
 800c794:	45b8      	cmp	r8, r7
 800c796:	4682      	mov	sl, r0
 800c798:	f04f 0300 	mov.w	r3, #0
 800c79c:	f04f 020a 	mov.w	r2, #10
 800c7a0:	4641      	mov	r1, r8
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	d107      	bne.n	800c7b6 <_dtoa_r+0xb1e>
 800c7a6:	f000 fb85 	bl	800ceb4 <__multadd>
 800c7aa:	4680      	mov	r8, r0
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	9b04      	ldr	r3, [sp, #16]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	e775      	b.n	800c6a2 <_dtoa_r+0xa0a>
 800c7b6:	f000 fb7d 	bl	800ceb4 <__multadd>
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	4680      	mov	r8, r0
 800c7be:	2300      	movs	r3, #0
 800c7c0:	220a      	movs	r2, #10
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 fb76 	bl	800ceb4 <__multadd>
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	e7f0      	b.n	800c7ae <_dtoa_r+0xb16>
 800c7cc:	9b04      	ldr	r3, [sp, #16]
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	9d00      	ldr	r5, [sp, #0]
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	f7ff f9d4 	bl	800bb82 <quorem>
 800c7da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7de:	9b00      	ldr	r3, [sp, #0]
 800c7e0:	f805 9b01 	strb.w	r9, [r5], #1
 800c7e4:	1aea      	subs	r2, r5, r3
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	dd07      	ble.n	800c7fc <_dtoa_r+0xb64>
 800c7ec:	4651      	mov	r1, sl
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	220a      	movs	r2, #10
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f000 fb5e 	bl	800ceb4 <__multadd>
 800c7f8:	4682      	mov	sl, r0
 800c7fa:	e7ea      	b.n	800c7d2 <_dtoa_r+0xb3a>
 800c7fc:	9b01      	ldr	r3, [sp, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfc8      	it	gt
 800c802:	461d      	movgt	r5, r3
 800c804:	9b00      	ldr	r3, [sp, #0]
 800c806:	bfd8      	it	le
 800c808:	2501      	movle	r5, #1
 800c80a:	441d      	add	r5, r3
 800c80c:	f04f 0800 	mov.w	r8, #0
 800c810:	4651      	mov	r1, sl
 800c812:	2201      	movs	r2, #1
 800c814:	4620      	mov	r0, r4
 800c816:	f000 fcfb 	bl	800d210 <__lshift>
 800c81a:	4631      	mov	r1, r6
 800c81c:	4682      	mov	sl, r0
 800c81e:	f000 fd63 	bl	800d2e8 <__mcmp>
 800c822:	2800      	cmp	r0, #0
 800c824:	dc96      	bgt.n	800c754 <_dtoa_r+0xabc>
 800c826:	d102      	bne.n	800c82e <_dtoa_r+0xb96>
 800c828:	f019 0f01 	tst.w	r9, #1
 800c82c:	d192      	bne.n	800c754 <_dtoa_r+0xabc>
 800c82e:	462b      	mov	r3, r5
 800c830:	461d      	mov	r5, r3
 800c832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c836:	2a30      	cmp	r2, #48	; 0x30
 800c838:	d0fa      	beq.n	800c830 <_dtoa_r+0xb98>
 800c83a:	e6dd      	b.n	800c5f8 <_dtoa_r+0x960>
 800c83c:	9a00      	ldr	r2, [sp, #0]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d189      	bne.n	800c756 <_dtoa_r+0xabe>
 800c842:	f10b 0b01 	add.w	fp, fp, #1
 800c846:	2331      	movs	r3, #49	; 0x31
 800c848:	e796      	b.n	800c778 <_dtoa_r+0xae0>
 800c84a:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <_dtoa_r+0xbdc>)
 800c84c:	f7ff ba99 	b.w	800bd82 <_dtoa_r+0xea>
 800c850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c852:	2b00      	cmp	r3, #0
 800c854:	f47f aa6d 	bne.w	800bd32 <_dtoa_r+0x9a>
 800c858:	4b07      	ldr	r3, [pc, #28]	; (800c878 <_dtoa_r+0xbe0>)
 800c85a:	f7ff ba92 	b.w	800bd82 <_dtoa_r+0xea>
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	dcb5      	bgt.n	800c7d0 <_dtoa_r+0xb38>
 800c864:	9b07      	ldr	r3, [sp, #28]
 800c866:	2b02      	cmp	r3, #2
 800c868:	f73f aeb1 	bgt.w	800c5ce <_dtoa_r+0x936>
 800c86c:	e7b0      	b.n	800c7d0 <_dtoa_r+0xb38>
 800c86e:	bf00      	nop
 800c870:	0800e2a4 	.word	0x0800e2a4
 800c874:	0800e204 	.word	0x0800e204
 800c878:	0800e228 	.word	0x0800e228

0800c87c <__ssputs_r>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	688e      	ldr	r6, [r1, #8]
 800c882:	461f      	mov	r7, r3
 800c884:	42be      	cmp	r6, r7
 800c886:	680b      	ldr	r3, [r1, #0]
 800c888:	4682      	mov	sl, r0
 800c88a:	460c      	mov	r4, r1
 800c88c:	4690      	mov	r8, r2
 800c88e:	d82c      	bhi.n	800c8ea <__ssputs_r+0x6e>
 800c890:	898a      	ldrh	r2, [r1, #12]
 800c892:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c896:	d026      	beq.n	800c8e6 <__ssputs_r+0x6a>
 800c898:	6965      	ldr	r5, [r4, #20]
 800c89a:	6909      	ldr	r1, [r1, #16]
 800c89c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8a0:	eba3 0901 	sub.w	r9, r3, r1
 800c8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8a8:	1c7b      	adds	r3, r7, #1
 800c8aa:	444b      	add	r3, r9
 800c8ac:	106d      	asrs	r5, r5, #1
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	bf38      	it	cc
 800c8b2:	461d      	movcc	r5, r3
 800c8b4:	0553      	lsls	r3, r2, #21
 800c8b6:	d527      	bpl.n	800c908 <__ssputs_r+0x8c>
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	f000 f95f 	bl	800cb7c <_malloc_r>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	b360      	cbz	r0, 800c91c <__ssputs_r+0xa0>
 800c8c2:	6921      	ldr	r1, [r4, #16]
 800c8c4:	464a      	mov	r2, r9
 800c8c6:	f7ff f94e 	bl	800bb66 <memcpy>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8d4:	81a3      	strh	r3, [r4, #12]
 800c8d6:	6126      	str	r6, [r4, #16]
 800c8d8:	6165      	str	r5, [r4, #20]
 800c8da:	444e      	add	r6, r9
 800c8dc:	eba5 0509 	sub.w	r5, r5, r9
 800c8e0:	6026      	str	r6, [r4, #0]
 800c8e2:	60a5      	str	r5, [r4, #8]
 800c8e4:	463e      	mov	r6, r7
 800c8e6:	42be      	cmp	r6, r7
 800c8e8:	d900      	bls.n	800c8ec <__ssputs_r+0x70>
 800c8ea:	463e      	mov	r6, r7
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	4632      	mov	r2, r6
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	f000 fe6b 	bl	800d5cc <memmove>
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	1b9b      	subs	r3, r3, r6
 800c8fa:	60a3      	str	r3, [r4, #8]
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	4433      	add	r3, r6
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	2000      	movs	r0, #0
 800c904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c908:	462a      	mov	r2, r5
 800c90a:	f000 fe30 	bl	800d56e <_realloc_r>
 800c90e:	4606      	mov	r6, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	d1e0      	bne.n	800c8d6 <__ssputs_r+0x5a>
 800c914:	6921      	ldr	r1, [r4, #16]
 800c916:	4650      	mov	r0, sl
 800c918:	f000 fefc 	bl	800d714 <_free_r>
 800c91c:	230c      	movs	r3, #12
 800c91e:	f8ca 3000 	str.w	r3, [sl]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c928:	81a3      	strh	r3, [r4, #12]
 800c92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c92e:	e7e9      	b.n	800c904 <__ssputs_r+0x88>

0800c930 <_svfiprintf_r>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	4698      	mov	r8, r3
 800c936:	898b      	ldrh	r3, [r1, #12]
 800c938:	061b      	lsls	r3, r3, #24
 800c93a:	b09d      	sub	sp, #116	; 0x74
 800c93c:	4607      	mov	r7, r0
 800c93e:	460d      	mov	r5, r1
 800c940:	4614      	mov	r4, r2
 800c942:	d50e      	bpl.n	800c962 <_svfiprintf_r+0x32>
 800c944:	690b      	ldr	r3, [r1, #16]
 800c946:	b963      	cbnz	r3, 800c962 <_svfiprintf_r+0x32>
 800c948:	2140      	movs	r1, #64	; 0x40
 800c94a:	f000 f917 	bl	800cb7c <_malloc_r>
 800c94e:	6028      	str	r0, [r5, #0]
 800c950:	6128      	str	r0, [r5, #16]
 800c952:	b920      	cbnz	r0, 800c95e <_svfiprintf_r+0x2e>
 800c954:	230c      	movs	r3, #12
 800c956:	603b      	str	r3, [r7, #0]
 800c958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c95c:	e0d0      	b.n	800cb00 <_svfiprintf_r+0x1d0>
 800c95e:	2340      	movs	r3, #64	; 0x40
 800c960:	616b      	str	r3, [r5, #20]
 800c962:	2300      	movs	r3, #0
 800c964:	9309      	str	r3, [sp, #36]	; 0x24
 800c966:	2320      	movs	r3, #32
 800c968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c96c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c970:	2330      	movs	r3, #48	; 0x30
 800c972:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb18 <_svfiprintf_r+0x1e8>
 800c976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c97a:	f04f 0901 	mov.w	r9, #1
 800c97e:	4623      	mov	r3, r4
 800c980:	469a      	mov	sl, r3
 800c982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c986:	b10a      	cbz	r2, 800c98c <_svfiprintf_r+0x5c>
 800c988:	2a25      	cmp	r2, #37	; 0x25
 800c98a:	d1f9      	bne.n	800c980 <_svfiprintf_r+0x50>
 800c98c:	ebba 0b04 	subs.w	fp, sl, r4
 800c990:	d00b      	beq.n	800c9aa <_svfiprintf_r+0x7a>
 800c992:	465b      	mov	r3, fp
 800c994:	4622      	mov	r2, r4
 800c996:	4629      	mov	r1, r5
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff ff6f 	bl	800c87c <__ssputs_r>
 800c99e:	3001      	adds	r0, #1
 800c9a0:	f000 80a9 	beq.w	800caf6 <_svfiprintf_r+0x1c6>
 800c9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a6:	445a      	add	r2, fp
 800c9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 80a1 	beq.w	800caf6 <_svfiprintf_r+0x1c6>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9be:	f10a 0a01 	add.w	sl, sl, #1
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	9307      	str	r3, [sp, #28]
 800c9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c9cc:	4654      	mov	r4, sl
 800c9ce:	2205      	movs	r2, #5
 800c9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d4:	4850      	ldr	r0, [pc, #320]	; (800cb18 <_svfiprintf_r+0x1e8>)
 800c9d6:	f7f3 fbfb 	bl	80001d0 <memchr>
 800c9da:	9a04      	ldr	r2, [sp, #16]
 800c9dc:	b9d8      	cbnz	r0, 800ca16 <_svfiprintf_r+0xe6>
 800c9de:	06d0      	lsls	r0, r2, #27
 800c9e0:	bf44      	itt	mi
 800c9e2:	2320      	movmi	r3, #32
 800c9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e8:	0711      	lsls	r1, r2, #28
 800c9ea:	bf44      	itt	mi
 800c9ec:	232b      	movmi	r3, #43	; 0x2b
 800c9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f8:	d015      	beq.n	800ca26 <_svfiprintf_r+0xf6>
 800c9fa:	9a07      	ldr	r2, [sp, #28]
 800c9fc:	4654      	mov	r4, sl
 800c9fe:	2000      	movs	r0, #0
 800ca00:	f04f 0c0a 	mov.w	ip, #10
 800ca04:	4621      	mov	r1, r4
 800ca06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca0a:	3b30      	subs	r3, #48	; 0x30
 800ca0c:	2b09      	cmp	r3, #9
 800ca0e:	d94d      	bls.n	800caac <_svfiprintf_r+0x17c>
 800ca10:	b1b0      	cbz	r0, 800ca40 <_svfiprintf_r+0x110>
 800ca12:	9207      	str	r2, [sp, #28]
 800ca14:	e014      	b.n	800ca40 <_svfiprintf_r+0x110>
 800ca16:	eba0 0308 	sub.w	r3, r0, r8
 800ca1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	46a2      	mov	sl, r4
 800ca24:	e7d2      	b.n	800c9cc <_svfiprintf_r+0x9c>
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	1d19      	adds	r1, r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	9103      	str	r1, [sp, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bfbb      	ittet	lt
 800ca32:	425b      	neglt	r3, r3
 800ca34:	f042 0202 	orrlt.w	r2, r2, #2
 800ca38:	9307      	strge	r3, [sp, #28]
 800ca3a:	9307      	strlt	r3, [sp, #28]
 800ca3c:	bfb8      	it	lt
 800ca3e:	9204      	strlt	r2, [sp, #16]
 800ca40:	7823      	ldrb	r3, [r4, #0]
 800ca42:	2b2e      	cmp	r3, #46	; 0x2e
 800ca44:	d10c      	bne.n	800ca60 <_svfiprintf_r+0x130>
 800ca46:	7863      	ldrb	r3, [r4, #1]
 800ca48:	2b2a      	cmp	r3, #42	; 0x2a
 800ca4a:	d134      	bne.n	800cab6 <_svfiprintf_r+0x186>
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	1d1a      	adds	r2, r3, #4
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	9203      	str	r2, [sp, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfb8      	it	lt
 800ca58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca5c:	3402      	adds	r4, #2
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb28 <_svfiprintf_r+0x1f8>
 800ca64:	7821      	ldrb	r1, [r4, #0]
 800ca66:	2203      	movs	r2, #3
 800ca68:	4650      	mov	r0, sl
 800ca6a:	f7f3 fbb1 	bl	80001d0 <memchr>
 800ca6e:	b138      	cbz	r0, 800ca80 <_svfiprintf_r+0x150>
 800ca70:	9b04      	ldr	r3, [sp, #16]
 800ca72:	eba0 000a 	sub.w	r0, r0, sl
 800ca76:	2240      	movs	r2, #64	; 0x40
 800ca78:	4082      	lsls	r2, r0
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	3401      	adds	r4, #1
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	4825      	ldr	r0, [pc, #148]	; (800cb1c <_svfiprintf_r+0x1ec>)
 800ca86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca8a:	2206      	movs	r2, #6
 800ca8c:	f7f3 fba0 	bl	80001d0 <memchr>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d038      	beq.n	800cb06 <_svfiprintf_r+0x1d6>
 800ca94:	4b22      	ldr	r3, [pc, #136]	; (800cb20 <_svfiprintf_r+0x1f0>)
 800ca96:	bb1b      	cbnz	r3, 800cae0 <_svfiprintf_r+0x1b0>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	3307      	adds	r3, #7
 800ca9c:	f023 0307 	bic.w	r3, r3, #7
 800caa0:	3308      	adds	r3, #8
 800caa2:	9303      	str	r3, [sp, #12]
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	4433      	add	r3, r6
 800caa8:	9309      	str	r3, [sp, #36]	; 0x24
 800caaa:	e768      	b.n	800c97e <_svfiprintf_r+0x4e>
 800caac:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab0:	460c      	mov	r4, r1
 800cab2:	2001      	movs	r0, #1
 800cab4:	e7a6      	b.n	800ca04 <_svfiprintf_r+0xd4>
 800cab6:	2300      	movs	r3, #0
 800cab8:	3401      	adds	r4, #1
 800caba:	9305      	str	r3, [sp, #20]
 800cabc:	4619      	mov	r1, r3
 800cabe:	f04f 0c0a 	mov.w	ip, #10
 800cac2:	4620      	mov	r0, r4
 800cac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cac8:	3a30      	subs	r2, #48	; 0x30
 800caca:	2a09      	cmp	r2, #9
 800cacc:	d903      	bls.n	800cad6 <_svfiprintf_r+0x1a6>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0c6      	beq.n	800ca60 <_svfiprintf_r+0x130>
 800cad2:	9105      	str	r1, [sp, #20]
 800cad4:	e7c4      	b.n	800ca60 <_svfiprintf_r+0x130>
 800cad6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cada:	4604      	mov	r4, r0
 800cadc:	2301      	movs	r3, #1
 800cade:	e7f0      	b.n	800cac2 <_svfiprintf_r+0x192>
 800cae0:	ab03      	add	r3, sp, #12
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	462a      	mov	r2, r5
 800cae6:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <_svfiprintf_r+0x1f4>)
 800cae8:	a904      	add	r1, sp, #16
 800caea:	4638      	mov	r0, r7
 800caec:	f7fe fb5a 	bl	800b1a4 <_printf_float>
 800caf0:	1c42      	adds	r2, r0, #1
 800caf2:	4606      	mov	r6, r0
 800caf4:	d1d6      	bne.n	800caa4 <_svfiprintf_r+0x174>
 800caf6:	89ab      	ldrh	r3, [r5, #12]
 800caf8:	065b      	lsls	r3, r3, #25
 800cafa:	f53f af2d 	bmi.w	800c958 <_svfiprintf_r+0x28>
 800cafe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb00:	b01d      	add	sp, #116	; 0x74
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb06:	ab03      	add	r3, sp, #12
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <_svfiprintf_r+0x1f4>)
 800cb0e:	a904      	add	r1, sp, #16
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7fe fdeb 	bl	800b6ec <_printf_i>
 800cb16:	e7eb      	b.n	800caf0 <_svfiprintf_r+0x1c0>
 800cb18:	0800e2b5 	.word	0x0800e2b5
 800cb1c:	0800e2bf 	.word	0x0800e2bf
 800cb20:	0800b1a5 	.word	0x0800b1a5
 800cb24:	0800c87d 	.word	0x0800c87d
 800cb28:	0800e2bb 	.word	0x0800e2bb

0800cb2c <malloc>:
 800cb2c:	4b02      	ldr	r3, [pc, #8]	; (800cb38 <malloc+0xc>)
 800cb2e:	4601      	mov	r1, r0
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	f000 b823 	b.w	800cb7c <_malloc_r>
 800cb36:	bf00      	nop
 800cb38:	20000164 	.word	0x20000164

0800cb3c <sbrk_aligned>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4e0e      	ldr	r6, [pc, #56]	; (800cb78 <sbrk_aligned+0x3c>)
 800cb40:	460c      	mov	r4, r1
 800cb42:	6831      	ldr	r1, [r6, #0]
 800cb44:	4605      	mov	r5, r0
 800cb46:	b911      	cbnz	r1, 800cb4e <sbrk_aligned+0x12>
 800cb48:	f000 fd8e 	bl	800d668 <_sbrk_r>
 800cb4c:	6030      	str	r0, [r6, #0]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 fd89 	bl	800d668 <_sbrk_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d00a      	beq.n	800cb70 <sbrk_aligned+0x34>
 800cb5a:	1cc4      	adds	r4, r0, #3
 800cb5c:	f024 0403 	bic.w	r4, r4, #3
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d007      	beq.n	800cb74 <sbrk_aligned+0x38>
 800cb64:	1a21      	subs	r1, r4, r0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 fd7e 	bl	800d668 <_sbrk_r>
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d101      	bne.n	800cb74 <sbrk_aligned+0x38>
 800cb70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb74:	4620      	mov	r0, r4
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	200022d0 	.word	0x200022d0

0800cb7c <_malloc_r>:
 800cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb80:	1ccd      	adds	r5, r1, #3
 800cb82:	f025 0503 	bic.w	r5, r5, #3
 800cb86:	3508      	adds	r5, #8
 800cb88:	2d0c      	cmp	r5, #12
 800cb8a:	bf38      	it	cc
 800cb8c:	250c      	movcc	r5, #12
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	4607      	mov	r7, r0
 800cb92:	db01      	blt.n	800cb98 <_malloc_r+0x1c>
 800cb94:	42a9      	cmp	r1, r5
 800cb96:	d905      	bls.n	800cba4 <_malloc_r+0x28>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	4630      	mov	r0, r6
 800cba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cc78 <_malloc_r+0xfc>
 800cba8:	f000 f916 	bl	800cdd8 <__malloc_lock>
 800cbac:	f8d8 3000 	ldr.w	r3, [r8]
 800cbb0:	461c      	mov	r4, r3
 800cbb2:	bb5c      	cbnz	r4, 800cc0c <_malloc_r+0x90>
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	f7ff ffc0 	bl	800cb3c <sbrk_aligned>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	d155      	bne.n	800cc6e <_malloc_r+0xf2>
 800cbc2:	f8d8 4000 	ldr.w	r4, [r8]
 800cbc6:	4626      	mov	r6, r4
 800cbc8:	2e00      	cmp	r6, #0
 800cbca:	d145      	bne.n	800cc58 <_malloc_r+0xdc>
 800cbcc:	2c00      	cmp	r4, #0
 800cbce:	d048      	beq.n	800cc62 <_malloc_r+0xe6>
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	eb04 0903 	add.w	r9, r4, r3
 800cbda:	f000 fd45 	bl	800d668 <_sbrk_r>
 800cbde:	4581      	cmp	r9, r0
 800cbe0:	d13f      	bne.n	800cc62 <_malloc_r+0xe6>
 800cbe2:	6821      	ldr	r1, [r4, #0]
 800cbe4:	1a6d      	subs	r5, r5, r1
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f7ff ffa7 	bl	800cb3c <sbrk_aligned>
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d037      	beq.n	800cc62 <_malloc_r+0xe6>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	442b      	add	r3, r5
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d038      	beq.n	800cc72 <_malloc_r+0xf6>
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	42a2      	cmp	r2, r4
 800cc04:	d12b      	bne.n	800cc5e <_malloc_r+0xe2>
 800cc06:	2200      	movs	r2, #0
 800cc08:	605a      	str	r2, [r3, #4]
 800cc0a:	e00f      	b.n	800cc2c <_malloc_r+0xb0>
 800cc0c:	6822      	ldr	r2, [r4, #0]
 800cc0e:	1b52      	subs	r2, r2, r5
 800cc10:	d41f      	bmi.n	800cc52 <_malloc_r+0xd6>
 800cc12:	2a0b      	cmp	r2, #11
 800cc14:	d917      	bls.n	800cc46 <_malloc_r+0xca>
 800cc16:	1961      	adds	r1, r4, r5
 800cc18:	42a3      	cmp	r3, r4
 800cc1a:	6025      	str	r5, [r4, #0]
 800cc1c:	bf18      	it	ne
 800cc1e:	6059      	strne	r1, [r3, #4]
 800cc20:	6863      	ldr	r3, [r4, #4]
 800cc22:	bf08      	it	eq
 800cc24:	f8c8 1000 	streq.w	r1, [r8]
 800cc28:	5162      	str	r2, [r4, r5]
 800cc2a:	604b      	str	r3, [r1, #4]
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f104 060b 	add.w	r6, r4, #11
 800cc32:	f000 f8d7 	bl	800cde4 <__malloc_unlock>
 800cc36:	f026 0607 	bic.w	r6, r6, #7
 800cc3a:	1d23      	adds	r3, r4, #4
 800cc3c:	1af2      	subs	r2, r6, r3
 800cc3e:	d0ae      	beq.n	800cb9e <_malloc_r+0x22>
 800cc40:	1b9b      	subs	r3, r3, r6
 800cc42:	50a3      	str	r3, [r4, r2]
 800cc44:	e7ab      	b.n	800cb9e <_malloc_r+0x22>
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	6862      	ldr	r2, [r4, #4]
 800cc4a:	d1dd      	bne.n	800cc08 <_malloc_r+0x8c>
 800cc4c:	f8c8 2000 	str.w	r2, [r8]
 800cc50:	e7ec      	b.n	800cc2c <_malloc_r+0xb0>
 800cc52:	4623      	mov	r3, r4
 800cc54:	6864      	ldr	r4, [r4, #4]
 800cc56:	e7ac      	b.n	800cbb2 <_malloc_r+0x36>
 800cc58:	4634      	mov	r4, r6
 800cc5a:	6876      	ldr	r6, [r6, #4]
 800cc5c:	e7b4      	b.n	800cbc8 <_malloc_r+0x4c>
 800cc5e:	4613      	mov	r3, r2
 800cc60:	e7cc      	b.n	800cbfc <_malloc_r+0x80>
 800cc62:	230c      	movs	r3, #12
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	4638      	mov	r0, r7
 800cc68:	f000 f8bc 	bl	800cde4 <__malloc_unlock>
 800cc6c:	e797      	b.n	800cb9e <_malloc_r+0x22>
 800cc6e:	6025      	str	r5, [r4, #0]
 800cc70:	e7dc      	b.n	800cc2c <_malloc_r+0xb0>
 800cc72:	605b      	str	r3, [r3, #4]
 800cc74:	deff      	udf	#255	; 0xff
 800cc76:	bf00      	nop
 800cc78:	200022cc 	.word	0x200022cc

0800cc7c <__sflush_r>:
 800cc7c:	898a      	ldrh	r2, [r1, #12]
 800cc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc82:	4605      	mov	r5, r0
 800cc84:	0710      	lsls	r0, r2, #28
 800cc86:	460c      	mov	r4, r1
 800cc88:	d458      	bmi.n	800cd3c <__sflush_r+0xc0>
 800cc8a:	684b      	ldr	r3, [r1, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dc05      	bgt.n	800cc9c <__sflush_r+0x20>
 800cc90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	dc02      	bgt.n	800cc9c <__sflush_r+0x20>
 800cc96:	2000      	movs	r0, #0
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc9e:	2e00      	cmp	r6, #0
 800cca0:	d0f9      	beq.n	800cc96 <__sflush_r+0x1a>
 800cca2:	2300      	movs	r3, #0
 800cca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cca8:	682f      	ldr	r7, [r5, #0]
 800ccaa:	6a21      	ldr	r1, [r4, #32]
 800ccac:	602b      	str	r3, [r5, #0]
 800ccae:	d032      	beq.n	800cd16 <__sflush_r+0x9a>
 800ccb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	075a      	lsls	r2, r3, #29
 800ccb6:	d505      	bpl.n	800ccc4 <__sflush_r+0x48>
 800ccb8:	6863      	ldr	r3, [r4, #4]
 800ccba:	1ac0      	subs	r0, r0, r3
 800ccbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccbe:	b10b      	cbz	r3, 800ccc4 <__sflush_r+0x48>
 800ccc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccc2:	1ac0      	subs	r0, r0, r3
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccca:	6a21      	ldr	r1, [r4, #32]
 800cccc:	4628      	mov	r0, r5
 800ccce:	47b0      	blx	r6
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	d106      	bne.n	800cce4 <__sflush_r+0x68>
 800ccd6:	6829      	ldr	r1, [r5, #0]
 800ccd8:	291d      	cmp	r1, #29
 800ccda:	d82b      	bhi.n	800cd34 <__sflush_r+0xb8>
 800ccdc:	4a29      	ldr	r2, [pc, #164]	; (800cd84 <__sflush_r+0x108>)
 800ccde:	410a      	asrs	r2, r1
 800cce0:	07d6      	lsls	r6, r2, #31
 800cce2:	d427      	bmi.n	800cd34 <__sflush_r+0xb8>
 800cce4:	2200      	movs	r2, #0
 800cce6:	6062      	str	r2, [r4, #4]
 800cce8:	04d9      	lsls	r1, r3, #19
 800ccea:	6922      	ldr	r2, [r4, #16]
 800ccec:	6022      	str	r2, [r4, #0]
 800ccee:	d504      	bpl.n	800ccfa <__sflush_r+0x7e>
 800ccf0:	1c42      	adds	r2, r0, #1
 800ccf2:	d101      	bne.n	800ccf8 <__sflush_r+0x7c>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	b903      	cbnz	r3, 800ccfa <__sflush_r+0x7e>
 800ccf8:	6560      	str	r0, [r4, #84]	; 0x54
 800ccfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccfc:	602f      	str	r7, [r5, #0]
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	d0c9      	beq.n	800cc96 <__sflush_r+0x1a>
 800cd02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd06:	4299      	cmp	r1, r3
 800cd08:	d002      	beq.n	800cd10 <__sflush_r+0x94>
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f000 fd02 	bl	800d714 <_free_r>
 800cd10:	2000      	movs	r0, #0
 800cd12:	6360      	str	r0, [r4, #52]	; 0x34
 800cd14:	e7c0      	b.n	800cc98 <__sflush_r+0x1c>
 800cd16:	2301      	movs	r3, #1
 800cd18:	4628      	mov	r0, r5
 800cd1a:	47b0      	blx	r6
 800cd1c:	1c41      	adds	r1, r0, #1
 800cd1e:	d1c8      	bne.n	800ccb2 <__sflush_r+0x36>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d0c5      	beq.n	800ccb2 <__sflush_r+0x36>
 800cd26:	2b1d      	cmp	r3, #29
 800cd28:	d001      	beq.n	800cd2e <__sflush_r+0xb2>
 800cd2a:	2b16      	cmp	r3, #22
 800cd2c:	d101      	bne.n	800cd32 <__sflush_r+0xb6>
 800cd2e:	602f      	str	r7, [r5, #0]
 800cd30:	e7b1      	b.n	800cc96 <__sflush_r+0x1a>
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	e7ad      	b.n	800cc98 <__sflush_r+0x1c>
 800cd3c:	690f      	ldr	r7, [r1, #16]
 800cd3e:	2f00      	cmp	r7, #0
 800cd40:	d0a9      	beq.n	800cc96 <__sflush_r+0x1a>
 800cd42:	0793      	lsls	r3, r2, #30
 800cd44:	680e      	ldr	r6, [r1, #0]
 800cd46:	bf08      	it	eq
 800cd48:	694b      	ldreq	r3, [r1, #20]
 800cd4a:	600f      	str	r7, [r1, #0]
 800cd4c:	bf18      	it	ne
 800cd4e:	2300      	movne	r3, #0
 800cd50:	eba6 0807 	sub.w	r8, r6, r7
 800cd54:	608b      	str	r3, [r1, #8]
 800cd56:	f1b8 0f00 	cmp.w	r8, #0
 800cd5a:	dd9c      	ble.n	800cc96 <__sflush_r+0x1a>
 800cd5c:	6a21      	ldr	r1, [r4, #32]
 800cd5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd60:	4643      	mov	r3, r8
 800cd62:	463a      	mov	r2, r7
 800cd64:	4628      	mov	r0, r5
 800cd66:	47b0      	blx	r6
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	dc06      	bgt.n	800cd7a <__sflush_r+0xfe>
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd78:	e78e      	b.n	800cc98 <__sflush_r+0x1c>
 800cd7a:	4407      	add	r7, r0
 800cd7c:	eba8 0800 	sub.w	r8, r8, r0
 800cd80:	e7e9      	b.n	800cd56 <__sflush_r+0xda>
 800cd82:	bf00      	nop
 800cd84:	dfbffffe 	.word	0xdfbffffe

0800cd88 <_fflush_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	690b      	ldr	r3, [r1, #16]
 800cd8c:	4605      	mov	r5, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	b913      	cbnz	r3, 800cd98 <_fflush_r+0x10>
 800cd92:	2500      	movs	r5, #0
 800cd94:	4628      	mov	r0, r5
 800cd96:	bd38      	pop	{r3, r4, r5, pc}
 800cd98:	b118      	cbz	r0, 800cda2 <_fflush_r+0x1a>
 800cd9a:	6a03      	ldr	r3, [r0, #32]
 800cd9c:	b90b      	cbnz	r3, 800cda2 <_fflush_r+0x1a>
 800cd9e:	f7fe fe73 	bl	800ba88 <__sinit>
 800cda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0f3      	beq.n	800cd92 <_fflush_r+0xa>
 800cdaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdac:	07d0      	lsls	r0, r2, #31
 800cdae:	d404      	bmi.n	800cdba <_fflush_r+0x32>
 800cdb0:	0599      	lsls	r1, r3, #22
 800cdb2:	d402      	bmi.n	800cdba <_fflush_r+0x32>
 800cdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdb6:	f7fe fed4 	bl	800bb62 <__retarget_lock_acquire_recursive>
 800cdba:	4628      	mov	r0, r5
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	f7ff ff5d 	bl	800cc7c <__sflush_r>
 800cdc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdc4:	07da      	lsls	r2, r3, #31
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	d4e4      	bmi.n	800cd94 <_fflush_r+0xc>
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	059b      	lsls	r3, r3, #22
 800cdce:	d4e1      	bmi.n	800cd94 <_fflush_r+0xc>
 800cdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdd2:	f7fe fec7 	bl	800bb64 <__retarget_lock_release_recursive>
 800cdd6:	e7dd      	b.n	800cd94 <_fflush_r+0xc>

0800cdd8 <__malloc_lock>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	; (800cde0 <__malloc_lock+0x8>)
 800cdda:	f7fe bec2 	b.w	800bb62 <__retarget_lock_acquire_recursive>
 800cdde:	bf00      	nop
 800cde0:	200022c8 	.word	0x200022c8

0800cde4 <__malloc_unlock>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__malloc_unlock+0x8>)
 800cde6:	f7fe bebd 	b.w	800bb64 <__retarget_lock_release_recursive>
 800cdea:	bf00      	nop
 800cdec:	200022c8 	.word	0x200022c8

0800cdf0 <_Balloc>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	69c6      	ldr	r6, [r0, #28]
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	b976      	cbnz	r6, 800ce18 <_Balloc+0x28>
 800cdfa:	2010      	movs	r0, #16
 800cdfc:	f7ff fe96 	bl	800cb2c <malloc>
 800ce00:	4602      	mov	r2, r0
 800ce02:	61e0      	str	r0, [r4, #28]
 800ce04:	b920      	cbnz	r0, 800ce10 <_Balloc+0x20>
 800ce06:	4b18      	ldr	r3, [pc, #96]	; (800ce68 <_Balloc+0x78>)
 800ce08:	4818      	ldr	r0, [pc, #96]	; (800ce6c <_Balloc+0x7c>)
 800ce0a:	216b      	movs	r1, #107	; 0x6b
 800ce0c:	f000 fc4e 	bl	800d6ac <__assert_func>
 800ce10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce14:	6006      	str	r6, [r0, #0]
 800ce16:	60c6      	str	r6, [r0, #12]
 800ce18:	69e6      	ldr	r6, [r4, #28]
 800ce1a:	68f3      	ldr	r3, [r6, #12]
 800ce1c:	b183      	cbz	r3, 800ce40 <_Balloc+0x50>
 800ce1e:	69e3      	ldr	r3, [r4, #28]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce26:	b9b8      	cbnz	r0, 800ce58 <_Balloc+0x68>
 800ce28:	2101      	movs	r1, #1
 800ce2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce2e:	1d72      	adds	r2, r6, #5
 800ce30:	0092      	lsls	r2, r2, #2
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fc58 	bl	800d6e8 <_calloc_r>
 800ce38:	b160      	cbz	r0, 800ce54 <_Balloc+0x64>
 800ce3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce3e:	e00e      	b.n	800ce5e <_Balloc+0x6e>
 800ce40:	2221      	movs	r2, #33	; 0x21
 800ce42:	2104      	movs	r1, #4
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 fc4f 	bl	800d6e8 <_calloc_r>
 800ce4a:	69e3      	ldr	r3, [r4, #28]
 800ce4c:	60f0      	str	r0, [r6, #12]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e4      	bne.n	800ce1e <_Balloc+0x2e>
 800ce54:	2000      	movs	r0, #0
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	6802      	ldr	r2, [r0, #0]
 800ce5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce64:	e7f7      	b.n	800ce56 <_Balloc+0x66>
 800ce66:	bf00      	nop
 800ce68:	0800e235 	.word	0x0800e235
 800ce6c:	0800e2c6 	.word	0x0800e2c6

0800ce70 <_Bfree>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	69c6      	ldr	r6, [r0, #28]
 800ce74:	4605      	mov	r5, r0
 800ce76:	460c      	mov	r4, r1
 800ce78:	b976      	cbnz	r6, 800ce98 <_Bfree+0x28>
 800ce7a:	2010      	movs	r0, #16
 800ce7c:	f7ff fe56 	bl	800cb2c <malloc>
 800ce80:	4602      	mov	r2, r0
 800ce82:	61e8      	str	r0, [r5, #28]
 800ce84:	b920      	cbnz	r0, 800ce90 <_Bfree+0x20>
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <_Bfree+0x3c>)
 800ce88:	4809      	ldr	r0, [pc, #36]	; (800ceb0 <_Bfree+0x40>)
 800ce8a:	218f      	movs	r1, #143	; 0x8f
 800ce8c:	f000 fc0e 	bl	800d6ac <__assert_func>
 800ce90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce94:	6006      	str	r6, [r0, #0]
 800ce96:	60c6      	str	r6, [r0, #12]
 800ce98:	b13c      	cbz	r4, 800ceaa <_Bfree+0x3a>
 800ce9a:	69eb      	ldr	r3, [r5, #28]
 800ce9c:	6862      	ldr	r2, [r4, #4]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cea4:	6021      	str	r1, [r4, #0]
 800cea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	0800e235 	.word	0x0800e235
 800ceb0:	0800e2c6 	.word	0x0800e2c6

0800ceb4 <__multadd>:
 800ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	690d      	ldr	r5, [r1, #16]
 800ceba:	4607      	mov	r7, r0
 800cebc:	460c      	mov	r4, r1
 800cebe:	461e      	mov	r6, r3
 800cec0:	f101 0c14 	add.w	ip, r1, #20
 800cec4:	2000      	movs	r0, #0
 800cec6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceca:	b299      	uxth	r1, r3
 800cecc:	fb02 6101 	mla	r1, r2, r1, r6
 800ced0:	0c1e      	lsrs	r6, r3, #16
 800ced2:	0c0b      	lsrs	r3, r1, #16
 800ced4:	fb02 3306 	mla	r3, r2, r6, r3
 800ced8:	b289      	uxth	r1, r1
 800ceda:	3001      	adds	r0, #1
 800cedc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cee0:	4285      	cmp	r5, r0
 800cee2:	f84c 1b04 	str.w	r1, [ip], #4
 800cee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceea:	dcec      	bgt.n	800cec6 <__multadd+0x12>
 800ceec:	b30e      	cbz	r6, 800cf32 <__multadd+0x7e>
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	42ab      	cmp	r3, r5
 800cef2:	dc19      	bgt.n	800cf28 <__multadd+0x74>
 800cef4:	6861      	ldr	r1, [r4, #4]
 800cef6:	4638      	mov	r0, r7
 800cef8:	3101      	adds	r1, #1
 800cefa:	f7ff ff79 	bl	800cdf0 <_Balloc>
 800cefe:	4680      	mov	r8, r0
 800cf00:	b928      	cbnz	r0, 800cf0e <__multadd+0x5a>
 800cf02:	4602      	mov	r2, r0
 800cf04:	4b0c      	ldr	r3, [pc, #48]	; (800cf38 <__multadd+0x84>)
 800cf06:	480d      	ldr	r0, [pc, #52]	; (800cf3c <__multadd+0x88>)
 800cf08:	21ba      	movs	r1, #186	; 0xba
 800cf0a:	f000 fbcf 	bl	800d6ac <__assert_func>
 800cf0e:	6922      	ldr	r2, [r4, #16]
 800cf10:	3202      	adds	r2, #2
 800cf12:	f104 010c 	add.w	r1, r4, #12
 800cf16:	0092      	lsls	r2, r2, #2
 800cf18:	300c      	adds	r0, #12
 800cf1a:	f7fe fe24 	bl	800bb66 <memcpy>
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7ff ffa5 	bl	800ce70 <_Bfree>
 800cf26:	4644      	mov	r4, r8
 800cf28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf2c:	3501      	adds	r5, #1
 800cf2e:	615e      	str	r6, [r3, #20]
 800cf30:	6125      	str	r5, [r4, #16]
 800cf32:	4620      	mov	r0, r4
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	0800e2a4 	.word	0x0800e2a4
 800cf3c:	0800e2c6 	.word	0x0800e2c6

0800cf40 <__hi0bits>:
 800cf40:	0c03      	lsrs	r3, r0, #16
 800cf42:	041b      	lsls	r3, r3, #16
 800cf44:	b9d3      	cbnz	r3, 800cf7c <__hi0bits+0x3c>
 800cf46:	0400      	lsls	r0, r0, #16
 800cf48:	2310      	movs	r3, #16
 800cf4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf4e:	bf04      	itt	eq
 800cf50:	0200      	lsleq	r0, r0, #8
 800cf52:	3308      	addeq	r3, #8
 800cf54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf58:	bf04      	itt	eq
 800cf5a:	0100      	lsleq	r0, r0, #4
 800cf5c:	3304      	addeq	r3, #4
 800cf5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf62:	bf04      	itt	eq
 800cf64:	0080      	lsleq	r0, r0, #2
 800cf66:	3302      	addeq	r3, #2
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	db05      	blt.n	800cf78 <__hi0bits+0x38>
 800cf6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf70:	f103 0301 	add.w	r3, r3, #1
 800cf74:	bf08      	it	eq
 800cf76:	2320      	moveq	r3, #32
 800cf78:	4618      	mov	r0, r3
 800cf7a:	4770      	bx	lr
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	e7e4      	b.n	800cf4a <__hi0bits+0xa>

0800cf80 <__lo0bits>:
 800cf80:	6803      	ldr	r3, [r0, #0]
 800cf82:	f013 0207 	ands.w	r2, r3, #7
 800cf86:	d00c      	beq.n	800cfa2 <__lo0bits+0x22>
 800cf88:	07d9      	lsls	r1, r3, #31
 800cf8a:	d422      	bmi.n	800cfd2 <__lo0bits+0x52>
 800cf8c:	079a      	lsls	r2, r3, #30
 800cf8e:	bf49      	itett	mi
 800cf90:	085b      	lsrmi	r3, r3, #1
 800cf92:	089b      	lsrpl	r3, r3, #2
 800cf94:	6003      	strmi	r3, [r0, #0]
 800cf96:	2201      	movmi	r2, #1
 800cf98:	bf5c      	itt	pl
 800cf9a:	6003      	strpl	r3, [r0, #0]
 800cf9c:	2202      	movpl	r2, #2
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	4770      	bx	lr
 800cfa2:	b299      	uxth	r1, r3
 800cfa4:	b909      	cbnz	r1, 800cfaa <__lo0bits+0x2a>
 800cfa6:	0c1b      	lsrs	r3, r3, #16
 800cfa8:	2210      	movs	r2, #16
 800cfaa:	b2d9      	uxtb	r1, r3
 800cfac:	b909      	cbnz	r1, 800cfb2 <__lo0bits+0x32>
 800cfae:	3208      	adds	r2, #8
 800cfb0:	0a1b      	lsrs	r3, r3, #8
 800cfb2:	0719      	lsls	r1, r3, #28
 800cfb4:	bf04      	itt	eq
 800cfb6:	091b      	lsreq	r3, r3, #4
 800cfb8:	3204      	addeq	r2, #4
 800cfba:	0799      	lsls	r1, r3, #30
 800cfbc:	bf04      	itt	eq
 800cfbe:	089b      	lsreq	r3, r3, #2
 800cfc0:	3202      	addeq	r2, #2
 800cfc2:	07d9      	lsls	r1, r3, #31
 800cfc4:	d403      	bmi.n	800cfce <__lo0bits+0x4e>
 800cfc6:	085b      	lsrs	r3, r3, #1
 800cfc8:	f102 0201 	add.w	r2, r2, #1
 800cfcc:	d003      	beq.n	800cfd6 <__lo0bits+0x56>
 800cfce:	6003      	str	r3, [r0, #0]
 800cfd0:	e7e5      	b.n	800cf9e <__lo0bits+0x1e>
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	e7e3      	b.n	800cf9e <__lo0bits+0x1e>
 800cfd6:	2220      	movs	r2, #32
 800cfd8:	e7e1      	b.n	800cf9e <__lo0bits+0x1e>
	...

0800cfdc <__i2b>:
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	460c      	mov	r4, r1
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	f7ff ff05 	bl	800cdf0 <_Balloc>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	b928      	cbnz	r0, 800cff6 <__i2b+0x1a>
 800cfea:	4b05      	ldr	r3, [pc, #20]	; (800d000 <__i2b+0x24>)
 800cfec:	4805      	ldr	r0, [pc, #20]	; (800d004 <__i2b+0x28>)
 800cfee:	f240 1145 	movw	r1, #325	; 0x145
 800cff2:	f000 fb5b 	bl	800d6ac <__assert_func>
 800cff6:	2301      	movs	r3, #1
 800cff8:	6144      	str	r4, [r0, #20]
 800cffa:	6103      	str	r3, [r0, #16]
 800cffc:	bd10      	pop	{r4, pc}
 800cffe:	bf00      	nop
 800d000:	0800e2a4 	.word	0x0800e2a4
 800d004:	0800e2c6 	.word	0x0800e2c6

0800d008 <__multiply>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	4691      	mov	r9, r2
 800d00e:	690a      	ldr	r2, [r1, #16]
 800d010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d014:	429a      	cmp	r2, r3
 800d016:	bfb8      	it	lt
 800d018:	460b      	movlt	r3, r1
 800d01a:	460c      	mov	r4, r1
 800d01c:	bfbc      	itt	lt
 800d01e:	464c      	movlt	r4, r9
 800d020:	4699      	movlt	r9, r3
 800d022:	6927      	ldr	r7, [r4, #16]
 800d024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d028:	68a3      	ldr	r3, [r4, #8]
 800d02a:	6861      	ldr	r1, [r4, #4]
 800d02c:	eb07 060a 	add.w	r6, r7, sl
 800d030:	42b3      	cmp	r3, r6
 800d032:	b085      	sub	sp, #20
 800d034:	bfb8      	it	lt
 800d036:	3101      	addlt	r1, #1
 800d038:	f7ff feda 	bl	800cdf0 <_Balloc>
 800d03c:	b930      	cbnz	r0, 800d04c <__multiply+0x44>
 800d03e:	4602      	mov	r2, r0
 800d040:	4b44      	ldr	r3, [pc, #272]	; (800d154 <__multiply+0x14c>)
 800d042:	4845      	ldr	r0, [pc, #276]	; (800d158 <__multiply+0x150>)
 800d044:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d048:	f000 fb30 	bl	800d6ac <__assert_func>
 800d04c:	f100 0514 	add.w	r5, r0, #20
 800d050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d054:	462b      	mov	r3, r5
 800d056:	2200      	movs	r2, #0
 800d058:	4543      	cmp	r3, r8
 800d05a:	d321      	bcc.n	800d0a0 <__multiply+0x98>
 800d05c:	f104 0314 	add.w	r3, r4, #20
 800d060:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d064:	f109 0314 	add.w	r3, r9, #20
 800d068:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d06c:	9202      	str	r2, [sp, #8]
 800d06e:	1b3a      	subs	r2, r7, r4
 800d070:	3a15      	subs	r2, #21
 800d072:	f022 0203 	bic.w	r2, r2, #3
 800d076:	3204      	adds	r2, #4
 800d078:	f104 0115 	add.w	r1, r4, #21
 800d07c:	428f      	cmp	r7, r1
 800d07e:	bf38      	it	cc
 800d080:	2204      	movcc	r2, #4
 800d082:	9201      	str	r2, [sp, #4]
 800d084:	9a02      	ldr	r2, [sp, #8]
 800d086:	9303      	str	r3, [sp, #12]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d80c      	bhi.n	800d0a6 <__multiply+0x9e>
 800d08c:	2e00      	cmp	r6, #0
 800d08e:	dd03      	ble.n	800d098 <__multiply+0x90>
 800d090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d094:	2b00      	cmp	r3, #0
 800d096:	d05b      	beq.n	800d150 <__multiply+0x148>
 800d098:	6106      	str	r6, [r0, #16]
 800d09a:	b005      	add	sp, #20
 800d09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a0:	f843 2b04 	str.w	r2, [r3], #4
 800d0a4:	e7d8      	b.n	800d058 <__multiply+0x50>
 800d0a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0aa:	f1ba 0f00 	cmp.w	sl, #0
 800d0ae:	d024      	beq.n	800d0fa <__multiply+0xf2>
 800d0b0:	f104 0e14 	add.w	lr, r4, #20
 800d0b4:	46a9      	mov	r9, r5
 800d0b6:	f04f 0c00 	mov.w	ip, #0
 800d0ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0be:	f8d9 1000 	ldr.w	r1, [r9]
 800d0c2:	fa1f fb82 	uxth.w	fp, r2
 800d0c6:	b289      	uxth	r1, r1
 800d0c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d0cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d0d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d0d4:	4461      	add	r1, ip
 800d0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0da:	fb0a c20b 	mla	r2, sl, fp, ip
 800d0de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d0e2:	b289      	uxth	r1, r1
 800d0e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0e8:	4577      	cmp	r7, lr
 800d0ea:	f849 1b04 	str.w	r1, [r9], #4
 800d0ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0f2:	d8e2      	bhi.n	800d0ba <__multiply+0xb2>
 800d0f4:	9a01      	ldr	r2, [sp, #4]
 800d0f6:	f845 c002 	str.w	ip, [r5, r2]
 800d0fa:	9a03      	ldr	r2, [sp, #12]
 800d0fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d100:	3304      	adds	r3, #4
 800d102:	f1b9 0f00 	cmp.w	r9, #0
 800d106:	d021      	beq.n	800d14c <__multiply+0x144>
 800d108:	6829      	ldr	r1, [r5, #0]
 800d10a:	f104 0c14 	add.w	ip, r4, #20
 800d10e:	46ae      	mov	lr, r5
 800d110:	f04f 0a00 	mov.w	sl, #0
 800d114:	f8bc b000 	ldrh.w	fp, [ip]
 800d118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d11c:	fb09 220b 	mla	r2, r9, fp, r2
 800d120:	4452      	add	r2, sl
 800d122:	b289      	uxth	r1, r1
 800d124:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d128:	f84e 1b04 	str.w	r1, [lr], #4
 800d12c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d130:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d134:	f8be 1000 	ldrh.w	r1, [lr]
 800d138:	fb09 110a 	mla	r1, r9, sl, r1
 800d13c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d140:	4567      	cmp	r7, ip
 800d142:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d146:	d8e5      	bhi.n	800d114 <__multiply+0x10c>
 800d148:	9a01      	ldr	r2, [sp, #4]
 800d14a:	50a9      	str	r1, [r5, r2]
 800d14c:	3504      	adds	r5, #4
 800d14e:	e799      	b.n	800d084 <__multiply+0x7c>
 800d150:	3e01      	subs	r6, #1
 800d152:	e79b      	b.n	800d08c <__multiply+0x84>
 800d154:	0800e2a4 	.word	0x0800e2a4
 800d158:	0800e2c6 	.word	0x0800e2c6

0800d15c <__pow5mult>:
 800d15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d160:	4615      	mov	r5, r2
 800d162:	f012 0203 	ands.w	r2, r2, #3
 800d166:	4606      	mov	r6, r0
 800d168:	460f      	mov	r7, r1
 800d16a:	d007      	beq.n	800d17c <__pow5mult+0x20>
 800d16c:	4c25      	ldr	r4, [pc, #148]	; (800d204 <__pow5mult+0xa8>)
 800d16e:	3a01      	subs	r2, #1
 800d170:	2300      	movs	r3, #0
 800d172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d176:	f7ff fe9d 	bl	800ceb4 <__multadd>
 800d17a:	4607      	mov	r7, r0
 800d17c:	10ad      	asrs	r5, r5, #2
 800d17e:	d03d      	beq.n	800d1fc <__pow5mult+0xa0>
 800d180:	69f4      	ldr	r4, [r6, #28]
 800d182:	b97c      	cbnz	r4, 800d1a4 <__pow5mult+0x48>
 800d184:	2010      	movs	r0, #16
 800d186:	f7ff fcd1 	bl	800cb2c <malloc>
 800d18a:	4602      	mov	r2, r0
 800d18c:	61f0      	str	r0, [r6, #28]
 800d18e:	b928      	cbnz	r0, 800d19c <__pow5mult+0x40>
 800d190:	4b1d      	ldr	r3, [pc, #116]	; (800d208 <__pow5mult+0xac>)
 800d192:	481e      	ldr	r0, [pc, #120]	; (800d20c <__pow5mult+0xb0>)
 800d194:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d198:	f000 fa88 	bl	800d6ac <__assert_func>
 800d19c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1a0:	6004      	str	r4, [r0, #0]
 800d1a2:	60c4      	str	r4, [r0, #12]
 800d1a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d1a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1ac:	b94c      	cbnz	r4, 800d1c2 <__pow5mult+0x66>
 800d1ae:	f240 2171 	movw	r1, #625	; 0x271
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ff12 	bl	800cfdc <__i2b>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1be:	4604      	mov	r4, r0
 800d1c0:	6003      	str	r3, [r0, #0]
 800d1c2:	f04f 0900 	mov.w	r9, #0
 800d1c6:	07eb      	lsls	r3, r5, #31
 800d1c8:	d50a      	bpl.n	800d1e0 <__pow5mult+0x84>
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	f7ff ff1a 	bl	800d008 <__multiply>
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4680      	mov	r8, r0
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f7ff fe49 	bl	800ce70 <_Bfree>
 800d1de:	4647      	mov	r7, r8
 800d1e0:	106d      	asrs	r5, r5, #1
 800d1e2:	d00b      	beq.n	800d1fc <__pow5mult+0xa0>
 800d1e4:	6820      	ldr	r0, [r4, #0]
 800d1e6:	b938      	cbnz	r0, 800d1f8 <__pow5mult+0x9c>
 800d1e8:	4622      	mov	r2, r4
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7ff ff0b 	bl	800d008 <__multiply>
 800d1f2:	6020      	str	r0, [r4, #0]
 800d1f4:	f8c0 9000 	str.w	r9, [r0]
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	e7e4      	b.n	800d1c6 <__pow5mult+0x6a>
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d202:	bf00      	nop
 800d204:	0800e410 	.word	0x0800e410
 800d208:	0800e235 	.word	0x0800e235
 800d20c:	0800e2c6 	.word	0x0800e2c6

0800d210 <__lshift>:
 800d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	460c      	mov	r4, r1
 800d216:	6849      	ldr	r1, [r1, #4]
 800d218:	6923      	ldr	r3, [r4, #16]
 800d21a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d21e:	68a3      	ldr	r3, [r4, #8]
 800d220:	4607      	mov	r7, r0
 800d222:	4691      	mov	r9, r2
 800d224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d228:	f108 0601 	add.w	r6, r8, #1
 800d22c:	42b3      	cmp	r3, r6
 800d22e:	db0b      	blt.n	800d248 <__lshift+0x38>
 800d230:	4638      	mov	r0, r7
 800d232:	f7ff fddd 	bl	800cdf0 <_Balloc>
 800d236:	4605      	mov	r5, r0
 800d238:	b948      	cbnz	r0, 800d24e <__lshift+0x3e>
 800d23a:	4602      	mov	r2, r0
 800d23c:	4b28      	ldr	r3, [pc, #160]	; (800d2e0 <__lshift+0xd0>)
 800d23e:	4829      	ldr	r0, [pc, #164]	; (800d2e4 <__lshift+0xd4>)
 800d240:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d244:	f000 fa32 	bl	800d6ac <__assert_func>
 800d248:	3101      	adds	r1, #1
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	e7ee      	b.n	800d22c <__lshift+0x1c>
 800d24e:	2300      	movs	r3, #0
 800d250:	f100 0114 	add.w	r1, r0, #20
 800d254:	f100 0210 	add.w	r2, r0, #16
 800d258:	4618      	mov	r0, r3
 800d25a:	4553      	cmp	r3, sl
 800d25c:	db33      	blt.n	800d2c6 <__lshift+0xb6>
 800d25e:	6920      	ldr	r0, [r4, #16]
 800d260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d264:	f104 0314 	add.w	r3, r4, #20
 800d268:	f019 091f 	ands.w	r9, r9, #31
 800d26c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d270:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d274:	d02b      	beq.n	800d2ce <__lshift+0xbe>
 800d276:	f1c9 0e20 	rsb	lr, r9, #32
 800d27a:	468a      	mov	sl, r1
 800d27c:	2200      	movs	r2, #0
 800d27e:	6818      	ldr	r0, [r3, #0]
 800d280:	fa00 f009 	lsl.w	r0, r0, r9
 800d284:	4310      	orrs	r0, r2
 800d286:	f84a 0b04 	str.w	r0, [sl], #4
 800d28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d28e:	459c      	cmp	ip, r3
 800d290:	fa22 f20e 	lsr.w	r2, r2, lr
 800d294:	d8f3      	bhi.n	800d27e <__lshift+0x6e>
 800d296:	ebac 0304 	sub.w	r3, ip, r4
 800d29a:	3b15      	subs	r3, #21
 800d29c:	f023 0303 	bic.w	r3, r3, #3
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	f104 0015 	add.w	r0, r4, #21
 800d2a6:	4584      	cmp	ip, r0
 800d2a8:	bf38      	it	cc
 800d2aa:	2304      	movcc	r3, #4
 800d2ac:	50ca      	str	r2, [r1, r3]
 800d2ae:	b10a      	cbz	r2, 800d2b4 <__lshift+0xa4>
 800d2b0:	f108 0602 	add.w	r6, r8, #2
 800d2b4:	3e01      	subs	r6, #1
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	612e      	str	r6, [r5, #16]
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	f7ff fdd8 	bl	800ce70 <_Bfree>
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	e7c5      	b.n	800d25a <__lshift+0x4a>
 800d2ce:	3904      	subs	r1, #4
 800d2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2d8:	459c      	cmp	ip, r3
 800d2da:	d8f9      	bhi.n	800d2d0 <__lshift+0xc0>
 800d2dc:	e7ea      	b.n	800d2b4 <__lshift+0xa4>
 800d2de:	bf00      	nop
 800d2e0:	0800e2a4 	.word	0x0800e2a4
 800d2e4:	0800e2c6 	.word	0x0800e2c6

0800d2e8 <__mcmp>:
 800d2e8:	b530      	push	{r4, r5, lr}
 800d2ea:	6902      	ldr	r2, [r0, #16]
 800d2ec:	690c      	ldr	r4, [r1, #16]
 800d2ee:	1b12      	subs	r2, r2, r4
 800d2f0:	d10e      	bne.n	800d310 <__mcmp+0x28>
 800d2f2:	f100 0314 	add.w	r3, r0, #20
 800d2f6:	3114      	adds	r1, #20
 800d2f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d2fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d300:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d304:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d308:	42a5      	cmp	r5, r4
 800d30a:	d003      	beq.n	800d314 <__mcmp+0x2c>
 800d30c:	d305      	bcc.n	800d31a <__mcmp+0x32>
 800d30e:	2201      	movs	r2, #1
 800d310:	4610      	mov	r0, r2
 800d312:	bd30      	pop	{r4, r5, pc}
 800d314:	4283      	cmp	r3, r0
 800d316:	d3f3      	bcc.n	800d300 <__mcmp+0x18>
 800d318:	e7fa      	b.n	800d310 <__mcmp+0x28>
 800d31a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d31e:	e7f7      	b.n	800d310 <__mcmp+0x28>

0800d320 <__mdiff>:
 800d320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	4606      	mov	r6, r0
 800d328:	4611      	mov	r1, r2
 800d32a:	4620      	mov	r0, r4
 800d32c:	4690      	mov	r8, r2
 800d32e:	f7ff ffdb 	bl	800d2e8 <__mcmp>
 800d332:	1e05      	subs	r5, r0, #0
 800d334:	d110      	bne.n	800d358 <__mdiff+0x38>
 800d336:	4629      	mov	r1, r5
 800d338:	4630      	mov	r0, r6
 800d33a:	f7ff fd59 	bl	800cdf0 <_Balloc>
 800d33e:	b930      	cbnz	r0, 800d34e <__mdiff+0x2e>
 800d340:	4b3a      	ldr	r3, [pc, #232]	; (800d42c <__mdiff+0x10c>)
 800d342:	4602      	mov	r2, r0
 800d344:	f240 2137 	movw	r1, #567	; 0x237
 800d348:	4839      	ldr	r0, [pc, #228]	; (800d430 <__mdiff+0x110>)
 800d34a:	f000 f9af 	bl	800d6ac <__assert_func>
 800d34e:	2301      	movs	r3, #1
 800d350:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d358:	bfa4      	itt	ge
 800d35a:	4643      	movge	r3, r8
 800d35c:	46a0      	movge	r8, r4
 800d35e:	4630      	mov	r0, r6
 800d360:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d364:	bfa6      	itte	ge
 800d366:	461c      	movge	r4, r3
 800d368:	2500      	movge	r5, #0
 800d36a:	2501      	movlt	r5, #1
 800d36c:	f7ff fd40 	bl	800cdf0 <_Balloc>
 800d370:	b920      	cbnz	r0, 800d37c <__mdiff+0x5c>
 800d372:	4b2e      	ldr	r3, [pc, #184]	; (800d42c <__mdiff+0x10c>)
 800d374:	4602      	mov	r2, r0
 800d376:	f240 2145 	movw	r1, #581	; 0x245
 800d37a:	e7e5      	b.n	800d348 <__mdiff+0x28>
 800d37c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d380:	6926      	ldr	r6, [r4, #16]
 800d382:	60c5      	str	r5, [r0, #12]
 800d384:	f104 0914 	add.w	r9, r4, #20
 800d388:	f108 0514 	add.w	r5, r8, #20
 800d38c:	f100 0e14 	add.w	lr, r0, #20
 800d390:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d394:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d398:	f108 0210 	add.w	r2, r8, #16
 800d39c:	46f2      	mov	sl, lr
 800d39e:	2100      	movs	r1, #0
 800d3a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3a8:	fa11 f88b 	uxtah	r8, r1, fp
 800d3ac:	b299      	uxth	r1, r3
 800d3ae:	0c1b      	lsrs	r3, r3, #16
 800d3b0:	eba8 0801 	sub.w	r8, r8, r1
 800d3b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3bc:	fa1f f888 	uxth.w	r8, r8
 800d3c0:	1419      	asrs	r1, r3, #16
 800d3c2:	454e      	cmp	r6, r9
 800d3c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3c8:	f84a 3b04 	str.w	r3, [sl], #4
 800d3cc:	d8e8      	bhi.n	800d3a0 <__mdiff+0x80>
 800d3ce:	1b33      	subs	r3, r6, r4
 800d3d0:	3b15      	subs	r3, #21
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	3415      	adds	r4, #21
 800d3da:	42a6      	cmp	r6, r4
 800d3dc:	bf38      	it	cc
 800d3de:	2304      	movcc	r3, #4
 800d3e0:	441d      	add	r5, r3
 800d3e2:	4473      	add	r3, lr
 800d3e4:	469e      	mov	lr, r3
 800d3e6:	462e      	mov	r6, r5
 800d3e8:	4566      	cmp	r6, ip
 800d3ea:	d30e      	bcc.n	800d40a <__mdiff+0xea>
 800d3ec:	f10c 0203 	add.w	r2, ip, #3
 800d3f0:	1b52      	subs	r2, r2, r5
 800d3f2:	f022 0203 	bic.w	r2, r2, #3
 800d3f6:	3d03      	subs	r5, #3
 800d3f8:	45ac      	cmp	ip, r5
 800d3fa:	bf38      	it	cc
 800d3fc:	2200      	movcc	r2, #0
 800d3fe:	4413      	add	r3, r2
 800d400:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d404:	b17a      	cbz	r2, 800d426 <__mdiff+0x106>
 800d406:	6107      	str	r7, [r0, #16]
 800d408:	e7a4      	b.n	800d354 <__mdiff+0x34>
 800d40a:	f856 8b04 	ldr.w	r8, [r6], #4
 800d40e:	fa11 f288 	uxtah	r2, r1, r8
 800d412:	1414      	asrs	r4, r2, #16
 800d414:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d418:	b292      	uxth	r2, r2
 800d41a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d41e:	f84e 2b04 	str.w	r2, [lr], #4
 800d422:	1421      	asrs	r1, r4, #16
 800d424:	e7e0      	b.n	800d3e8 <__mdiff+0xc8>
 800d426:	3f01      	subs	r7, #1
 800d428:	e7ea      	b.n	800d400 <__mdiff+0xe0>
 800d42a:	bf00      	nop
 800d42c:	0800e2a4 	.word	0x0800e2a4
 800d430:	0800e2c6 	.word	0x0800e2c6

0800d434 <__d2b>:
 800d434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d438:	460f      	mov	r7, r1
 800d43a:	2101      	movs	r1, #1
 800d43c:	ec59 8b10 	vmov	r8, r9, d0
 800d440:	4616      	mov	r6, r2
 800d442:	f7ff fcd5 	bl	800cdf0 <_Balloc>
 800d446:	4604      	mov	r4, r0
 800d448:	b930      	cbnz	r0, 800d458 <__d2b+0x24>
 800d44a:	4602      	mov	r2, r0
 800d44c:	4b24      	ldr	r3, [pc, #144]	; (800d4e0 <__d2b+0xac>)
 800d44e:	4825      	ldr	r0, [pc, #148]	; (800d4e4 <__d2b+0xb0>)
 800d450:	f240 310f 	movw	r1, #783	; 0x30f
 800d454:	f000 f92a 	bl	800d6ac <__assert_func>
 800d458:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d45c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d460:	bb2d      	cbnz	r5, 800d4ae <__d2b+0x7a>
 800d462:	9301      	str	r3, [sp, #4]
 800d464:	f1b8 0300 	subs.w	r3, r8, #0
 800d468:	d026      	beq.n	800d4b8 <__d2b+0x84>
 800d46a:	4668      	mov	r0, sp
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	f7ff fd87 	bl	800cf80 <__lo0bits>
 800d472:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d476:	b1e8      	cbz	r0, 800d4b4 <__d2b+0x80>
 800d478:	f1c0 0320 	rsb	r3, r0, #32
 800d47c:	fa02 f303 	lsl.w	r3, r2, r3
 800d480:	430b      	orrs	r3, r1
 800d482:	40c2      	lsrs	r2, r0
 800d484:	6163      	str	r3, [r4, #20]
 800d486:	9201      	str	r2, [sp, #4]
 800d488:	9b01      	ldr	r3, [sp, #4]
 800d48a:	61a3      	str	r3, [r4, #24]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	bf14      	ite	ne
 800d490:	2202      	movne	r2, #2
 800d492:	2201      	moveq	r2, #1
 800d494:	6122      	str	r2, [r4, #16]
 800d496:	b1bd      	cbz	r5, 800d4c8 <__d2b+0x94>
 800d498:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d49c:	4405      	add	r5, r0
 800d49e:	603d      	str	r5, [r7, #0]
 800d4a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4a4:	6030      	str	r0, [r6, #0]
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	b003      	add	sp, #12
 800d4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4b2:	e7d6      	b.n	800d462 <__d2b+0x2e>
 800d4b4:	6161      	str	r1, [r4, #20]
 800d4b6:	e7e7      	b.n	800d488 <__d2b+0x54>
 800d4b8:	a801      	add	r0, sp, #4
 800d4ba:	f7ff fd61 	bl	800cf80 <__lo0bits>
 800d4be:	9b01      	ldr	r3, [sp, #4]
 800d4c0:	6163      	str	r3, [r4, #20]
 800d4c2:	3020      	adds	r0, #32
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	e7e5      	b.n	800d494 <__d2b+0x60>
 800d4c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4d0:	6038      	str	r0, [r7, #0]
 800d4d2:	6918      	ldr	r0, [r3, #16]
 800d4d4:	f7ff fd34 	bl	800cf40 <__hi0bits>
 800d4d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4dc:	e7e2      	b.n	800d4a4 <__d2b+0x70>
 800d4de:	bf00      	nop
 800d4e0:	0800e2a4 	.word	0x0800e2a4
 800d4e4:	0800e2c6 	.word	0x0800e2c6

0800d4e8 <__sread>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f0:	f000 f8a8 	bl	800d644 <_read_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	bfab      	itete	ge
 800d4f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4fa:	89a3      	ldrhlt	r3, [r4, #12]
 800d4fc:	181b      	addge	r3, r3, r0
 800d4fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d502:	bfac      	ite	ge
 800d504:	6563      	strge	r3, [r4, #84]	; 0x54
 800d506:	81a3      	strhlt	r3, [r4, #12]
 800d508:	bd10      	pop	{r4, pc}

0800d50a <__swrite>:
 800d50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d50e:	461f      	mov	r7, r3
 800d510:	898b      	ldrh	r3, [r1, #12]
 800d512:	05db      	lsls	r3, r3, #23
 800d514:	4605      	mov	r5, r0
 800d516:	460c      	mov	r4, r1
 800d518:	4616      	mov	r6, r2
 800d51a:	d505      	bpl.n	800d528 <__swrite+0x1e>
 800d51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d520:	2302      	movs	r3, #2
 800d522:	2200      	movs	r2, #0
 800d524:	f000 f87c 	bl	800d620 <_lseek_r>
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d532:	81a3      	strh	r3, [r4, #12]
 800d534:	4632      	mov	r2, r6
 800d536:	463b      	mov	r3, r7
 800d538:	4628      	mov	r0, r5
 800d53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d53e:	f000 b8a3 	b.w	800d688 <_write_r>

0800d542 <__sseek>:
 800d542:	b510      	push	{r4, lr}
 800d544:	460c      	mov	r4, r1
 800d546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54a:	f000 f869 	bl	800d620 <_lseek_r>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	bf15      	itete	ne
 800d554:	6560      	strne	r0, [r4, #84]	; 0x54
 800d556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d55a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d55e:	81a3      	strheq	r3, [r4, #12]
 800d560:	bf18      	it	ne
 800d562:	81a3      	strhne	r3, [r4, #12]
 800d564:	bd10      	pop	{r4, pc}

0800d566 <__sclose>:
 800d566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56a:	f000 b849 	b.w	800d600 <_close_r>

0800d56e <_realloc_r>:
 800d56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d572:	4680      	mov	r8, r0
 800d574:	4614      	mov	r4, r2
 800d576:	460e      	mov	r6, r1
 800d578:	b921      	cbnz	r1, 800d584 <_realloc_r+0x16>
 800d57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	4611      	mov	r1, r2
 800d580:	f7ff bafc 	b.w	800cb7c <_malloc_r>
 800d584:	b92a      	cbnz	r2, 800d592 <_realloc_r+0x24>
 800d586:	f000 f8c5 	bl	800d714 <_free_r>
 800d58a:	4625      	mov	r5, r4
 800d58c:	4628      	mov	r0, r5
 800d58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d592:	f000 f91d 	bl	800d7d0 <_malloc_usable_size_r>
 800d596:	4284      	cmp	r4, r0
 800d598:	4607      	mov	r7, r0
 800d59a:	d802      	bhi.n	800d5a2 <_realloc_r+0x34>
 800d59c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5a0:	d812      	bhi.n	800d5c8 <_realloc_r+0x5a>
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	f7ff fae9 	bl	800cb7c <_malloc_r>
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d0ed      	beq.n	800d58c <_realloc_r+0x1e>
 800d5b0:	42bc      	cmp	r4, r7
 800d5b2:	4622      	mov	r2, r4
 800d5b4:	4631      	mov	r1, r6
 800d5b6:	bf28      	it	cs
 800d5b8:	463a      	movcs	r2, r7
 800d5ba:	f7fe fad4 	bl	800bb66 <memcpy>
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4640      	mov	r0, r8
 800d5c2:	f000 f8a7 	bl	800d714 <_free_r>
 800d5c6:	e7e1      	b.n	800d58c <_realloc_r+0x1e>
 800d5c8:	4635      	mov	r5, r6
 800d5ca:	e7df      	b.n	800d58c <_realloc_r+0x1e>

0800d5cc <memmove>:
 800d5cc:	4288      	cmp	r0, r1
 800d5ce:	b510      	push	{r4, lr}
 800d5d0:	eb01 0402 	add.w	r4, r1, r2
 800d5d4:	d902      	bls.n	800d5dc <memmove+0x10>
 800d5d6:	4284      	cmp	r4, r0
 800d5d8:	4623      	mov	r3, r4
 800d5da:	d807      	bhi.n	800d5ec <memmove+0x20>
 800d5dc:	1e43      	subs	r3, r0, #1
 800d5de:	42a1      	cmp	r1, r4
 800d5e0:	d008      	beq.n	800d5f4 <memmove+0x28>
 800d5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5ea:	e7f8      	b.n	800d5de <memmove+0x12>
 800d5ec:	4402      	add	r2, r0
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	428a      	cmp	r2, r1
 800d5f2:	d100      	bne.n	800d5f6 <memmove+0x2a>
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5fe:	e7f7      	b.n	800d5f0 <memmove+0x24>

0800d600 <_close_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4d06      	ldr	r5, [pc, #24]	; (800d61c <_close_r+0x1c>)
 800d604:	2300      	movs	r3, #0
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	602b      	str	r3, [r5, #0]
 800d60c:	f7f4 ffc3 	bl	8002596 <_close>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d102      	bne.n	800d61a <_close_r+0x1a>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	b103      	cbz	r3, 800d61a <_close_r+0x1a>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	200022d4 	.word	0x200022d4

0800d620 <_lseek_r>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4d07      	ldr	r5, [pc, #28]	; (800d640 <_lseek_r+0x20>)
 800d624:	4604      	mov	r4, r0
 800d626:	4608      	mov	r0, r1
 800d628:	4611      	mov	r1, r2
 800d62a:	2200      	movs	r2, #0
 800d62c:	602a      	str	r2, [r5, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	f7f4 ffd8 	bl	80025e4 <_lseek>
 800d634:	1c43      	adds	r3, r0, #1
 800d636:	d102      	bne.n	800d63e <_lseek_r+0x1e>
 800d638:	682b      	ldr	r3, [r5, #0]
 800d63a:	b103      	cbz	r3, 800d63e <_lseek_r+0x1e>
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	bd38      	pop	{r3, r4, r5, pc}
 800d640:	200022d4 	.word	0x200022d4

0800d644 <_read_r>:
 800d644:	b538      	push	{r3, r4, r5, lr}
 800d646:	4d07      	ldr	r5, [pc, #28]	; (800d664 <_read_r+0x20>)
 800d648:	4604      	mov	r4, r0
 800d64a:	4608      	mov	r0, r1
 800d64c:	4611      	mov	r1, r2
 800d64e:	2200      	movs	r2, #0
 800d650:	602a      	str	r2, [r5, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	f7f4 ff66 	bl	8002524 <_read>
 800d658:	1c43      	adds	r3, r0, #1
 800d65a:	d102      	bne.n	800d662 <_read_r+0x1e>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	b103      	cbz	r3, 800d662 <_read_r+0x1e>
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	bd38      	pop	{r3, r4, r5, pc}
 800d664:	200022d4 	.word	0x200022d4

0800d668 <_sbrk_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4d06      	ldr	r5, [pc, #24]	; (800d684 <_sbrk_r+0x1c>)
 800d66c:	2300      	movs	r3, #0
 800d66e:	4604      	mov	r4, r0
 800d670:	4608      	mov	r0, r1
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	f7f4 ffc4 	bl	8002600 <_sbrk>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d102      	bne.n	800d682 <_sbrk_r+0x1a>
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	b103      	cbz	r3, 800d682 <_sbrk_r+0x1a>
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	200022d4 	.word	0x200022d4

0800d688 <_write_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	4d07      	ldr	r5, [pc, #28]	; (800d6a8 <_write_r+0x20>)
 800d68c:	4604      	mov	r4, r0
 800d68e:	4608      	mov	r0, r1
 800d690:	4611      	mov	r1, r2
 800d692:	2200      	movs	r2, #0
 800d694:	602a      	str	r2, [r5, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	f7f4 ff61 	bl	800255e <_write>
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	d102      	bne.n	800d6a6 <_write_r+0x1e>
 800d6a0:	682b      	ldr	r3, [r5, #0]
 800d6a2:	b103      	cbz	r3, 800d6a6 <_write_r+0x1e>
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	200022d4 	.word	0x200022d4

0800d6ac <__assert_func>:
 800d6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ae:	4614      	mov	r4, r2
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <__assert_func+0x2c>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	68d8      	ldr	r0, [r3, #12]
 800d6ba:	b14c      	cbz	r4, 800d6d0 <__assert_func+0x24>
 800d6bc:	4b07      	ldr	r3, [pc, #28]	; (800d6dc <__assert_func+0x30>)
 800d6be:	9100      	str	r1, [sp, #0]
 800d6c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6c4:	4906      	ldr	r1, [pc, #24]	; (800d6e0 <__assert_func+0x34>)
 800d6c6:	462b      	mov	r3, r5
 800d6c8:	f000 f88a 	bl	800d7e0 <fiprintf>
 800d6cc:	f000 f8a7 	bl	800d81e <abort>
 800d6d0:	4b04      	ldr	r3, [pc, #16]	; (800d6e4 <__assert_func+0x38>)
 800d6d2:	461c      	mov	r4, r3
 800d6d4:	e7f3      	b.n	800d6be <__assert_func+0x12>
 800d6d6:	bf00      	nop
 800d6d8:	20000164 	.word	0x20000164
 800d6dc:	0800e527 	.word	0x0800e527
 800d6e0:	0800e534 	.word	0x0800e534
 800d6e4:	0800e562 	.word	0x0800e562

0800d6e8 <_calloc_r>:
 800d6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ea:	fba1 2402 	umull	r2, r4, r1, r2
 800d6ee:	b94c      	cbnz	r4, 800d704 <_calloc_r+0x1c>
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	9201      	str	r2, [sp, #4]
 800d6f4:	f7ff fa42 	bl	800cb7c <_malloc_r>
 800d6f8:	9a01      	ldr	r2, [sp, #4]
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	b930      	cbnz	r0, 800d70c <_calloc_r+0x24>
 800d6fe:	4628      	mov	r0, r5
 800d700:	b003      	add	sp, #12
 800d702:	bd30      	pop	{r4, r5, pc}
 800d704:	220c      	movs	r2, #12
 800d706:	6002      	str	r2, [r0, #0]
 800d708:	2500      	movs	r5, #0
 800d70a:	e7f8      	b.n	800d6fe <_calloc_r+0x16>
 800d70c:	4621      	mov	r1, r4
 800d70e:	f7fe f9f1 	bl	800baf4 <memset>
 800d712:	e7f4      	b.n	800d6fe <_calloc_r+0x16>

0800d714 <_free_r>:
 800d714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d716:	2900      	cmp	r1, #0
 800d718:	d044      	beq.n	800d7a4 <_free_r+0x90>
 800d71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71e:	9001      	str	r0, [sp, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f1a1 0404 	sub.w	r4, r1, #4
 800d726:	bfb8      	it	lt
 800d728:	18e4      	addlt	r4, r4, r3
 800d72a:	f7ff fb55 	bl	800cdd8 <__malloc_lock>
 800d72e:	4a1e      	ldr	r2, [pc, #120]	; (800d7a8 <_free_r+0x94>)
 800d730:	9801      	ldr	r0, [sp, #4]
 800d732:	6813      	ldr	r3, [r2, #0]
 800d734:	b933      	cbnz	r3, 800d744 <_free_r+0x30>
 800d736:	6063      	str	r3, [r4, #4]
 800d738:	6014      	str	r4, [r2, #0]
 800d73a:	b003      	add	sp, #12
 800d73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d740:	f7ff bb50 	b.w	800cde4 <__malloc_unlock>
 800d744:	42a3      	cmp	r3, r4
 800d746:	d908      	bls.n	800d75a <_free_r+0x46>
 800d748:	6825      	ldr	r5, [r4, #0]
 800d74a:	1961      	adds	r1, r4, r5
 800d74c:	428b      	cmp	r3, r1
 800d74e:	bf01      	itttt	eq
 800d750:	6819      	ldreq	r1, [r3, #0]
 800d752:	685b      	ldreq	r3, [r3, #4]
 800d754:	1949      	addeq	r1, r1, r5
 800d756:	6021      	streq	r1, [r4, #0]
 800d758:	e7ed      	b.n	800d736 <_free_r+0x22>
 800d75a:	461a      	mov	r2, r3
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	b10b      	cbz	r3, 800d764 <_free_r+0x50>
 800d760:	42a3      	cmp	r3, r4
 800d762:	d9fa      	bls.n	800d75a <_free_r+0x46>
 800d764:	6811      	ldr	r1, [r2, #0]
 800d766:	1855      	adds	r5, r2, r1
 800d768:	42a5      	cmp	r5, r4
 800d76a:	d10b      	bne.n	800d784 <_free_r+0x70>
 800d76c:	6824      	ldr	r4, [r4, #0]
 800d76e:	4421      	add	r1, r4
 800d770:	1854      	adds	r4, r2, r1
 800d772:	42a3      	cmp	r3, r4
 800d774:	6011      	str	r1, [r2, #0]
 800d776:	d1e0      	bne.n	800d73a <_free_r+0x26>
 800d778:	681c      	ldr	r4, [r3, #0]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	6053      	str	r3, [r2, #4]
 800d77e:	440c      	add	r4, r1
 800d780:	6014      	str	r4, [r2, #0]
 800d782:	e7da      	b.n	800d73a <_free_r+0x26>
 800d784:	d902      	bls.n	800d78c <_free_r+0x78>
 800d786:	230c      	movs	r3, #12
 800d788:	6003      	str	r3, [r0, #0]
 800d78a:	e7d6      	b.n	800d73a <_free_r+0x26>
 800d78c:	6825      	ldr	r5, [r4, #0]
 800d78e:	1961      	adds	r1, r4, r5
 800d790:	428b      	cmp	r3, r1
 800d792:	bf04      	itt	eq
 800d794:	6819      	ldreq	r1, [r3, #0]
 800d796:	685b      	ldreq	r3, [r3, #4]
 800d798:	6063      	str	r3, [r4, #4]
 800d79a:	bf04      	itt	eq
 800d79c:	1949      	addeq	r1, r1, r5
 800d79e:	6021      	streq	r1, [r4, #0]
 800d7a0:	6054      	str	r4, [r2, #4]
 800d7a2:	e7ca      	b.n	800d73a <_free_r+0x26>
 800d7a4:	b003      	add	sp, #12
 800d7a6:	bd30      	pop	{r4, r5, pc}
 800d7a8:	200022cc 	.word	0x200022cc

0800d7ac <__ascii_mbtowc>:
 800d7ac:	b082      	sub	sp, #8
 800d7ae:	b901      	cbnz	r1, 800d7b2 <__ascii_mbtowc+0x6>
 800d7b0:	a901      	add	r1, sp, #4
 800d7b2:	b142      	cbz	r2, 800d7c6 <__ascii_mbtowc+0x1a>
 800d7b4:	b14b      	cbz	r3, 800d7ca <__ascii_mbtowc+0x1e>
 800d7b6:	7813      	ldrb	r3, [r2, #0]
 800d7b8:	600b      	str	r3, [r1, #0]
 800d7ba:	7812      	ldrb	r2, [r2, #0]
 800d7bc:	1e10      	subs	r0, r2, #0
 800d7be:	bf18      	it	ne
 800d7c0:	2001      	movne	r0, #1
 800d7c2:	b002      	add	sp, #8
 800d7c4:	4770      	bx	lr
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	e7fb      	b.n	800d7c2 <__ascii_mbtowc+0x16>
 800d7ca:	f06f 0001 	mvn.w	r0, #1
 800d7ce:	e7f8      	b.n	800d7c2 <__ascii_mbtowc+0x16>

0800d7d0 <_malloc_usable_size_r>:
 800d7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d4:	1f18      	subs	r0, r3, #4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfbc      	itt	lt
 800d7da:	580b      	ldrlt	r3, [r1, r0]
 800d7dc:	18c0      	addlt	r0, r0, r3
 800d7de:	4770      	bx	lr

0800d7e0 <fiprintf>:
 800d7e0:	b40e      	push	{r1, r2, r3}
 800d7e2:	b503      	push	{r0, r1, lr}
 800d7e4:	4601      	mov	r1, r0
 800d7e6:	ab03      	add	r3, sp, #12
 800d7e8:	4805      	ldr	r0, [pc, #20]	; (800d800 <fiprintf+0x20>)
 800d7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ee:	6800      	ldr	r0, [r0, #0]
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	f000 f845 	bl	800d880 <_vfiprintf_r>
 800d7f6:	b002      	add	sp, #8
 800d7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7fc:	b003      	add	sp, #12
 800d7fe:	4770      	bx	lr
 800d800:	20000164 	.word	0x20000164

0800d804 <__ascii_wctomb>:
 800d804:	b149      	cbz	r1, 800d81a <__ascii_wctomb+0x16>
 800d806:	2aff      	cmp	r2, #255	; 0xff
 800d808:	bf85      	ittet	hi
 800d80a:	238a      	movhi	r3, #138	; 0x8a
 800d80c:	6003      	strhi	r3, [r0, #0]
 800d80e:	700a      	strbls	r2, [r1, #0]
 800d810:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d814:	bf98      	it	ls
 800d816:	2001      	movls	r0, #1
 800d818:	4770      	bx	lr
 800d81a:	4608      	mov	r0, r1
 800d81c:	4770      	bx	lr

0800d81e <abort>:
 800d81e:	b508      	push	{r3, lr}
 800d820:	2006      	movs	r0, #6
 800d822:	f000 fa89 	bl	800dd38 <raise>
 800d826:	2001      	movs	r0, #1
 800d828:	f7f4 fe72 	bl	8002510 <_exit>

0800d82c <__sfputc_r>:
 800d82c:	6893      	ldr	r3, [r2, #8]
 800d82e:	3b01      	subs	r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	b410      	push	{r4}
 800d834:	6093      	str	r3, [r2, #8]
 800d836:	da08      	bge.n	800d84a <__sfputc_r+0x1e>
 800d838:	6994      	ldr	r4, [r2, #24]
 800d83a:	42a3      	cmp	r3, r4
 800d83c:	db01      	blt.n	800d842 <__sfputc_r+0x16>
 800d83e:	290a      	cmp	r1, #10
 800d840:	d103      	bne.n	800d84a <__sfputc_r+0x1e>
 800d842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d846:	f000 b935 	b.w	800dab4 <__swbuf_r>
 800d84a:	6813      	ldr	r3, [r2, #0]
 800d84c:	1c58      	adds	r0, r3, #1
 800d84e:	6010      	str	r0, [r2, #0]
 800d850:	7019      	strb	r1, [r3, #0]
 800d852:	4608      	mov	r0, r1
 800d854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <__sfputs_r>:
 800d85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85c:	4606      	mov	r6, r0
 800d85e:	460f      	mov	r7, r1
 800d860:	4614      	mov	r4, r2
 800d862:	18d5      	adds	r5, r2, r3
 800d864:	42ac      	cmp	r4, r5
 800d866:	d101      	bne.n	800d86c <__sfputs_r+0x12>
 800d868:	2000      	movs	r0, #0
 800d86a:	e007      	b.n	800d87c <__sfputs_r+0x22>
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	463a      	mov	r2, r7
 800d872:	4630      	mov	r0, r6
 800d874:	f7ff ffda 	bl	800d82c <__sfputc_r>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d1f3      	bne.n	800d864 <__sfputs_r+0xa>
 800d87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d880 <_vfiprintf_r>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	460d      	mov	r5, r1
 800d886:	b09d      	sub	sp, #116	; 0x74
 800d888:	4614      	mov	r4, r2
 800d88a:	4698      	mov	r8, r3
 800d88c:	4606      	mov	r6, r0
 800d88e:	b118      	cbz	r0, 800d898 <_vfiprintf_r+0x18>
 800d890:	6a03      	ldr	r3, [r0, #32]
 800d892:	b90b      	cbnz	r3, 800d898 <_vfiprintf_r+0x18>
 800d894:	f7fe f8f8 	bl	800ba88 <__sinit>
 800d898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d89a:	07d9      	lsls	r1, r3, #31
 800d89c:	d405      	bmi.n	800d8aa <_vfiprintf_r+0x2a>
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	059a      	lsls	r2, r3, #22
 800d8a2:	d402      	bmi.n	800d8aa <_vfiprintf_r+0x2a>
 800d8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8a6:	f7fe f95c 	bl	800bb62 <__retarget_lock_acquire_recursive>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	071b      	lsls	r3, r3, #28
 800d8ae:	d501      	bpl.n	800d8b4 <_vfiprintf_r+0x34>
 800d8b0:	692b      	ldr	r3, [r5, #16]
 800d8b2:	b99b      	cbnz	r3, 800d8dc <_vfiprintf_r+0x5c>
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f000 f93a 	bl	800db30 <__swsetup_r>
 800d8bc:	b170      	cbz	r0, 800d8dc <_vfiprintf_r+0x5c>
 800d8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8c0:	07dc      	lsls	r4, r3, #31
 800d8c2:	d504      	bpl.n	800d8ce <_vfiprintf_r+0x4e>
 800d8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8c8:	b01d      	add	sp, #116	; 0x74
 800d8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ce:	89ab      	ldrh	r3, [r5, #12]
 800d8d0:	0598      	lsls	r0, r3, #22
 800d8d2:	d4f7      	bmi.n	800d8c4 <_vfiprintf_r+0x44>
 800d8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8d6:	f7fe f945 	bl	800bb64 <__retarget_lock_release_recursive>
 800d8da:	e7f3      	b.n	800d8c4 <_vfiprintf_r+0x44>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e0:	2320      	movs	r3, #32
 800d8e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8ea:	2330      	movs	r3, #48	; 0x30
 800d8ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800daa0 <_vfiprintf_r+0x220>
 800d8f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8f4:	f04f 0901 	mov.w	r9, #1
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	469a      	mov	sl, r3
 800d8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d900:	b10a      	cbz	r2, 800d906 <_vfiprintf_r+0x86>
 800d902:	2a25      	cmp	r2, #37	; 0x25
 800d904:	d1f9      	bne.n	800d8fa <_vfiprintf_r+0x7a>
 800d906:	ebba 0b04 	subs.w	fp, sl, r4
 800d90a:	d00b      	beq.n	800d924 <_vfiprintf_r+0xa4>
 800d90c:	465b      	mov	r3, fp
 800d90e:	4622      	mov	r2, r4
 800d910:	4629      	mov	r1, r5
 800d912:	4630      	mov	r0, r6
 800d914:	f7ff ffa1 	bl	800d85a <__sfputs_r>
 800d918:	3001      	adds	r0, #1
 800d91a:	f000 80a9 	beq.w	800da70 <_vfiprintf_r+0x1f0>
 800d91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d920:	445a      	add	r2, fp
 800d922:	9209      	str	r2, [sp, #36]	; 0x24
 800d924:	f89a 3000 	ldrb.w	r3, [sl]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 80a1 	beq.w	800da70 <_vfiprintf_r+0x1f0>
 800d92e:	2300      	movs	r3, #0
 800d930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d938:	f10a 0a01 	add.w	sl, sl, #1
 800d93c:	9304      	str	r3, [sp, #16]
 800d93e:	9307      	str	r3, [sp, #28]
 800d940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d944:	931a      	str	r3, [sp, #104]	; 0x68
 800d946:	4654      	mov	r4, sl
 800d948:	2205      	movs	r2, #5
 800d94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d94e:	4854      	ldr	r0, [pc, #336]	; (800daa0 <_vfiprintf_r+0x220>)
 800d950:	f7f2 fc3e 	bl	80001d0 <memchr>
 800d954:	9a04      	ldr	r2, [sp, #16]
 800d956:	b9d8      	cbnz	r0, 800d990 <_vfiprintf_r+0x110>
 800d958:	06d1      	lsls	r1, r2, #27
 800d95a:	bf44      	itt	mi
 800d95c:	2320      	movmi	r3, #32
 800d95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d962:	0713      	lsls	r3, r2, #28
 800d964:	bf44      	itt	mi
 800d966:	232b      	movmi	r3, #43	; 0x2b
 800d968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d96c:	f89a 3000 	ldrb.w	r3, [sl]
 800d970:	2b2a      	cmp	r3, #42	; 0x2a
 800d972:	d015      	beq.n	800d9a0 <_vfiprintf_r+0x120>
 800d974:	9a07      	ldr	r2, [sp, #28]
 800d976:	4654      	mov	r4, sl
 800d978:	2000      	movs	r0, #0
 800d97a:	f04f 0c0a 	mov.w	ip, #10
 800d97e:	4621      	mov	r1, r4
 800d980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d984:	3b30      	subs	r3, #48	; 0x30
 800d986:	2b09      	cmp	r3, #9
 800d988:	d94d      	bls.n	800da26 <_vfiprintf_r+0x1a6>
 800d98a:	b1b0      	cbz	r0, 800d9ba <_vfiprintf_r+0x13a>
 800d98c:	9207      	str	r2, [sp, #28]
 800d98e:	e014      	b.n	800d9ba <_vfiprintf_r+0x13a>
 800d990:	eba0 0308 	sub.w	r3, r0, r8
 800d994:	fa09 f303 	lsl.w	r3, r9, r3
 800d998:	4313      	orrs	r3, r2
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	46a2      	mov	sl, r4
 800d99e:	e7d2      	b.n	800d946 <_vfiprintf_r+0xc6>
 800d9a0:	9b03      	ldr	r3, [sp, #12]
 800d9a2:	1d19      	adds	r1, r3, #4
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	9103      	str	r1, [sp, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	bfbb      	ittet	lt
 800d9ac:	425b      	neglt	r3, r3
 800d9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d9b2:	9307      	strge	r3, [sp, #28]
 800d9b4:	9307      	strlt	r3, [sp, #28]
 800d9b6:	bfb8      	it	lt
 800d9b8:	9204      	strlt	r2, [sp, #16]
 800d9ba:	7823      	ldrb	r3, [r4, #0]
 800d9bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d9be:	d10c      	bne.n	800d9da <_vfiprintf_r+0x15a>
 800d9c0:	7863      	ldrb	r3, [r4, #1]
 800d9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d9c4:	d134      	bne.n	800da30 <_vfiprintf_r+0x1b0>
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	1d1a      	adds	r2, r3, #4
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	9203      	str	r2, [sp, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	bfb8      	it	lt
 800d9d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d9d6:	3402      	adds	r4, #2
 800d9d8:	9305      	str	r3, [sp, #20]
 800d9da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dab0 <_vfiprintf_r+0x230>
 800d9de:	7821      	ldrb	r1, [r4, #0]
 800d9e0:	2203      	movs	r2, #3
 800d9e2:	4650      	mov	r0, sl
 800d9e4:	f7f2 fbf4 	bl	80001d0 <memchr>
 800d9e8:	b138      	cbz	r0, 800d9fa <_vfiprintf_r+0x17a>
 800d9ea:	9b04      	ldr	r3, [sp, #16]
 800d9ec:	eba0 000a 	sub.w	r0, r0, sl
 800d9f0:	2240      	movs	r2, #64	; 0x40
 800d9f2:	4082      	lsls	r2, r0
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	3401      	adds	r4, #1
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fe:	4829      	ldr	r0, [pc, #164]	; (800daa4 <_vfiprintf_r+0x224>)
 800da00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da04:	2206      	movs	r2, #6
 800da06:	f7f2 fbe3 	bl	80001d0 <memchr>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d03f      	beq.n	800da8e <_vfiprintf_r+0x20e>
 800da0e:	4b26      	ldr	r3, [pc, #152]	; (800daa8 <_vfiprintf_r+0x228>)
 800da10:	bb1b      	cbnz	r3, 800da5a <_vfiprintf_r+0x1da>
 800da12:	9b03      	ldr	r3, [sp, #12]
 800da14:	3307      	adds	r3, #7
 800da16:	f023 0307 	bic.w	r3, r3, #7
 800da1a:	3308      	adds	r3, #8
 800da1c:	9303      	str	r3, [sp, #12]
 800da1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da20:	443b      	add	r3, r7
 800da22:	9309      	str	r3, [sp, #36]	; 0x24
 800da24:	e768      	b.n	800d8f8 <_vfiprintf_r+0x78>
 800da26:	fb0c 3202 	mla	r2, ip, r2, r3
 800da2a:	460c      	mov	r4, r1
 800da2c:	2001      	movs	r0, #1
 800da2e:	e7a6      	b.n	800d97e <_vfiprintf_r+0xfe>
 800da30:	2300      	movs	r3, #0
 800da32:	3401      	adds	r4, #1
 800da34:	9305      	str	r3, [sp, #20]
 800da36:	4619      	mov	r1, r3
 800da38:	f04f 0c0a 	mov.w	ip, #10
 800da3c:	4620      	mov	r0, r4
 800da3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da42:	3a30      	subs	r2, #48	; 0x30
 800da44:	2a09      	cmp	r2, #9
 800da46:	d903      	bls.n	800da50 <_vfiprintf_r+0x1d0>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d0c6      	beq.n	800d9da <_vfiprintf_r+0x15a>
 800da4c:	9105      	str	r1, [sp, #20]
 800da4e:	e7c4      	b.n	800d9da <_vfiprintf_r+0x15a>
 800da50:	fb0c 2101 	mla	r1, ip, r1, r2
 800da54:	4604      	mov	r4, r0
 800da56:	2301      	movs	r3, #1
 800da58:	e7f0      	b.n	800da3c <_vfiprintf_r+0x1bc>
 800da5a:	ab03      	add	r3, sp, #12
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	462a      	mov	r2, r5
 800da60:	4b12      	ldr	r3, [pc, #72]	; (800daac <_vfiprintf_r+0x22c>)
 800da62:	a904      	add	r1, sp, #16
 800da64:	4630      	mov	r0, r6
 800da66:	f7fd fb9d 	bl	800b1a4 <_printf_float>
 800da6a:	4607      	mov	r7, r0
 800da6c:	1c78      	adds	r0, r7, #1
 800da6e:	d1d6      	bne.n	800da1e <_vfiprintf_r+0x19e>
 800da70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da72:	07d9      	lsls	r1, r3, #31
 800da74:	d405      	bmi.n	800da82 <_vfiprintf_r+0x202>
 800da76:	89ab      	ldrh	r3, [r5, #12]
 800da78:	059a      	lsls	r2, r3, #22
 800da7a:	d402      	bmi.n	800da82 <_vfiprintf_r+0x202>
 800da7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da7e:	f7fe f871 	bl	800bb64 <__retarget_lock_release_recursive>
 800da82:	89ab      	ldrh	r3, [r5, #12]
 800da84:	065b      	lsls	r3, r3, #25
 800da86:	f53f af1d 	bmi.w	800d8c4 <_vfiprintf_r+0x44>
 800da8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da8c:	e71c      	b.n	800d8c8 <_vfiprintf_r+0x48>
 800da8e:	ab03      	add	r3, sp, #12
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	462a      	mov	r2, r5
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <_vfiprintf_r+0x22c>)
 800da96:	a904      	add	r1, sp, #16
 800da98:	4630      	mov	r0, r6
 800da9a:	f7fd fe27 	bl	800b6ec <_printf_i>
 800da9e:	e7e4      	b.n	800da6a <_vfiprintf_r+0x1ea>
 800daa0:	0800e2b5 	.word	0x0800e2b5
 800daa4:	0800e2bf 	.word	0x0800e2bf
 800daa8:	0800b1a5 	.word	0x0800b1a5
 800daac:	0800d85b 	.word	0x0800d85b
 800dab0:	0800e2bb 	.word	0x0800e2bb

0800dab4 <__swbuf_r>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	460e      	mov	r6, r1
 800dab8:	4614      	mov	r4, r2
 800daba:	4605      	mov	r5, r0
 800dabc:	b118      	cbz	r0, 800dac6 <__swbuf_r+0x12>
 800dabe:	6a03      	ldr	r3, [r0, #32]
 800dac0:	b90b      	cbnz	r3, 800dac6 <__swbuf_r+0x12>
 800dac2:	f7fd ffe1 	bl	800ba88 <__sinit>
 800dac6:	69a3      	ldr	r3, [r4, #24]
 800dac8:	60a3      	str	r3, [r4, #8]
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	071a      	lsls	r2, r3, #28
 800dace:	d525      	bpl.n	800db1c <__swbuf_r+0x68>
 800dad0:	6923      	ldr	r3, [r4, #16]
 800dad2:	b31b      	cbz	r3, 800db1c <__swbuf_r+0x68>
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	6922      	ldr	r2, [r4, #16]
 800dad8:	1a98      	subs	r0, r3, r2
 800dada:	6963      	ldr	r3, [r4, #20]
 800dadc:	b2f6      	uxtb	r6, r6
 800dade:	4283      	cmp	r3, r0
 800dae0:	4637      	mov	r7, r6
 800dae2:	dc04      	bgt.n	800daee <__swbuf_r+0x3a>
 800dae4:	4621      	mov	r1, r4
 800dae6:	4628      	mov	r0, r5
 800dae8:	f7ff f94e 	bl	800cd88 <_fflush_r>
 800daec:	b9e0      	cbnz	r0, 800db28 <__swbuf_r+0x74>
 800daee:	68a3      	ldr	r3, [r4, #8]
 800daf0:	3b01      	subs	r3, #1
 800daf2:	60a3      	str	r3, [r4, #8]
 800daf4:	6823      	ldr	r3, [r4, #0]
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	6022      	str	r2, [r4, #0]
 800dafa:	701e      	strb	r6, [r3, #0]
 800dafc:	6962      	ldr	r2, [r4, #20]
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	429a      	cmp	r2, r3
 800db02:	d004      	beq.n	800db0e <__swbuf_r+0x5a>
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	07db      	lsls	r3, r3, #31
 800db08:	d506      	bpl.n	800db18 <__swbuf_r+0x64>
 800db0a:	2e0a      	cmp	r6, #10
 800db0c:	d104      	bne.n	800db18 <__swbuf_r+0x64>
 800db0e:	4621      	mov	r1, r4
 800db10:	4628      	mov	r0, r5
 800db12:	f7ff f939 	bl	800cd88 <_fflush_r>
 800db16:	b938      	cbnz	r0, 800db28 <__swbuf_r+0x74>
 800db18:	4638      	mov	r0, r7
 800db1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db1c:	4621      	mov	r1, r4
 800db1e:	4628      	mov	r0, r5
 800db20:	f000 f806 	bl	800db30 <__swsetup_r>
 800db24:	2800      	cmp	r0, #0
 800db26:	d0d5      	beq.n	800dad4 <__swbuf_r+0x20>
 800db28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800db2c:	e7f4      	b.n	800db18 <__swbuf_r+0x64>
	...

0800db30 <__swsetup_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4b2a      	ldr	r3, [pc, #168]	; (800dbdc <__swsetup_r+0xac>)
 800db34:	4605      	mov	r5, r0
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	460c      	mov	r4, r1
 800db3a:	b118      	cbz	r0, 800db44 <__swsetup_r+0x14>
 800db3c:	6a03      	ldr	r3, [r0, #32]
 800db3e:	b90b      	cbnz	r3, 800db44 <__swsetup_r+0x14>
 800db40:	f7fd ffa2 	bl	800ba88 <__sinit>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db4a:	0718      	lsls	r0, r3, #28
 800db4c:	d422      	bmi.n	800db94 <__swsetup_r+0x64>
 800db4e:	06d9      	lsls	r1, r3, #27
 800db50:	d407      	bmi.n	800db62 <__swsetup_r+0x32>
 800db52:	2309      	movs	r3, #9
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db60:	e034      	b.n	800dbcc <__swsetup_r+0x9c>
 800db62:	0758      	lsls	r0, r3, #29
 800db64:	d512      	bpl.n	800db8c <__swsetup_r+0x5c>
 800db66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db68:	b141      	cbz	r1, 800db7c <__swsetup_r+0x4c>
 800db6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db6e:	4299      	cmp	r1, r3
 800db70:	d002      	beq.n	800db78 <__swsetup_r+0x48>
 800db72:	4628      	mov	r0, r5
 800db74:	f7ff fdce 	bl	800d714 <_free_r>
 800db78:	2300      	movs	r3, #0
 800db7a:	6363      	str	r3, [r4, #52]	; 0x34
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db82:	81a3      	strh	r3, [r4, #12]
 800db84:	2300      	movs	r3, #0
 800db86:	6063      	str	r3, [r4, #4]
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	6023      	str	r3, [r4, #0]
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	f043 0308 	orr.w	r3, r3, #8
 800db92:	81a3      	strh	r3, [r4, #12]
 800db94:	6923      	ldr	r3, [r4, #16]
 800db96:	b94b      	cbnz	r3, 800dbac <__swsetup_r+0x7c>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba2:	d003      	beq.n	800dbac <__swsetup_r+0x7c>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	f000 f840 	bl	800dc2c <__smakebuf_r>
 800dbac:	89a0      	ldrh	r0, [r4, #12]
 800dbae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbb2:	f010 0301 	ands.w	r3, r0, #1
 800dbb6:	d00a      	beq.n	800dbce <__swsetup_r+0x9e>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	60a3      	str	r3, [r4, #8]
 800dbbc:	6963      	ldr	r3, [r4, #20]
 800dbbe:	425b      	negs	r3, r3
 800dbc0:	61a3      	str	r3, [r4, #24]
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	b943      	cbnz	r3, 800dbd8 <__swsetup_r+0xa8>
 800dbc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbca:	d1c4      	bne.n	800db56 <__swsetup_r+0x26>
 800dbcc:	bd38      	pop	{r3, r4, r5, pc}
 800dbce:	0781      	lsls	r1, r0, #30
 800dbd0:	bf58      	it	pl
 800dbd2:	6963      	ldrpl	r3, [r4, #20]
 800dbd4:	60a3      	str	r3, [r4, #8]
 800dbd6:	e7f4      	b.n	800dbc2 <__swsetup_r+0x92>
 800dbd8:	2000      	movs	r0, #0
 800dbda:	e7f7      	b.n	800dbcc <__swsetup_r+0x9c>
 800dbdc:	20000164 	.word	0x20000164

0800dbe0 <__swhatbuf_r>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe8:	2900      	cmp	r1, #0
 800dbea:	b096      	sub	sp, #88	; 0x58
 800dbec:	4615      	mov	r5, r2
 800dbee:	461e      	mov	r6, r3
 800dbf0:	da0d      	bge.n	800dc0e <__swhatbuf_r+0x2e>
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dbf8:	f04f 0100 	mov.w	r1, #0
 800dbfc:	bf0c      	ite	eq
 800dbfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc02:	2340      	movne	r3, #64	; 0x40
 800dc04:	2000      	movs	r0, #0
 800dc06:	6031      	str	r1, [r6, #0]
 800dc08:	602b      	str	r3, [r5, #0]
 800dc0a:	b016      	add	sp, #88	; 0x58
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
 800dc0e:	466a      	mov	r2, sp
 800dc10:	f000 f848 	bl	800dca4 <_fstat_r>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	dbec      	blt.n	800dbf2 <__swhatbuf_r+0x12>
 800dc18:	9901      	ldr	r1, [sp, #4]
 800dc1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc22:	4259      	negs	r1, r3
 800dc24:	4159      	adcs	r1, r3
 800dc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc2a:	e7eb      	b.n	800dc04 <__swhatbuf_r+0x24>

0800dc2c <__smakebuf_r>:
 800dc2c:	898b      	ldrh	r3, [r1, #12]
 800dc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc30:	079d      	lsls	r5, r3, #30
 800dc32:	4606      	mov	r6, r0
 800dc34:	460c      	mov	r4, r1
 800dc36:	d507      	bpl.n	800dc48 <__smakebuf_r+0x1c>
 800dc38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	6123      	str	r3, [r4, #16]
 800dc40:	2301      	movs	r3, #1
 800dc42:	6163      	str	r3, [r4, #20]
 800dc44:	b002      	add	sp, #8
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	ab01      	add	r3, sp, #4
 800dc4a:	466a      	mov	r2, sp
 800dc4c:	f7ff ffc8 	bl	800dbe0 <__swhatbuf_r>
 800dc50:	9900      	ldr	r1, [sp, #0]
 800dc52:	4605      	mov	r5, r0
 800dc54:	4630      	mov	r0, r6
 800dc56:	f7fe ff91 	bl	800cb7c <_malloc_r>
 800dc5a:	b948      	cbnz	r0, 800dc70 <__smakebuf_r+0x44>
 800dc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc60:	059a      	lsls	r2, r3, #22
 800dc62:	d4ef      	bmi.n	800dc44 <__smakebuf_r+0x18>
 800dc64:	f023 0303 	bic.w	r3, r3, #3
 800dc68:	f043 0302 	orr.w	r3, r3, #2
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	e7e3      	b.n	800dc38 <__smakebuf_r+0xc>
 800dc70:	89a3      	ldrh	r3, [r4, #12]
 800dc72:	6020      	str	r0, [r4, #0]
 800dc74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	9b00      	ldr	r3, [sp, #0]
 800dc7c:	6163      	str	r3, [r4, #20]
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	6120      	str	r0, [r4, #16]
 800dc82:	b15b      	cbz	r3, 800dc9c <__smakebuf_r+0x70>
 800dc84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f000 f81d 	bl	800dcc8 <_isatty_r>
 800dc8e:	b128      	cbz	r0, 800dc9c <__smakebuf_r+0x70>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f023 0303 	bic.w	r3, r3, #3
 800dc96:	f043 0301 	orr.w	r3, r3, #1
 800dc9a:	81a3      	strh	r3, [r4, #12]
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	431d      	orrs	r5, r3
 800dca0:	81a5      	strh	r5, [r4, #12]
 800dca2:	e7cf      	b.n	800dc44 <__smakebuf_r+0x18>

0800dca4 <_fstat_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d07      	ldr	r5, [pc, #28]	; (800dcc4 <_fstat_r+0x20>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	4611      	mov	r1, r2
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	f7f4 fc7c 	bl	80025ae <_fstat>
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	d102      	bne.n	800dcc0 <_fstat_r+0x1c>
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	b103      	cbz	r3, 800dcc0 <_fstat_r+0x1c>
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	bd38      	pop	{r3, r4, r5, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200022d4 	.word	0x200022d4

0800dcc8 <_isatty_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d06      	ldr	r5, [pc, #24]	; (800dce4 <_isatty_r+0x1c>)
 800dccc:	2300      	movs	r3, #0
 800dcce:	4604      	mov	r4, r0
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	f7f4 fc7b 	bl	80025ce <_isatty>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_isatty_r+0x1a>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_isatty_r+0x1a>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	200022d4 	.word	0x200022d4

0800dce8 <_raise_r>:
 800dce8:	291f      	cmp	r1, #31
 800dcea:	b538      	push	{r3, r4, r5, lr}
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	d904      	bls.n	800dcfc <_raise_r+0x14>
 800dcf2:	2316      	movs	r3, #22
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dcfe:	b112      	cbz	r2, 800dd06 <_raise_r+0x1e>
 800dd00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd04:	b94b      	cbnz	r3, 800dd1a <_raise_r+0x32>
 800dd06:	4620      	mov	r0, r4
 800dd08:	f000 f830 	bl	800dd6c <_getpid_r>
 800dd0c:	462a      	mov	r2, r5
 800dd0e:	4601      	mov	r1, r0
 800dd10:	4620      	mov	r0, r4
 800dd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd16:	f000 b817 	b.w	800dd48 <_kill_r>
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d00a      	beq.n	800dd34 <_raise_r+0x4c>
 800dd1e:	1c59      	adds	r1, r3, #1
 800dd20:	d103      	bne.n	800dd2a <_raise_r+0x42>
 800dd22:	2316      	movs	r3, #22
 800dd24:	6003      	str	r3, [r0, #0]
 800dd26:	2001      	movs	r0, #1
 800dd28:	e7e7      	b.n	800dcfa <_raise_r+0x12>
 800dd2a:	2400      	movs	r4, #0
 800dd2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd30:	4628      	mov	r0, r5
 800dd32:	4798      	blx	r3
 800dd34:	2000      	movs	r0, #0
 800dd36:	e7e0      	b.n	800dcfa <_raise_r+0x12>

0800dd38 <raise>:
 800dd38:	4b02      	ldr	r3, [pc, #8]	; (800dd44 <raise+0xc>)
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	f7ff bfd3 	b.w	800dce8 <_raise_r>
 800dd42:	bf00      	nop
 800dd44:	20000164 	.word	0x20000164

0800dd48 <_kill_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d07      	ldr	r5, [pc, #28]	; (800dd68 <_kill_r+0x20>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	4611      	mov	r1, r2
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	f7f4 fbcb 	bl	80024f0 <_kill>
 800dd5a:	1c43      	adds	r3, r0, #1
 800dd5c:	d102      	bne.n	800dd64 <_kill_r+0x1c>
 800dd5e:	682b      	ldr	r3, [r5, #0]
 800dd60:	b103      	cbz	r3, 800dd64 <_kill_r+0x1c>
 800dd62:	6023      	str	r3, [r4, #0]
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	bf00      	nop
 800dd68:	200022d4 	.word	0x200022d4

0800dd6c <_getpid_r>:
 800dd6c:	f7f4 bbb8 	b.w	80024e0 <_getpid>

0800dd70 <_init>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	bf00      	nop
 800dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd76:	bc08      	pop	{r3}
 800dd78:	469e      	mov	lr, r3
 800dd7a:	4770      	bx	lr

0800dd7c <_fini>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	bf00      	nop
 800dd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd82:	bc08      	pop	{r3}
 800dd84:	469e      	mov	lr, r3
 800dd86:	4770      	bx	lr
